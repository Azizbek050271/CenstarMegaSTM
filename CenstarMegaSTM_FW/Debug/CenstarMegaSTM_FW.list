
CenstarMegaSTM_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005934  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08005ac4  08005ac4  00006ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed0  08005ed0  00007080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ed0  08005ed0  00006ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ed8  08005ed8  00007080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ed8  08005ed8  00006ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005edc  08005edc  00006edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08005ee0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007080  2**0
                  CONTENTS
 10 .bss          00000654  20000080  20000080  00007080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006d4  200006d4  00007080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d878  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002279  00000000  00000000  00014928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  00016ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000908  00000000  00000000  00017748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021984  00000000  00000000  00018050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000108ed  00000000  00000000  000399d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7683  00000000  00000000  0004a2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00111944  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000347c  00000000  00000000  00111988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00114e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005aac 	.word	0x08005aac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08005aac 	.word	0x08005aac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <EEPROM_WaitReady>:
extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart2;

/* Wait for internal write cycle completion */
static HAL_StatusTypeDef EEPROM_WaitReady(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    uint32_t tick = HAL_GetTick();
 80005b2:	f001 f873 	bl	800169c <HAL_GetTick>
 80005b6:	6078      	str	r0, [r7, #4]
    while (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_I2C_ADDR, 1, 10) != HAL_OK)
 80005b8:	e00f      	b.n	80005da <EEPROM_WaitReady+0x2e>
    {
        if (HAL_GetTick() - tick > 25)
 80005ba:	f001 f86f 	bl	800169c <HAL_GetTick>
 80005be:	4602      	mov	r2, r0
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	2b19      	cmp	r3, #25
 80005c6:	d908      	bls.n	80005da <EEPROM_WaitReady+0x2e>
        {
            HAL_UART_Transmit(&huart2, (uint8_t*)"EEPROM Timeout\r\n", 16, HAL_MAX_DELAY);
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295
 80005cc:	2210      	movs	r2, #16
 80005ce:	490d      	ldr	r1, [pc, #52]	@ (8000604 <EEPROM_WaitReady+0x58>)
 80005d0:	480d      	ldr	r0, [pc, #52]	@ (8000608 <EEPROM_WaitReady+0x5c>)
 80005d2:	f004 fa0f 	bl	80049f4 <HAL_UART_Transmit>
            return HAL_TIMEOUT;
 80005d6:	2303      	movs	r3, #3
 80005d8:	e010      	b.n	80005fc <EEPROM_WaitReady+0x50>
    while (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_I2C_ADDR, 1, 10) != HAL_OK)
 80005da:	230a      	movs	r3, #10
 80005dc:	2201      	movs	r2, #1
 80005de:	21a0      	movs	r1, #160	@ 0xa0
 80005e0:	480a      	ldr	r0, [pc, #40]	@ (800060c <EEPROM_WaitReady+0x60>)
 80005e2:	f002 f9d9 	bl	8002998 <HAL_I2C_IsDeviceReady>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1e6      	bne.n	80005ba <EEPROM_WaitReady+0xe>
        }
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)"EEPROM Ready\r\n", 14, HAL_MAX_DELAY);
 80005ec:	f04f 33ff 	mov.w	r3, #4294967295
 80005f0:	220e      	movs	r2, #14
 80005f2:	4907      	ldr	r1, [pc, #28]	@ (8000610 <EEPROM_WaitReady+0x64>)
 80005f4:	4804      	ldr	r0, [pc, #16]	@ (8000608 <EEPROM_WaitReady+0x5c>)
 80005f6:	f004 f9fd 	bl	80049f4 <HAL_UART_Transmit>
    return HAL_OK;
 80005fa:	2300      	movs	r3, #0
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	08005ac4 	.word	0x08005ac4
 8000608:	20000138 	.word	0x20000138
 800060c:	2000009c 	.word	0x2000009c
 8000610:	08005ad8 	.word	0x08005ad8

08000614 <EEPROM_Write>:

/* Write arbitrary number of bytes with automatic page splitting */
HAL_StatusTypeDef EEPROM_Write(uint16_t memAddr, const uint8_t *data, uint16_t len)
{
 8000614:	b5b0      	push	{r4, r5, r7, lr}
 8000616:	b090      	sub	sp, #64	@ 0x40
 8000618:	af04      	add	r7, sp, #16
 800061a:	4603      	mov	r3, r0
 800061c:	6039      	str	r1, [r7, #0]
 800061e:	80fb      	strh	r3, [r7, #6]
 8000620:	4613      	mov	r3, r2
 8000622:	80bb      	strh	r3, [r7, #4]
    /* Check if EEPROM is ready */
    if (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_I2C_ADDR, 2, 10) != HAL_OK)
 8000624:	230a      	movs	r3, #10
 8000626:	2202      	movs	r2, #2
 8000628:	21a0      	movs	r1, #160	@ 0xa0
 800062a:	4857      	ldr	r0, [pc, #348]	@ (8000788 <EEPROM_Write+0x174>)
 800062c:	f002 f9b4 	bl	8002998 <HAL_I2C_IsDeviceReady>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d008      	beq.n	8000648 <EEPROM_Write+0x34>
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)"EEPROM Not Found\r\n", 18, HAL_MAX_DELAY);
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	2212      	movs	r2, #18
 800063c:	4953      	ldr	r1, [pc, #332]	@ (800078c <EEPROM_Write+0x178>)
 800063e:	4854      	ldr	r0, [pc, #336]	@ (8000790 <EEPROM_Write+0x17c>)
 8000640:	f004 f9d8 	bl	80049f4 <HAL_UART_Transmit>
        return HAL_ERROR;
 8000644:	2301      	movs	r3, #1
 8000646:	e09a      	b.n	800077e <EEPROM_Write+0x16a>
    }

    /* Store I2C configuration for reset */
    I2C_InitTypeDef i2c_config = {
 8000648:	4b52      	ldr	r3, [pc, #328]	@ (8000794 <EEPROM_Write+0x180>)
 800064a:	f107 040c 	add.w	r4, r7, #12
 800064e:	461d      	mov	r5, r3
 8000650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000654:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000658:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .OwnAddress2 = 0,
        .GeneralCallMode = I2C_GENERALCALL_DISABLE,
        .NoStretchMode = I2C_NOSTRETCH_DISABLE
    };

    while (len)
 800065c:	e083      	b.n	8000766 <EEPROM_Write+0x152>
    {
        uint16_t pageRemain = EEPROM_PAGE_SIZE - (memAddr % EEPROM_PAGE_SIZE);
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000664:	b29b      	uxth	r3, r3
 8000666:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800066a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        uint16_t chunk = (len < pageRemain) ? len : pageRemain;
 800066c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800066e:	88bb      	ldrh	r3, [r7, #4]
 8000670:	4293      	cmp	r3, r2
 8000672:	bf28      	it	cs
 8000674:	4613      	movcs	r3, r2
 8000676:	85bb      	strh	r3, [r7, #44]	@ 0x2c

        HAL_UART_Transmit(&huart2, (uint8_t*)"Writing chunk...\r\n", 18, HAL_MAX_DELAY);
 8000678:	f04f 33ff 	mov.w	r3, #4294967295
 800067c:	2212      	movs	r2, #18
 800067e:	4946      	ldr	r1, [pc, #280]	@ (8000798 <EEPROM_Write+0x184>)
 8000680:	4843      	ldr	r0, [pc, #268]	@ (8000790 <EEPROM_Write+0x17c>)
 8000682:	f004 f9b7 	bl	80049f4 <HAL_UART_Transmit>
        if (HAL_I2C_Mem_Write(&hi2c1, EEPROM_I2C_ADDR, memAddr, I2C_MEMADD_SIZE_16BIT,
 8000686:	88fa      	ldrh	r2, [r7, #6]
 8000688:	2364      	movs	r3, #100	@ 0x64
 800068a:	9302      	str	r3, [sp, #8]
 800068c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2310      	movs	r3, #16
 8000696:	21a0      	movs	r1, #160	@ 0xa0
 8000698:	483b      	ldr	r0, [pc, #236]	@ (8000788 <EEPROM_Write+0x174>)
 800069a:	f001 fe51 	bl	8002340 <HAL_I2C_Mem_Write>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d027      	beq.n	80006f4 <EEPROM_Write+0xe0>
                              (uint8_t*)data, chunk, 100) != HAL_OK)
        {
            HAL_UART_Transmit(&huart2, (uint8_t*)"EEPROM Write Error\r\n", 20, HAL_MAX_DELAY);
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	2214      	movs	r2, #20
 80006aa:	493c      	ldr	r1, [pc, #240]	@ (800079c <EEPROM_Write+0x188>)
 80006ac:	4838      	ldr	r0, [pc, #224]	@ (8000790 <EEPROM_Write+0x17c>)
 80006ae:	f004 f9a1 	bl	80049f4 <HAL_UART_Transmit>
            /* Reset I2C */
            HAL_I2C_DeInit(&hi2c1);
 80006b2:	4835      	ldr	r0, [pc, #212]	@ (8000788 <EEPROM_Write+0x174>)
 80006b4:	f001 fd16 	bl	80020e4 <HAL_I2C_DeInit>
            hi2c1.Instance = I2C1;
 80006b8:	4b33      	ldr	r3, [pc, #204]	@ (8000788 <EEPROM_Write+0x174>)
 80006ba:	4a39      	ldr	r2, [pc, #228]	@ (80007a0 <EEPROM_Write+0x18c>)
 80006bc:	601a      	str	r2, [r3, #0]
            hi2c1.Init = i2c_config;
 80006be:	4b32      	ldr	r3, [pc, #200]	@ (8000788 <EEPROM_Write+0x174>)
 80006c0:	1d1c      	adds	r4, r3, #4
 80006c2:	f107 050c 	add.w	r5, r7, #12
 80006c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d2:	482d      	ldr	r0, [pc, #180]	@ (8000788 <EEPROM_Write+0x174>)
 80006d4:	f001 fbc2 	bl	8001e5c <HAL_I2C_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d008      	beq.n	80006f0 <EEPROM_Write+0xdc>
            {
                HAL_UART_Transmit(&huart2, (uint8_t*)"I2C Reinit Error\r\n", 19, HAL_MAX_DELAY);
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	2213      	movs	r2, #19
 80006e4:	492f      	ldr	r1, [pc, #188]	@ (80007a4 <EEPROM_Write+0x190>)
 80006e6:	482a      	ldr	r0, [pc, #168]	@ (8000790 <EEPROM_Write+0x17c>)
 80006e8:	f004 f984 	bl	80049f4 <HAL_UART_Transmit>
                return HAL_ERROR;
 80006ec:	2301      	movs	r3, #1
 80006ee:	e046      	b.n	800077e <EEPROM_Write+0x16a>
            }
            return HAL_ERROR;
 80006f0:	2301      	movs	r3, #1
 80006f2:	e044      	b.n	800077e <EEPROM_Write+0x16a>
        }

        if (EEPROM_WaitReady() != HAL_OK)
 80006f4:	f7ff ff5a 	bl	80005ac <EEPROM_WaitReady>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d027      	beq.n	800074e <EEPROM_Write+0x13a>
        {
            HAL_UART_Transmit(&huart2, (uint8_t*)"EEPROM Wait Error\r\n", 19, HAL_MAX_DELAY);
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000702:	2213      	movs	r2, #19
 8000704:	4928      	ldr	r1, [pc, #160]	@ (80007a8 <EEPROM_Write+0x194>)
 8000706:	4822      	ldr	r0, [pc, #136]	@ (8000790 <EEPROM_Write+0x17c>)
 8000708:	f004 f974 	bl	80049f4 <HAL_UART_Transmit>
            /* Reset I2C */
            HAL_I2C_DeInit(&hi2c1);
 800070c:	481e      	ldr	r0, [pc, #120]	@ (8000788 <EEPROM_Write+0x174>)
 800070e:	f001 fce9 	bl	80020e4 <HAL_I2C_DeInit>
            hi2c1.Instance = I2C1;
 8000712:	4b1d      	ldr	r3, [pc, #116]	@ (8000788 <EEPROM_Write+0x174>)
 8000714:	4a22      	ldr	r2, [pc, #136]	@ (80007a0 <EEPROM_Write+0x18c>)
 8000716:	601a      	str	r2, [r3, #0]
            hi2c1.Init = i2c_config;
 8000718:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <EEPROM_Write+0x174>)
 800071a:	1d1c      	adds	r4, r3, #4
 800071c:	f107 050c 	add.w	r5, r7, #12
 8000720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000724:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000728:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800072c:	4816      	ldr	r0, [pc, #88]	@ (8000788 <EEPROM_Write+0x174>)
 800072e:	f001 fb95 	bl	8001e5c <HAL_I2C_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d008      	beq.n	800074a <EEPROM_Write+0x136>
            {
                HAL_UART_Transmit(&huart2, (uint8_t*)"I2C Reinit Error\r\n", 19, HAL_MAX_DELAY);
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
 800073c:	2213      	movs	r2, #19
 800073e:	4919      	ldr	r1, [pc, #100]	@ (80007a4 <EEPROM_Write+0x190>)
 8000740:	4813      	ldr	r0, [pc, #76]	@ (8000790 <EEPROM_Write+0x17c>)
 8000742:	f004 f957 	bl	80049f4 <HAL_UART_Transmit>
                return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e019      	b.n	800077e <EEPROM_Write+0x16a>
            }
            return HAL_ERROR;
 800074a:	2301      	movs	r3, #1
 800074c:	e017      	b.n	800077e <EEPROM_Write+0x16a>
        }

        memAddr += chunk;
 800074e:	88fa      	ldrh	r2, [r7, #6]
 8000750:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000752:	4413      	add	r3, r2
 8000754:	80fb      	strh	r3, [r7, #6]
        data += chunk;
 8000756:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000758:	683a      	ldr	r2, [r7, #0]
 800075a:	4413      	add	r3, r2
 800075c:	603b      	str	r3, [r7, #0]
        len -= chunk;
 800075e:	88ba      	ldrh	r2, [r7, #4]
 8000760:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	80bb      	strh	r3, [r7, #4]
    while (len)
 8000766:	88bb      	ldrh	r3, [r7, #4]
 8000768:	2b00      	cmp	r3, #0
 800076a:	f47f af78 	bne.w	800065e <EEPROM_Write+0x4a>
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)"EEPROM Write OK\r\n", 17, HAL_MAX_DELAY);
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	2211      	movs	r2, #17
 8000774:	490d      	ldr	r1, [pc, #52]	@ (80007ac <EEPROM_Write+0x198>)
 8000776:	4806      	ldr	r0, [pc, #24]	@ (8000790 <EEPROM_Write+0x17c>)
 8000778:	f004 f93c 	bl	80049f4 <HAL_UART_Transmit>
    return HAL_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3730      	adds	r7, #48	@ 0x30
 8000782:	46bd      	mov	sp, r7
 8000784:	bdb0      	pop	{r4, r5, r7, pc}
 8000786:	bf00      	nop
 8000788:	2000009c 	.word	0x2000009c
 800078c:	08005ae8 	.word	0x08005ae8
 8000790:	20000138 	.word	0x20000138
 8000794:	08005b64 	.word	0x08005b64
 8000798:	08005afc 	.word	0x08005afc
 800079c:	08005b10 	.word	0x08005b10
 80007a0:	40005400 	.word	0x40005400
 80007a4:	08005b28 	.word	0x08005b28
 80007a8:	08005b3c 	.word	0x08005b3c
 80007ac:	08005b50 	.word	0x08005b50

080007b0 <EEPROM_Read>:

/* Read len bytes, 16-bit address */
HAL_StatusTypeDef EEPROM_Read(uint16_t memAddr, uint8_t *data, uint16_t len)
{
 80007b0:	b5b0      	push	{r4, r5, r7, lr}
 80007b2:	b090      	sub	sp, #64	@ 0x40
 80007b4:	af04      	add	r7, sp, #16
 80007b6:	4603      	mov	r3, r0
 80007b8:	6039      	str	r1, [r7, #0]
 80007ba:	80fb      	strh	r3, [r7, #6]
 80007bc:	4613      	mov	r3, r2
 80007be:	80bb      	strh	r3, [r7, #4]
    /* Check if EEPROM is ready */
    if (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_I2C_ADDR, 2, 10) != HAL_OK)
 80007c0:	230a      	movs	r3, #10
 80007c2:	2202      	movs	r2, #2
 80007c4:	21a0      	movs	r1, #160	@ 0xa0
 80007c6:	4830      	ldr	r0, [pc, #192]	@ (8000888 <EEPROM_Read+0xd8>)
 80007c8:	f002 f8e6 	bl	8002998 <HAL_I2C_IsDeviceReady>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d008      	beq.n	80007e4 <EEPROM_Read+0x34>
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)"EEPROM Not Found\r\n", 18, HAL_MAX_DELAY);
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
 80007d6:	2212      	movs	r2, #18
 80007d8:	492c      	ldr	r1, [pc, #176]	@ (800088c <EEPROM_Read+0xdc>)
 80007da:	482d      	ldr	r0, [pc, #180]	@ (8000890 <EEPROM_Read+0xe0>)
 80007dc:	f004 f90a 	bl	80049f4 <HAL_UART_Transmit>
        return HAL_ERROR;
 80007e0:	2301      	movs	r3, #1
 80007e2:	e04c      	b.n	800087e <EEPROM_Read+0xce>
    }

    /* Store I2C configuration for reset */
    I2C_InitTypeDef i2c_config = {
 80007e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000894 <EEPROM_Read+0xe4>)
 80007e6:	f107 040c 	add.w	r4, r7, #12
 80007ea:	461d      	mov	r5, r3
 80007ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .OwnAddress2 = 0,
        .GeneralCallMode = I2C_GENERALCALL_DISABLE,
        .NoStretchMode = I2C_NOSTRETCH_DISABLE
    };

    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_I2C_ADDR, memAddr,
 80007f8:	88fa      	ldrh	r2, [r7, #6]
 80007fa:	2364      	movs	r3, #100	@ 0x64
 80007fc:	9302      	str	r3, [sp, #8]
 80007fe:	88bb      	ldrh	r3, [r7, #4]
 8000800:	9301      	str	r3, [sp, #4]
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	2310      	movs	r3, #16
 8000808:	21a0      	movs	r1, #160	@ 0xa0
 800080a:	481f      	ldr	r0, [pc, #124]	@ (8000888 <EEPROM_Read+0xd8>)
 800080c:	f001 fe92 	bl	8002534 <HAL_I2C_Mem_Read>
 8000810:	4603      	mov	r3, r0
 8000812:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                                I2C_MEMADD_SIZE_16BIT, data, len, 100);
    if (status != HAL_OK)
 8000816:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800081a:	2b00      	cmp	r3, #0
 800081c:	d027      	beq.n	800086e <EEPROM_Read+0xbe>
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)"EEPROM Read Error\r\n", 19, HAL_MAX_DELAY);
 800081e:	f04f 33ff 	mov.w	r3, #4294967295
 8000822:	2213      	movs	r2, #19
 8000824:	491c      	ldr	r1, [pc, #112]	@ (8000898 <EEPROM_Read+0xe8>)
 8000826:	481a      	ldr	r0, [pc, #104]	@ (8000890 <EEPROM_Read+0xe0>)
 8000828:	f004 f8e4 	bl	80049f4 <HAL_UART_Transmit>
        /* Reset I2C */
        HAL_I2C_DeInit(&hi2c1);
 800082c:	4816      	ldr	r0, [pc, #88]	@ (8000888 <EEPROM_Read+0xd8>)
 800082e:	f001 fc59 	bl	80020e4 <HAL_I2C_DeInit>
        hi2c1.Instance = I2C1;
 8000832:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <EEPROM_Read+0xd8>)
 8000834:	4a19      	ldr	r2, [pc, #100]	@ (800089c <EEPROM_Read+0xec>)
 8000836:	601a      	str	r2, [r3, #0]
        hi2c1.Init = i2c_config;
 8000838:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <EEPROM_Read+0xd8>)
 800083a:	1d1c      	adds	r4, r3, #4
 800083c:	f107 050c 	add.w	r5, r7, #12
 8000840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000844:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000848:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084c:	480e      	ldr	r0, [pc, #56]	@ (8000888 <EEPROM_Read+0xd8>)
 800084e:	f001 fb05 	bl	8001e5c <HAL_I2C_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d008      	beq.n	800086a <EEPROM_Read+0xba>
        {
            HAL_UART_Transmit(&huart2, (uint8_t*)"I2C Reinit Error\r\n", 19, HAL_MAX_DELAY);
 8000858:	f04f 33ff 	mov.w	r3, #4294967295
 800085c:	2213      	movs	r2, #19
 800085e:	4910      	ldr	r1, [pc, #64]	@ (80008a0 <EEPROM_Read+0xf0>)
 8000860:	480b      	ldr	r0, [pc, #44]	@ (8000890 <EEPROM_Read+0xe0>)
 8000862:	f004 f8c7 	bl	80049f4 <HAL_UART_Transmit>
            return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
 8000868:	e009      	b.n	800087e <EEPROM_Read+0xce>
        }
        return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e007      	b.n	800087e <EEPROM_Read+0xce>
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)"EEPROM Read OK\r\n", 16, HAL_MAX_DELAY);
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
 8000872:	2210      	movs	r2, #16
 8000874:	490b      	ldr	r1, [pc, #44]	@ (80008a4 <EEPROM_Read+0xf4>)
 8000876:	4806      	ldr	r0, [pc, #24]	@ (8000890 <EEPROM_Read+0xe0>)
 8000878:	f004 f8bc 	bl	80049f4 <HAL_UART_Transmit>
    return HAL_OK;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3730      	adds	r7, #48	@ 0x30
 8000882:	46bd      	mov	sp, r7
 8000884:	bdb0      	pop	{r4, r5, r7, pc}
 8000886:	bf00      	nop
 8000888:	2000009c 	.word	0x2000009c
 800088c:	08005ae8 	.word	0x08005ae8
 8000890:	20000138 	.word	0x20000138
 8000894:	08005b64 	.word	0x08005b64
 8000898:	08005b84 	.word	0x08005b84
 800089c:	40005400 	.word	0x40005400
 80008a0:	08005b28 	.word	0x08005b28
 80008a4:	08005b98 	.word	0x08005b98

080008a8 <KEYPAD_Scan>:
static const uint16_t ColPin[4]={
    GPIO_PIN_0,GPIO_PIN_1,GPIO_PIN_11,GPIO_PIN_12};

/* вернёт символ или 0 */
char KEYPAD_Scan(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
    for (uint8_t r=0;r<5;r++)
 80008ae:	2300      	movs	r3, #0
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	e052      	b.n	800095a <KEYPAD_Scan+0xb2>
    {
        /* активируем одну строку (LOW), остальные HIGH */
        for (uint8_t i=0;i<5;i++)
 80008b4:	2300      	movs	r3, #0
 80008b6:	71bb      	strb	r3, [r7, #6]
 80008b8:	e014      	b.n	80008e4 <KEYPAD_Scan+0x3c>
            HAL_GPIO_WritePin(RowPort[i],RowPin[i],
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	4a2b      	ldr	r2, [pc, #172]	@ (800096c <KEYPAD_Scan+0xc4>)
 80008be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008c2:	79bb      	ldrb	r3, [r7, #6]
 80008c4:	4a2a      	ldr	r2, [pc, #168]	@ (8000970 <KEYPAD_Scan+0xc8>)
 80008c6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80008ca:	79ba      	ldrb	r2, [r7, #6]
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	bf14      	ite	ne
 80008d2:	2301      	movne	r3, #1
 80008d4:	2300      	moveq	r3, #0
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	461a      	mov	r2, r3
 80008da:	f001 faa5 	bl	8001e28 <HAL_GPIO_WritePin>
        for (uint8_t i=0;i<5;i++)
 80008de:	79bb      	ldrb	r3, [r7, #6]
 80008e0:	3301      	adds	r3, #1
 80008e2:	71bb      	strb	r3, [r7, #6]
 80008e4:	79bb      	ldrb	r3, [r7, #6]
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	d9e7      	bls.n	80008ba <KEYPAD_Scan+0x12>
                              (i==r)?GPIO_PIN_RESET:GPIO_PIN_SET);

        HAL_Delay(1); /* стабилизация */
 80008ea:	2001      	movs	r0, #1
 80008ec:	f000 fee2 	bl	80016b4 <HAL_Delay>

        for (uint8_t c=0;c<4;c++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	717b      	strb	r3, [r7, #5]
 80008f4:	e02b      	b.n	800094e <KEYPAD_Scan+0xa6>
        {
            if (HAL_GPIO_ReadPin(ColPort[c],ColPin[c])==GPIO_PIN_RESET)
 80008f6:	797b      	ldrb	r3, [r7, #5]
 80008f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000974 <KEYPAD_Scan+0xcc>)
 80008fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008fe:	797b      	ldrb	r3, [r7, #5]
 8000900:	491d      	ldr	r1, [pc, #116]	@ (8000978 <KEYPAD_Scan+0xd0>)
 8000902:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000906:	4619      	mov	r1, r3
 8000908:	4610      	mov	r0, r2
 800090a:	f001 fa75 	bl	8001df8 <HAL_GPIO_ReadPin>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d119      	bne.n	8000948 <KEYPAD_Scan+0xa0>
            {
                HAL_Delay(15);                      /* антидребезг */
 8000914:	200f      	movs	r0, #15
 8000916:	f000 fecd 	bl	80016b4 <HAL_Delay>
                if (HAL_GPIO_ReadPin(ColPort[c],ColPin[c])==GPIO_PIN_RESET)
 800091a:	797b      	ldrb	r3, [r7, #5]
 800091c:	4a15      	ldr	r2, [pc, #84]	@ (8000974 <KEYPAD_Scan+0xcc>)
 800091e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000922:	797b      	ldrb	r3, [r7, #5]
 8000924:	4914      	ldr	r1, [pc, #80]	@ (8000978 <KEYPAD_Scan+0xd0>)
 8000926:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800092a:	4619      	mov	r1, r3
 800092c:	4610      	mov	r0, r2
 800092e:	f001 fa63 	bl	8001df8 <HAL_GPIO_ReadPin>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d107      	bne.n	8000948 <KEYPAD_Scan+0xa0>
                    return KeyMap[r][c];
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	797b      	ldrb	r3, [r7, #5]
 800093c:	490f      	ldr	r1, [pc, #60]	@ (800097c <KEYPAD_Scan+0xd4>)
 800093e:	0092      	lsls	r2, r2, #2
 8000940:	440a      	add	r2, r1
 8000942:	4413      	add	r3, r2
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	e00c      	b.n	8000962 <KEYPAD_Scan+0xba>
        for (uint8_t c=0;c<4;c++)
 8000948:	797b      	ldrb	r3, [r7, #5]
 800094a:	3301      	adds	r3, #1
 800094c:	717b      	strb	r3, [r7, #5]
 800094e:	797b      	ldrb	r3, [r7, #5]
 8000950:	2b03      	cmp	r3, #3
 8000952:	d9d0      	bls.n	80008f6 <KEYPAD_Scan+0x4e>
    for (uint8_t r=0;r<5;r++)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	3301      	adds	r3, #1
 8000958:	71fb      	strb	r3, [r7, #7]
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b04      	cmp	r3, #4
 800095e:	d9a9      	bls.n	80008b4 <KEYPAD_Scan+0xc>
            }
        }
    }
    return 0;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000000 	.word	0x20000000
 8000970:	08005c94 	.word	0x08005c94
 8000974:	20000014 	.word	0x20000014
 8000978:	08005ca0 	.word	0x08005ca0
 800097c:	08005c80 	.word	0x08005c80

08000980 <main>:
static void MX_I2C1_Init(void);
static void MX_I2S3_Init(void);
static void MX_USART2_UART_Init(void);

int main(void)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b09d      	sub	sp, #116	@ 0x74
 8000984:	af00      	add	r7, sp, #0
    HAL_Init();
 8000986:	f000 fe23 	bl	80015d0 <HAL_Init>
    SystemClock_Config();
 800098a:	f000 f917 	bl	8000bbc <SystemClock_Config>

    MX_GPIO_Init();
 800098e:	f000 fa05 	bl	8000d9c <MX_GPIO_Init>
    MX_I2C1_Init();
 8000992:	f000 f97b 	bl	8000c8c <MX_I2C1_Init>
    MX_I2S3_Init();
 8000996:	f000 f9a7 	bl	8000ce8 <MX_I2S3_Init>
    MX_USART2_UART_Init();
 800099a:	f000 f9d5 	bl	8000d48 <MX_USART2_UART_Init>

    /* --- UART2 greeting --- */
    HAL_UART_Transmit(&huart2, (uint8_t*)"Hello STM32\r\n", 13, HAL_MAX_DELAY);
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	220d      	movs	r2, #13
 80009a4:	4977      	ldr	r1, [pc, #476]	@ (8000b84 <main+0x204>)
 80009a6:	4878      	ldr	r0, [pc, #480]	@ (8000b88 <main+0x208>)
 80009a8:	f004 f824 	bl	80049f4 <HAL_UART_Transmit>

    /* --- OLED: flash and splash screen --- */
    ssd1306_Init();
 80009ac:	f000 fa9a 	bl	8000ee4 <ssd1306_Init>
    ssd1306_Fill(SSD1306_COLOR_WHITE);
 80009b0:	2001      	movs	r0, #1
 80009b2:	f000 fb29 	bl	8001008 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 80009b6:	f000 faf5 	bl	8000fa4 <ssd1306_UpdateScreen>
    HAL_Delay(1000);
 80009ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009be:	f000 fe79 	bl	80016b4 <HAL_Delay>
    ssd1306_Test(); /* "Hello OLED!" */
 80009c2:	f000 fbf5 	bl	80011b0 <ssd1306_Test>

    /* === EEPROM test =================================================== */
    {
        /* Check if 24C256 (address 0x50) is accessible */
        HAL_UART_Transmit(&huart2, (uint8_t*)"Checking EEPROM...\r\n", 20, HAL_MAX_DELAY);
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	2214      	movs	r2, #20
 80009cc:	496f      	ldr	r1, [pc, #444]	@ (8000b8c <main+0x20c>)
 80009ce:	486e      	ldr	r0, [pc, #440]	@ (8000b88 <main+0x208>)
 80009d0:	f004 f810 	bl	80049f4 <HAL_UART_Transmit>
        if (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_I2C_ADDR, 2, 10) != HAL_OK)
 80009d4:	230a      	movs	r3, #10
 80009d6:	2202      	movs	r2, #2
 80009d8:	21a0      	movs	r1, #160	@ 0xa0
 80009da:	486d      	ldr	r0, [pc, #436]	@ (8000b90 <main+0x210>)
 80009dc:	f001 ffdc 	bl	8002998 <HAL_I2C_IsDeviceReady>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d01a      	beq.n	8000a1c <main+0x9c>
        {
            HAL_UART_Transmit(&huart2, (uint8_t*)"EEPROM missing!\r\n", 17, HAL_MAX_DELAY);
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	2211      	movs	r2, #17
 80009ec:	4969      	ldr	r1, [pc, #420]	@ (8000b94 <main+0x214>)
 80009ee:	4866      	ldr	r0, [pc, #408]	@ (8000b88 <main+0x208>)
 80009f0:	f004 f800 	bl	80049f4 <HAL_UART_Transmit>

            ssd1306_Fill(SSD1306_COLOR_BLACK);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 fb07 	bl	8001008 <ssd1306_Fill>
            ssd1306_SetCursor(0, 0);
 80009fa:	2100      	movs	r1, #0
 80009fc:	2000      	movs	r0, #0
 80009fe:	f000 fb1b 	bl	8001038 <ssd1306_SetCursor>
            ssd1306_WriteString("EEPROM MISSING!", SSD1306_COLOR_WHITE);
 8000a02:	2101      	movs	r1, #1
 8000a04:	4864      	ldr	r0, [pc, #400]	@ (8000b98 <main+0x218>)
 8000a06:	f000 fbb9 	bl	800117c <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 8000a0a:	f000 facb 	bl	8000fa4 <ssd1306_UpdateScreen>
            HAL_Delay(1500);
 8000a0e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000a12:	f000 fe4f 	bl	80016b4 <HAL_Delay>
            ssd1306_Test();
 8000a16:	f000 fbcb 	bl	80011b0 <ssd1306_Test>
 8000a1a:	e072      	b.n	8000b02 <main+0x182>
        }
        else
        {
            uint8_t wbuf[] = "Hello EEPROM!";
 8000a1c:	4b5f      	ldr	r3, [pc, #380]	@ (8000b9c <main+0x21c>)
 8000a1e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000a22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a24:	c407      	stmia	r4!, {r0, r1, r2}
 8000a26:	8023      	strh	r3, [r4, #0]
            uint8_t rbuf[sizeof wbuf] = {0};
 8000a28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	819a      	strh	r2, [r3, #12]

            HAL_UART_Transmit(&huart2, (uint8_t*)"Starting EEPROM test...\r\n", 25, HAL_MAX_DELAY);
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3a:	2219      	movs	r2, #25
 8000a3c:	4958      	ldr	r1, [pc, #352]	@ (8000ba0 <main+0x220>)
 8000a3e:	4852      	ldr	r0, [pc, #328]	@ (8000b88 <main+0x208>)
 8000a40:	f003 ffd8 	bl	80049f4 <HAL_UART_Transmit>
            if (EEPROM_Write(0x0000, wbuf, sizeof wbuf) == HAL_OK &&
 8000a44:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000a48:	220e      	movs	r2, #14
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f7ff fde1 	bl	8000614 <EEPROM_Write>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d13a      	bne.n	8000ace <main+0x14e>
                EEPROM_Read(0x0000, rbuf, sizeof rbuf) == HAL_OK)
 8000a58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a5c:	220e      	movs	r2, #14
 8000a5e:	4619      	mov	r1, r3
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff fea5 	bl	80007b0 <EEPROM_Read>
 8000a66:	4603      	mov	r3, r0
            if (EEPROM_Write(0x0000, wbuf, sizeof wbuf) == HAL_OK &&
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d130      	bne.n	8000ace <main+0x14e>
            {
                char msg[40];
                sprintf(msg, "EEPROM: %s\r\n", rbuf);
 8000a6c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	494c      	ldr	r1, [pc, #304]	@ (8000ba4 <main+0x224>)
 8000a74:	4618      	mov	r0, r3
 8000a76:	f004 fb79 	bl	800516c <siprintf>
                HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fba7 	bl	80001d0 <strlen>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	1d39      	adds	r1, r7, #4
 8000a88:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8c:	483e      	ldr	r0, [pc, #248]	@ (8000b88 <main+0x208>)
 8000a8e:	f003 ffb1 	bl	80049f4 <HAL_UART_Transmit>

                ssd1306_Fill(SSD1306_COLOR_BLACK);
 8000a92:	2000      	movs	r0, #0
 8000a94:	f000 fab8 	bl	8001008 <ssd1306_Fill>
                ssd1306_SetCursor(0, 0);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f000 facc 	bl	8001038 <ssd1306_SetCursor>
                ssd1306_WriteString("EEPROM OK:", SSD1306_COLOR_WHITE);
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	4841      	ldr	r0, [pc, #260]	@ (8000ba8 <main+0x228>)
 8000aa4:	f000 fb6a 	bl	800117c <ssd1306_WriteString>
                ssd1306_SetCursor(0, 12);
 8000aa8:	210c      	movs	r1, #12
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f000 fac4 	bl	8001038 <ssd1306_SetCursor>
                ssd1306_WriteString((char*)rbuf, SSD1306_COLOR_WHITE);
 8000ab0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fb60 	bl	800117c <ssd1306_WriteString>
                ssd1306_UpdateScreen();
 8000abc:	f000 fa72 	bl	8000fa4 <ssd1306_UpdateScreen>
                HAL_Delay(1500);
 8000ac0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000ac4:	f000 fdf6 	bl	80016b4 <HAL_Delay>
                ssd1306_Test();
 8000ac8:	f000 fb72 	bl	80011b0 <ssd1306_Test>
            {
 8000acc:	e019      	b.n	8000b02 <main+0x182>
            }
            else
            {
                HAL_UART_Transmit(&huart2, (uint8_t*)"EEPROM error\r\n", 14, HAL_MAX_DELAY);
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	220e      	movs	r2, #14
 8000ad4:	4935      	ldr	r1, [pc, #212]	@ (8000bac <main+0x22c>)
 8000ad6:	482c      	ldr	r0, [pc, #176]	@ (8000b88 <main+0x208>)
 8000ad8:	f003 ff8c 	bl	80049f4 <HAL_UART_Transmit>

                ssd1306_Fill(SSD1306_COLOR_BLACK);
 8000adc:	2000      	movs	r0, #0
 8000ade:	f000 fa93 	bl	8001008 <ssd1306_Fill>
                ssd1306_SetCursor(0, 0);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f000 faa7 	bl	8001038 <ssd1306_SetCursor>
                ssd1306_WriteString("EEPROM ERROR!", SSD1306_COLOR_WHITE);
 8000aea:	2101      	movs	r1, #1
 8000aec:	4830      	ldr	r0, [pc, #192]	@ (8000bb0 <main+0x230>)
 8000aee:	f000 fb45 	bl	800117c <ssd1306_WriteString>
                ssd1306_UpdateScreen();
 8000af2:	f000 fa57 	bl	8000fa4 <ssd1306_UpdateScreen>
                HAL_Delay(1500);
 8000af6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000afa:	f000 fddb 	bl	80016b4 <HAL_Delay>
                ssd1306_Test();
 8000afe:	f000 fb57 	bl	80011b0 <ssd1306_Test>
    char buf[32];

    while (1)
    {
        /* ---------- Keypad polling ---------- */
        char k = KEYPAD_Scan();
 8000b02:	f7ff fed1 	bl	80008a8 <KEYPAD_Scan>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
        if (k)
 8000b0c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d032      	beq.n	8000b7a <main+0x1fa>
        {
            sprintf(buf, "Key [%c]\r\n", k);
 8000b14:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8000b18:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b1c:	4925      	ldr	r1, [pc, #148]	@ (8000bb4 <main+0x234>)
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f004 fb24 	bl	800516c <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000b24:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fb51 	bl	80001d0 <strlen>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	4813      	ldr	r0, [pc, #76]	@ (8000b88 <main+0x208>)
 8000b3c:	f003 ff5a 	bl	80049f4 <HAL_UART_Transmit>

            ssd1306_Fill(SSD1306_COLOR_BLACK);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f000 fa61 	bl	8001008 <ssd1306_Fill>
            ssd1306_SetCursor(0, 0);
 8000b46:	2100      	movs	r1, #0
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f000 fa75 	bl	8001038 <ssd1306_SetCursor>
            ssd1306_WriteString("Key:", SSD1306_COLOR_WHITE);
 8000b4e:	2101      	movs	r1, #1
 8000b50:	4819      	ldr	r0, [pc, #100]	@ (8000bb8 <main+0x238>)
 8000b52:	f000 fb13 	bl	800117c <ssd1306_WriteString>
            ssd1306_SetCursor(40, 0);
 8000b56:	2100      	movs	r1, #0
 8000b58:	2028      	movs	r0, #40	@ 0x28
 8000b5a:	f000 fa6d 	bl	8001038 <ssd1306_SetCursor>
            ssd1306_WriteChar(k, SSD1306_COLOR_WHITE);
 8000b5e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000b62:	2101      	movs	r1, #1
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 fa7f 	bl	8001068 <ssd1306_WriteChar>
            ssd1306_UpdateScreen();
 8000b6a:	f000 fa1b 	bl	8000fa4 <ssd1306_UpdateScreen>
            HAL_Delay(1000);
 8000b6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b72:	f000 fd9f 	bl	80016b4 <HAL_Delay>
            ssd1306_Test();
 8000b76:	f000 fb1b 	bl	80011b0 <ssd1306_Test>
        }

        HAL_Delay(50); /* Main loop ~20 Hz */
 8000b7a:	2032      	movs	r0, #50	@ 0x32
 8000b7c:	f000 fd9a 	bl	80016b4 <HAL_Delay>
    {
 8000b80:	e7bf      	b.n	8000b02 <main+0x182>
 8000b82:	bf00      	nop
 8000b84:	08005bac 	.word	0x08005bac
 8000b88:	20000138 	.word	0x20000138
 8000b8c:	08005bbc 	.word	0x08005bbc
 8000b90:	2000009c 	.word	0x2000009c
 8000b94:	08005bd4 	.word	0x08005bd4
 8000b98:	08005be8 	.word	0x08005be8
 8000b9c:	08005c64 	.word	0x08005c64
 8000ba0:	08005bf8 	.word	0x08005bf8
 8000ba4:	08005c14 	.word	0x08005c14
 8000ba8:	08005c24 	.word	0x08005c24
 8000bac:	08005c30 	.word	0x08005c30
 8000bb0:	08005c40 	.word	0x08005c40
 8000bb4:	08005c50 	.word	0x08005c50
 8000bb8:	08005c5c 	.word	0x08005c5c

08000bbc <SystemClock_Config>:
    }
}

/* ----- CubeMX functions (leave unchanged) -------- */
void SystemClock_Config(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b094      	sub	sp, #80	@ 0x50
 8000bc0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 0320 	add.w	r3, r7, #32
 8000bc6:	2230      	movs	r2, #48	@ 0x30
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f004 faf0 	bl	80051b0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	4b27      	ldr	r3, [pc, #156]	@ (8000c84 <SystemClock_Config+0xc8>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be8:	4a26      	ldr	r2, [pc, #152]	@ (8000c84 <SystemClock_Config+0xc8>)
 8000bea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf0:	4b24      	ldr	r3, [pc, #144]	@ (8000c84 <SystemClock_Config+0xc8>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	4b21      	ldr	r3, [pc, #132]	@ (8000c88 <SystemClock_Config+0xcc>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a20      	ldr	r2, [pc, #128]	@ (8000c88 <SystemClock_Config+0xcc>)
 8000c06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c88 <SystemClock_Config+0xcc>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c26:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000c30:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c34:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c36:	2307      	movs	r3, #7
 8000c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 8000c3a:	f107 0320 	add.w	r3, r7, #32
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f003 f8ae 	bl	8003da0 <HAL_RCC_OscConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0x92>
 8000c4a:	f000 f92b 	bl	8000ea4 <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c4e:	230f      	movs	r3, #15
 8000c50:	60fb      	str	r3, [r7, #12]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c52:	2302      	movs	r3, #2
 8000c54:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c5a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c5e:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c64:	61fb      	str	r3, [r7, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c66:	f107 030c 	add.w	r3, r7, #12
 8000c6a:	2105      	movs	r1, #5
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 fb0f 	bl	8004290 <HAL_RCC_ClockConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0xc0>
        Error_Handler();
 8000c78:	f000 f914 	bl	8000ea4 <Error_Handler>
}
 8000c7c:	bf00      	nop
 8000c7e:	3750      	adds	r7, #80	@ 0x50
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40007000 	.word	0x40007000

08000c8c <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <MX_I2C1_Init+0x50>)
 8000c92:	4a13      	ldr	r2, [pc, #76]	@ (8000ce0 <MX_I2C1_Init+0x54>)
 8000c94:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8000c96:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <MX_I2C1_Init+0x50>)
 8000c98:	4a12      	ldr	r2, [pc, #72]	@ (8000ce4 <MX_I2C1_Init+0x58>)
 8000c9a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <MX_I2C1_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <MX_I2C1_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <MX_I2C1_Init+0x50>)
 8000caa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cae:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <MX_I2C1_Init+0x50>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <MX_I2C1_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <MX_I2C1_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <MX_I2C1_Init+0x50>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) Error_Handler();
 8000cc8:	4804      	ldr	r0, [pc, #16]	@ (8000cdc <MX_I2C1_Init+0x50>)
 8000cca:	f001 f8c7 	bl	8001e5c <HAL_I2C_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_I2C1_Init+0x4c>
 8000cd4:	f000 f8e6 	bl	8000ea4 <Error_Handler>
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	2000009c 	.word	0x2000009c
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	000186a0 	.word	0x000186a0

08000ce8 <MX_I2S3_Init>:

static void MX_I2S3_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
    hi2s3.Instance = SPI3;
 8000cec:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <MX_I2S3_Init+0x54>)
 8000cee:	4a14      	ldr	r2, [pc, #80]	@ (8000d40 <MX_I2S3_Init+0x58>)
 8000cf0:	601a      	str	r2, [r3, #0]
    hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <MX_I2S3_Init+0x54>)
 8000cf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cf8:	605a      	str	r2, [r3, #4]
    hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <MX_I2S3_Init+0x54>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
    hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d00:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <MX_I2S3_Init+0x54>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
    hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d06:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <MX_I2S3_Init+0x54>)
 8000d08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d0c:	611a      	str	r2, [r3, #16]
    hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <MX_I2S3_Init+0x54>)
 8000d10:	4a0c      	ldr	r2, [pc, #48]	@ (8000d44 <MX_I2S3_Init+0x5c>)
 8000d12:	615a      	str	r2, [r3, #20]
    hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d14:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <MX_I2S3_Init+0x54>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
    hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <MX_I2S3_Init+0x54>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
    hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <MX_I2S3_Init+0x54>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
    if (HAL_I2S_Init(&hi2s3) != HAL_OK) Error_Handler();
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_I2S3_Init+0x54>)
 8000d28:	f002 fb9a 	bl	8003460 <HAL_I2S_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_I2S3_Init+0x4e>
 8000d32:	f000 f8b7 	bl	8000ea4 <Error_Handler>
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200000f0 	.word	0x200000f0
 8000d40:	40003c00 	.word	0x40003c00
 8000d44:	00017700 	.word	0x00017700

08000d48 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	@ (8000d98 <MX_USART2_UART_Init+0x50>)
 8000d50:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 9600;
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d54:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d58:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) Error_Handler();
 8000d7e:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d80:	f003 fde8 	bl	8004954 <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART2_UART_Init+0x46>
 8000d8a:	f000 f88b 	bl	8000ea4 <Error_Handler>
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000138 	.word	0x20000138
 8000d98:	40004400 	.word	0x40004400

08000d9c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	@ 0x30
 8000da0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	4b38      	ldr	r3, [pc, #224]	@ (8000e98 <MX_GPIO_Init+0xfc>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	4a37      	ldr	r2, [pc, #220]	@ (8000e98 <MX_GPIO_Init+0xfc>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc2:	4b35      	ldr	r3, [pc, #212]	@ (8000e98 <MX_GPIO_Init+0xfc>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	61bb      	str	r3, [r7, #24]
 8000dcc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	4b31      	ldr	r3, [pc, #196]	@ (8000e98 <MX_GPIO_Init+0xfc>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a30      	ldr	r2, [pc, #192]	@ (8000e98 <MX_GPIO_Init+0xfc>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b2e      	ldr	r3, [pc, #184]	@ (8000e98 <MX_GPIO_Init+0xfc>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b2a      	ldr	r3, [pc, #168]	@ (8000e98 <MX_GPIO_Init+0xfc>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a29      	ldr	r2, [pc, #164]	@ (8000e98 <MX_GPIO_Init+0xfc>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b27      	ldr	r3, [pc, #156]	@ (8000e98 <MX_GPIO_Init+0xfc>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b23      	ldr	r3, [pc, #140]	@ (8000e98 <MX_GPIO_Init+0xfc>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a22      	ldr	r2, [pc, #136]	@ (8000e98 <MX_GPIO_Init+0xfc>)
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b20      	ldr	r3, [pc, #128]	@ (8000e98 <MX_GPIO_Init+0xfc>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	4b1c      	ldr	r3, [pc, #112]	@ (8000e98 <MX_GPIO_Init+0xfc>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8000e98 <MX_GPIO_Init+0xfc>)
 8000e2c:	f043 0310 	orr.w	r3, r3, #16
 8000e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e32:	4b19      	ldr	r3, [pc, #100]	@ (8000e98 <MX_GPIO_Init+0xfc>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	f003 0310 	and.w	r3, r3, #16
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <MX_GPIO_Init+0xfc>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a14      	ldr	r2, [pc, #80]	@ (8000e98 <MX_GPIO_Init+0xfc>)
 8000e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <MX_GPIO_Init+0xfc>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]

    /* Keypad rows (PC0–PC4) */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
 8000e5a:	231f      	movs	r3, #31
 8000e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480a      	ldr	r0, [pc, #40]	@ (8000e9c <MX_GPIO_Init+0x100>)
 8000e72:	f000 fd29 	bl	80018c8 <HAL_GPIO_Init>

    /* Keypad columns (PB0, PB1, PB11, PB12) */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_11 | GPIO_PIN_12;
 8000e76:	f641 0303 	movw	r3, #6147	@ 0x1803
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <MX_GPIO_Init+0x104>)
 8000e8c:	f000 fd1c 	bl	80018c8 <HAL_GPIO_Init>
}
 8000e90:	bf00      	nop
 8000e92:	3730      	adds	r7, #48	@ 0x30
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020800 	.word	0x40020800
 8000ea0:	40020400 	.word	0x40020400

08000ea4 <Error_Handler>:

void Error_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea8:	b672      	cpsid	i
}
 8000eaa:	bf00      	nop
    __disable_irq();
    while (1) { }
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <Error_Handler+0x8>

08000eb0 <CMD>:
  #include "font5x7.inc"        /* файл приведён ниже */
};

/* ---- низкоуровневые функции ---- */
static HAL_StatusTypeDef CMD(uint8_t c)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
    uint8_t d[2] = {0x00, c};
 8000eba:	2300      	movs	r3, #0
 8000ebc:	733b      	strb	r3, [r7, #12]
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(&hi2c1, SSD1306_I2C_ADDR, d, 2, HAL_MAX_DELAY);
 8000ec2:	f107 020c 	add.w	r2, r7, #12
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2302      	movs	r3, #2
 8000ece:	2178      	movs	r1, #120	@ 0x78
 8000ed0:	4803      	ldr	r0, [pc, #12]	@ (8000ee0 <CMD+0x30>)
 8000ed2:	f001 f937 	bl	8002144 <HAL_I2C_Master_Transmit>
 8000ed6:	4603      	mov	r3, r0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2000009c 	.word	0x2000009c

08000ee4 <ssd1306_Init>:

/* ---- публичные ---- */
void ssd1306_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 8000ee8:	2064      	movs	r0, #100	@ 0x64
 8000eea:	f000 fbe3 	bl	80016b4 <HAL_Delay>
    CMD(0xAE); CMD(0x20); CMD(0x00); CMD(0xB0); CMD(0xC8);
 8000eee:	20ae      	movs	r0, #174	@ 0xae
 8000ef0:	f7ff ffde 	bl	8000eb0 <CMD>
 8000ef4:	2020      	movs	r0, #32
 8000ef6:	f7ff ffdb 	bl	8000eb0 <CMD>
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff ffd8 	bl	8000eb0 <CMD>
 8000f00:	20b0      	movs	r0, #176	@ 0xb0
 8000f02:	f7ff ffd5 	bl	8000eb0 <CMD>
 8000f06:	20c8      	movs	r0, #200	@ 0xc8
 8000f08:	f7ff ffd2 	bl	8000eb0 <CMD>
    CMD(0x00); CMD(0x10); CMD(0x40); CMD(0x81); CMD(0x7F);
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f7ff ffcf 	bl	8000eb0 <CMD>
 8000f12:	2010      	movs	r0, #16
 8000f14:	f7ff ffcc 	bl	8000eb0 <CMD>
 8000f18:	2040      	movs	r0, #64	@ 0x40
 8000f1a:	f7ff ffc9 	bl	8000eb0 <CMD>
 8000f1e:	2081      	movs	r0, #129	@ 0x81
 8000f20:	f7ff ffc6 	bl	8000eb0 <CMD>
 8000f24:	207f      	movs	r0, #127	@ 0x7f
 8000f26:	f7ff ffc3 	bl	8000eb0 <CMD>
    CMD(0xA1); CMD(0xA6); CMD(0xA8); CMD(0x3F); CMD(0xA4);
 8000f2a:	20a1      	movs	r0, #161	@ 0xa1
 8000f2c:	f7ff ffc0 	bl	8000eb0 <CMD>
 8000f30:	20a6      	movs	r0, #166	@ 0xa6
 8000f32:	f7ff ffbd 	bl	8000eb0 <CMD>
 8000f36:	20a8      	movs	r0, #168	@ 0xa8
 8000f38:	f7ff ffba 	bl	8000eb0 <CMD>
 8000f3c:	203f      	movs	r0, #63	@ 0x3f
 8000f3e:	f7ff ffb7 	bl	8000eb0 <CMD>
 8000f42:	20a4      	movs	r0, #164	@ 0xa4
 8000f44:	f7ff ffb4 	bl	8000eb0 <CMD>
    CMD(0xD3); CMD(0x00); CMD(0xD5); CMD(0xF0); CMD(0xD9);
 8000f48:	20d3      	movs	r0, #211	@ 0xd3
 8000f4a:	f7ff ffb1 	bl	8000eb0 <CMD>
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ffae 	bl	8000eb0 <CMD>
 8000f54:	20d5      	movs	r0, #213	@ 0xd5
 8000f56:	f7ff ffab 	bl	8000eb0 <CMD>
 8000f5a:	20f0      	movs	r0, #240	@ 0xf0
 8000f5c:	f7ff ffa8 	bl	8000eb0 <CMD>
 8000f60:	20d9      	movs	r0, #217	@ 0xd9
 8000f62:	f7ff ffa5 	bl	8000eb0 <CMD>
    CMD(0x22); CMD(0xDA); CMD(0x12); CMD(0xDB); CMD(0x20);
 8000f66:	2022      	movs	r0, #34	@ 0x22
 8000f68:	f7ff ffa2 	bl	8000eb0 <CMD>
 8000f6c:	20da      	movs	r0, #218	@ 0xda
 8000f6e:	f7ff ff9f 	bl	8000eb0 <CMD>
 8000f72:	2012      	movs	r0, #18
 8000f74:	f7ff ff9c 	bl	8000eb0 <CMD>
 8000f78:	20db      	movs	r0, #219	@ 0xdb
 8000f7a:	f7ff ff99 	bl	8000eb0 <CMD>
 8000f7e:	2020      	movs	r0, #32
 8000f80:	f7ff ff96 	bl	8000eb0 <CMD>
    CMD(0x8D); CMD(0x14); CMD(0xAF);
 8000f84:	208d      	movs	r0, #141	@ 0x8d
 8000f86:	f7ff ff93 	bl	8000eb0 <CMD>
 8000f8a:	2014      	movs	r0, #20
 8000f8c:	f7ff ff90 	bl	8000eb0 <CMD>
 8000f90:	20af      	movs	r0, #175	@ 0xaf
 8000f92:	f7ff ff8d 	bl	8000eb0 <CMD>

    ssd1306_Fill(SSD1306_COLOR_BLACK);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 f836 	bl	8001008 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8000f9c:	f000 f802 	bl	8000fa4 <ssd1306_UpdateScreen>
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <ssd1306_UpdateScreen>:

void ssd1306_UpdateScreen(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af04      	add	r7, sp, #16
    for (uint8_t page = 0; page < 8; page++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	71fb      	strb	r3, [r7, #7]
 8000fae:	e01e      	b.n	8000fee <ssd1306_UpdateScreen+0x4a>
    {
        CMD(0xB0 + page); CMD(0x00); CMD(0x10);
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	3b50      	subs	r3, #80	@ 0x50
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff7a 	bl	8000eb0 <CMD>
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff ff77 	bl	8000eb0 <CMD>
 8000fc2:	2010      	movs	r0, #16
 8000fc4:	f7ff ff74 	bl	8000eb0 <CMD>
        HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40,
                          I2C_MEMADD_SIZE_8BIT,
                          &Buffer[SSD1306_WIDTH * page],
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	01db      	lsls	r3, r3, #7
        HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40,
 8000fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8001000 <ssd1306_UpdateScreen+0x5c>)
 8000fce:	4413      	add	r3, r2
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	9202      	str	r2, [sp, #8]
 8000fd6:	2280      	movs	r2, #128	@ 0x80
 8000fd8:	9201      	str	r2, [sp, #4]
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	2240      	movs	r2, #64	@ 0x40
 8000fe0:	2178      	movs	r1, #120	@ 0x78
 8000fe2:	4808      	ldr	r0, [pc, #32]	@ (8001004 <ssd1306_UpdateScreen+0x60>)
 8000fe4:	f001 f9ac 	bl	8002340 <HAL_I2C_Mem_Write>
    for (uint8_t page = 0; page < 8; page++)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	3301      	adds	r3, #1
 8000fec:	71fb      	strb	r3, [r7, #7]
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b07      	cmp	r3, #7
 8000ff2:	d9dd      	bls.n	8000fb0 <ssd1306_UpdateScreen+0xc>
                          SSD1306_WIDTH, HAL_MAX_DELAY);
    }
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000180 	.word	0x20000180
 8001004:	2000009c 	.word	0x2000009c

08001008 <ssd1306_Fill>:

void ssd1306_Fill(SSD1306_COLOR color)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
    memset(Buffer, color ? 0xFF : 0x00, sizeof(Buffer));
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <ssd1306_Fill+0x14>
 8001018:	23ff      	movs	r3, #255	@ 0xff
 800101a:	e000      	b.n	800101e <ssd1306_Fill+0x16>
 800101c:	2300      	movs	r3, #0
 800101e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001022:	4619      	mov	r1, r3
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <ssd1306_Fill+0x2c>)
 8001026:	f004 f8c3 	bl	80051b0 <memset>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000180 	.word	0x20000180

08001038 <ssd1306_SetCursor>:

void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	460a      	mov	r2, r1
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	4613      	mov	r3, r2
 8001046:	71bb      	strb	r3, [r7, #6]
    CurrentX = x;
 8001048:	4a05      	ldr	r2, [pc, #20]	@ (8001060 <ssd1306_SetCursor+0x28>)
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	7013      	strb	r3, [r2, #0]
    CurrentY = y;
 800104e:	4a05      	ldr	r2, [pc, #20]	@ (8001064 <ssd1306_SetCursor+0x2c>)
 8001050:	79bb      	ldrb	r3, [r7, #6]
 8001052:	7013      	strb	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	20000580 	.word	0x20000580
 8001064:	20000581 	.word	0x20000581

08001068 <ssd1306_WriteChar>:

void ssd1306_WriteChar(char ch, SSD1306_COLOR color)
{
 8001068:	b480      	push	{r7}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	460a      	mov	r2, r1
 8001072:	71fb      	strb	r3, [r7, #7]
 8001074:	4613      	mov	r3, r2
 8001076:	71bb      	strb	r3, [r7, #6]
    if (ch < 32 || ch > 126) ch = '?';
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b1f      	cmp	r3, #31
 800107c:	d902      	bls.n	8001084 <ssd1306_WriteChar+0x1c>
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b7e      	cmp	r3, #126	@ 0x7e
 8001082:	d901      	bls.n	8001088 <ssd1306_WriteChar+0x20>
 8001084:	233f      	movs	r3, #63	@ 0x3f
 8001086:	71fb      	strb	r3, [r7, #7]
    const uint8_t* glyph = &Font5x7[(ch - 32) * 5];
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f1a3 0220 	sub.w	r2, r3, #32
 800108e:	4613      	mov	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	4a35      	ldr	r2, [pc, #212]	@ (800116c <ssd1306_WriteChar+0x104>)
 8001096:	4413      	add	r3, r2
 8001098:	613b      	str	r3, [r7, #16]

    for (uint8_t col = 0; col < 5; col++)
 800109a:	2300      	movs	r3, #0
 800109c:	75fb      	strb	r3, [r7, #23]
 800109e:	e056      	b.n	800114e <ssd1306_WriteChar+0xe6>
    {
        uint8_t line = glyph[col];
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4413      	add	r3, r2
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	75bb      	strb	r3, [r7, #22]
        for (uint8_t row = 0; row < 7; row++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	757b      	strb	r3, [r7, #21]
 80010ae:	e042      	b.n	8001136 <ssd1306_WriteChar+0xce>
        {
            uint32_t idx = CurrentX + ((CurrentY + row) / 8) * SSD1306_WIDTH;
 80010b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001170 <ssd1306_WriteChar+0x108>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001174 <ssd1306_WriteChar+0x10c>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	4619      	mov	r1, r3
 80010bc:	7d7b      	ldrb	r3, [r7, #21]
 80010be:	440b      	add	r3, r1
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	da00      	bge.n	80010c6 <ssd1306_WriteChar+0x5e>
 80010c4:	3307      	adds	r3, #7
 80010c6:	10db      	asrs	r3, r3, #3
 80010c8:	01db      	lsls	r3, r3, #7
 80010ca:	4413      	add	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
            uint8_t  bit = 1 << ((CurrentY + row) % 8);
 80010ce:	4b29      	ldr	r3, [pc, #164]	@ (8001174 <ssd1306_WriteChar+0x10c>)
 80010d0:	781a      	ldrb	r2, [r3, #0]
 80010d2:	7d7b      	ldrb	r3, [r7, #21]
 80010d4:	4413      	add	r3, r2
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	2201      	movs	r2, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	72fb      	strb	r3, [r7, #11]

            if (line & 0x01)
 80010e4:	7dbb      	ldrb	r3, [r7, #22]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d00c      	beq.n	8001108 <ssd1306_WriteChar+0xa0>
                Buffer[idx] |=  bit;
 80010ee:	4a22      	ldr	r2, [pc, #136]	@ (8001178 <ssd1306_WriteChar+0x110>)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	781a      	ldrb	r2, [r3, #0]
 80010f6:	7afb      	ldrb	r3, [r7, #11]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b2d9      	uxtb	r1, r3
 80010fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001178 <ssd1306_WriteChar+0x110>)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4413      	add	r3, r2
 8001102:	460a      	mov	r2, r1
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	e010      	b.n	800112a <ssd1306_WriteChar+0xc2>
            else
                Buffer[idx] &= ~bit;
 8001108:	4a1b      	ldr	r2, [pc, #108]	@ (8001178 <ssd1306_WriteChar+0x110>)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4413      	add	r3, r2
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b25a      	sxtb	r2, r3
 8001112:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001116:	43db      	mvns	r3, r3
 8001118:	b25b      	sxtb	r3, r3
 800111a:	4013      	ands	r3, r2
 800111c:	b25b      	sxtb	r3, r3
 800111e:	b2d9      	uxtb	r1, r3
 8001120:	4a15      	ldr	r2, [pc, #84]	@ (8001178 <ssd1306_WriteChar+0x110>)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4413      	add	r3, r2
 8001126:	460a      	mov	r2, r1
 8001128:	701a      	strb	r2, [r3, #0]
            line >>= 1;
 800112a:	7dbb      	ldrb	r3, [r7, #22]
 800112c:	085b      	lsrs	r3, r3, #1
 800112e:	75bb      	strb	r3, [r7, #22]
        for (uint8_t row = 0; row < 7; row++)
 8001130:	7d7b      	ldrb	r3, [r7, #21]
 8001132:	3301      	adds	r3, #1
 8001134:	757b      	strb	r3, [r7, #21]
 8001136:	7d7b      	ldrb	r3, [r7, #21]
 8001138:	2b06      	cmp	r3, #6
 800113a:	d9b9      	bls.n	80010b0 <ssd1306_WriteChar+0x48>
        }
        CurrentX++;
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <ssd1306_WriteChar+0x108>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	3301      	adds	r3, #1
 8001142:	b2da      	uxtb	r2, r3
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <ssd1306_WriteChar+0x108>)
 8001146:	701a      	strb	r2, [r3, #0]
    for (uint8_t col = 0; col < 5; col++)
 8001148:	7dfb      	ldrb	r3, [r7, #23]
 800114a:	3301      	adds	r3, #1
 800114c:	75fb      	strb	r3, [r7, #23]
 800114e:	7dfb      	ldrb	r3, [r7, #23]
 8001150:	2b04      	cmp	r3, #4
 8001152:	d9a5      	bls.n	80010a0 <ssd1306_WriteChar+0x38>
    }
    CurrentX++; /* один столбец пробела */
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <ssd1306_WriteChar+0x108>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	b2da      	uxtb	r2, r3
 800115c:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <ssd1306_WriteChar+0x108>)
 800115e:	701a      	strb	r2, [r3, #0]
}
 8001160:	bf00      	nop
 8001162:	371c      	adds	r7, #28
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	08005ca8 	.word	0x08005ca8
 8001170:	20000580 	.word	0x20000580
 8001174:	20000581 	.word	0x20000581
 8001178:	20000180 	.word	0x20000180

0800117c <ssd1306_WriteString>:

void ssd1306_WriteString(const char* str, SSD1306_COLOR color)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
    while (*str)
 8001188:	e008      	b.n	800119c <ssd1306_WriteString+0x20>
        ssd1306_WriteChar(*str++, color);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	1c5a      	adds	r2, r3, #1
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	78fa      	ldrb	r2, [r7, #3]
 8001194:	4611      	mov	r1, r2
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff66 	bl	8001068 <ssd1306_WriteChar>
    while (*str)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1f2      	bne.n	800118a <ssd1306_WriteString+0xe>
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <ssd1306_Test>:

/* маленький тест: вывод "Hello OLED!" */
void ssd1306_Test(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
    ssd1306_Fill(SSD1306_COLOR_BLACK);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff ff27 	bl	8001008 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 80011ba:	2100      	movs	r1, #0
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff ff3b 	bl	8001038 <ssd1306_SetCursor>
    ssd1306_WriteString("Hello OLED!", SSD1306_COLOR_WHITE);
 80011c2:	2101      	movs	r1, #1
 80011c4:	4803      	ldr	r0, [pc, #12]	@ (80011d4 <ssd1306_Test+0x24>)
 80011c6:	f7ff ffd9 	bl	800117c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80011ca:	f7ff feeb 	bl	8000fa4 <ssd1306_UpdateScreen>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	08005c74 	.word	0x08005c74

080011d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <HAL_MspInit+0x4c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001224 <HAL_MspInit+0x4c>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <HAL_MspInit+0x4c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <HAL_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	4a08      	ldr	r2, [pc, #32]	@ (8001224 <HAL_MspInit+0x4c>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001208:	6413      	str	r3, [r2, #64]	@ 0x40
 800120a:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_MspInit+0x4c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001216:	2007      	movs	r0, #7
 8001218:	f000 fb22 	bl	8001860 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800

08001228 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a19      	ldr	r2, [pc, #100]	@ (80012ac <HAL_I2C_MspInit+0x84>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d12b      	bne.n	80012a2 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a17      	ldr	r2, [pc, #92]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001266:	23c0      	movs	r3, #192	@ 0xc0
 8001268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126a:	2312      	movs	r3, #18
 800126c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126e:	2301      	movs	r3, #1
 8001270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001276:	2304      	movs	r3, #4
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	480c      	ldr	r0, [pc, #48]	@ (80012b4 <HAL_I2C_MspInit+0x8c>)
 8001282:	f000 fb21 	bl	80018c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	4a08      	ldr	r2, [pc, #32]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 8001290:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001294:	6413      	str	r3, [r2, #64]	@ 0x40
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_I2C_MspInit+0x88>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	@ 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40005400 	.word	0x40005400
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020400 	.word	0x40020400

080012b8 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <HAL_I2C_MspDeInit+0x38>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d10d      	bne.n	80012e6 <HAL_I2C_MspDeInit+0x2e>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80012ca:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <HAL_I2C_MspDeInit+0x3c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	4a09      	ldr	r2, [pc, #36]	@ (80012f4 <HAL_I2C_MspDeInit+0x3c>)
 80012d0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80012d4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80012d6:	2140      	movs	r1, #64	@ 0x40
 80012d8:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <HAL_I2C_MspDeInit+0x40>)
 80012da:	f000 fc91 	bl	8001c00 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80012de:	2180      	movs	r1, #128	@ 0x80
 80012e0:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <HAL_I2C_MspDeInit+0x40>)
 80012e2:	f000 fc8d 	bl	8001c00 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40005400 	.word	0x40005400
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020400 	.word	0x40020400

080012fc <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08e      	sub	sp, #56	@ 0x38
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a31      	ldr	r2, [pc, #196]	@ (80013ec <HAL_I2S_MspInit+0xf0>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d15a      	bne.n	80013e2 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800132c:	2301      	movs	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001330:	23c0      	movs	r3, #192	@ 0xc0
 8001332:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001334:	2302      	movs	r3, #2
 8001336:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4618      	mov	r0, r3
 800133e:	f003 f9c7 	bl	80046d0 <HAL_RCCEx_PeriphCLKConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001348:	f7ff fdac 	bl	8000ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	4b27      	ldr	r3, [pc, #156]	@ (80013f0 <HAL_I2S_MspInit+0xf4>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001354:	4a26      	ldr	r2, [pc, #152]	@ (80013f0 <HAL_I2S_MspInit+0xf4>)
 8001356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800135a:	6413      	str	r3, [r2, #64]	@ 0x40
 800135c:	4b24      	ldr	r3, [pc, #144]	@ (80013f0 <HAL_I2S_MspInit+0xf4>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	4b20      	ldr	r3, [pc, #128]	@ (80013f0 <HAL_I2S_MspInit+0xf4>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001370:	4a1f      	ldr	r2, [pc, #124]	@ (80013f0 <HAL_I2S_MspInit+0xf4>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6313      	str	r3, [r2, #48]	@ 0x30
 8001378:	4b1d      	ldr	r3, [pc, #116]	@ (80013f0 <HAL_I2S_MspInit+0xf4>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	4b19      	ldr	r3, [pc, #100]	@ (80013f0 <HAL_I2S_MspInit+0xf4>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138c:	4a18      	ldr	r2, [pc, #96]	@ (80013f0 <HAL_I2S_MspInit+0xf4>)
 800138e:	f043 0304 	orr.w	r3, r3, #4
 8001392:	6313      	str	r3, [r2, #48]	@ 0x30
 8001394:	4b16      	ldr	r3, [pc, #88]	@ (80013f0 <HAL_I2S_MspInit+0xf4>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80013a0:	2310      	movs	r3, #16
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013b0:	2306      	movs	r3, #6
 80013b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b8:	4619      	mov	r1, r3
 80013ba:	480e      	ldr	r0, [pc, #56]	@ (80013f4 <HAL_I2S_MspInit+0xf8>)
 80013bc:	f000 fa84 	bl	80018c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80013c0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013d2:	2306      	movs	r3, #6
 80013d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013da:	4619      	mov	r1, r3
 80013dc:	4806      	ldr	r0, [pc, #24]	@ (80013f8 <HAL_I2S_MspInit+0xfc>)
 80013de:	f000 fa73 	bl	80018c8 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80013e2:	bf00      	nop
 80013e4:	3738      	adds	r7, #56	@ 0x38
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40003c00 	.word	0x40003c00
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40020800 	.word	0x40020800

080013fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	@ 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a19      	ldr	r2, [pc, #100]	@ (8001480 <HAL_UART_MspInit+0x84>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d12b      	bne.n	8001476 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b18      	ldr	r3, [pc, #96]	@ (8001484 <HAL_UART_MspInit+0x88>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	4a17      	ldr	r2, [pc, #92]	@ (8001484 <HAL_UART_MspInit+0x88>)
 8001428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800142c:	6413      	str	r3, [r2, #64]	@ 0x40
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <HAL_UART_MspInit+0x88>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <HAL_UART_MspInit+0x88>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a10      	ldr	r2, [pc, #64]	@ (8001484 <HAL_UART_MspInit+0x88>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <HAL_UART_MspInit+0x88>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001456:	230c      	movs	r3, #12
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001466:	2307      	movs	r3, #7
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	@ (8001488 <HAL_UART_MspInit+0x8c>)
 8001472:	f000 fa29 	bl	80018c8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001476:	bf00      	nop
 8001478:	3728      	adds	r7, #40	@ 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40004400 	.word	0x40004400
 8001484:	40023800 	.word	0x40023800
 8001488:	40020000 	.word	0x40020000

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <NMI_Handler+0x4>

08001494 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <MemManage_Handler+0x4>

080014a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <BusFault_Handler+0x4>

080014ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <UsageFault_Handler+0x4>

080014b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e2:	f000 f8c7 	bl	8001674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f4:	4a14      	ldr	r2, [pc, #80]	@ (8001548 <_sbrk+0x5c>)
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <_sbrk+0x60>)
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001500:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001508:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <_sbrk+0x64>)
 800150a:	4a12      	ldr	r2, [pc, #72]	@ (8001554 <_sbrk+0x68>)
 800150c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150e:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	429a      	cmp	r2, r3
 800151a:	d207      	bcs.n	800152c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800151c:	f003 fe50 	bl	80051c0 <__errno>
 8001520:	4603      	mov	r3, r0
 8001522:	220c      	movs	r2, #12
 8001524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	e009      	b.n	8001540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800152c:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001532:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	4a05      	ldr	r2, [pc, #20]	@ (8001550 <_sbrk+0x64>)
 800153c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153e:	68fb      	ldr	r3, [r7, #12]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20020000 	.word	0x20020000
 800154c:	00000400 	.word	0x00000400
 8001550:	20000584 	.word	0x20000584
 8001554:	200006d8 	.word	0x200006d8

08001558 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <SystemInit+0x20>)
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001562:	4a05      	ldr	r2, [pc, #20]	@ (8001578 <SystemInit+0x20>)
 8001564:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800157c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001580:	f7ff ffea 	bl	8001558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001584:	480c      	ldr	r0, [pc, #48]	@ (80015b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001586:	490d      	ldr	r1, [pc, #52]	@ (80015bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001588:	4a0d      	ldr	r2, [pc, #52]	@ (80015c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800159c:	4c0a      	ldr	r4, [pc, #40]	@ (80015c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015aa:	f003 fe0f 	bl	80051cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ae:	f7ff f9e7 	bl	8000980 <main>
  bx  lr    
 80015b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015bc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80015c0:	08005ee0 	.word	0x08005ee0
  ldr r2, =_sbss
 80015c4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80015c8:	200006d4 	.word	0x200006d4

080015cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC_IRQHandler>
	...

080015d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001610 <HAL_Init+0x40>)
 80015da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001610 <HAL_Init+0x40>)
 80015e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ec:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <HAL_Init+0x40>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a07      	ldr	r2, [pc, #28]	@ (8001610 <HAL_Init+0x40>)
 80015f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f8:	2003      	movs	r0, #3
 80015fa:	f000 f931 	bl	8001860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fe:	2000      	movs	r0, #0
 8001600:	f000 f808 	bl	8001614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001604:	f7ff fde8 	bl	80011d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023c00 	.word	0x40023c00

08001614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <HAL_InitTick+0x54>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <HAL_InitTick+0x58>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800162a:	fbb3 f3f1 	udiv	r3, r3, r1
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f93b 	bl	80018ae <HAL_SYSTICK_Config>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e00e      	b.n	8001660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b0f      	cmp	r3, #15
 8001646:	d80a      	bhi.n	800165e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001648:	2200      	movs	r2, #0
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	f04f 30ff 	mov.w	r0, #4294967295
 8001650:	f000 f911 	bl	8001876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001654:	4a06      	ldr	r2, [pc, #24]	@ (8001670 <HAL_InitTick+0x5c>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	e000      	b.n	8001660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000024 	.word	0x20000024
 800166c:	2000002c 	.word	0x2000002c
 8001670:	20000028 	.word	0x20000028

08001674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_IncTick+0x20>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <HAL_IncTick+0x24>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4413      	add	r3, r2
 8001684:	4a04      	ldr	r2, [pc, #16]	@ (8001698 <HAL_IncTick+0x24>)
 8001686:	6013      	str	r3, [r2, #0]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	2000002c 	.word	0x2000002c
 8001698:	20000588 	.word	0x20000588

0800169c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return uwTick;
 80016a0:	4b03      	ldr	r3, [pc, #12]	@ (80016b0 <HAL_GetTick+0x14>)
 80016a2:	681b      	ldr	r3, [r3, #0]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000588 	.word	0x20000588

080016b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016bc:	f7ff ffee 	bl	800169c <HAL_GetTick>
 80016c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016cc:	d005      	beq.n	80016da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ce:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <HAL_Delay+0x44>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4413      	add	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016da:	bf00      	nop
 80016dc:	f7ff ffde 	bl	800169c <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d8f7      	bhi.n	80016dc <HAL_Delay+0x28>
  {
  }
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000002c 	.word	0x2000002c

080016fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001718:	4013      	ands	r3, r2
 800171a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001724:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800172c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172e:	4a04      	ldr	r2, [pc, #16]	@ (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	60d3      	str	r3, [r2, #12]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001748:	4b04      	ldr	r3, [pc, #16]	@ (800175c <__NVIC_GetPriorityGrouping+0x18>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	f003 0307 	and.w	r3, r3, #7
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0a      	blt.n	800178a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	490c      	ldr	r1, [pc, #48]	@ (80017ac <__NVIC_SetPriority+0x4c>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	0112      	lsls	r2, r2, #4
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	440b      	add	r3, r1
 8001784:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001788:	e00a      	b.n	80017a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4908      	ldr	r1, [pc, #32]	@ (80017b0 <__NVIC_SetPriority+0x50>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	3b04      	subs	r3, #4
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	440b      	add	r3, r1
 800179e:	761a      	strb	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	@ 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f1c3 0307 	rsb	r3, r3, #7
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	bf28      	it	cs
 80017d2:	2304      	movcs	r3, #4
 80017d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3304      	adds	r3, #4
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d902      	bls.n	80017e4 <NVIC_EncodePriority+0x30>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3b03      	subs	r3, #3
 80017e2:	e000      	b.n	80017e6 <NVIC_EncodePriority+0x32>
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	401a      	ands	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43d9      	mvns	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	4313      	orrs	r3, r2
         );
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	@ 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800182c:	d301      	bcc.n	8001832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182e:	2301      	movs	r3, #1
 8001830:	e00f      	b.n	8001852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001832:	4a0a      	ldr	r2, [pc, #40]	@ (800185c <SysTick_Config+0x40>)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183a:	210f      	movs	r1, #15
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f7ff ff8e 	bl	8001760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001844:	4b05      	ldr	r3, [pc, #20]	@ (800185c <SysTick_Config+0x40>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184a:	4b04      	ldr	r3, [pc, #16]	@ (800185c <SysTick_Config+0x40>)
 800184c:	2207      	movs	r2, #7
 800184e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	e000e010 	.word	0xe000e010

08001860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff47 	bl	80016fc <__NVIC_SetPriorityGrouping>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001888:	f7ff ff5c 	bl	8001744 <__NVIC_GetPriorityGrouping>
 800188c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	6978      	ldr	r0, [r7, #20]
 8001894:	f7ff ff8e 	bl	80017b4 <NVIC_EncodePriority>
 8001898:	4602      	mov	r2, r0
 800189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff5d 	bl	8001760 <__NVIC_SetPriority>
}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ffb0 	bl	800181c <SysTick_Config>
 80018bc:	4603      	mov	r3, r0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	@ 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	e16b      	b.n	8001bbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018e4:	2201      	movs	r2, #1
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	f040 815a 	bne.w	8001bb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	2b01      	cmp	r3, #1
 800190c:	d005      	beq.n	800191a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001916:	2b02      	cmp	r3, #2
 8001918:	d130      	bne.n	800197c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001950:	2201      	movs	r2, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	f003 0201 	and.w	r2, r3, #1
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b03      	cmp	r3, #3
 8001986:	d017      	beq.n	80019b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d123      	bne.n	8001a0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	08da      	lsrs	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3208      	adds	r2, #8
 80019cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	220f      	movs	r2, #15
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	08da      	lsrs	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3208      	adds	r2, #8
 8001a06:	69b9      	ldr	r1, [r7, #24]
 8001a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0203 	and.w	r2, r3, #3
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80b4 	beq.w	8001bb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b60      	ldr	r3, [pc, #384]	@ (8001bd4 <HAL_GPIO_Init+0x30c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	4a5f      	ldr	r2, [pc, #380]	@ (8001bd4 <HAL_GPIO_Init+0x30c>)
 8001a58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001bd4 <HAL_GPIO_Init+0x30c>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a6a:	4a5b      	ldr	r2, [pc, #364]	@ (8001bd8 <HAL_GPIO_Init+0x310>)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	3302      	adds	r3, #2
 8001a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	220f      	movs	r2, #15
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a52      	ldr	r2, [pc, #328]	@ (8001bdc <HAL_GPIO_Init+0x314>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d02b      	beq.n	8001aee <HAL_GPIO_Init+0x226>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a51      	ldr	r2, [pc, #324]	@ (8001be0 <HAL_GPIO_Init+0x318>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d025      	beq.n	8001aea <HAL_GPIO_Init+0x222>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a50      	ldr	r2, [pc, #320]	@ (8001be4 <HAL_GPIO_Init+0x31c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d01f      	beq.n	8001ae6 <HAL_GPIO_Init+0x21e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4f      	ldr	r2, [pc, #316]	@ (8001be8 <HAL_GPIO_Init+0x320>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d019      	beq.n	8001ae2 <HAL_GPIO_Init+0x21a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4e      	ldr	r2, [pc, #312]	@ (8001bec <HAL_GPIO_Init+0x324>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d013      	beq.n	8001ade <HAL_GPIO_Init+0x216>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4d      	ldr	r2, [pc, #308]	@ (8001bf0 <HAL_GPIO_Init+0x328>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00d      	beq.n	8001ada <HAL_GPIO_Init+0x212>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4c      	ldr	r2, [pc, #304]	@ (8001bf4 <HAL_GPIO_Init+0x32c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d007      	beq.n	8001ad6 <HAL_GPIO_Init+0x20e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a4b      	ldr	r2, [pc, #300]	@ (8001bf8 <HAL_GPIO_Init+0x330>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d101      	bne.n	8001ad2 <HAL_GPIO_Init+0x20a>
 8001ace:	2307      	movs	r3, #7
 8001ad0:	e00e      	b.n	8001af0 <HAL_GPIO_Init+0x228>
 8001ad2:	2308      	movs	r3, #8
 8001ad4:	e00c      	b.n	8001af0 <HAL_GPIO_Init+0x228>
 8001ad6:	2306      	movs	r3, #6
 8001ad8:	e00a      	b.n	8001af0 <HAL_GPIO_Init+0x228>
 8001ada:	2305      	movs	r3, #5
 8001adc:	e008      	b.n	8001af0 <HAL_GPIO_Init+0x228>
 8001ade:	2304      	movs	r3, #4
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x228>
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e004      	b.n	8001af0 <HAL_GPIO_Init+0x228>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e002      	b.n	8001af0 <HAL_GPIO_Init+0x228>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <HAL_GPIO_Init+0x228>
 8001aee:	2300      	movs	r3, #0
 8001af0:	69fa      	ldr	r2, [r7, #28]
 8001af2:	f002 0203 	and.w	r2, r2, #3
 8001af6:	0092      	lsls	r2, r2, #2
 8001af8:	4093      	lsls	r3, r2
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b00:	4935      	ldr	r1, [pc, #212]	@ (8001bd8 <HAL_GPIO_Init+0x310>)
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	3302      	adds	r3, #2
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001bfc <HAL_GPIO_Init+0x334>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b32:	4a32      	ldr	r2, [pc, #200]	@ (8001bfc <HAL_GPIO_Init+0x334>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b38:	4b30      	ldr	r3, [pc, #192]	@ (8001bfc <HAL_GPIO_Init+0x334>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b5c:	4a27      	ldr	r2, [pc, #156]	@ (8001bfc <HAL_GPIO_Init+0x334>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b62:	4b26      	ldr	r3, [pc, #152]	@ (8001bfc <HAL_GPIO_Init+0x334>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b86:	4a1d      	ldr	r2, [pc, #116]	@ (8001bfc <HAL_GPIO_Init+0x334>)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <HAL_GPIO_Init+0x334>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bb0:	4a12      	ldr	r2, [pc, #72]	@ (8001bfc <HAL_GPIO_Init+0x334>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	61fb      	str	r3, [r7, #28]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	2b0f      	cmp	r3, #15
 8001bc0:	f67f ae90 	bls.w	80018e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	3724      	adds	r7, #36	@ 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40013800 	.word	0x40013800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40020400 	.word	0x40020400
 8001be4:	40020800 	.word	0x40020800
 8001be8:	40020c00 	.word	0x40020c00
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40021400 	.word	0x40021400
 8001bf4:	40021800 	.word	0x40021800
 8001bf8:	40021c00 	.word	0x40021c00
 8001bfc:	40013c00 	.word	0x40013c00

08001c00 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b087      	sub	sp, #28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	e0cd      	b.n	8001db8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	f040 80bd 	bne.w	8001db2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001c38:	4a65      	ldr	r2, [pc, #404]	@ (8001dd0 <HAL_GPIO_DeInit+0x1d0>)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	220f      	movs	r2, #15
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	4013      	ands	r3, r2
 8001c58:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a5d      	ldr	r2, [pc, #372]	@ (8001dd4 <HAL_GPIO_DeInit+0x1d4>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d02b      	beq.n	8001cba <HAL_GPIO_DeInit+0xba>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a5c      	ldr	r2, [pc, #368]	@ (8001dd8 <HAL_GPIO_DeInit+0x1d8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d025      	beq.n	8001cb6 <HAL_GPIO_DeInit+0xb6>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a5b      	ldr	r2, [pc, #364]	@ (8001ddc <HAL_GPIO_DeInit+0x1dc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d01f      	beq.n	8001cb2 <HAL_GPIO_DeInit+0xb2>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a5a      	ldr	r2, [pc, #360]	@ (8001de0 <HAL_GPIO_DeInit+0x1e0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d019      	beq.n	8001cae <HAL_GPIO_DeInit+0xae>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a59      	ldr	r2, [pc, #356]	@ (8001de4 <HAL_GPIO_DeInit+0x1e4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_GPIO_DeInit+0xaa>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a58      	ldr	r2, [pc, #352]	@ (8001de8 <HAL_GPIO_DeInit+0x1e8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00d      	beq.n	8001ca6 <HAL_GPIO_DeInit+0xa6>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a57      	ldr	r2, [pc, #348]	@ (8001dec <HAL_GPIO_DeInit+0x1ec>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d007      	beq.n	8001ca2 <HAL_GPIO_DeInit+0xa2>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a56      	ldr	r2, [pc, #344]	@ (8001df0 <HAL_GPIO_DeInit+0x1f0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d101      	bne.n	8001c9e <HAL_GPIO_DeInit+0x9e>
 8001c9a:	2307      	movs	r3, #7
 8001c9c:	e00e      	b.n	8001cbc <HAL_GPIO_DeInit+0xbc>
 8001c9e:	2308      	movs	r3, #8
 8001ca0:	e00c      	b.n	8001cbc <HAL_GPIO_DeInit+0xbc>
 8001ca2:	2306      	movs	r3, #6
 8001ca4:	e00a      	b.n	8001cbc <HAL_GPIO_DeInit+0xbc>
 8001ca6:	2305      	movs	r3, #5
 8001ca8:	e008      	b.n	8001cbc <HAL_GPIO_DeInit+0xbc>
 8001caa:	2304      	movs	r3, #4
 8001cac:	e006      	b.n	8001cbc <HAL_GPIO_DeInit+0xbc>
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e004      	b.n	8001cbc <HAL_GPIO_DeInit+0xbc>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e002      	b.n	8001cbc <HAL_GPIO_DeInit+0xbc>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_GPIO_DeInit+0xbc>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	f002 0203 	and.w	r2, r2, #3
 8001cc2:	0092      	lsls	r2, r2, #2
 8001cc4:	4093      	lsls	r3, r2
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d132      	bne.n	8001d32 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001ccc:	4b49      	ldr	r3, [pc, #292]	@ (8001df4 <HAL_GPIO_DeInit+0x1f4>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	4947      	ldr	r1, [pc, #284]	@ (8001df4 <HAL_GPIO_DeInit+0x1f4>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001cda:	4b46      	ldr	r3, [pc, #280]	@ (8001df4 <HAL_GPIO_DeInit+0x1f4>)
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4944      	ldr	r1, [pc, #272]	@ (8001df4 <HAL_GPIO_DeInit+0x1f4>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001ce8:	4b42      	ldr	r3, [pc, #264]	@ (8001df4 <HAL_GPIO_DeInit+0x1f4>)
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	4940      	ldr	r1, [pc, #256]	@ (8001df4 <HAL_GPIO_DeInit+0x1f4>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001cf6:	4b3f      	ldr	r3, [pc, #252]	@ (8001df4 <HAL_GPIO_DeInit+0x1f4>)
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	493d      	ldr	r1, [pc, #244]	@ (8001df4 <HAL_GPIO_DeInit+0x1f4>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001d14:	4a2e      	ldr	r2, [pc, #184]	@ (8001dd0 <HAL_GPIO_DeInit+0x1d0>)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	43da      	mvns	r2, r3
 8001d24:	482a      	ldr	r0, [pc, #168]	@ (8001dd0 <HAL_GPIO_DeInit+0x1d0>)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	400a      	ands	r2, r1
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	2103      	movs	r1, #3
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	401a      	ands	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	08da      	lsrs	r2, r3, #3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3208      	adds	r2, #8
 8001d50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	08d2      	lsrs	r2, r2, #3
 8001d68:	4019      	ands	r1, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3208      	adds	r2, #8
 8001d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2103      	movs	r1, #3
 8001d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	401a      	ands	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	fa01 f303 	lsl.w	r3, r1, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	401a      	ands	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	2103      	movs	r1, #3
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	401a      	ands	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3301      	adds	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b0f      	cmp	r3, #15
 8001dbc:	f67f af2e 	bls.w	8001c1c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	371c      	adds	r7, #28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40013800 	.word	0x40013800
 8001dd4:	40020000 	.word	0x40020000
 8001dd8:	40020400 	.word	0x40020400
 8001ddc:	40020800 	.word	0x40020800
 8001de0:	40020c00 	.word	0x40020c00
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40021400 	.word	0x40021400
 8001dec:	40021800 	.word	0x40021800
 8001df0:	40021c00 	.word	0x40021c00
 8001df4:	40013c00 	.word	0x40013c00

08001df8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	887b      	ldrh	r3, [r7, #2]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d002      	beq.n	8001e16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e10:	2301      	movs	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	e001      	b.n	8001e1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	807b      	strh	r3, [r7, #2]
 8001e34:	4613      	mov	r3, r2
 8001e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e38:	787b      	ldrb	r3, [r7, #1]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e3e:	887a      	ldrh	r2, [r7, #2]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e44:	e003      	b.n	8001e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e46:	887b      	ldrh	r3, [r7, #2]
 8001e48:	041a      	lsls	r2, r3, #16
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	619a      	str	r2, [r3, #24]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e12b      	b.n	80020c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff f9d0 	bl	8001228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2224      	movs	r2, #36	@ 0x24
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001eae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ebe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ec0:	f002 fbde 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 8001ec4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4a81      	ldr	r2, [pc, #516]	@ (80020d0 <HAL_I2C_Init+0x274>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d807      	bhi.n	8001ee0 <HAL_I2C_Init+0x84>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4a80      	ldr	r2, [pc, #512]	@ (80020d4 <HAL_I2C_Init+0x278>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	bf94      	ite	ls
 8001ed8:	2301      	movls	r3, #1
 8001eda:	2300      	movhi	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	e006      	b.n	8001eee <HAL_I2C_Init+0x92>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4a7d      	ldr	r2, [pc, #500]	@ (80020d8 <HAL_I2C_Init+0x27c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	bf94      	ite	ls
 8001ee8:	2301      	movls	r3, #1
 8001eea:	2300      	movhi	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e0e7      	b.n	80020c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4a78      	ldr	r2, [pc, #480]	@ (80020dc <HAL_I2C_Init+0x280>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	0c9b      	lsrs	r3, r3, #18
 8001f00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4a6a      	ldr	r2, [pc, #424]	@ (80020d0 <HAL_I2C_Init+0x274>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d802      	bhi.n	8001f30 <HAL_I2C_Init+0xd4>
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	e009      	b.n	8001f44 <HAL_I2C_Init+0xe8>
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	4a69      	ldr	r2, [pc, #420]	@ (80020e0 <HAL_I2C_Init+0x284>)
 8001f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f40:	099b      	lsrs	r3, r3, #6
 8001f42:	3301      	adds	r3, #1
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	495c      	ldr	r1, [pc, #368]	@ (80020d0 <HAL_I2C_Init+0x274>)
 8001f60:	428b      	cmp	r3, r1
 8001f62:	d819      	bhi.n	8001f98 <HAL_I2C_Init+0x13c>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1e59      	subs	r1, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f72:	1c59      	adds	r1, r3, #1
 8001f74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f78:	400b      	ands	r3, r1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00a      	beq.n	8001f94 <HAL_I2C_Init+0x138>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1e59      	subs	r1, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f92:	e051      	b.n	8002038 <HAL_I2C_Init+0x1dc>
 8001f94:	2304      	movs	r3, #4
 8001f96:	e04f      	b.n	8002038 <HAL_I2C_Init+0x1dc>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d111      	bne.n	8001fc4 <HAL_I2C_Init+0x168>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1e58      	subs	r0, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6859      	ldr	r1, [r3, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	440b      	add	r3, r1
 8001fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	bf0c      	ite	eq
 8001fbc:	2301      	moveq	r3, #1
 8001fbe:	2300      	movne	r3, #0
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	e012      	b.n	8001fea <HAL_I2C_Init+0x18e>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1e58      	subs	r0, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6859      	ldr	r1, [r3, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	0099      	lsls	r1, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	bf0c      	ite	eq
 8001fe4:	2301      	moveq	r3, #1
 8001fe6:	2300      	movne	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_I2C_Init+0x196>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e022      	b.n	8002038 <HAL_I2C_Init+0x1dc>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10e      	bne.n	8002018 <HAL_I2C_Init+0x1bc>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1e58      	subs	r0, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6859      	ldr	r1, [r3, #4]
 8002002:	460b      	mov	r3, r1
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	440b      	add	r3, r1
 8002008:	fbb0 f3f3 	udiv	r3, r0, r3
 800200c:	3301      	adds	r3, #1
 800200e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002016:	e00f      	b.n	8002038 <HAL_I2C_Init+0x1dc>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1e58      	subs	r0, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6859      	ldr	r1, [r3, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	0099      	lsls	r1, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	fbb0 f3f3 	udiv	r3, r0, r3
 800202e:	3301      	adds	r3, #1
 8002030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002034:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	6809      	ldr	r1, [r1, #0]
 800203c:	4313      	orrs	r3, r2
 800203e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69da      	ldr	r2, [r3, #28]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002066:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6911      	ldr	r1, [r2, #16]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68d2      	ldr	r2, [r2, #12]
 8002072:	4311      	orrs	r1, r2
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	430b      	orrs	r3, r1
 800207a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0201 	orr.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2220      	movs	r2, #32
 80020b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	000186a0 	.word	0x000186a0
 80020d4:	001e847f 	.word	0x001e847f
 80020d8:	003d08ff 	.word	0x003d08ff
 80020dc:	431bde83 	.word	0x431bde83
 80020e0:	10624dd3 	.word	0x10624dd3

080020e4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e021      	b.n	800213a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2224      	movs	r2, #36	@ 0x24
 80020fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0201 	bic.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff f8d2 	bl	80012b8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af02      	add	r7, sp, #8
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	461a      	mov	r2, r3
 8002150:	460b      	mov	r3, r1
 8002152:	817b      	strh	r3, [r7, #10]
 8002154:	4613      	mov	r3, r2
 8002156:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002158:	f7ff faa0 	bl	800169c <HAL_GetTick>
 800215c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b20      	cmp	r3, #32
 8002168:	f040 80e0 	bne.w	800232c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	2319      	movs	r3, #25
 8002172:	2201      	movs	r2, #1
 8002174:	4970      	ldr	r1, [pc, #448]	@ (8002338 <HAL_I2C_Master_Transmit+0x1f4>)
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 ff3c 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002182:	2302      	movs	r3, #2
 8002184:	e0d3      	b.n	800232e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_I2C_Master_Transmit+0x50>
 8002190:	2302      	movs	r3, #2
 8002192:	e0cc      	b.n	800232e <HAL_I2C_Master_Transmit+0x1ea>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d007      	beq.n	80021ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0201 	orr.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2221      	movs	r2, #33	@ 0x21
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2210      	movs	r2, #16
 80021d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	893a      	ldrh	r2, [r7, #8]
 80021ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4a50      	ldr	r2, [pc, #320]	@ (800233c <HAL_I2C_Master_Transmit+0x1f8>)
 80021fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021fc:	8979      	ldrh	r1, [r7, #10]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	6a3a      	ldr	r2, [r7, #32]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fcf6 	bl	8002bf4 <I2C_MasterRequestWrite>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e08d      	b.n	800232e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002228:	e066      	b.n	80022f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	6a39      	ldr	r1, [r7, #32]
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 fffa 	bl	8003228 <I2C_WaitOnTXEFlagUntilTimeout>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00d      	beq.n	8002256 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	2b04      	cmp	r3, #4
 8002240:	d107      	bne.n	8002252 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002250:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e06b      	b.n	800232e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225a:	781a      	ldrb	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002270:	b29b      	uxth	r3, r3
 8002272:	3b01      	subs	r3, #1
 8002274:	b29a      	uxth	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b04      	cmp	r3, #4
 8002292:	d11b      	bne.n	80022cc <HAL_I2C_Master_Transmit+0x188>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002298:	2b00      	cmp	r3, #0
 800229a:	d017      	beq.n	80022cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a0:	781a      	ldrb	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	6a39      	ldr	r1, [r7, #32]
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 fff1 	bl	80032b8 <I2C_WaitOnBTFFlagUntilTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00d      	beq.n	80022f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d107      	bne.n	80022f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e01a      	b.n	800232e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d194      	bne.n	800222a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800230e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	e000      	b.n	800232e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800232c:	2302      	movs	r3, #2
  }
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	00100002 	.word	0x00100002
 800233c:	ffff0000 	.word	0xffff0000

08002340 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af02      	add	r7, sp, #8
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	4608      	mov	r0, r1
 800234a:	4611      	mov	r1, r2
 800234c:	461a      	mov	r2, r3
 800234e:	4603      	mov	r3, r0
 8002350:	817b      	strh	r3, [r7, #10]
 8002352:	460b      	mov	r3, r1
 8002354:	813b      	strh	r3, [r7, #8]
 8002356:	4613      	mov	r3, r2
 8002358:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800235a:	f7ff f99f 	bl	800169c <HAL_GetTick>
 800235e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b20      	cmp	r3, #32
 800236a:	f040 80d9 	bne.w	8002520 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	2319      	movs	r3, #25
 8002374:	2201      	movs	r2, #1
 8002376:	496d      	ldr	r1, [pc, #436]	@ (800252c <HAL_I2C_Mem_Write+0x1ec>)
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 fe3b 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002384:	2302      	movs	r3, #2
 8002386:	e0cc      	b.n	8002522 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_I2C_Mem_Write+0x56>
 8002392:	2302      	movs	r3, #2
 8002394:	e0c5      	b.n	8002522 <HAL_I2C_Mem_Write+0x1e2>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d007      	beq.n	80023bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2221      	movs	r2, #33	@ 0x21
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2240      	movs	r2, #64	@ 0x40
 80023d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a3a      	ldr	r2, [r7, #32]
 80023e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4a4d      	ldr	r2, [pc, #308]	@ (8002530 <HAL_I2C_Mem_Write+0x1f0>)
 80023fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023fe:	88f8      	ldrh	r0, [r7, #6]
 8002400:	893a      	ldrh	r2, [r7, #8]
 8002402:	8979      	ldrh	r1, [r7, #10]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	4603      	mov	r3, r0
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fc72 	bl	8002cf8 <I2C_RequestMemoryWrite>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d052      	beq.n	80024c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e081      	b.n	8002522 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 ff00 	bl	8003228 <I2C_WaitOnTXEFlagUntilTimeout>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00d      	beq.n	800244a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	2b04      	cmp	r3, #4
 8002434:	d107      	bne.n	8002446 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002444:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e06b      	b.n	8002522 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244e:	781a      	ldrb	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b04      	cmp	r3, #4
 8002486:	d11b      	bne.n	80024c0 <HAL_I2C_Mem_Write+0x180>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800248c:	2b00      	cmp	r3, #0
 800248e:	d017      	beq.n	80024c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	781a      	ldrb	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1aa      	bne.n	800241e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fef3 	bl	80032b8 <I2C_WaitOnBTFFlagUntilTimeout>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00d      	beq.n	80024f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d107      	bne.n	80024f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e016      	b.n	8002522 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	e000      	b.n	8002522 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002520:	2302      	movs	r3, #2
  }
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	00100002 	.word	0x00100002
 8002530:	ffff0000 	.word	0xffff0000

08002534 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08c      	sub	sp, #48	@ 0x30
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	4608      	mov	r0, r1
 800253e:	4611      	mov	r1, r2
 8002540:	461a      	mov	r2, r3
 8002542:	4603      	mov	r3, r0
 8002544:	817b      	strh	r3, [r7, #10]
 8002546:	460b      	mov	r3, r1
 8002548:	813b      	strh	r3, [r7, #8]
 800254a:	4613      	mov	r3, r2
 800254c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800254e:	f7ff f8a5 	bl	800169c <HAL_GetTick>
 8002552:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b20      	cmp	r3, #32
 800255e:	f040 8214 	bne.w	800298a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2319      	movs	r3, #25
 8002568:	2201      	movs	r2, #1
 800256a:	497b      	ldr	r1, [pc, #492]	@ (8002758 <HAL_I2C_Mem_Read+0x224>)
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 fd41 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002578:	2302      	movs	r3, #2
 800257a:	e207      	b.n	800298c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_I2C_Mem_Read+0x56>
 8002586:	2302      	movs	r3, #2
 8002588:	e200      	b.n	800298c <HAL_I2C_Mem_Read+0x458>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b01      	cmp	r3, #1
 800259e:	d007      	beq.n	80025b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2222      	movs	r2, #34	@ 0x22
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2240      	movs	r2, #64	@ 0x40
 80025cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80025e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4a5b      	ldr	r2, [pc, #364]	@ (800275c <HAL_I2C_Mem_Read+0x228>)
 80025f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025f2:	88f8      	ldrh	r0, [r7, #6]
 80025f4:	893a      	ldrh	r2, [r7, #8]
 80025f6:	8979      	ldrh	r1, [r7, #10]
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	4603      	mov	r3, r0
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 fc0e 	bl	8002e24 <I2C_RequestMemoryRead>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e1bc      	b.n	800298c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002616:	2b00      	cmp	r3, #0
 8002618:	d113      	bne.n	8002642 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800261a:	2300      	movs	r3, #0
 800261c:	623b      	str	r3, [r7, #32]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	623b      	str	r3, [r7, #32]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	623b      	str	r3, [r7, #32]
 800262e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	e190      	b.n	8002964 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002646:	2b01      	cmp	r3, #1
 8002648:	d11b      	bne.n	8002682 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002658:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	e170      	b.n	8002964 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002686:	2b02      	cmp	r3, #2
 8002688:	d11b      	bne.n	80026c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002698:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026aa:	2300      	movs	r3, #0
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	61bb      	str	r3, [r7, #24]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	e150      	b.n	8002964 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026d8:	e144      	b.n	8002964 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026de:	2b03      	cmp	r3, #3
 80026e0:	f200 80f1 	bhi.w	80028c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d123      	bne.n	8002734 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 fe29 	bl	8003348 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e145      	b.n	800298c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002712:	1c5a      	adds	r2, r3, #1
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002728:	b29b      	uxth	r3, r3
 800272a:	3b01      	subs	r3, #1
 800272c:	b29a      	uxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002732:	e117      	b.n	8002964 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002738:	2b02      	cmp	r3, #2
 800273a:	d14e      	bne.n	80027da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002742:	2200      	movs	r2, #0
 8002744:	4906      	ldr	r1, [pc, #24]	@ (8002760 <HAL_I2C_Mem_Read+0x22c>)
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 fc54 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d008      	beq.n	8002764 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e11a      	b.n	800298c <HAL_I2C_Mem_Read+0x458>
 8002756:	bf00      	nop
 8002758:	00100002 	.word	0x00100002
 800275c:	ffff0000 	.word	0xffff0000
 8002760:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002772:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279c:	b29b      	uxth	r3, r3
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027d8:	e0c4      	b.n	8002964 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e0:	2200      	movs	r2, #0
 80027e2:	496c      	ldr	r1, [pc, #432]	@ (8002994 <HAL_I2C_Mem_Read+0x460>)
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 fc05 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0cb      	b.n	800298c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002802:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282c:	b29b      	uxth	r3, r3
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800283c:	2200      	movs	r2, #0
 800283e:	4955      	ldr	r1, [pc, #340]	@ (8002994 <HAL_I2C_Mem_Read+0x460>)
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 fbd7 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e09d      	b.n	800298c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800285e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002888:	b29b      	uxth	r3, r3
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028c4:	e04e      	b.n	8002964 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 fd3c 	bl	8003348 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e058      	b.n	800298c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b04      	cmp	r3, #4
 8002918:	d124      	bne.n	8002964 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291e:	2b03      	cmp	r3, #3
 8002920:	d107      	bne.n	8002932 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002930:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002968:	2b00      	cmp	r3, #0
 800296a:	f47f aeb6 	bne.w	80026da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	e000      	b.n	800298c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800298a:	2302      	movs	r3, #2
  }
}
 800298c:	4618      	mov	r0, r3
 800298e:	3728      	adds	r7, #40	@ 0x28
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	00010004 	.word	0x00010004

08002998 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	@ 0x28
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	460b      	mov	r3, r1
 80029a6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80029a8:	f7fe fe78 	bl	800169c <HAL_GetTick>
 80029ac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	f040 8111 	bne.w	8002be2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2319      	movs	r3, #25
 80029c6:	2201      	movs	r2, #1
 80029c8:	4988      	ldr	r1, [pc, #544]	@ (8002bec <HAL_I2C_IsDeviceReady+0x254>)
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 fb12 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80029d6:	2302      	movs	r3, #2
 80029d8:	e104      	b.n	8002be4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_I2C_IsDeviceReady+0x50>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e0fd      	b.n	8002be4 <HAL_I2C_IsDeviceReady+0x24c>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d007      	beq.n	8002a0e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2224      	movs	r2, #36	@ 0x24
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4a70      	ldr	r2, [pc, #448]	@ (8002bf0 <HAL_I2C_IsDeviceReady+0x258>)
 8002a30:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a40:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 fad0 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00d      	beq.n	8002a76 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a68:	d103      	bne.n	8002a72 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a70:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e0b6      	b.n	8002be4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a76:	897b      	ldrh	r3, [r7, #10]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a84:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002a86:	f7fe fe09 	bl	800169c <HAL_GetTick>
 8002a8a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	bf0c      	ite	eq
 8002a9a:	2301      	moveq	r3, #1
 8002a9c:	2300      	movne	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ab0:	bf0c      	ite	eq
 8002ab2:	2301      	moveq	r3, #1
 8002ab4:	2300      	movne	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002aba:	e025      	b.n	8002b08 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002abc:	f7fe fdee 	bl	800169c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d302      	bcc.n	8002ad2 <HAL_I2C_IsDeviceReady+0x13a>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d103      	bne.n	8002ada <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	22a0      	movs	r2, #160	@ 0xa0
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b12:	d005      	beq.n	8002b20 <HAL_I2C_IsDeviceReady+0x188>
 8002b14:	7dfb      	ldrb	r3, [r7, #23]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d102      	bne.n	8002b20 <HAL_I2C_IsDeviceReady+0x188>
 8002b1a:	7dbb      	ldrb	r3, [r7, #22]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0cd      	beq.n	8002abc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d129      	bne.n	8002b8a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b44:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	2319      	movs	r3, #25
 8002b62:	2201      	movs	r2, #1
 8002b64:	4921      	ldr	r1, [pc, #132]	@ (8002bec <HAL_I2C_IsDeviceReady+0x254>)
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 fa44 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e036      	b.n	8002be4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	e02c      	b.n	8002be4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b98:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ba2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	2319      	movs	r3, #25
 8002baa:	2201      	movs	r2, #1
 8002bac:	490f      	ldr	r1, [pc, #60]	@ (8002bec <HAL_I2C_IsDeviceReady+0x254>)
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fa20 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e012      	b.n	8002be4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	f4ff af32 	bcc.w	8002a32 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002be2:	2302      	movs	r3, #2
  }
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3720      	adds	r7, #32
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	00100002 	.word	0x00100002
 8002bf0:	ffff0000 	.word	0xffff0000

08002bf4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	607a      	str	r2, [r7, #4]
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	460b      	mov	r3, r1
 8002c02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d006      	beq.n	8002c1e <I2C_MasterRequestWrite+0x2a>
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d003      	beq.n	8002c1e <I2C_MasterRequestWrite+0x2a>
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c1c:	d108      	bne.n	8002c30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e00b      	b.n	8002c48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c34:	2b12      	cmp	r3, #18
 8002c36:	d107      	bne.n	8002c48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f9cd 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00d      	beq.n	8002c7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c6e:	d103      	bne.n	8002c78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e035      	b.n	8002ce8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c84:	d108      	bne.n	8002c98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c86:	897b      	ldrh	r3, [r7, #10]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c94:	611a      	str	r2, [r3, #16]
 8002c96:	e01b      	b.n	8002cd0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c98:	897b      	ldrh	r3, [r7, #10]
 8002c9a:	11db      	asrs	r3, r3, #7
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	f003 0306 	and.w	r3, r3, #6
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f063 030f 	orn	r3, r3, #15
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	490e      	ldr	r1, [pc, #56]	@ (8002cf0 <I2C_MasterRequestWrite+0xfc>)
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fa16 	bl	80030e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e010      	b.n	8002ce8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cc6:	897b      	ldrh	r3, [r7, #10]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	4907      	ldr	r1, [pc, #28]	@ (8002cf4 <I2C_MasterRequestWrite+0x100>)
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 fa06 	bl	80030e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	00010008 	.word	0x00010008
 8002cf4:	00010002 	.word	0x00010002

08002cf8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	4608      	mov	r0, r1
 8002d02:	4611      	mov	r1, r2
 8002d04:	461a      	mov	r2, r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	817b      	strh	r3, [r7, #10]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	813b      	strh	r3, [r7, #8]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f960 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00d      	beq.n	8002d56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d48:	d103      	bne.n	8002d52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e05f      	b.n	8002e16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d56:	897b      	ldrh	r3, [r7, #10]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d68:	6a3a      	ldr	r2, [r7, #32]
 8002d6a:	492d      	ldr	r1, [pc, #180]	@ (8002e20 <I2C_RequestMemoryWrite+0x128>)
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f9bb 	bl	80030e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e04c      	b.n	8002e16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d94:	6a39      	ldr	r1, [r7, #32]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fa46 	bl	8003228 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00d      	beq.n	8002dbe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d107      	bne.n	8002dba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e02b      	b.n	8002e16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dbe:	88fb      	ldrh	r3, [r7, #6]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d105      	bne.n	8002dd0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dc4:	893b      	ldrh	r3, [r7, #8]
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	611a      	str	r2, [r3, #16]
 8002dce:	e021      	b.n	8002e14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002dd0:	893b      	ldrh	r3, [r7, #8]
 8002dd2:	0a1b      	lsrs	r3, r3, #8
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de0:	6a39      	ldr	r1, [r7, #32]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fa20 	bl	8003228 <I2C_WaitOnTXEFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00d      	beq.n	8002e0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d107      	bne.n	8002e06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e005      	b.n	8002e16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e0a:	893b      	ldrh	r3, [r7, #8]
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	00010002 	.word	0x00010002

08002e24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	4608      	mov	r0, r1
 8002e2e:	4611      	mov	r1, r2
 8002e30:	461a      	mov	r2, r3
 8002e32:	4603      	mov	r3, r0
 8002e34:	817b      	strh	r3, [r7, #10]
 8002e36:	460b      	mov	r3, r1
 8002e38:	813b      	strh	r3, [r7, #8]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f8c2 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00d      	beq.n	8002e92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e84:	d103      	bne.n	8002e8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e0aa      	b.n	8002fe8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e92:	897b      	ldrh	r3, [r7, #10]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ea0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	6a3a      	ldr	r2, [r7, #32]
 8002ea6:	4952      	ldr	r1, [pc, #328]	@ (8002ff0 <I2C_RequestMemoryRead+0x1cc>)
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f91d 	bl	80030e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e097      	b.n	8002fe8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed0:	6a39      	ldr	r1, [r7, #32]
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f9a8 	bl	8003228 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00d      	beq.n	8002efa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d107      	bne.n	8002ef6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ef4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e076      	b.n	8002fe8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d105      	bne.n	8002f0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f00:	893b      	ldrh	r3, [r7, #8]
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	611a      	str	r2, [r3, #16]
 8002f0a:	e021      	b.n	8002f50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f0c:	893b      	ldrh	r3, [r7, #8]
 8002f0e:	0a1b      	lsrs	r3, r3, #8
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f1c:	6a39      	ldr	r1, [r7, #32]
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f982 	bl	8003228 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00d      	beq.n	8002f46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d107      	bne.n	8002f42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e050      	b.n	8002fe8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f46:	893b      	ldrh	r3, [r7, #8]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f52:	6a39      	ldr	r1, [r7, #32]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f967 	bl	8003228 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00d      	beq.n	8002f7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d107      	bne.n	8002f78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e035      	b.n	8002fe8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 f82b 	bl	8002ff4 <I2C_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00d      	beq.n	8002fc0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fb2:	d103      	bne.n	8002fbc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e013      	b.n	8002fe8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002fc0:	897b      	ldrh	r3, [r7, #10]
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd2:	6a3a      	ldr	r2, [r7, #32]
 8002fd4:	4906      	ldr	r1, [pc, #24]	@ (8002ff0 <I2C_RequestMemoryRead+0x1cc>)
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f886 	bl	80030e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	00010002 	.word	0x00010002

08002ff4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	4613      	mov	r3, r2
 8003002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003004:	e048      	b.n	8003098 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d044      	beq.n	8003098 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300e:	f7fe fb45 	bl	800169c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d302      	bcc.n	8003024 <I2C_WaitOnFlagUntilTimeout+0x30>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d139      	bne.n	8003098 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	0c1b      	lsrs	r3, r3, #16
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b01      	cmp	r3, #1
 800302c:	d10d      	bne.n	800304a <I2C_WaitOnFlagUntilTimeout+0x56>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	43da      	mvns	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4013      	ands	r3, r2
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	e00c      	b.n	8003064 <I2C_WaitOnFlagUntilTimeout+0x70>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	43da      	mvns	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	4013      	ands	r3, r2
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	429a      	cmp	r2, r3
 8003068:	d116      	bne.n	8003098 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003084:	f043 0220 	orr.w	r2, r3, #32
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e023      	b.n	80030e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	0c1b      	lsrs	r3, r3, #16
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d10d      	bne.n	80030be <I2C_WaitOnFlagUntilTimeout+0xca>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	43da      	mvns	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4013      	ands	r3, r2
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	e00c      	b.n	80030d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	43da      	mvns	r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	4013      	ands	r3, r2
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf0c      	ite	eq
 80030d0:	2301      	moveq	r3, #1
 80030d2:	2300      	movne	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d093      	beq.n	8003006 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030f6:	e071      	b.n	80031dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003106:	d123      	bne.n	8003150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003116:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003120:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	f043 0204 	orr.w	r2, r3, #4
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e067      	b.n	8003220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003156:	d041      	beq.n	80031dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003158:	f7fe faa0 	bl	800169c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	429a      	cmp	r2, r3
 8003166:	d302      	bcc.n	800316e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d136      	bne.n	80031dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	0c1b      	lsrs	r3, r3, #16
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d10c      	bne.n	8003192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	43da      	mvns	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	4013      	ands	r3, r2
 8003184:	b29b      	uxth	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	bf14      	ite	ne
 800318a:	2301      	movne	r3, #1
 800318c:	2300      	moveq	r3, #0
 800318e:	b2db      	uxtb	r3, r3
 8003190:	e00b      	b.n	80031aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	43da      	mvns	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	4013      	ands	r3, r2
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf14      	ite	ne
 80031a4:	2301      	movne	r3, #1
 80031a6:	2300      	moveq	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d016      	beq.n	80031dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	f043 0220 	orr.w	r2, r3, #32
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e021      	b.n	8003220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	0c1b      	lsrs	r3, r3, #16
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d10c      	bne.n	8003200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	43da      	mvns	r2, r3
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	4013      	ands	r3, r2
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bf14      	ite	ne
 80031f8:	2301      	movne	r3, #1
 80031fa:	2300      	moveq	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	e00b      	b.n	8003218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	43da      	mvns	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4013      	ands	r3, r2
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	bf14      	ite	ne
 8003212:	2301      	movne	r3, #1
 8003214:	2300      	moveq	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	f47f af6d 	bne.w	80030f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003234:	e034      	b.n	80032a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f8e3 	bl	8003402 <I2C_IsAcknowledgeFailed>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e034      	b.n	80032b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324c:	d028      	beq.n	80032a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324e:	f7fe fa25 	bl	800169c <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	429a      	cmp	r2, r3
 800325c:	d302      	bcc.n	8003264 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d11d      	bne.n	80032a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800326e:	2b80      	cmp	r3, #128	@ 0x80
 8003270:	d016      	beq.n	80032a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328c:	f043 0220 	orr.w	r2, r3, #32
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e007      	b.n	80032b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032aa:	2b80      	cmp	r3, #128	@ 0x80
 80032ac:	d1c3      	bne.n	8003236 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032c4:	e034      	b.n	8003330 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f89b 	bl	8003402 <I2C_IsAcknowledgeFailed>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e034      	b.n	8003340 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032dc:	d028      	beq.n	8003330 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032de:	f7fe f9dd 	bl	800169c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d302      	bcc.n	80032f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d11d      	bne.n	8003330 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d016      	beq.n	8003330 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331c:	f043 0220 	orr.w	r2, r3, #32
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e007      	b.n	8003340 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b04      	cmp	r3, #4
 800333c:	d1c3      	bne.n	80032c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003354:	e049      	b.n	80033ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b10      	cmp	r3, #16
 8003362:	d119      	bne.n	8003398 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0210 	mvn.w	r2, #16
 800336c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e030      	b.n	80033fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003398:	f7fe f980 	bl	800169c <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d302      	bcc.n	80033ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d11d      	bne.n	80033ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b8:	2b40      	cmp	r3, #64	@ 0x40
 80033ba:	d016      	beq.n	80033ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d6:	f043 0220 	orr.w	r2, r3, #32
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e007      	b.n	80033fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f4:	2b40      	cmp	r3, #64	@ 0x40
 80033f6:	d1ae      	bne.n	8003356 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003414:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003418:	d11b      	bne.n	8003452 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003422:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	f043 0204 	orr.w	r2, r3, #4
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e128      	b.n	80036c4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d109      	bne.n	8003492 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a90      	ldr	r2, [pc, #576]	@ (80036cc <HAL_I2S_Init+0x26c>)
 800348a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7fd ff35 	bl	80012fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2202      	movs	r2, #2
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80034a8:	f023 030f 	bic.w	r3, r3, #15
 80034ac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2202      	movs	r2, #2
 80034b4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d060      	beq.n	8003580 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d102      	bne.n	80034cc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80034c6:	2310      	movs	r3, #16
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	e001      	b.n	80034d0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80034cc:	2320      	movs	r3, #32
 80034ce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d802      	bhi.n	80034de <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80034de:	2001      	movs	r0, #1
 80034e0:	f001 f9d8 	bl	8004894 <HAL_RCCEx_GetPeriphCLKFreq>
 80034e4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034ee:	d125      	bne.n	800353c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d010      	beq.n	800351a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	461a      	mov	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	fbb2 f3f3 	udiv	r3, r2, r3
 8003514:	3305      	adds	r3, #5
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	e01f      	b.n	800355a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	fbb2 f2f3 	udiv	r2, r2, r3
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	461a      	mov	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	fbb2 f3f3 	udiv	r3, r2, r3
 8003536:	3305      	adds	r3, #5
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	e00e      	b.n	800355a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	fbb2 f2f3 	udiv	r2, r2, r3
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	461a      	mov	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	fbb2 f3f3 	udiv	r3, r2, r3
 8003556:	3305      	adds	r3, #5
 8003558:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4a5c      	ldr	r2, [pc, #368]	@ (80036d0 <HAL_I2S_Init+0x270>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	08db      	lsrs	r3, r3, #3
 8003564:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	085b      	lsrs	r3, r3, #1
 8003576:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	e003      	b.n	8003588 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003580:	2302      	movs	r3, #2
 8003582:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d902      	bls.n	8003594 <HAL_I2S_Init+0x134>
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	2bff      	cmp	r3, #255	@ 0xff
 8003592:	d907      	bls.n	80035a4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003598:	f043 0210 	orr.w	r2, r3, #16
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e08f      	b.n	80036c4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	ea42 0103 	orr.w	r1, r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80035c2:	f023 030f 	bic.w	r3, r3, #15
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6851      	ldr	r1, [r2, #4]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6892      	ldr	r2, [r2, #8]
 80035ce:	4311      	orrs	r1, r2
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	68d2      	ldr	r2, [r2, #12]
 80035d4:	4311      	orrs	r1, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6992      	ldr	r2, [r2, #24]
 80035da:	430a      	orrs	r2, r1
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035e6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d161      	bne.n	80036b4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a38      	ldr	r2, [pc, #224]	@ (80036d4 <HAL_I2S_Init+0x274>)
 80035f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a37      	ldr	r2, [pc, #220]	@ (80036d8 <HAL_I2S_Init+0x278>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d101      	bne.n	8003604 <HAL_I2S_Init+0x1a4>
 8003600:	4b36      	ldr	r3, [pc, #216]	@ (80036dc <HAL_I2S_Init+0x27c>)
 8003602:	e001      	b.n	8003608 <HAL_I2S_Init+0x1a8>
 8003604:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6812      	ldr	r2, [r2, #0]
 800360e:	4932      	ldr	r1, [pc, #200]	@ (80036d8 <HAL_I2S_Init+0x278>)
 8003610:	428a      	cmp	r2, r1
 8003612:	d101      	bne.n	8003618 <HAL_I2S_Init+0x1b8>
 8003614:	4a31      	ldr	r2, [pc, #196]	@ (80036dc <HAL_I2S_Init+0x27c>)
 8003616:	e001      	b.n	800361c <HAL_I2S_Init+0x1bc>
 8003618:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800361c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003620:	f023 030f 	bic.w	r3, r3, #15
 8003624:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a2b      	ldr	r2, [pc, #172]	@ (80036d8 <HAL_I2S_Init+0x278>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d101      	bne.n	8003634 <HAL_I2S_Init+0x1d4>
 8003630:	4b2a      	ldr	r3, [pc, #168]	@ (80036dc <HAL_I2S_Init+0x27c>)
 8003632:	e001      	b.n	8003638 <HAL_I2S_Init+0x1d8>
 8003634:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003638:	2202      	movs	r2, #2
 800363a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a25      	ldr	r2, [pc, #148]	@ (80036d8 <HAL_I2S_Init+0x278>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d101      	bne.n	800364a <HAL_I2S_Init+0x1ea>
 8003646:	4b25      	ldr	r3, [pc, #148]	@ (80036dc <HAL_I2S_Init+0x27c>)
 8003648:	e001      	b.n	800364e <HAL_I2S_Init+0x1ee>
 800364a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800365a:	d003      	beq.n	8003664 <HAL_I2S_Init+0x204>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d103      	bne.n	800366c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003664:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	e001      	b.n	8003670 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800366c:	2300      	movs	r3, #0
 800366e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800367a:	4313      	orrs	r3, r2
 800367c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003684:	4313      	orrs	r3, r2
 8003686:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800368e:	4313      	orrs	r3, r2
 8003690:	b29a      	uxth	r2, r3
 8003692:	897b      	ldrh	r3, [r7, #10]
 8003694:	4313      	orrs	r3, r2
 8003696:	b29b      	uxth	r3, r3
 8003698:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800369c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a0d      	ldr	r2, [pc, #52]	@ (80036d8 <HAL_I2S_Init+0x278>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d101      	bne.n	80036ac <HAL_I2S_Init+0x24c>
 80036a8:	4b0c      	ldr	r3, [pc, #48]	@ (80036dc <HAL_I2S_Init+0x27c>)
 80036aa:	e001      	b.n	80036b0 <HAL_I2S_Init+0x250>
 80036ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036b0:	897a      	ldrh	r2, [r7, #10]
 80036b2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3720      	adds	r7, #32
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	080037d7 	.word	0x080037d7
 80036d0:	cccccccd 	.word	0xcccccccd
 80036d4:	080038ed 	.word	0x080038ed
 80036d8:	40003800 	.word	0x40003800
 80036dc:	40003400 	.word	0x40003400

080036e0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	881a      	ldrh	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	1c9a      	adds	r2, r3, #2
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10e      	bne.n	8003770 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003760:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff ffb8 	bl	80036e0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003770:	bf00      	nop
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378a:	b292      	uxth	r2, r2
 800378c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003792:	1c9a      	adds	r2, r3, #2
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10e      	bne.n	80037ce <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80037be:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff ff93 	bl	80036f4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b086      	sub	sp, #24
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d13a      	bne.n	8003868 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d109      	bne.n	8003810 <I2S_IRQHandler+0x3a>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003806:	2b40      	cmp	r3, #64	@ 0x40
 8003808:	d102      	bne.n	8003810 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff ffb4 	bl	8003778 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003816:	2b40      	cmp	r3, #64	@ 0x40
 8003818:	d126      	bne.n	8003868 <I2S_IRQHandler+0x92>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b20      	cmp	r3, #32
 8003826:	d11f      	bne.n	8003868 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003836:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003838:	2300      	movs	r3, #0
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	613b      	str	r3, [r7, #16]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385a:	f043 0202 	orr.w	r2, r3, #2
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff ff50 	bl	8003708 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b03      	cmp	r3, #3
 8003872:	d136      	bne.n	80038e2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b02      	cmp	r3, #2
 800387c:	d109      	bne.n	8003892 <I2S_IRQHandler+0xbc>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003888:	2b80      	cmp	r3, #128	@ 0x80
 800388a:	d102      	bne.n	8003892 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff ff45 	bl	800371c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b08      	cmp	r3, #8
 800389a:	d122      	bne.n	80038e2 <I2S_IRQHandler+0x10c>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	2b20      	cmp	r3, #32
 80038a8:	d11b      	bne.n	80038e2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80038b8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d4:	f043 0204 	orr.w	r2, r3, #4
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff ff13 	bl	8003708 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038e2:	bf00      	nop
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a92      	ldr	r2, [pc, #584]	@ (8003b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d101      	bne.n	800390a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003906:	4b92      	ldr	r3, [pc, #584]	@ (8003b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003908:	e001      	b.n	800390e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800390a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a8b      	ldr	r2, [pc, #556]	@ (8003b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d101      	bne.n	8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003924:	4b8a      	ldr	r3, [pc, #552]	@ (8003b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003926:	e001      	b.n	800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003928:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003938:	d004      	beq.n	8003944 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	f040 8099 	bne.w	8003a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b02      	cmp	r3, #2
 800394c:	d107      	bne.n	800395e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f925 	bl	8003ba8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b01      	cmp	r3, #1
 8003966:	d107      	bne.n	8003978 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f9c8 	bl	8003d08 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800397e:	2b40      	cmp	r3, #64	@ 0x40
 8003980:	d13a      	bne.n	80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f003 0320 	and.w	r3, r3, #32
 8003988:	2b00      	cmp	r3, #0
 800398a:	d035      	beq.n	80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a6e      	ldr	r2, [pc, #440]	@ (8003b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d101      	bne.n	800399a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003996:	4b6e      	ldr	r3, [pc, #440]	@ (8003b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003998:	e001      	b.n	800399e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800399a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4969      	ldr	r1, [pc, #420]	@ (8003b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039a6:	428b      	cmp	r3, r1
 80039a8:	d101      	bne.n	80039ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80039aa:	4b69      	ldr	r3, [pc, #420]	@ (8003b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039ac:	e001      	b.n	80039b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80039ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80039b6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80039c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039c8:	2300      	movs	r3, #0
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ea:	f043 0202 	orr.w	r2, r3, #2
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff fe88 	bl	8003708 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	f040 80c3 	bne.w	8003b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 80bd 	beq.w	8003b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003a1e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a49      	ldr	r2, [pc, #292]	@ (8003b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d101      	bne.n	8003a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003a2a:	4b49      	ldr	r3, [pc, #292]	@ (8003b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a2c:	e001      	b.n	8003a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003a2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4944      	ldr	r1, [pc, #272]	@ (8003b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a3a:	428b      	cmp	r3, r1
 8003a3c:	d101      	bne.n	8003a42 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003a3e:	4b44      	ldr	r3, [pc, #272]	@ (8003b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a40:	e001      	b.n	8003a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003a42:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a46:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a4a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60bb      	str	r3, [r7, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a66:	f043 0204 	orr.w	r2, r3, #4
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff fe4a 	bl	8003708 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a74:	e089      	b.n	8003b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d107      	bne.n	8003a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f8be 	bl	8003c0c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d107      	bne.n	8003aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f8fd 	bl	8003ca4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab0:	2b40      	cmp	r3, #64	@ 0x40
 8003ab2:	d12f      	bne.n	8003b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d02a      	beq.n	8003b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003acc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8003b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d101      	bne.n	8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ada:	e001      	b.n	8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003adc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4919      	ldr	r1, [pc, #100]	@ (8003b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ae8:	428b      	cmp	r3, r1
 8003aea:	d101      	bne.n	8003af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003aec:	4b18      	ldr	r3, [pc, #96]	@ (8003b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003aee:	e001      	b.n	8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003af0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003af4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003af8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b06:	f043 0202 	orr.w	r2, r3, #2
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff fdfa 	bl	8003708 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d136      	bne.n	8003b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d031      	beq.n	8003b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a07      	ldr	r2, [pc, #28]	@ (8003b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d101      	bne.n	8003b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003b32:	4b07      	ldr	r3, [pc, #28]	@ (8003b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b34:	e001      	b.n	8003b3a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003b36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4902      	ldr	r1, [pc, #8]	@ (8003b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b42:	428b      	cmp	r3, r1
 8003b44:	d106      	bne.n	8003b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003b46:	4b02      	ldr	r3, [pc, #8]	@ (8003b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b48:	e006      	b.n	8003b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003b4a:	bf00      	nop
 8003b4c:	40003800 	.word	0x40003800
 8003b50:	40003400 	.word	0x40003400
 8003b54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b58:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b5c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b6c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7a:	f043 0204 	orr.w	r2, r3, #4
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff fdc0 	bl	8003708 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b88:	e000      	b.n	8003b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b8a:	bf00      	nop
}
 8003b8c:	bf00      	nop
 8003b8e:	3720      	adds	r7, #32
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	1c99      	adds	r1, r3, #2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6251      	str	r1, [r2, #36]	@ 0x24
 8003bba:	881a      	ldrh	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d113      	bne.n	8003c02 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003be8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d106      	bne.n	8003c02 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff ffc9 	bl	8003b94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c18:	1c99      	adds	r1, r3, #2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6251      	str	r1, [r2, #36]	@ 0x24
 8003c1e:	8819      	ldrh	r1, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a1d      	ldr	r2, [pc, #116]	@ (8003c9c <I2SEx_TxISR_I2SExt+0x90>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d101      	bne.n	8003c2e <I2SEx_TxISR_I2SExt+0x22>
 8003c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca0 <I2SEx_TxISR_I2SExt+0x94>)
 8003c2c:	e001      	b.n	8003c32 <I2SEx_TxISR_I2SExt+0x26>
 8003c2e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c32:	460a      	mov	r2, r1
 8003c34:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d121      	bne.n	8003c92 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a12      	ldr	r2, [pc, #72]	@ (8003c9c <I2SEx_TxISR_I2SExt+0x90>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d101      	bne.n	8003c5c <I2SEx_TxISR_I2SExt+0x50>
 8003c58:	4b11      	ldr	r3, [pc, #68]	@ (8003ca0 <I2SEx_TxISR_I2SExt+0x94>)
 8003c5a:	e001      	b.n	8003c60 <I2SEx_TxISR_I2SExt+0x54>
 8003c5c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	490d      	ldr	r1, [pc, #52]	@ (8003c9c <I2SEx_TxISR_I2SExt+0x90>)
 8003c68:	428b      	cmp	r3, r1
 8003c6a:	d101      	bne.n	8003c70 <I2SEx_TxISR_I2SExt+0x64>
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca0 <I2SEx_TxISR_I2SExt+0x94>)
 8003c6e:	e001      	b.n	8003c74 <I2SEx_TxISR_I2SExt+0x68>
 8003c70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c74:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c78:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d106      	bne.n	8003c92 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ff81 	bl	8003b94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c92:	bf00      	nop
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40003800 	.word	0x40003800
 8003ca0:	40003400 	.word	0x40003400

08003ca4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68d8      	ldr	r0, [r3, #12]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb6:	1c99      	adds	r1, r3, #2
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003cbc:	b282      	uxth	r2, r0
 8003cbe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d113      	bne.n	8003d00 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ce6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff ff4a 	bl	8003b94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a20      	ldr	r2, [pc, #128]	@ (8003d98 <I2SEx_RxISR_I2SExt+0x90>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d101      	bne.n	8003d1e <I2SEx_RxISR_I2SExt+0x16>
 8003d1a:	4b20      	ldr	r3, [pc, #128]	@ (8003d9c <I2SEx_RxISR_I2SExt+0x94>)
 8003d1c:	e001      	b.n	8003d22 <I2SEx_RxISR_I2SExt+0x1a>
 8003d1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d22:	68d8      	ldr	r0, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d28:	1c99      	adds	r1, r3, #2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003d2e:	b282      	uxth	r2, r0
 8003d30:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d121      	bne.n	8003d8e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a12      	ldr	r2, [pc, #72]	@ (8003d98 <I2SEx_RxISR_I2SExt+0x90>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d101      	bne.n	8003d58 <I2SEx_RxISR_I2SExt+0x50>
 8003d54:	4b11      	ldr	r3, [pc, #68]	@ (8003d9c <I2SEx_RxISR_I2SExt+0x94>)
 8003d56:	e001      	b.n	8003d5c <I2SEx_RxISR_I2SExt+0x54>
 8003d58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	490d      	ldr	r1, [pc, #52]	@ (8003d98 <I2SEx_RxISR_I2SExt+0x90>)
 8003d64:	428b      	cmp	r3, r1
 8003d66:	d101      	bne.n	8003d6c <I2SEx_RxISR_I2SExt+0x64>
 8003d68:	4b0c      	ldr	r3, [pc, #48]	@ (8003d9c <I2SEx_RxISR_I2SExt+0x94>)
 8003d6a:	e001      	b.n	8003d70 <I2SEx_RxISR_I2SExt+0x68>
 8003d6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d70:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d74:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d106      	bne.n	8003d8e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff ff03 	bl	8003b94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40003800 	.word	0x40003800
 8003d9c:	40003400 	.word	0x40003400

08003da0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e267      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d075      	beq.n	8003eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003dbe:	4b88      	ldr	r3, [pc, #544]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d00c      	beq.n	8003de4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dca:	4b85      	ldr	r3, [pc, #532]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d112      	bne.n	8003dfc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dd6:	4b82      	ldr	r3, [pc, #520]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003de2:	d10b      	bne.n	8003dfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de4:	4b7e      	ldr	r3, [pc, #504]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d05b      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x108>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d157      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e242      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e04:	d106      	bne.n	8003e14 <HAL_RCC_OscConfig+0x74>
 8003e06:	4b76      	ldr	r3, [pc, #472]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a75      	ldr	r2, [pc, #468]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	e01d      	b.n	8003e50 <HAL_RCC_OscConfig+0xb0>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e1c:	d10c      	bne.n	8003e38 <HAL_RCC_OscConfig+0x98>
 8003e1e:	4b70      	ldr	r3, [pc, #448]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a6f      	ldr	r2, [pc, #444]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	4b6d      	ldr	r3, [pc, #436]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a6c      	ldr	r2, [pc, #432]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	e00b      	b.n	8003e50 <HAL_RCC_OscConfig+0xb0>
 8003e38:	4b69      	ldr	r3, [pc, #420]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a68      	ldr	r2, [pc, #416]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	4b66      	ldr	r3, [pc, #408]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a65      	ldr	r2, [pc, #404]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d013      	beq.n	8003e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e58:	f7fd fc20 	bl	800169c <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e60:	f7fd fc1c 	bl	800169c <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b64      	cmp	r3, #100	@ 0x64
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e207      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e72:	4b5b      	ldr	r3, [pc, #364]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0xc0>
 8003e7e:	e014      	b.n	8003eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e80:	f7fd fc0c 	bl	800169c <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e88:	f7fd fc08 	bl	800169c <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b64      	cmp	r3, #100	@ 0x64
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e1f3      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9a:	4b51      	ldr	r3, [pc, #324]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0xe8>
 8003ea6:	e000      	b.n	8003eaa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d063      	beq.n	8003f7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003eb6:	4b4a      	ldr	r3, [pc, #296]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00b      	beq.n	8003eda <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ec2:	4b47      	ldr	r3, [pc, #284]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d11c      	bne.n	8003f08 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ece:	4b44      	ldr	r3, [pc, #272]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d116      	bne.n	8003f08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eda:	4b41      	ldr	r3, [pc, #260]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x152>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d001      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e1c7      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4937      	ldr	r1, [pc, #220]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f06:	e03a      	b.n	8003f7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d020      	beq.n	8003f52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f10:	4b34      	ldr	r3, [pc, #208]	@ (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f16:	f7fd fbc1 	bl	800169c <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f1e:	f7fd fbbd 	bl	800169c <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e1a8      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f30:	4b2b      	ldr	r3, [pc, #172]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0f0      	beq.n	8003f1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f3c:	4b28      	ldr	r3, [pc, #160]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	4925      	ldr	r1, [pc, #148]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	600b      	str	r3, [r1, #0]
 8003f50:	e015      	b.n	8003f7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f52:	4b24      	ldr	r3, [pc, #144]	@ (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7fd fba0 	bl	800169c <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f60:	f7fd fb9c 	bl	800169c <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e187      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f72:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d036      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d016      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f92:	4b15      	ldr	r3, [pc, #84]	@ (8003fe8 <HAL_RCC_OscConfig+0x248>)
 8003f94:	2201      	movs	r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f98:	f7fd fb80 	bl	800169c <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa0:	f7fd fb7c 	bl	800169c <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e167      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x200>
 8003fbe:	e01b      	b.n	8003ff8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fc0:	4b09      	ldr	r3, [pc, #36]	@ (8003fe8 <HAL_RCC_OscConfig+0x248>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc6:	f7fd fb69 	bl	800169c <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fcc:	e00e      	b.n	8003fec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fce:	f7fd fb65 	bl	800169c <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d907      	bls.n	8003fec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e150      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	42470000 	.word	0x42470000
 8003fe8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fec:	4b88      	ldr	r3, [pc, #544]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 8003fee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1ea      	bne.n	8003fce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8097 	beq.w	8004134 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004006:	2300      	movs	r3, #0
 8004008:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800400a:	4b81      	ldr	r3, [pc, #516]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10f      	bne.n	8004036 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	60bb      	str	r3, [r7, #8]
 800401a:	4b7d      	ldr	r3, [pc, #500]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	4a7c      	ldr	r2, [pc, #496]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 8004020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004024:	6413      	str	r3, [r2, #64]	@ 0x40
 8004026:	4b7a      	ldr	r3, [pc, #488]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004032:	2301      	movs	r3, #1
 8004034:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004036:	4b77      	ldr	r3, [pc, #476]	@ (8004214 <HAL_RCC_OscConfig+0x474>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403e:	2b00      	cmp	r3, #0
 8004040:	d118      	bne.n	8004074 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004042:	4b74      	ldr	r3, [pc, #464]	@ (8004214 <HAL_RCC_OscConfig+0x474>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a73      	ldr	r2, [pc, #460]	@ (8004214 <HAL_RCC_OscConfig+0x474>)
 8004048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800404c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800404e:	f7fd fb25 	bl	800169c <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004056:	f7fd fb21 	bl	800169c <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e10c      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004068:	4b6a      	ldr	r3, [pc, #424]	@ (8004214 <HAL_RCC_OscConfig+0x474>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d106      	bne.n	800408a <HAL_RCC_OscConfig+0x2ea>
 800407c:	4b64      	ldr	r3, [pc, #400]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 800407e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004080:	4a63      	ldr	r2, [pc, #396]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	6713      	str	r3, [r2, #112]	@ 0x70
 8004088:	e01c      	b.n	80040c4 <HAL_RCC_OscConfig+0x324>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b05      	cmp	r3, #5
 8004090:	d10c      	bne.n	80040ac <HAL_RCC_OscConfig+0x30c>
 8004092:	4b5f      	ldr	r3, [pc, #380]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004096:	4a5e      	ldr	r2, [pc, #376]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 8004098:	f043 0304 	orr.w	r3, r3, #4
 800409c:	6713      	str	r3, [r2, #112]	@ 0x70
 800409e:	4b5c      	ldr	r3, [pc, #368]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a2:	4a5b      	ldr	r2, [pc, #364]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040aa:	e00b      	b.n	80040c4 <HAL_RCC_OscConfig+0x324>
 80040ac:	4b58      	ldr	r3, [pc, #352]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 80040ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b0:	4a57      	ldr	r2, [pc, #348]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b8:	4b55      	ldr	r3, [pc, #340]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040bc:	4a54      	ldr	r2, [pc, #336]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 80040be:	f023 0304 	bic.w	r3, r3, #4
 80040c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d015      	beq.n	80040f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040cc:	f7fd fae6 	bl	800169c <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d2:	e00a      	b.n	80040ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d4:	f7fd fae2 	bl	800169c <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e0cb      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ea:	4b49      	ldr	r3, [pc, #292]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 80040ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ee      	beq.n	80040d4 <HAL_RCC_OscConfig+0x334>
 80040f6:	e014      	b.n	8004122 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f8:	f7fd fad0 	bl	800169c <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040fe:	e00a      	b.n	8004116 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004100:	f7fd facc 	bl	800169c <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e0b5      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004116:	4b3e      	ldr	r3, [pc, #248]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 8004118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1ee      	bne.n	8004100 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004122:	7dfb      	ldrb	r3, [r7, #23]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d105      	bne.n	8004134 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004128:	4b39      	ldr	r3, [pc, #228]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 800412a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412c:	4a38      	ldr	r2, [pc, #224]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 800412e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004132:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 80a1 	beq.w	8004280 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800413e:	4b34      	ldr	r3, [pc, #208]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
 8004146:	2b08      	cmp	r3, #8
 8004148:	d05c      	beq.n	8004204 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d141      	bne.n	80041d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004152:	4b31      	ldr	r3, [pc, #196]	@ (8004218 <HAL_RCC_OscConfig+0x478>)
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fd faa0 	bl	800169c <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004160:	f7fd fa9c 	bl	800169c <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e087      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004172:	4b27      	ldr	r3, [pc, #156]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69da      	ldr	r2, [r3, #28]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	019b      	lsls	r3, r3, #6
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004194:	085b      	lsrs	r3, r3, #1
 8004196:	3b01      	subs	r3, #1
 8004198:	041b      	lsls	r3, r3, #16
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a0:	061b      	lsls	r3, r3, #24
 80041a2:	491b      	ldr	r1, [pc, #108]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004218 <HAL_RCC_OscConfig+0x478>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ae:	f7fd fa75 	bl	800169c <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b6:	f7fd fa71 	bl	800169c <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e05c      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c8:	4b11      	ldr	r3, [pc, #68]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x416>
 80041d4:	e054      	b.n	8004280 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d6:	4b10      	ldr	r3, [pc, #64]	@ (8004218 <HAL_RCC_OscConfig+0x478>)
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041dc:	f7fd fa5e 	bl	800169c <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e4:	f7fd fa5a 	bl	800169c <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e045      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f6:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f0      	bne.n	80041e4 <HAL_RCC_OscConfig+0x444>
 8004202:	e03d      	b.n	8004280 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d107      	bne.n	800421c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e038      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
 8004210:	40023800 	.word	0x40023800
 8004214:	40007000 	.word	0x40007000
 8004218:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800421c:	4b1b      	ldr	r3, [pc, #108]	@ (800428c <HAL_RCC_OscConfig+0x4ec>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d028      	beq.n	800427c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004234:	429a      	cmp	r2, r3
 8004236:	d121      	bne.n	800427c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004242:	429a      	cmp	r2, r3
 8004244:	d11a      	bne.n	800427c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800424c:	4013      	ands	r3, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004252:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004254:	4293      	cmp	r3, r2
 8004256:	d111      	bne.n	800427c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004262:	085b      	lsrs	r3, r3, #1
 8004264:	3b01      	subs	r3, #1
 8004266:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004268:	429a      	cmp	r2, r3
 800426a:	d107      	bne.n	800427c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004276:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004278:	429a      	cmp	r2, r3
 800427a:	d001      	beq.n	8004280 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40023800 	.word	0x40023800

08004290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0cc      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042a4:	4b68      	ldr	r3, [pc, #416]	@ (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d90c      	bls.n	80042cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b2:	4b65      	ldr	r3, [pc, #404]	@ (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ba:	4b63      	ldr	r3, [pc, #396]	@ (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d001      	beq.n	80042cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0b8      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d020      	beq.n	800431a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042e4:	4b59      	ldr	r3, [pc, #356]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	4a58      	ldr	r2, [pc, #352]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042fc:	4b53      	ldr	r3, [pc, #332]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4a52      	ldr	r2, [pc, #328]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004308:	4b50      	ldr	r3, [pc, #320]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	494d      	ldr	r1, [pc, #308]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d044      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d107      	bne.n	800433e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	4b47      	ldr	r3, [pc, #284]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d119      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e07f      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d003      	beq.n	800434e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800434a:	2b03      	cmp	r3, #3
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434e:	4b3f      	ldr	r3, [pc, #252]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d109      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e06f      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435e:	4b3b      	ldr	r3, [pc, #236]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e067      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800436e:	4b37      	ldr	r3, [pc, #220]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f023 0203 	bic.w	r2, r3, #3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	4934      	ldr	r1, [pc, #208]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 800437c:	4313      	orrs	r3, r2
 800437e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004380:	f7fd f98c 	bl	800169c <HAL_GetTick>
 8004384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004386:	e00a      	b.n	800439e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004388:	f7fd f988 	bl	800169c <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e04f      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439e:	4b2b      	ldr	r3, [pc, #172]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 020c 	and.w	r2, r3, #12
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d1eb      	bne.n	8004388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043b0:	4b25      	ldr	r3, [pc, #148]	@ (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d20c      	bcs.n	80043d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043be:	4b22      	ldr	r3, [pc, #136]	@ (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c6:	4b20      	ldr	r3, [pc, #128]	@ (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d001      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e032      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e4:	4b19      	ldr	r3, [pc, #100]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4916      	ldr	r1, [pc, #88]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004402:	4b12      	ldr	r3, [pc, #72]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	490e      	ldr	r1, [pc, #56]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004416:	f000 f821 	bl	800445c <HAL_RCC_GetSysClockFreq>
 800441a:	4602      	mov	r2, r0
 800441c:	4b0b      	ldr	r3, [pc, #44]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	490a      	ldr	r1, [pc, #40]	@ (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 8004428:	5ccb      	ldrb	r3, [r1, r3]
 800442a:	fa22 f303 	lsr.w	r3, r2, r3
 800442e:	4a09      	ldr	r2, [pc, #36]	@ (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004432:	4b09      	ldr	r3, [pc, #36]	@ (8004458 <HAL_RCC_ClockConfig+0x1c8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fd f8ec 	bl	8001614 <HAL_InitTick>

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40023c00 	.word	0x40023c00
 800444c:	40023800 	.word	0x40023800
 8004450:	08005e84 	.word	0x08005e84
 8004454:	20000024 	.word	0x20000024
 8004458:	20000028 	.word	0x20000028

0800445c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800445c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004460:	b094      	sub	sp, #80	@ 0x50
 8004462:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004474:	4b79      	ldr	r3, [pc, #484]	@ (800465c <HAL_RCC_GetSysClockFreq+0x200>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 030c 	and.w	r3, r3, #12
 800447c:	2b08      	cmp	r3, #8
 800447e:	d00d      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0x40>
 8004480:	2b08      	cmp	r3, #8
 8004482:	f200 80e1 	bhi.w	8004648 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0x34>
 800448a:	2b04      	cmp	r3, #4
 800448c:	d003      	beq.n	8004496 <HAL_RCC_GetSysClockFreq+0x3a>
 800448e:	e0db      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004490:	4b73      	ldr	r3, [pc, #460]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x204>)
 8004492:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004494:	e0db      	b.n	800464e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004496:	4b73      	ldr	r3, [pc, #460]	@ (8004664 <HAL_RCC_GetSysClockFreq+0x208>)
 8004498:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800449a:	e0d8      	b.n	800464e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800449c:	4b6f      	ldr	r3, [pc, #444]	@ (800465c <HAL_RCC_GetSysClockFreq+0x200>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044a6:	4b6d      	ldr	r3, [pc, #436]	@ (800465c <HAL_RCC_GetSysClockFreq+0x200>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d063      	beq.n	800457a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b2:	4b6a      	ldr	r3, [pc, #424]	@ (800465c <HAL_RCC_GetSysClockFreq+0x200>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	099b      	lsrs	r3, r3, #6
 80044b8:	2200      	movs	r2, #0
 80044ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80044be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80044c6:	2300      	movs	r3, #0
 80044c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80044ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80044ce:	4622      	mov	r2, r4
 80044d0:	462b      	mov	r3, r5
 80044d2:	f04f 0000 	mov.w	r0, #0
 80044d6:	f04f 0100 	mov.w	r1, #0
 80044da:	0159      	lsls	r1, r3, #5
 80044dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044e0:	0150      	lsls	r0, r2, #5
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4621      	mov	r1, r4
 80044e8:	1a51      	subs	r1, r2, r1
 80044ea:	6139      	str	r1, [r7, #16]
 80044ec:	4629      	mov	r1, r5
 80044ee:	eb63 0301 	sbc.w	r3, r3, r1
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004500:	4659      	mov	r1, fp
 8004502:	018b      	lsls	r3, r1, #6
 8004504:	4651      	mov	r1, sl
 8004506:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800450a:	4651      	mov	r1, sl
 800450c:	018a      	lsls	r2, r1, #6
 800450e:	4651      	mov	r1, sl
 8004510:	ebb2 0801 	subs.w	r8, r2, r1
 8004514:	4659      	mov	r1, fp
 8004516:	eb63 0901 	sbc.w	r9, r3, r1
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004526:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800452a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800452e:	4690      	mov	r8, r2
 8004530:	4699      	mov	r9, r3
 8004532:	4623      	mov	r3, r4
 8004534:	eb18 0303 	adds.w	r3, r8, r3
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	462b      	mov	r3, r5
 800453c:	eb49 0303 	adc.w	r3, r9, r3
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800454e:	4629      	mov	r1, r5
 8004550:	024b      	lsls	r3, r1, #9
 8004552:	4621      	mov	r1, r4
 8004554:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004558:	4621      	mov	r1, r4
 800455a:	024a      	lsls	r2, r1, #9
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004562:	2200      	movs	r2, #0
 8004564:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004566:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004568:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800456c:	f7fb fe88 	bl	8000280 <__aeabi_uldivmod>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4613      	mov	r3, r2
 8004576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004578:	e058      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800457a:	4b38      	ldr	r3, [pc, #224]	@ (800465c <HAL_RCC_GetSysClockFreq+0x200>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	099b      	lsrs	r3, r3, #6
 8004580:	2200      	movs	r2, #0
 8004582:	4618      	mov	r0, r3
 8004584:	4611      	mov	r1, r2
 8004586:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800458a:	623b      	str	r3, [r7, #32]
 800458c:	2300      	movs	r3, #0
 800458e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004590:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004594:	4642      	mov	r2, r8
 8004596:	464b      	mov	r3, r9
 8004598:	f04f 0000 	mov.w	r0, #0
 800459c:	f04f 0100 	mov.w	r1, #0
 80045a0:	0159      	lsls	r1, r3, #5
 80045a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045a6:	0150      	lsls	r0, r2, #5
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4641      	mov	r1, r8
 80045ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80045b2:	4649      	mov	r1, r9
 80045b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045cc:	ebb2 040a 	subs.w	r4, r2, sl
 80045d0:	eb63 050b 	sbc.w	r5, r3, fp
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	00eb      	lsls	r3, r5, #3
 80045de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045e2:	00e2      	lsls	r2, r4, #3
 80045e4:	4614      	mov	r4, r2
 80045e6:	461d      	mov	r5, r3
 80045e8:	4643      	mov	r3, r8
 80045ea:	18e3      	adds	r3, r4, r3
 80045ec:	603b      	str	r3, [r7, #0]
 80045ee:	464b      	mov	r3, r9
 80045f0:	eb45 0303 	adc.w	r3, r5, r3
 80045f4:	607b      	str	r3, [r7, #4]
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004602:	4629      	mov	r1, r5
 8004604:	028b      	lsls	r3, r1, #10
 8004606:	4621      	mov	r1, r4
 8004608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800460c:	4621      	mov	r1, r4
 800460e:	028a      	lsls	r2, r1, #10
 8004610:	4610      	mov	r0, r2
 8004612:	4619      	mov	r1, r3
 8004614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004616:	2200      	movs	r2, #0
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	61fa      	str	r2, [r7, #28]
 800461c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004620:	f7fb fe2e 	bl	8000280 <__aeabi_uldivmod>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4613      	mov	r3, r2
 800462a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800462c:	4b0b      	ldr	r3, [pc, #44]	@ (800465c <HAL_RCC_GetSysClockFreq+0x200>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	0c1b      	lsrs	r3, r3, #16
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	3301      	adds	r3, #1
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800463c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800463e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004640:	fbb2 f3f3 	udiv	r3, r2, r3
 8004644:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004646:	e002      	b.n	800464e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004648:	4b05      	ldr	r3, [pc, #20]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x204>)
 800464a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800464c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800464e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004650:	4618      	mov	r0, r3
 8004652:	3750      	adds	r7, #80	@ 0x50
 8004654:	46bd      	mov	sp, r7
 8004656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800465a:	bf00      	nop
 800465c:	40023800 	.word	0x40023800
 8004660:	00f42400 	.word	0x00f42400
 8004664:	007a1200 	.word	0x007a1200

08004668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800466c:	4b03      	ldr	r3, [pc, #12]	@ (800467c <HAL_RCC_GetHCLKFreq+0x14>)
 800466e:	681b      	ldr	r3, [r3, #0]
}
 8004670:	4618      	mov	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	20000024 	.word	0x20000024

08004680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004684:	f7ff fff0 	bl	8004668 <HAL_RCC_GetHCLKFreq>
 8004688:	4602      	mov	r2, r0
 800468a:	4b05      	ldr	r3, [pc, #20]	@ (80046a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	0a9b      	lsrs	r3, r3, #10
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	4903      	ldr	r1, [pc, #12]	@ (80046a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004696:	5ccb      	ldrb	r3, [r1, r3]
 8004698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800469c:	4618      	mov	r0, r3
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40023800 	.word	0x40023800
 80046a4:	08005e94 	.word	0x08005e94

080046a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046ac:	f7ff ffdc 	bl	8004668 <HAL_RCC_GetHCLKFreq>
 80046b0:	4602      	mov	r2, r0
 80046b2:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	0b5b      	lsrs	r3, r3, #13
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	4903      	ldr	r1, [pc, #12]	@ (80046cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80046be:	5ccb      	ldrb	r3, [r1, r3]
 80046c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40023800 	.word	0x40023800
 80046cc:	08005e94 	.word	0x08005e94

080046d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d105      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d035      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046f8:	4b62      	ldr	r3, [pc, #392]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046fe:	f7fc ffcd 	bl	800169c <HAL_GetTick>
 8004702:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004704:	e008      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004706:	f7fc ffc9 	bl	800169c <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e0b0      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004718:	4b5b      	ldr	r3, [pc, #364]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1f0      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	019a      	lsls	r2, r3, #6
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	071b      	lsls	r3, r3, #28
 8004730:	4955      	ldr	r1, [pc, #340]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004738:	4b52      	ldr	r3, [pc, #328]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800473a:	2201      	movs	r2, #1
 800473c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800473e:	f7fc ffad 	bl	800169c <HAL_GetTick>
 8004742:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004744:	e008      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004746:	f7fc ffa9 	bl	800169c <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e090      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004758:	4b4b      	ldr	r3, [pc, #300]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8083 	beq.w	8004878 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	4b44      	ldr	r3, [pc, #272]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477a:	4a43      	ldr	r2, [pc, #268]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800477c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004780:	6413      	str	r3, [r2, #64]	@ 0x40
 8004782:	4b41      	ldr	r3, [pc, #260]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800478e:	4b3f      	ldr	r3, [pc, #252]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a3e      	ldr	r2, [pc, #248]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004798:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800479a:	f7fc ff7f 	bl	800169c <HAL_GetTick>
 800479e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80047a0:	e008      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a2:	f7fc ff7b 	bl	800169c <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e062      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80047b4:	4b35      	ldr	r3, [pc, #212]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0f0      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047c0:	4b31      	ldr	r3, [pc, #196]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047c8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d02f      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d028      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047de:	4b2a      	ldr	r3, [pc, #168]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047e8:	4b29      	ldr	r3, [pc, #164]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ee:	4b28      	ldr	r3, [pc, #160]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047f4:	4a24      	ldr	r2, [pc, #144]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047fa:	4b23      	ldr	r3, [pc, #140]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b01      	cmp	r3, #1
 8004804:	d114      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004806:	f7fc ff49 	bl	800169c <HAL_GetTick>
 800480a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480c:	e00a      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480e:	f7fc ff45 	bl	800169c <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800481c:	4293      	cmp	r3, r2
 800481e:	d901      	bls.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e02a      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004824:	4b18      	ldr	r3, [pc, #96]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0ee      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004838:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800483c:	d10d      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800483e:	4b12      	ldr	r3, [pc, #72]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800484e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004852:	490d      	ldr	r1, [pc, #52]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004854:	4313      	orrs	r3, r2
 8004856:	608b      	str	r3, [r1, #8]
 8004858:	e005      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800485a:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	4a0a      	ldr	r2, [pc, #40]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004860:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004864:	6093      	str	r3, [r2, #8]
 8004866:	4b08      	ldr	r3, [pc, #32]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004868:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004872:	4905      	ldr	r1, [pc, #20]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004874:	4313      	orrs	r3, r2
 8004876:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	42470068 	.word	0x42470068
 8004888:	40023800 	.word	0x40023800
 800488c:	40007000 	.word	0x40007000
 8004890:	42470e40 	.word	0x42470e40

08004894 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d13f      	bne.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80048b2:	4b24      	ldr	r3, [pc, #144]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048ba:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d006      	beq.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048c8:	d12f      	bne.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80048ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80048cc:	617b      	str	r3, [r7, #20]
          break;
 80048ce:	e02f      	b.n	8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80048d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048dc:	d108      	bne.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048de:	4b19      	ldr	r3, [pc, #100]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048e6:	4a19      	ldr	r2, [pc, #100]	@ (800494c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80048e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	e007      	b.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048f0:	4b14      	ldr	r3, [pc, #80]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048f8:	4a15      	ldr	r2, [pc, #84]	@ (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80048fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fe:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004900:	4b10      	ldr	r3, [pc, #64]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004906:	099b      	lsrs	r3, r3, #6
 8004908:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	fb02 f303 	mul.w	r3, r2, r3
 8004912:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004914:	4b0b      	ldr	r3, [pc, #44]	@ (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004916:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800491a:	0f1b      	lsrs	r3, r3, #28
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	fbb2 f3f3 	udiv	r3, r2, r3
 8004926:	617b      	str	r3, [r7, #20]
          break;
 8004928:	e002      	b.n	8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	617b      	str	r3, [r7, #20]
          break;
 800492e:	bf00      	nop
        }
      }
      break;
 8004930:	e000      	b.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004932:	bf00      	nop
    }
  }
  return frequency;
 8004934:	697b      	ldr	r3, [r7, #20]
}
 8004936:	4618      	mov	r0, r3
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800
 8004948:	00bb8000 	.word	0x00bb8000
 800494c:	007a1200 	.word	0x007a1200
 8004950:	00f42400 	.word	0x00f42400

08004954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e042      	b.n	80049ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fc fd3e 	bl	80013fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2224      	movs	r2, #36	@ 0x24
 8004984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004996:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f973 	bl	8004c84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08a      	sub	sp, #40	@ 0x28
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	4613      	mov	r3, r2
 8004a02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	d175      	bne.n	8004b00 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <HAL_UART_Transmit+0x2c>
 8004a1a:	88fb      	ldrh	r3, [r7, #6]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e06e      	b.n	8004b02 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2221      	movs	r2, #33	@ 0x21
 8004a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a32:	f7fc fe33 	bl	800169c <HAL_GetTick>
 8004a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	88fa      	ldrh	r2, [r7, #6]
 8004a3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	88fa      	ldrh	r2, [r7, #6]
 8004a42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a4c:	d108      	bne.n	8004a60 <HAL_UART_Transmit+0x6c>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d104      	bne.n	8004a60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	61bb      	str	r3, [r7, #24]
 8004a5e:	e003      	b.n	8004a68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a64:	2300      	movs	r3, #0
 8004a66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a68:	e02e      	b.n	8004ac8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2200      	movs	r2, #0
 8004a72:	2180      	movs	r1, #128	@ 0x80
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 f848 	bl	8004b0a <UART_WaitOnFlagUntilTimeout>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e03a      	b.n	8004b02 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10b      	bne.n	8004aaa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	3302      	adds	r3, #2
 8004aa6:	61bb      	str	r3, [r7, #24]
 8004aa8:	e007      	b.n	8004aba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	781a      	ldrb	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1cb      	bne.n	8004a6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2140      	movs	r1, #64	@ 0x40
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f814 	bl	8004b0a <UART_WaitOnFlagUntilTimeout>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e006      	b.n	8004b02 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	e000      	b.n	8004b02 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004b00:	2302      	movs	r3, #2
  }
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3720      	adds	r7, #32
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b086      	sub	sp, #24
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	603b      	str	r3, [r7, #0]
 8004b16:	4613      	mov	r3, r2
 8004b18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1a:	e03b      	b.n	8004b94 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d037      	beq.n	8004b94 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b24:	f7fc fdba 	bl	800169c <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	6a3a      	ldr	r2, [r7, #32]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d302      	bcc.n	8004b3a <UART_WaitOnFlagUntilTimeout+0x30>
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e03a      	b.n	8004bb4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d023      	beq.n	8004b94 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b80      	cmp	r3, #128	@ 0x80
 8004b50:	d020      	beq.n	8004b94 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b40      	cmp	r3, #64	@ 0x40
 8004b56:	d01d      	beq.n	8004b94 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d116      	bne.n	8004b94 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004b66:	2300      	movs	r3, #0
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	617b      	str	r3, [r7, #20]
 8004b7a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 f81d 	bl	8004bbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2208      	movs	r2, #8
 8004b86:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e00f      	b.n	8004bb4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	bf0c      	ite	eq
 8004ba4:	2301      	moveq	r3, #1
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	461a      	mov	r2, r3
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d0b4      	beq.n	8004b1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b095      	sub	sp, #84	@ 0x54
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	330c      	adds	r3, #12
 8004bca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	330c      	adds	r3, #12
 8004be2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004be4:	643a      	str	r2, [r7, #64]	@ 0x40
 8004be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e5      	bne.n	8004bc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3314      	adds	r3, #20
 8004bfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	e853 3f00 	ldrex	r3, [r3]
 8004c06:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	f023 0301 	bic.w	r3, r3, #1
 8004c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3314      	adds	r3, #20
 8004c16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c20:	e841 2300 	strex	r3, r2, [r1]
 8004c24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e5      	bne.n	8004bf8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d119      	bne.n	8004c68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	e853 3f00 	ldrex	r3, [r3]
 8004c42:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f023 0310 	bic.w	r3, r3, #16
 8004c4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	330c      	adds	r3, #12
 8004c52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c54:	61ba      	str	r2, [r7, #24]
 8004c56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c58:	6979      	ldr	r1, [r7, #20]
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	e841 2300 	strex	r3, r2, [r1]
 8004c60:	613b      	str	r3, [r7, #16]
   return(result);
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e5      	bne.n	8004c34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c76:	bf00      	nop
 8004c78:	3754      	adds	r7, #84	@ 0x54
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
	...

08004c84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c88:	b0c0      	sub	sp, #256	@ 0x100
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca0:	68d9      	ldr	r1, [r3, #12]
 8004ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	ea40 0301 	orr.w	r3, r0, r1
 8004cac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004cdc:	f021 010c 	bic.w	r1, r1, #12
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004cea:	430b      	orrs	r3, r1
 8004cec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cfe:	6999      	ldr	r1, [r3, #24]
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	ea40 0301 	orr.w	r3, r0, r1
 8004d0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	4b8f      	ldr	r3, [pc, #572]	@ (8004f50 <UART_SetConfig+0x2cc>)
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d005      	beq.n	8004d24 <UART_SetConfig+0xa0>
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4b8d      	ldr	r3, [pc, #564]	@ (8004f54 <UART_SetConfig+0x2d0>)
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d104      	bne.n	8004d2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d24:	f7ff fcc0 	bl	80046a8 <HAL_RCC_GetPCLK2Freq>
 8004d28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d2c:	e003      	b.n	8004d36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d2e:	f7ff fca7 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 8004d32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d40:	f040 810c 	bne.w	8004f5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d56:	4622      	mov	r2, r4
 8004d58:	462b      	mov	r3, r5
 8004d5a:	1891      	adds	r1, r2, r2
 8004d5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d5e:	415b      	adcs	r3, r3
 8004d60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d66:	4621      	mov	r1, r4
 8004d68:	eb12 0801 	adds.w	r8, r2, r1
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	eb43 0901 	adc.w	r9, r3, r1
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d86:	4690      	mov	r8, r2
 8004d88:	4699      	mov	r9, r3
 8004d8a:	4623      	mov	r3, r4
 8004d8c:	eb18 0303 	adds.w	r3, r8, r3
 8004d90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d94:	462b      	mov	r3, r5
 8004d96:	eb49 0303 	adc.w	r3, r9, r3
 8004d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004daa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004dae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004db2:	460b      	mov	r3, r1
 8004db4:	18db      	adds	r3, r3, r3
 8004db6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004db8:	4613      	mov	r3, r2
 8004dba:	eb42 0303 	adc.w	r3, r2, r3
 8004dbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004dc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004dc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004dc8:	f7fb fa5a 	bl	8000280 <__aeabi_uldivmod>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4b61      	ldr	r3, [pc, #388]	@ (8004f58 <UART_SetConfig+0x2d4>)
 8004dd2:	fba3 2302 	umull	r2, r3, r3, r2
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	011c      	lsls	r4, r3, #4
 8004dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004de4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004de8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004dec:	4642      	mov	r2, r8
 8004dee:	464b      	mov	r3, r9
 8004df0:	1891      	adds	r1, r2, r2
 8004df2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004df4:	415b      	adcs	r3, r3
 8004df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004df8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004dfc:	4641      	mov	r1, r8
 8004dfe:	eb12 0a01 	adds.w	sl, r2, r1
 8004e02:	4649      	mov	r1, r9
 8004e04:	eb43 0b01 	adc.w	fp, r3, r1
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e1c:	4692      	mov	sl, r2
 8004e1e:	469b      	mov	fp, r3
 8004e20:	4643      	mov	r3, r8
 8004e22:	eb1a 0303 	adds.w	r3, sl, r3
 8004e26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e2a:	464b      	mov	r3, r9
 8004e2c:	eb4b 0303 	adc.w	r3, fp, r3
 8004e30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	18db      	adds	r3, r3, r3
 8004e4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e4e:	4613      	mov	r3, r2
 8004e50:	eb42 0303 	adc.w	r3, r2, r3
 8004e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e5e:	f7fb fa0f 	bl	8000280 <__aeabi_uldivmod>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4611      	mov	r1, r2
 8004e68:	4b3b      	ldr	r3, [pc, #236]	@ (8004f58 <UART_SetConfig+0x2d4>)
 8004e6a:	fba3 2301 	umull	r2, r3, r3, r1
 8004e6e:	095b      	lsrs	r3, r3, #5
 8004e70:	2264      	movs	r2, #100	@ 0x64
 8004e72:	fb02 f303 	mul.w	r3, r2, r3
 8004e76:	1acb      	subs	r3, r1, r3
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e7e:	4b36      	ldr	r3, [pc, #216]	@ (8004f58 <UART_SetConfig+0x2d4>)
 8004e80:	fba3 2302 	umull	r2, r3, r3, r2
 8004e84:	095b      	lsrs	r3, r3, #5
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e8c:	441c      	add	r4, r3
 8004e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ea0:	4642      	mov	r2, r8
 8004ea2:	464b      	mov	r3, r9
 8004ea4:	1891      	adds	r1, r2, r2
 8004ea6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ea8:	415b      	adcs	r3, r3
 8004eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	1851      	adds	r1, r2, r1
 8004eb4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	414b      	adcs	r3, r1
 8004eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ec8:	4659      	mov	r1, fp
 8004eca:	00cb      	lsls	r3, r1, #3
 8004ecc:	4651      	mov	r1, sl
 8004ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ed2:	4651      	mov	r1, sl
 8004ed4:	00ca      	lsls	r2, r1, #3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4603      	mov	r3, r0
 8004edc:	4642      	mov	r2, r8
 8004ede:	189b      	adds	r3, r3, r2
 8004ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ee4:	464b      	mov	r3, r9
 8004ee6:	460a      	mov	r2, r1
 8004ee8:	eb42 0303 	adc.w	r3, r2, r3
 8004eec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004efc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004f00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f04:	460b      	mov	r3, r1
 8004f06:	18db      	adds	r3, r3, r3
 8004f08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	eb42 0303 	adc.w	r3, r2, r3
 8004f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f1a:	f7fb f9b1 	bl	8000280 <__aeabi_uldivmod>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	4b0d      	ldr	r3, [pc, #52]	@ (8004f58 <UART_SetConfig+0x2d4>)
 8004f24:	fba3 1302 	umull	r1, r3, r3, r2
 8004f28:	095b      	lsrs	r3, r3, #5
 8004f2a:	2164      	movs	r1, #100	@ 0x64
 8004f2c:	fb01 f303 	mul.w	r3, r1, r3
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	3332      	adds	r3, #50	@ 0x32
 8004f36:	4a08      	ldr	r2, [pc, #32]	@ (8004f58 <UART_SetConfig+0x2d4>)
 8004f38:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3c:	095b      	lsrs	r3, r3, #5
 8004f3e:	f003 0207 	and.w	r2, r3, #7
 8004f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4422      	add	r2, r4
 8004f4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f4c:	e106      	b.n	800515c <UART_SetConfig+0x4d8>
 8004f4e:	bf00      	nop
 8004f50:	40011000 	.word	0x40011000
 8004f54:	40011400 	.word	0x40011400
 8004f58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f60:	2200      	movs	r2, #0
 8004f62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f6e:	4642      	mov	r2, r8
 8004f70:	464b      	mov	r3, r9
 8004f72:	1891      	adds	r1, r2, r2
 8004f74:	6239      	str	r1, [r7, #32]
 8004f76:	415b      	adcs	r3, r3
 8004f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f7e:	4641      	mov	r1, r8
 8004f80:	1854      	adds	r4, r2, r1
 8004f82:	4649      	mov	r1, r9
 8004f84:	eb43 0501 	adc.w	r5, r3, r1
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	f04f 0300 	mov.w	r3, #0
 8004f90:	00eb      	lsls	r3, r5, #3
 8004f92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f96:	00e2      	lsls	r2, r4, #3
 8004f98:	4614      	mov	r4, r2
 8004f9a:	461d      	mov	r5, r3
 8004f9c:	4643      	mov	r3, r8
 8004f9e:	18e3      	adds	r3, r4, r3
 8004fa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004fa4:	464b      	mov	r3, r9
 8004fa6:	eb45 0303 	adc.w	r3, r5, r3
 8004faa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004fba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fbe:	f04f 0200 	mov.w	r2, #0
 8004fc2:	f04f 0300 	mov.w	r3, #0
 8004fc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004fca:	4629      	mov	r1, r5
 8004fcc:	008b      	lsls	r3, r1, #2
 8004fce:	4621      	mov	r1, r4
 8004fd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fd4:	4621      	mov	r1, r4
 8004fd6:	008a      	lsls	r2, r1, #2
 8004fd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004fdc:	f7fb f950 	bl	8000280 <__aeabi_uldivmod>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4b60      	ldr	r3, [pc, #384]	@ (8005168 <UART_SetConfig+0x4e4>)
 8004fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	011c      	lsls	r4, r3, #4
 8004fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ff8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ffc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005000:	4642      	mov	r2, r8
 8005002:	464b      	mov	r3, r9
 8005004:	1891      	adds	r1, r2, r2
 8005006:	61b9      	str	r1, [r7, #24]
 8005008:	415b      	adcs	r3, r3
 800500a:	61fb      	str	r3, [r7, #28]
 800500c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005010:	4641      	mov	r1, r8
 8005012:	1851      	adds	r1, r2, r1
 8005014:	6139      	str	r1, [r7, #16]
 8005016:	4649      	mov	r1, r9
 8005018:	414b      	adcs	r3, r1
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005028:	4659      	mov	r1, fp
 800502a:	00cb      	lsls	r3, r1, #3
 800502c:	4651      	mov	r1, sl
 800502e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005032:	4651      	mov	r1, sl
 8005034:	00ca      	lsls	r2, r1, #3
 8005036:	4610      	mov	r0, r2
 8005038:	4619      	mov	r1, r3
 800503a:	4603      	mov	r3, r0
 800503c:	4642      	mov	r2, r8
 800503e:	189b      	adds	r3, r3, r2
 8005040:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005044:	464b      	mov	r3, r9
 8005046:	460a      	mov	r2, r1
 8005048:	eb42 0303 	adc.w	r3, r2, r3
 800504c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	67bb      	str	r3, [r7, #120]	@ 0x78
 800505a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005068:	4649      	mov	r1, r9
 800506a:	008b      	lsls	r3, r1, #2
 800506c:	4641      	mov	r1, r8
 800506e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005072:	4641      	mov	r1, r8
 8005074:	008a      	lsls	r2, r1, #2
 8005076:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800507a:	f7fb f901 	bl	8000280 <__aeabi_uldivmod>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	4611      	mov	r1, r2
 8005084:	4b38      	ldr	r3, [pc, #224]	@ (8005168 <UART_SetConfig+0x4e4>)
 8005086:	fba3 2301 	umull	r2, r3, r3, r1
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	2264      	movs	r2, #100	@ 0x64
 800508e:	fb02 f303 	mul.w	r3, r2, r3
 8005092:	1acb      	subs	r3, r1, r3
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	3332      	adds	r3, #50	@ 0x32
 8005098:	4a33      	ldr	r2, [pc, #204]	@ (8005168 <UART_SetConfig+0x4e4>)
 800509a:	fba2 2303 	umull	r2, r3, r2, r3
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050a4:	441c      	add	r4, r3
 80050a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050aa:	2200      	movs	r2, #0
 80050ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80050ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80050b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80050b4:	4642      	mov	r2, r8
 80050b6:	464b      	mov	r3, r9
 80050b8:	1891      	adds	r1, r2, r2
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	415b      	adcs	r3, r3
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050c4:	4641      	mov	r1, r8
 80050c6:	1851      	adds	r1, r2, r1
 80050c8:	6039      	str	r1, [r7, #0]
 80050ca:	4649      	mov	r1, r9
 80050cc:	414b      	adcs	r3, r1
 80050ce:	607b      	str	r3, [r7, #4]
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050dc:	4659      	mov	r1, fp
 80050de:	00cb      	lsls	r3, r1, #3
 80050e0:	4651      	mov	r1, sl
 80050e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050e6:	4651      	mov	r1, sl
 80050e8:	00ca      	lsls	r2, r1, #3
 80050ea:	4610      	mov	r0, r2
 80050ec:	4619      	mov	r1, r3
 80050ee:	4603      	mov	r3, r0
 80050f0:	4642      	mov	r2, r8
 80050f2:	189b      	adds	r3, r3, r2
 80050f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050f6:	464b      	mov	r3, r9
 80050f8:	460a      	mov	r2, r1
 80050fa:	eb42 0303 	adc.w	r3, r2, r3
 80050fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	663b      	str	r3, [r7, #96]	@ 0x60
 800510a:	667a      	str	r2, [r7, #100]	@ 0x64
 800510c:	f04f 0200 	mov.w	r2, #0
 8005110:	f04f 0300 	mov.w	r3, #0
 8005114:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005118:	4649      	mov	r1, r9
 800511a:	008b      	lsls	r3, r1, #2
 800511c:	4641      	mov	r1, r8
 800511e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005122:	4641      	mov	r1, r8
 8005124:	008a      	lsls	r2, r1, #2
 8005126:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800512a:	f7fb f8a9 	bl	8000280 <__aeabi_uldivmod>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	4b0d      	ldr	r3, [pc, #52]	@ (8005168 <UART_SetConfig+0x4e4>)
 8005134:	fba3 1302 	umull	r1, r3, r3, r2
 8005138:	095b      	lsrs	r3, r3, #5
 800513a:	2164      	movs	r1, #100	@ 0x64
 800513c:	fb01 f303 	mul.w	r3, r1, r3
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	3332      	adds	r3, #50	@ 0x32
 8005146:	4a08      	ldr	r2, [pc, #32]	@ (8005168 <UART_SetConfig+0x4e4>)
 8005148:	fba2 2303 	umull	r2, r3, r2, r3
 800514c:	095b      	lsrs	r3, r3, #5
 800514e:	f003 020f 	and.w	r2, r3, #15
 8005152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4422      	add	r2, r4
 800515a:	609a      	str	r2, [r3, #8]
}
 800515c:	bf00      	nop
 800515e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005162:	46bd      	mov	sp, r7
 8005164:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005168:	51eb851f 	.word	0x51eb851f

0800516c <siprintf>:
 800516c:	b40e      	push	{r1, r2, r3}
 800516e:	b510      	push	{r4, lr}
 8005170:	b09d      	sub	sp, #116	@ 0x74
 8005172:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005174:	9002      	str	r0, [sp, #8]
 8005176:	9006      	str	r0, [sp, #24]
 8005178:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800517c:	480a      	ldr	r0, [pc, #40]	@ (80051a8 <siprintf+0x3c>)
 800517e:	9107      	str	r1, [sp, #28]
 8005180:	9104      	str	r1, [sp, #16]
 8005182:	490a      	ldr	r1, [pc, #40]	@ (80051ac <siprintf+0x40>)
 8005184:	f853 2b04 	ldr.w	r2, [r3], #4
 8005188:	9105      	str	r1, [sp, #20]
 800518a:	2400      	movs	r4, #0
 800518c:	a902      	add	r1, sp, #8
 800518e:	6800      	ldr	r0, [r0, #0]
 8005190:	9301      	str	r3, [sp, #4]
 8005192:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005194:	f000 f994 	bl	80054c0 <_svfiprintf_r>
 8005198:	9b02      	ldr	r3, [sp, #8]
 800519a:	701c      	strb	r4, [r3, #0]
 800519c:	b01d      	add	sp, #116	@ 0x74
 800519e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051a2:	b003      	add	sp, #12
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	20000030 	.word	0x20000030
 80051ac:	ffff0208 	.word	0xffff0208

080051b0 <memset>:
 80051b0:	4402      	add	r2, r0
 80051b2:	4603      	mov	r3, r0
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d100      	bne.n	80051ba <memset+0xa>
 80051b8:	4770      	bx	lr
 80051ba:	f803 1b01 	strb.w	r1, [r3], #1
 80051be:	e7f9      	b.n	80051b4 <memset+0x4>

080051c0 <__errno>:
 80051c0:	4b01      	ldr	r3, [pc, #4]	@ (80051c8 <__errno+0x8>)
 80051c2:	6818      	ldr	r0, [r3, #0]
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	20000030 	.word	0x20000030

080051cc <__libc_init_array>:
 80051cc:	b570      	push	{r4, r5, r6, lr}
 80051ce:	4d0d      	ldr	r5, [pc, #52]	@ (8005204 <__libc_init_array+0x38>)
 80051d0:	4c0d      	ldr	r4, [pc, #52]	@ (8005208 <__libc_init_array+0x3c>)
 80051d2:	1b64      	subs	r4, r4, r5
 80051d4:	10a4      	asrs	r4, r4, #2
 80051d6:	2600      	movs	r6, #0
 80051d8:	42a6      	cmp	r6, r4
 80051da:	d109      	bne.n	80051f0 <__libc_init_array+0x24>
 80051dc:	4d0b      	ldr	r5, [pc, #44]	@ (800520c <__libc_init_array+0x40>)
 80051de:	4c0c      	ldr	r4, [pc, #48]	@ (8005210 <__libc_init_array+0x44>)
 80051e0:	f000 fc64 	bl	8005aac <_init>
 80051e4:	1b64      	subs	r4, r4, r5
 80051e6:	10a4      	asrs	r4, r4, #2
 80051e8:	2600      	movs	r6, #0
 80051ea:	42a6      	cmp	r6, r4
 80051ec:	d105      	bne.n	80051fa <__libc_init_array+0x2e>
 80051ee:	bd70      	pop	{r4, r5, r6, pc}
 80051f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f4:	4798      	blx	r3
 80051f6:	3601      	adds	r6, #1
 80051f8:	e7ee      	b.n	80051d8 <__libc_init_array+0xc>
 80051fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80051fe:	4798      	blx	r3
 8005200:	3601      	adds	r6, #1
 8005202:	e7f2      	b.n	80051ea <__libc_init_array+0x1e>
 8005204:	08005ed8 	.word	0x08005ed8
 8005208:	08005ed8 	.word	0x08005ed8
 800520c:	08005ed8 	.word	0x08005ed8
 8005210:	08005edc 	.word	0x08005edc

08005214 <__retarget_lock_acquire_recursive>:
 8005214:	4770      	bx	lr

08005216 <__retarget_lock_release_recursive>:
 8005216:	4770      	bx	lr

08005218 <_free_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	4605      	mov	r5, r0
 800521c:	2900      	cmp	r1, #0
 800521e:	d041      	beq.n	80052a4 <_free_r+0x8c>
 8005220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005224:	1f0c      	subs	r4, r1, #4
 8005226:	2b00      	cmp	r3, #0
 8005228:	bfb8      	it	lt
 800522a:	18e4      	addlt	r4, r4, r3
 800522c:	f000 f8e0 	bl	80053f0 <__malloc_lock>
 8005230:	4a1d      	ldr	r2, [pc, #116]	@ (80052a8 <_free_r+0x90>)
 8005232:	6813      	ldr	r3, [r2, #0]
 8005234:	b933      	cbnz	r3, 8005244 <_free_r+0x2c>
 8005236:	6063      	str	r3, [r4, #4]
 8005238:	6014      	str	r4, [r2, #0]
 800523a:	4628      	mov	r0, r5
 800523c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005240:	f000 b8dc 	b.w	80053fc <__malloc_unlock>
 8005244:	42a3      	cmp	r3, r4
 8005246:	d908      	bls.n	800525a <_free_r+0x42>
 8005248:	6820      	ldr	r0, [r4, #0]
 800524a:	1821      	adds	r1, r4, r0
 800524c:	428b      	cmp	r3, r1
 800524e:	bf01      	itttt	eq
 8005250:	6819      	ldreq	r1, [r3, #0]
 8005252:	685b      	ldreq	r3, [r3, #4]
 8005254:	1809      	addeq	r1, r1, r0
 8005256:	6021      	streq	r1, [r4, #0]
 8005258:	e7ed      	b.n	8005236 <_free_r+0x1e>
 800525a:	461a      	mov	r2, r3
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	b10b      	cbz	r3, 8005264 <_free_r+0x4c>
 8005260:	42a3      	cmp	r3, r4
 8005262:	d9fa      	bls.n	800525a <_free_r+0x42>
 8005264:	6811      	ldr	r1, [r2, #0]
 8005266:	1850      	adds	r0, r2, r1
 8005268:	42a0      	cmp	r0, r4
 800526a:	d10b      	bne.n	8005284 <_free_r+0x6c>
 800526c:	6820      	ldr	r0, [r4, #0]
 800526e:	4401      	add	r1, r0
 8005270:	1850      	adds	r0, r2, r1
 8005272:	4283      	cmp	r3, r0
 8005274:	6011      	str	r1, [r2, #0]
 8005276:	d1e0      	bne.n	800523a <_free_r+0x22>
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	6053      	str	r3, [r2, #4]
 800527e:	4408      	add	r0, r1
 8005280:	6010      	str	r0, [r2, #0]
 8005282:	e7da      	b.n	800523a <_free_r+0x22>
 8005284:	d902      	bls.n	800528c <_free_r+0x74>
 8005286:	230c      	movs	r3, #12
 8005288:	602b      	str	r3, [r5, #0]
 800528a:	e7d6      	b.n	800523a <_free_r+0x22>
 800528c:	6820      	ldr	r0, [r4, #0]
 800528e:	1821      	adds	r1, r4, r0
 8005290:	428b      	cmp	r3, r1
 8005292:	bf04      	itt	eq
 8005294:	6819      	ldreq	r1, [r3, #0]
 8005296:	685b      	ldreq	r3, [r3, #4]
 8005298:	6063      	str	r3, [r4, #4]
 800529a:	bf04      	itt	eq
 800529c:	1809      	addeq	r1, r1, r0
 800529e:	6021      	streq	r1, [r4, #0]
 80052a0:	6054      	str	r4, [r2, #4]
 80052a2:	e7ca      	b.n	800523a <_free_r+0x22>
 80052a4:	bd38      	pop	{r3, r4, r5, pc}
 80052a6:	bf00      	nop
 80052a8:	200006d0 	.word	0x200006d0

080052ac <sbrk_aligned>:
 80052ac:	b570      	push	{r4, r5, r6, lr}
 80052ae:	4e0f      	ldr	r6, [pc, #60]	@ (80052ec <sbrk_aligned+0x40>)
 80052b0:	460c      	mov	r4, r1
 80052b2:	6831      	ldr	r1, [r6, #0]
 80052b4:	4605      	mov	r5, r0
 80052b6:	b911      	cbnz	r1, 80052be <sbrk_aligned+0x12>
 80052b8:	f000 fba4 	bl	8005a04 <_sbrk_r>
 80052bc:	6030      	str	r0, [r6, #0]
 80052be:	4621      	mov	r1, r4
 80052c0:	4628      	mov	r0, r5
 80052c2:	f000 fb9f 	bl	8005a04 <_sbrk_r>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	d103      	bne.n	80052d2 <sbrk_aligned+0x26>
 80052ca:	f04f 34ff 	mov.w	r4, #4294967295
 80052ce:	4620      	mov	r0, r4
 80052d0:	bd70      	pop	{r4, r5, r6, pc}
 80052d2:	1cc4      	adds	r4, r0, #3
 80052d4:	f024 0403 	bic.w	r4, r4, #3
 80052d8:	42a0      	cmp	r0, r4
 80052da:	d0f8      	beq.n	80052ce <sbrk_aligned+0x22>
 80052dc:	1a21      	subs	r1, r4, r0
 80052de:	4628      	mov	r0, r5
 80052e0:	f000 fb90 	bl	8005a04 <_sbrk_r>
 80052e4:	3001      	adds	r0, #1
 80052e6:	d1f2      	bne.n	80052ce <sbrk_aligned+0x22>
 80052e8:	e7ef      	b.n	80052ca <sbrk_aligned+0x1e>
 80052ea:	bf00      	nop
 80052ec:	200006cc 	.word	0x200006cc

080052f0 <_malloc_r>:
 80052f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052f4:	1ccd      	adds	r5, r1, #3
 80052f6:	f025 0503 	bic.w	r5, r5, #3
 80052fa:	3508      	adds	r5, #8
 80052fc:	2d0c      	cmp	r5, #12
 80052fe:	bf38      	it	cc
 8005300:	250c      	movcc	r5, #12
 8005302:	2d00      	cmp	r5, #0
 8005304:	4606      	mov	r6, r0
 8005306:	db01      	blt.n	800530c <_malloc_r+0x1c>
 8005308:	42a9      	cmp	r1, r5
 800530a:	d904      	bls.n	8005316 <_malloc_r+0x26>
 800530c:	230c      	movs	r3, #12
 800530e:	6033      	str	r3, [r6, #0]
 8005310:	2000      	movs	r0, #0
 8005312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005316:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053ec <_malloc_r+0xfc>
 800531a:	f000 f869 	bl	80053f0 <__malloc_lock>
 800531e:	f8d8 3000 	ldr.w	r3, [r8]
 8005322:	461c      	mov	r4, r3
 8005324:	bb44      	cbnz	r4, 8005378 <_malloc_r+0x88>
 8005326:	4629      	mov	r1, r5
 8005328:	4630      	mov	r0, r6
 800532a:	f7ff ffbf 	bl	80052ac <sbrk_aligned>
 800532e:	1c43      	adds	r3, r0, #1
 8005330:	4604      	mov	r4, r0
 8005332:	d158      	bne.n	80053e6 <_malloc_r+0xf6>
 8005334:	f8d8 4000 	ldr.w	r4, [r8]
 8005338:	4627      	mov	r7, r4
 800533a:	2f00      	cmp	r7, #0
 800533c:	d143      	bne.n	80053c6 <_malloc_r+0xd6>
 800533e:	2c00      	cmp	r4, #0
 8005340:	d04b      	beq.n	80053da <_malloc_r+0xea>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	4639      	mov	r1, r7
 8005346:	4630      	mov	r0, r6
 8005348:	eb04 0903 	add.w	r9, r4, r3
 800534c:	f000 fb5a 	bl	8005a04 <_sbrk_r>
 8005350:	4581      	cmp	r9, r0
 8005352:	d142      	bne.n	80053da <_malloc_r+0xea>
 8005354:	6821      	ldr	r1, [r4, #0]
 8005356:	1a6d      	subs	r5, r5, r1
 8005358:	4629      	mov	r1, r5
 800535a:	4630      	mov	r0, r6
 800535c:	f7ff ffa6 	bl	80052ac <sbrk_aligned>
 8005360:	3001      	adds	r0, #1
 8005362:	d03a      	beq.n	80053da <_malloc_r+0xea>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	442b      	add	r3, r5
 8005368:	6023      	str	r3, [r4, #0]
 800536a:	f8d8 3000 	ldr.w	r3, [r8]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	bb62      	cbnz	r2, 80053cc <_malloc_r+0xdc>
 8005372:	f8c8 7000 	str.w	r7, [r8]
 8005376:	e00f      	b.n	8005398 <_malloc_r+0xa8>
 8005378:	6822      	ldr	r2, [r4, #0]
 800537a:	1b52      	subs	r2, r2, r5
 800537c:	d420      	bmi.n	80053c0 <_malloc_r+0xd0>
 800537e:	2a0b      	cmp	r2, #11
 8005380:	d917      	bls.n	80053b2 <_malloc_r+0xc2>
 8005382:	1961      	adds	r1, r4, r5
 8005384:	42a3      	cmp	r3, r4
 8005386:	6025      	str	r5, [r4, #0]
 8005388:	bf18      	it	ne
 800538a:	6059      	strne	r1, [r3, #4]
 800538c:	6863      	ldr	r3, [r4, #4]
 800538e:	bf08      	it	eq
 8005390:	f8c8 1000 	streq.w	r1, [r8]
 8005394:	5162      	str	r2, [r4, r5]
 8005396:	604b      	str	r3, [r1, #4]
 8005398:	4630      	mov	r0, r6
 800539a:	f000 f82f 	bl	80053fc <__malloc_unlock>
 800539e:	f104 000b 	add.w	r0, r4, #11
 80053a2:	1d23      	adds	r3, r4, #4
 80053a4:	f020 0007 	bic.w	r0, r0, #7
 80053a8:	1ac2      	subs	r2, r0, r3
 80053aa:	bf1c      	itt	ne
 80053ac:	1a1b      	subne	r3, r3, r0
 80053ae:	50a3      	strne	r3, [r4, r2]
 80053b0:	e7af      	b.n	8005312 <_malloc_r+0x22>
 80053b2:	6862      	ldr	r2, [r4, #4]
 80053b4:	42a3      	cmp	r3, r4
 80053b6:	bf0c      	ite	eq
 80053b8:	f8c8 2000 	streq.w	r2, [r8]
 80053bc:	605a      	strne	r2, [r3, #4]
 80053be:	e7eb      	b.n	8005398 <_malloc_r+0xa8>
 80053c0:	4623      	mov	r3, r4
 80053c2:	6864      	ldr	r4, [r4, #4]
 80053c4:	e7ae      	b.n	8005324 <_malloc_r+0x34>
 80053c6:	463c      	mov	r4, r7
 80053c8:	687f      	ldr	r7, [r7, #4]
 80053ca:	e7b6      	b.n	800533a <_malloc_r+0x4a>
 80053cc:	461a      	mov	r2, r3
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	42a3      	cmp	r3, r4
 80053d2:	d1fb      	bne.n	80053cc <_malloc_r+0xdc>
 80053d4:	2300      	movs	r3, #0
 80053d6:	6053      	str	r3, [r2, #4]
 80053d8:	e7de      	b.n	8005398 <_malloc_r+0xa8>
 80053da:	230c      	movs	r3, #12
 80053dc:	6033      	str	r3, [r6, #0]
 80053de:	4630      	mov	r0, r6
 80053e0:	f000 f80c 	bl	80053fc <__malloc_unlock>
 80053e4:	e794      	b.n	8005310 <_malloc_r+0x20>
 80053e6:	6005      	str	r5, [r0, #0]
 80053e8:	e7d6      	b.n	8005398 <_malloc_r+0xa8>
 80053ea:	bf00      	nop
 80053ec:	200006d0 	.word	0x200006d0

080053f0 <__malloc_lock>:
 80053f0:	4801      	ldr	r0, [pc, #4]	@ (80053f8 <__malloc_lock+0x8>)
 80053f2:	f7ff bf0f 	b.w	8005214 <__retarget_lock_acquire_recursive>
 80053f6:	bf00      	nop
 80053f8:	200006c8 	.word	0x200006c8

080053fc <__malloc_unlock>:
 80053fc:	4801      	ldr	r0, [pc, #4]	@ (8005404 <__malloc_unlock+0x8>)
 80053fe:	f7ff bf0a 	b.w	8005216 <__retarget_lock_release_recursive>
 8005402:	bf00      	nop
 8005404:	200006c8 	.word	0x200006c8

08005408 <__ssputs_r>:
 8005408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800540c:	688e      	ldr	r6, [r1, #8]
 800540e:	461f      	mov	r7, r3
 8005410:	42be      	cmp	r6, r7
 8005412:	680b      	ldr	r3, [r1, #0]
 8005414:	4682      	mov	sl, r0
 8005416:	460c      	mov	r4, r1
 8005418:	4690      	mov	r8, r2
 800541a:	d82d      	bhi.n	8005478 <__ssputs_r+0x70>
 800541c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005420:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005424:	d026      	beq.n	8005474 <__ssputs_r+0x6c>
 8005426:	6965      	ldr	r5, [r4, #20]
 8005428:	6909      	ldr	r1, [r1, #16]
 800542a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800542e:	eba3 0901 	sub.w	r9, r3, r1
 8005432:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005436:	1c7b      	adds	r3, r7, #1
 8005438:	444b      	add	r3, r9
 800543a:	106d      	asrs	r5, r5, #1
 800543c:	429d      	cmp	r5, r3
 800543e:	bf38      	it	cc
 8005440:	461d      	movcc	r5, r3
 8005442:	0553      	lsls	r3, r2, #21
 8005444:	d527      	bpl.n	8005496 <__ssputs_r+0x8e>
 8005446:	4629      	mov	r1, r5
 8005448:	f7ff ff52 	bl	80052f0 <_malloc_r>
 800544c:	4606      	mov	r6, r0
 800544e:	b360      	cbz	r0, 80054aa <__ssputs_r+0xa2>
 8005450:	6921      	ldr	r1, [r4, #16]
 8005452:	464a      	mov	r2, r9
 8005454:	f000 fae6 	bl	8005a24 <memcpy>
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800545e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005462:	81a3      	strh	r3, [r4, #12]
 8005464:	6126      	str	r6, [r4, #16]
 8005466:	6165      	str	r5, [r4, #20]
 8005468:	444e      	add	r6, r9
 800546a:	eba5 0509 	sub.w	r5, r5, r9
 800546e:	6026      	str	r6, [r4, #0]
 8005470:	60a5      	str	r5, [r4, #8]
 8005472:	463e      	mov	r6, r7
 8005474:	42be      	cmp	r6, r7
 8005476:	d900      	bls.n	800547a <__ssputs_r+0x72>
 8005478:	463e      	mov	r6, r7
 800547a:	6820      	ldr	r0, [r4, #0]
 800547c:	4632      	mov	r2, r6
 800547e:	4641      	mov	r1, r8
 8005480:	f000 faa6 	bl	80059d0 <memmove>
 8005484:	68a3      	ldr	r3, [r4, #8]
 8005486:	1b9b      	subs	r3, r3, r6
 8005488:	60a3      	str	r3, [r4, #8]
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	4433      	add	r3, r6
 800548e:	6023      	str	r3, [r4, #0]
 8005490:	2000      	movs	r0, #0
 8005492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005496:	462a      	mov	r2, r5
 8005498:	f000 fad2 	bl	8005a40 <_realloc_r>
 800549c:	4606      	mov	r6, r0
 800549e:	2800      	cmp	r0, #0
 80054a0:	d1e0      	bne.n	8005464 <__ssputs_r+0x5c>
 80054a2:	6921      	ldr	r1, [r4, #16]
 80054a4:	4650      	mov	r0, sl
 80054a6:	f7ff feb7 	bl	8005218 <_free_r>
 80054aa:	230c      	movs	r3, #12
 80054ac:	f8ca 3000 	str.w	r3, [sl]
 80054b0:	89a3      	ldrh	r3, [r4, #12]
 80054b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054b6:	81a3      	strh	r3, [r4, #12]
 80054b8:	f04f 30ff 	mov.w	r0, #4294967295
 80054bc:	e7e9      	b.n	8005492 <__ssputs_r+0x8a>
	...

080054c0 <_svfiprintf_r>:
 80054c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c4:	4698      	mov	r8, r3
 80054c6:	898b      	ldrh	r3, [r1, #12]
 80054c8:	061b      	lsls	r3, r3, #24
 80054ca:	b09d      	sub	sp, #116	@ 0x74
 80054cc:	4607      	mov	r7, r0
 80054ce:	460d      	mov	r5, r1
 80054d0:	4614      	mov	r4, r2
 80054d2:	d510      	bpl.n	80054f6 <_svfiprintf_r+0x36>
 80054d4:	690b      	ldr	r3, [r1, #16]
 80054d6:	b973      	cbnz	r3, 80054f6 <_svfiprintf_r+0x36>
 80054d8:	2140      	movs	r1, #64	@ 0x40
 80054da:	f7ff ff09 	bl	80052f0 <_malloc_r>
 80054de:	6028      	str	r0, [r5, #0]
 80054e0:	6128      	str	r0, [r5, #16]
 80054e2:	b930      	cbnz	r0, 80054f2 <_svfiprintf_r+0x32>
 80054e4:	230c      	movs	r3, #12
 80054e6:	603b      	str	r3, [r7, #0]
 80054e8:	f04f 30ff 	mov.w	r0, #4294967295
 80054ec:	b01d      	add	sp, #116	@ 0x74
 80054ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f2:	2340      	movs	r3, #64	@ 0x40
 80054f4:	616b      	str	r3, [r5, #20]
 80054f6:	2300      	movs	r3, #0
 80054f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80054fa:	2320      	movs	r3, #32
 80054fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005500:	f8cd 800c 	str.w	r8, [sp, #12]
 8005504:	2330      	movs	r3, #48	@ 0x30
 8005506:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80056a4 <_svfiprintf_r+0x1e4>
 800550a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800550e:	f04f 0901 	mov.w	r9, #1
 8005512:	4623      	mov	r3, r4
 8005514:	469a      	mov	sl, r3
 8005516:	f813 2b01 	ldrb.w	r2, [r3], #1
 800551a:	b10a      	cbz	r2, 8005520 <_svfiprintf_r+0x60>
 800551c:	2a25      	cmp	r2, #37	@ 0x25
 800551e:	d1f9      	bne.n	8005514 <_svfiprintf_r+0x54>
 8005520:	ebba 0b04 	subs.w	fp, sl, r4
 8005524:	d00b      	beq.n	800553e <_svfiprintf_r+0x7e>
 8005526:	465b      	mov	r3, fp
 8005528:	4622      	mov	r2, r4
 800552a:	4629      	mov	r1, r5
 800552c:	4638      	mov	r0, r7
 800552e:	f7ff ff6b 	bl	8005408 <__ssputs_r>
 8005532:	3001      	adds	r0, #1
 8005534:	f000 80a7 	beq.w	8005686 <_svfiprintf_r+0x1c6>
 8005538:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800553a:	445a      	add	r2, fp
 800553c:	9209      	str	r2, [sp, #36]	@ 0x24
 800553e:	f89a 3000 	ldrb.w	r3, [sl]
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 809f 	beq.w	8005686 <_svfiprintf_r+0x1c6>
 8005548:	2300      	movs	r3, #0
 800554a:	f04f 32ff 	mov.w	r2, #4294967295
 800554e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005552:	f10a 0a01 	add.w	sl, sl, #1
 8005556:	9304      	str	r3, [sp, #16]
 8005558:	9307      	str	r3, [sp, #28]
 800555a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800555e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005560:	4654      	mov	r4, sl
 8005562:	2205      	movs	r2, #5
 8005564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005568:	484e      	ldr	r0, [pc, #312]	@ (80056a4 <_svfiprintf_r+0x1e4>)
 800556a:	f7fa fe39 	bl	80001e0 <memchr>
 800556e:	9a04      	ldr	r2, [sp, #16]
 8005570:	b9d8      	cbnz	r0, 80055aa <_svfiprintf_r+0xea>
 8005572:	06d0      	lsls	r0, r2, #27
 8005574:	bf44      	itt	mi
 8005576:	2320      	movmi	r3, #32
 8005578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800557c:	0711      	lsls	r1, r2, #28
 800557e:	bf44      	itt	mi
 8005580:	232b      	movmi	r3, #43	@ 0x2b
 8005582:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005586:	f89a 3000 	ldrb.w	r3, [sl]
 800558a:	2b2a      	cmp	r3, #42	@ 0x2a
 800558c:	d015      	beq.n	80055ba <_svfiprintf_r+0xfa>
 800558e:	9a07      	ldr	r2, [sp, #28]
 8005590:	4654      	mov	r4, sl
 8005592:	2000      	movs	r0, #0
 8005594:	f04f 0c0a 	mov.w	ip, #10
 8005598:	4621      	mov	r1, r4
 800559a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800559e:	3b30      	subs	r3, #48	@ 0x30
 80055a0:	2b09      	cmp	r3, #9
 80055a2:	d94b      	bls.n	800563c <_svfiprintf_r+0x17c>
 80055a4:	b1b0      	cbz	r0, 80055d4 <_svfiprintf_r+0x114>
 80055a6:	9207      	str	r2, [sp, #28]
 80055a8:	e014      	b.n	80055d4 <_svfiprintf_r+0x114>
 80055aa:	eba0 0308 	sub.w	r3, r0, r8
 80055ae:	fa09 f303 	lsl.w	r3, r9, r3
 80055b2:	4313      	orrs	r3, r2
 80055b4:	9304      	str	r3, [sp, #16]
 80055b6:	46a2      	mov	sl, r4
 80055b8:	e7d2      	b.n	8005560 <_svfiprintf_r+0xa0>
 80055ba:	9b03      	ldr	r3, [sp, #12]
 80055bc:	1d19      	adds	r1, r3, #4
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	9103      	str	r1, [sp, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bfbb      	ittet	lt
 80055c6:	425b      	neglt	r3, r3
 80055c8:	f042 0202 	orrlt.w	r2, r2, #2
 80055cc:	9307      	strge	r3, [sp, #28]
 80055ce:	9307      	strlt	r3, [sp, #28]
 80055d0:	bfb8      	it	lt
 80055d2:	9204      	strlt	r2, [sp, #16]
 80055d4:	7823      	ldrb	r3, [r4, #0]
 80055d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80055d8:	d10a      	bne.n	80055f0 <_svfiprintf_r+0x130>
 80055da:	7863      	ldrb	r3, [r4, #1]
 80055dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80055de:	d132      	bne.n	8005646 <_svfiprintf_r+0x186>
 80055e0:	9b03      	ldr	r3, [sp, #12]
 80055e2:	1d1a      	adds	r2, r3, #4
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	9203      	str	r2, [sp, #12]
 80055e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055ec:	3402      	adds	r4, #2
 80055ee:	9305      	str	r3, [sp, #20]
 80055f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80056b4 <_svfiprintf_r+0x1f4>
 80055f4:	7821      	ldrb	r1, [r4, #0]
 80055f6:	2203      	movs	r2, #3
 80055f8:	4650      	mov	r0, sl
 80055fa:	f7fa fdf1 	bl	80001e0 <memchr>
 80055fe:	b138      	cbz	r0, 8005610 <_svfiprintf_r+0x150>
 8005600:	9b04      	ldr	r3, [sp, #16]
 8005602:	eba0 000a 	sub.w	r0, r0, sl
 8005606:	2240      	movs	r2, #64	@ 0x40
 8005608:	4082      	lsls	r2, r0
 800560a:	4313      	orrs	r3, r2
 800560c:	3401      	adds	r4, #1
 800560e:	9304      	str	r3, [sp, #16]
 8005610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005614:	4824      	ldr	r0, [pc, #144]	@ (80056a8 <_svfiprintf_r+0x1e8>)
 8005616:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800561a:	2206      	movs	r2, #6
 800561c:	f7fa fde0 	bl	80001e0 <memchr>
 8005620:	2800      	cmp	r0, #0
 8005622:	d036      	beq.n	8005692 <_svfiprintf_r+0x1d2>
 8005624:	4b21      	ldr	r3, [pc, #132]	@ (80056ac <_svfiprintf_r+0x1ec>)
 8005626:	bb1b      	cbnz	r3, 8005670 <_svfiprintf_r+0x1b0>
 8005628:	9b03      	ldr	r3, [sp, #12]
 800562a:	3307      	adds	r3, #7
 800562c:	f023 0307 	bic.w	r3, r3, #7
 8005630:	3308      	adds	r3, #8
 8005632:	9303      	str	r3, [sp, #12]
 8005634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005636:	4433      	add	r3, r6
 8005638:	9309      	str	r3, [sp, #36]	@ 0x24
 800563a:	e76a      	b.n	8005512 <_svfiprintf_r+0x52>
 800563c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005640:	460c      	mov	r4, r1
 8005642:	2001      	movs	r0, #1
 8005644:	e7a8      	b.n	8005598 <_svfiprintf_r+0xd8>
 8005646:	2300      	movs	r3, #0
 8005648:	3401      	adds	r4, #1
 800564a:	9305      	str	r3, [sp, #20]
 800564c:	4619      	mov	r1, r3
 800564e:	f04f 0c0a 	mov.w	ip, #10
 8005652:	4620      	mov	r0, r4
 8005654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005658:	3a30      	subs	r2, #48	@ 0x30
 800565a:	2a09      	cmp	r2, #9
 800565c:	d903      	bls.n	8005666 <_svfiprintf_r+0x1a6>
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0c6      	beq.n	80055f0 <_svfiprintf_r+0x130>
 8005662:	9105      	str	r1, [sp, #20]
 8005664:	e7c4      	b.n	80055f0 <_svfiprintf_r+0x130>
 8005666:	fb0c 2101 	mla	r1, ip, r1, r2
 800566a:	4604      	mov	r4, r0
 800566c:	2301      	movs	r3, #1
 800566e:	e7f0      	b.n	8005652 <_svfiprintf_r+0x192>
 8005670:	ab03      	add	r3, sp, #12
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	462a      	mov	r2, r5
 8005676:	4b0e      	ldr	r3, [pc, #56]	@ (80056b0 <_svfiprintf_r+0x1f0>)
 8005678:	a904      	add	r1, sp, #16
 800567a:	4638      	mov	r0, r7
 800567c:	f3af 8000 	nop.w
 8005680:	1c42      	adds	r2, r0, #1
 8005682:	4606      	mov	r6, r0
 8005684:	d1d6      	bne.n	8005634 <_svfiprintf_r+0x174>
 8005686:	89ab      	ldrh	r3, [r5, #12]
 8005688:	065b      	lsls	r3, r3, #25
 800568a:	f53f af2d 	bmi.w	80054e8 <_svfiprintf_r+0x28>
 800568e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005690:	e72c      	b.n	80054ec <_svfiprintf_r+0x2c>
 8005692:	ab03      	add	r3, sp, #12
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	462a      	mov	r2, r5
 8005698:	4b05      	ldr	r3, [pc, #20]	@ (80056b0 <_svfiprintf_r+0x1f0>)
 800569a:	a904      	add	r1, sp, #16
 800569c:	4638      	mov	r0, r7
 800569e:	f000 f879 	bl	8005794 <_printf_i>
 80056a2:	e7ed      	b.n	8005680 <_svfiprintf_r+0x1c0>
 80056a4:	08005e9c 	.word	0x08005e9c
 80056a8:	08005ea6 	.word	0x08005ea6
 80056ac:	00000000 	.word	0x00000000
 80056b0:	08005409 	.word	0x08005409
 80056b4:	08005ea2 	.word	0x08005ea2

080056b8 <_printf_common>:
 80056b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056bc:	4616      	mov	r6, r2
 80056be:	4698      	mov	r8, r3
 80056c0:	688a      	ldr	r2, [r1, #8]
 80056c2:	690b      	ldr	r3, [r1, #16]
 80056c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056c8:	4293      	cmp	r3, r2
 80056ca:	bfb8      	it	lt
 80056cc:	4613      	movlt	r3, r2
 80056ce:	6033      	str	r3, [r6, #0]
 80056d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056d4:	4607      	mov	r7, r0
 80056d6:	460c      	mov	r4, r1
 80056d8:	b10a      	cbz	r2, 80056de <_printf_common+0x26>
 80056da:	3301      	adds	r3, #1
 80056dc:	6033      	str	r3, [r6, #0]
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	0699      	lsls	r1, r3, #26
 80056e2:	bf42      	ittt	mi
 80056e4:	6833      	ldrmi	r3, [r6, #0]
 80056e6:	3302      	addmi	r3, #2
 80056e8:	6033      	strmi	r3, [r6, #0]
 80056ea:	6825      	ldr	r5, [r4, #0]
 80056ec:	f015 0506 	ands.w	r5, r5, #6
 80056f0:	d106      	bne.n	8005700 <_printf_common+0x48>
 80056f2:	f104 0a19 	add.w	sl, r4, #25
 80056f6:	68e3      	ldr	r3, [r4, #12]
 80056f8:	6832      	ldr	r2, [r6, #0]
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	42ab      	cmp	r3, r5
 80056fe:	dc26      	bgt.n	800574e <_printf_common+0x96>
 8005700:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005704:	6822      	ldr	r2, [r4, #0]
 8005706:	3b00      	subs	r3, #0
 8005708:	bf18      	it	ne
 800570a:	2301      	movne	r3, #1
 800570c:	0692      	lsls	r2, r2, #26
 800570e:	d42b      	bmi.n	8005768 <_printf_common+0xb0>
 8005710:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005714:	4641      	mov	r1, r8
 8005716:	4638      	mov	r0, r7
 8005718:	47c8      	blx	r9
 800571a:	3001      	adds	r0, #1
 800571c:	d01e      	beq.n	800575c <_printf_common+0xa4>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	6922      	ldr	r2, [r4, #16]
 8005722:	f003 0306 	and.w	r3, r3, #6
 8005726:	2b04      	cmp	r3, #4
 8005728:	bf02      	ittt	eq
 800572a:	68e5      	ldreq	r5, [r4, #12]
 800572c:	6833      	ldreq	r3, [r6, #0]
 800572e:	1aed      	subeq	r5, r5, r3
 8005730:	68a3      	ldr	r3, [r4, #8]
 8005732:	bf0c      	ite	eq
 8005734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005738:	2500      	movne	r5, #0
 800573a:	4293      	cmp	r3, r2
 800573c:	bfc4      	itt	gt
 800573e:	1a9b      	subgt	r3, r3, r2
 8005740:	18ed      	addgt	r5, r5, r3
 8005742:	2600      	movs	r6, #0
 8005744:	341a      	adds	r4, #26
 8005746:	42b5      	cmp	r5, r6
 8005748:	d11a      	bne.n	8005780 <_printf_common+0xc8>
 800574a:	2000      	movs	r0, #0
 800574c:	e008      	b.n	8005760 <_printf_common+0xa8>
 800574e:	2301      	movs	r3, #1
 8005750:	4652      	mov	r2, sl
 8005752:	4641      	mov	r1, r8
 8005754:	4638      	mov	r0, r7
 8005756:	47c8      	blx	r9
 8005758:	3001      	adds	r0, #1
 800575a:	d103      	bne.n	8005764 <_printf_common+0xac>
 800575c:	f04f 30ff 	mov.w	r0, #4294967295
 8005760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005764:	3501      	adds	r5, #1
 8005766:	e7c6      	b.n	80056f6 <_printf_common+0x3e>
 8005768:	18e1      	adds	r1, r4, r3
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	2030      	movs	r0, #48	@ 0x30
 800576e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005772:	4422      	add	r2, r4
 8005774:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005778:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800577c:	3302      	adds	r3, #2
 800577e:	e7c7      	b.n	8005710 <_printf_common+0x58>
 8005780:	2301      	movs	r3, #1
 8005782:	4622      	mov	r2, r4
 8005784:	4641      	mov	r1, r8
 8005786:	4638      	mov	r0, r7
 8005788:	47c8      	blx	r9
 800578a:	3001      	adds	r0, #1
 800578c:	d0e6      	beq.n	800575c <_printf_common+0xa4>
 800578e:	3601      	adds	r6, #1
 8005790:	e7d9      	b.n	8005746 <_printf_common+0x8e>
	...

08005794 <_printf_i>:
 8005794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005798:	7e0f      	ldrb	r7, [r1, #24]
 800579a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800579c:	2f78      	cmp	r7, #120	@ 0x78
 800579e:	4691      	mov	r9, r2
 80057a0:	4680      	mov	r8, r0
 80057a2:	460c      	mov	r4, r1
 80057a4:	469a      	mov	sl, r3
 80057a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057aa:	d807      	bhi.n	80057bc <_printf_i+0x28>
 80057ac:	2f62      	cmp	r7, #98	@ 0x62
 80057ae:	d80a      	bhi.n	80057c6 <_printf_i+0x32>
 80057b0:	2f00      	cmp	r7, #0
 80057b2:	f000 80d1 	beq.w	8005958 <_printf_i+0x1c4>
 80057b6:	2f58      	cmp	r7, #88	@ 0x58
 80057b8:	f000 80b8 	beq.w	800592c <_printf_i+0x198>
 80057bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057c4:	e03a      	b.n	800583c <_printf_i+0xa8>
 80057c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057ca:	2b15      	cmp	r3, #21
 80057cc:	d8f6      	bhi.n	80057bc <_printf_i+0x28>
 80057ce:	a101      	add	r1, pc, #4	@ (adr r1, 80057d4 <_printf_i+0x40>)
 80057d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057d4:	0800582d 	.word	0x0800582d
 80057d8:	08005841 	.word	0x08005841
 80057dc:	080057bd 	.word	0x080057bd
 80057e0:	080057bd 	.word	0x080057bd
 80057e4:	080057bd 	.word	0x080057bd
 80057e8:	080057bd 	.word	0x080057bd
 80057ec:	08005841 	.word	0x08005841
 80057f0:	080057bd 	.word	0x080057bd
 80057f4:	080057bd 	.word	0x080057bd
 80057f8:	080057bd 	.word	0x080057bd
 80057fc:	080057bd 	.word	0x080057bd
 8005800:	0800593f 	.word	0x0800593f
 8005804:	0800586b 	.word	0x0800586b
 8005808:	080058f9 	.word	0x080058f9
 800580c:	080057bd 	.word	0x080057bd
 8005810:	080057bd 	.word	0x080057bd
 8005814:	08005961 	.word	0x08005961
 8005818:	080057bd 	.word	0x080057bd
 800581c:	0800586b 	.word	0x0800586b
 8005820:	080057bd 	.word	0x080057bd
 8005824:	080057bd 	.word	0x080057bd
 8005828:	08005901 	.word	0x08005901
 800582c:	6833      	ldr	r3, [r6, #0]
 800582e:	1d1a      	adds	r2, r3, #4
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6032      	str	r2, [r6, #0]
 8005834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005838:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800583c:	2301      	movs	r3, #1
 800583e:	e09c      	b.n	800597a <_printf_i+0x1e6>
 8005840:	6833      	ldr	r3, [r6, #0]
 8005842:	6820      	ldr	r0, [r4, #0]
 8005844:	1d19      	adds	r1, r3, #4
 8005846:	6031      	str	r1, [r6, #0]
 8005848:	0606      	lsls	r6, r0, #24
 800584a:	d501      	bpl.n	8005850 <_printf_i+0xbc>
 800584c:	681d      	ldr	r5, [r3, #0]
 800584e:	e003      	b.n	8005858 <_printf_i+0xc4>
 8005850:	0645      	lsls	r5, r0, #25
 8005852:	d5fb      	bpl.n	800584c <_printf_i+0xb8>
 8005854:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005858:	2d00      	cmp	r5, #0
 800585a:	da03      	bge.n	8005864 <_printf_i+0xd0>
 800585c:	232d      	movs	r3, #45	@ 0x2d
 800585e:	426d      	negs	r5, r5
 8005860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005864:	4858      	ldr	r0, [pc, #352]	@ (80059c8 <_printf_i+0x234>)
 8005866:	230a      	movs	r3, #10
 8005868:	e011      	b.n	800588e <_printf_i+0xfa>
 800586a:	6821      	ldr	r1, [r4, #0]
 800586c:	6833      	ldr	r3, [r6, #0]
 800586e:	0608      	lsls	r0, r1, #24
 8005870:	f853 5b04 	ldr.w	r5, [r3], #4
 8005874:	d402      	bmi.n	800587c <_printf_i+0xe8>
 8005876:	0649      	lsls	r1, r1, #25
 8005878:	bf48      	it	mi
 800587a:	b2ad      	uxthmi	r5, r5
 800587c:	2f6f      	cmp	r7, #111	@ 0x6f
 800587e:	4852      	ldr	r0, [pc, #328]	@ (80059c8 <_printf_i+0x234>)
 8005880:	6033      	str	r3, [r6, #0]
 8005882:	bf14      	ite	ne
 8005884:	230a      	movne	r3, #10
 8005886:	2308      	moveq	r3, #8
 8005888:	2100      	movs	r1, #0
 800588a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800588e:	6866      	ldr	r6, [r4, #4]
 8005890:	60a6      	str	r6, [r4, #8]
 8005892:	2e00      	cmp	r6, #0
 8005894:	db05      	blt.n	80058a2 <_printf_i+0x10e>
 8005896:	6821      	ldr	r1, [r4, #0]
 8005898:	432e      	orrs	r6, r5
 800589a:	f021 0104 	bic.w	r1, r1, #4
 800589e:	6021      	str	r1, [r4, #0]
 80058a0:	d04b      	beq.n	800593a <_printf_i+0x1a6>
 80058a2:	4616      	mov	r6, r2
 80058a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80058a8:	fb03 5711 	mls	r7, r3, r1, r5
 80058ac:	5dc7      	ldrb	r7, [r0, r7]
 80058ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058b2:	462f      	mov	r7, r5
 80058b4:	42bb      	cmp	r3, r7
 80058b6:	460d      	mov	r5, r1
 80058b8:	d9f4      	bls.n	80058a4 <_printf_i+0x110>
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	d10b      	bne.n	80058d6 <_printf_i+0x142>
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	07df      	lsls	r7, r3, #31
 80058c2:	d508      	bpl.n	80058d6 <_printf_i+0x142>
 80058c4:	6923      	ldr	r3, [r4, #16]
 80058c6:	6861      	ldr	r1, [r4, #4]
 80058c8:	4299      	cmp	r1, r3
 80058ca:	bfde      	ittt	le
 80058cc:	2330      	movle	r3, #48	@ 0x30
 80058ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058d6:	1b92      	subs	r2, r2, r6
 80058d8:	6122      	str	r2, [r4, #16]
 80058da:	f8cd a000 	str.w	sl, [sp]
 80058de:	464b      	mov	r3, r9
 80058e0:	aa03      	add	r2, sp, #12
 80058e2:	4621      	mov	r1, r4
 80058e4:	4640      	mov	r0, r8
 80058e6:	f7ff fee7 	bl	80056b8 <_printf_common>
 80058ea:	3001      	adds	r0, #1
 80058ec:	d14a      	bne.n	8005984 <_printf_i+0x1f0>
 80058ee:	f04f 30ff 	mov.w	r0, #4294967295
 80058f2:	b004      	add	sp, #16
 80058f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	f043 0320 	orr.w	r3, r3, #32
 80058fe:	6023      	str	r3, [r4, #0]
 8005900:	4832      	ldr	r0, [pc, #200]	@ (80059cc <_printf_i+0x238>)
 8005902:	2778      	movs	r7, #120	@ 0x78
 8005904:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	6831      	ldr	r1, [r6, #0]
 800590c:	061f      	lsls	r7, r3, #24
 800590e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005912:	d402      	bmi.n	800591a <_printf_i+0x186>
 8005914:	065f      	lsls	r7, r3, #25
 8005916:	bf48      	it	mi
 8005918:	b2ad      	uxthmi	r5, r5
 800591a:	6031      	str	r1, [r6, #0]
 800591c:	07d9      	lsls	r1, r3, #31
 800591e:	bf44      	itt	mi
 8005920:	f043 0320 	orrmi.w	r3, r3, #32
 8005924:	6023      	strmi	r3, [r4, #0]
 8005926:	b11d      	cbz	r5, 8005930 <_printf_i+0x19c>
 8005928:	2310      	movs	r3, #16
 800592a:	e7ad      	b.n	8005888 <_printf_i+0xf4>
 800592c:	4826      	ldr	r0, [pc, #152]	@ (80059c8 <_printf_i+0x234>)
 800592e:	e7e9      	b.n	8005904 <_printf_i+0x170>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	f023 0320 	bic.w	r3, r3, #32
 8005936:	6023      	str	r3, [r4, #0]
 8005938:	e7f6      	b.n	8005928 <_printf_i+0x194>
 800593a:	4616      	mov	r6, r2
 800593c:	e7bd      	b.n	80058ba <_printf_i+0x126>
 800593e:	6833      	ldr	r3, [r6, #0]
 8005940:	6825      	ldr	r5, [r4, #0]
 8005942:	6961      	ldr	r1, [r4, #20]
 8005944:	1d18      	adds	r0, r3, #4
 8005946:	6030      	str	r0, [r6, #0]
 8005948:	062e      	lsls	r6, r5, #24
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	d501      	bpl.n	8005952 <_printf_i+0x1be>
 800594e:	6019      	str	r1, [r3, #0]
 8005950:	e002      	b.n	8005958 <_printf_i+0x1c4>
 8005952:	0668      	lsls	r0, r5, #25
 8005954:	d5fb      	bpl.n	800594e <_printf_i+0x1ba>
 8005956:	8019      	strh	r1, [r3, #0]
 8005958:	2300      	movs	r3, #0
 800595a:	6123      	str	r3, [r4, #16]
 800595c:	4616      	mov	r6, r2
 800595e:	e7bc      	b.n	80058da <_printf_i+0x146>
 8005960:	6833      	ldr	r3, [r6, #0]
 8005962:	1d1a      	adds	r2, r3, #4
 8005964:	6032      	str	r2, [r6, #0]
 8005966:	681e      	ldr	r6, [r3, #0]
 8005968:	6862      	ldr	r2, [r4, #4]
 800596a:	2100      	movs	r1, #0
 800596c:	4630      	mov	r0, r6
 800596e:	f7fa fc37 	bl	80001e0 <memchr>
 8005972:	b108      	cbz	r0, 8005978 <_printf_i+0x1e4>
 8005974:	1b80      	subs	r0, r0, r6
 8005976:	6060      	str	r0, [r4, #4]
 8005978:	6863      	ldr	r3, [r4, #4]
 800597a:	6123      	str	r3, [r4, #16]
 800597c:	2300      	movs	r3, #0
 800597e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005982:	e7aa      	b.n	80058da <_printf_i+0x146>
 8005984:	6923      	ldr	r3, [r4, #16]
 8005986:	4632      	mov	r2, r6
 8005988:	4649      	mov	r1, r9
 800598a:	4640      	mov	r0, r8
 800598c:	47d0      	blx	sl
 800598e:	3001      	adds	r0, #1
 8005990:	d0ad      	beq.n	80058ee <_printf_i+0x15a>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	079b      	lsls	r3, r3, #30
 8005996:	d413      	bmi.n	80059c0 <_printf_i+0x22c>
 8005998:	68e0      	ldr	r0, [r4, #12]
 800599a:	9b03      	ldr	r3, [sp, #12]
 800599c:	4298      	cmp	r0, r3
 800599e:	bfb8      	it	lt
 80059a0:	4618      	movlt	r0, r3
 80059a2:	e7a6      	b.n	80058f2 <_printf_i+0x15e>
 80059a4:	2301      	movs	r3, #1
 80059a6:	4632      	mov	r2, r6
 80059a8:	4649      	mov	r1, r9
 80059aa:	4640      	mov	r0, r8
 80059ac:	47d0      	blx	sl
 80059ae:	3001      	adds	r0, #1
 80059b0:	d09d      	beq.n	80058ee <_printf_i+0x15a>
 80059b2:	3501      	adds	r5, #1
 80059b4:	68e3      	ldr	r3, [r4, #12]
 80059b6:	9903      	ldr	r1, [sp, #12]
 80059b8:	1a5b      	subs	r3, r3, r1
 80059ba:	42ab      	cmp	r3, r5
 80059bc:	dcf2      	bgt.n	80059a4 <_printf_i+0x210>
 80059be:	e7eb      	b.n	8005998 <_printf_i+0x204>
 80059c0:	2500      	movs	r5, #0
 80059c2:	f104 0619 	add.w	r6, r4, #25
 80059c6:	e7f5      	b.n	80059b4 <_printf_i+0x220>
 80059c8:	08005ead 	.word	0x08005ead
 80059cc:	08005ebe 	.word	0x08005ebe

080059d0 <memmove>:
 80059d0:	4288      	cmp	r0, r1
 80059d2:	b510      	push	{r4, lr}
 80059d4:	eb01 0402 	add.w	r4, r1, r2
 80059d8:	d902      	bls.n	80059e0 <memmove+0x10>
 80059da:	4284      	cmp	r4, r0
 80059dc:	4623      	mov	r3, r4
 80059de:	d807      	bhi.n	80059f0 <memmove+0x20>
 80059e0:	1e43      	subs	r3, r0, #1
 80059e2:	42a1      	cmp	r1, r4
 80059e4:	d008      	beq.n	80059f8 <memmove+0x28>
 80059e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059ee:	e7f8      	b.n	80059e2 <memmove+0x12>
 80059f0:	4402      	add	r2, r0
 80059f2:	4601      	mov	r1, r0
 80059f4:	428a      	cmp	r2, r1
 80059f6:	d100      	bne.n	80059fa <memmove+0x2a>
 80059f8:	bd10      	pop	{r4, pc}
 80059fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a02:	e7f7      	b.n	80059f4 <memmove+0x24>

08005a04 <_sbrk_r>:
 8005a04:	b538      	push	{r3, r4, r5, lr}
 8005a06:	4d06      	ldr	r5, [pc, #24]	@ (8005a20 <_sbrk_r+0x1c>)
 8005a08:	2300      	movs	r3, #0
 8005a0a:	4604      	mov	r4, r0
 8005a0c:	4608      	mov	r0, r1
 8005a0e:	602b      	str	r3, [r5, #0]
 8005a10:	f7fb fd6c 	bl	80014ec <_sbrk>
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	d102      	bne.n	8005a1e <_sbrk_r+0x1a>
 8005a18:	682b      	ldr	r3, [r5, #0]
 8005a1a:	b103      	cbz	r3, 8005a1e <_sbrk_r+0x1a>
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
 8005a20:	200006c4 	.word	0x200006c4

08005a24 <memcpy>:
 8005a24:	440a      	add	r2, r1
 8005a26:	4291      	cmp	r1, r2
 8005a28:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a2c:	d100      	bne.n	8005a30 <memcpy+0xc>
 8005a2e:	4770      	bx	lr
 8005a30:	b510      	push	{r4, lr}
 8005a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a3a:	4291      	cmp	r1, r2
 8005a3c:	d1f9      	bne.n	8005a32 <memcpy+0xe>
 8005a3e:	bd10      	pop	{r4, pc}

08005a40 <_realloc_r>:
 8005a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a44:	4607      	mov	r7, r0
 8005a46:	4614      	mov	r4, r2
 8005a48:	460d      	mov	r5, r1
 8005a4a:	b921      	cbnz	r1, 8005a56 <_realloc_r+0x16>
 8005a4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a50:	4611      	mov	r1, r2
 8005a52:	f7ff bc4d 	b.w	80052f0 <_malloc_r>
 8005a56:	b92a      	cbnz	r2, 8005a64 <_realloc_r+0x24>
 8005a58:	f7ff fbde 	bl	8005218 <_free_r>
 8005a5c:	4625      	mov	r5, r4
 8005a5e:	4628      	mov	r0, r5
 8005a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a64:	f000 f81a 	bl	8005a9c <_malloc_usable_size_r>
 8005a68:	4284      	cmp	r4, r0
 8005a6a:	4606      	mov	r6, r0
 8005a6c:	d802      	bhi.n	8005a74 <_realloc_r+0x34>
 8005a6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a72:	d8f4      	bhi.n	8005a5e <_realloc_r+0x1e>
 8005a74:	4621      	mov	r1, r4
 8005a76:	4638      	mov	r0, r7
 8005a78:	f7ff fc3a 	bl	80052f0 <_malloc_r>
 8005a7c:	4680      	mov	r8, r0
 8005a7e:	b908      	cbnz	r0, 8005a84 <_realloc_r+0x44>
 8005a80:	4645      	mov	r5, r8
 8005a82:	e7ec      	b.n	8005a5e <_realloc_r+0x1e>
 8005a84:	42b4      	cmp	r4, r6
 8005a86:	4622      	mov	r2, r4
 8005a88:	4629      	mov	r1, r5
 8005a8a:	bf28      	it	cs
 8005a8c:	4632      	movcs	r2, r6
 8005a8e:	f7ff ffc9 	bl	8005a24 <memcpy>
 8005a92:	4629      	mov	r1, r5
 8005a94:	4638      	mov	r0, r7
 8005a96:	f7ff fbbf 	bl	8005218 <_free_r>
 8005a9a:	e7f1      	b.n	8005a80 <_realloc_r+0x40>

08005a9c <_malloc_usable_size_r>:
 8005a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aa0:	1f18      	subs	r0, r3, #4
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	bfbc      	itt	lt
 8005aa6:	580b      	ldrlt	r3, [r1, r0]
 8005aa8:	18c0      	addlt	r0, r0, r3
 8005aaa:	4770      	bx	lr

08005aac <_init>:
 8005aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aae:	bf00      	nop
 8005ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab2:	bc08      	pop	{r3}
 8005ab4:	469e      	mov	lr, r3
 8005ab6:	4770      	bx	lr

08005ab8 <_fini>:
 8005ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aba:	bf00      	nop
 8005abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005abe:	bc08      	pop	{r3}
 8005ac0:	469e      	mov	lr, r3
 8005ac2:	4770      	bx	lr
