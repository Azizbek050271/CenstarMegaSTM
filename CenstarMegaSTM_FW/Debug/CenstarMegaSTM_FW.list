
CenstarMegaSTM_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003428  08003428  00004428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003450  08003450  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003450  08003450  00004450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003458  08003458  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003458  08003458  00004458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800345c  0800345c  0000445c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003460  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000104  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000110  20000110  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bf6d  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c3a  00000000  00000000  00010fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad8  00000000  00000000  00012be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000880  00000000  00000000  000136c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d40  00000000  00000000  00013f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e7a5  00000000  00000000  00034c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6f9f  00000000  00000000  00043425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010a3c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d24  00000000  00000000  0010a408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0010d12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003410 	.word	0x08003410

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003410 	.word	0x08003410

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fbef 	bl	8000cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f825 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f915 	bl	8000730 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000506:	f000 f88b 	bl	8000620 <MX_I2C1_Init>
  MX_I2S3_Init();
 800050a:	f000 f8b7 	bl	800067c <MX_I2S3_Init>
  MX_USART2_UART_Init();
 800050e:	f000 f8e5 	bl	80006dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t*)"Hello STM32\r\n", 13, HAL_MAX_DELAY);
 8000512:	f04f 33ff 	mov.w	r3, #4294967295
 8000516:	220d      	movs	r2, #13
 8000518:	490a      	ldr	r1, [pc, #40]	@ (8000544 <main+0x50>)
 800051a:	480b      	ldr	r0, [pc, #44]	@ (8000548 <main+0x54>)
 800051c:	f002 fafa 	bl	8002b14 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint8_t ch;
    if (HAL_UART_Receive(&huart2, &ch, 1, 10) == HAL_OK)
 8000520:	1df9      	adds	r1, r7, #7
 8000522:	230a      	movs	r3, #10
 8000524:	2201      	movs	r2, #1
 8000526:	4808      	ldr	r0, [pc, #32]	@ (8000548 <main+0x54>)
 8000528:	f002 fb7f 	bl	8002c2a <HAL_UART_Receive>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d1f6      	bne.n	8000520 <main+0x2c>
    {
      HAL_UART_Transmit(&huart2, &ch, 1, HAL_MAX_DELAY);   // echo
 8000532:	1df9      	adds	r1, r7, #7
 8000534:	f04f 33ff 	mov.w	r3, #4294967295
 8000538:	2201      	movs	r2, #1
 800053a:	4803      	ldr	r0, [pc, #12]	@ (8000548 <main+0x54>)
 800053c:	f002 faea 	bl	8002b14 <HAL_UART_Transmit>
  {
 8000540:	e7ee      	b.n	8000520 <main+0x2c>
 8000542:	bf00      	nop
 8000544:	08003428 	.word	0x08003428
 8000548:	200000c4 	.word	0x200000c4

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	@ 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0320 	add.w	r3, r7, #32
 8000556:	2230      	movs	r2, #48	@ 0x30
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f002 ff2c 	bl	80033b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	4b28      	ldr	r3, [pc, #160]	@ (8000618 <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	4a27      	ldr	r2, [pc, #156]	@ (8000618 <SystemClock_Config+0xcc>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000580:	4b25      	ldr	r3, [pc, #148]	@ (8000618 <SystemClock_Config+0xcc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b22      	ldr	r3, [pc, #136]	@ (800061c <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a21      	ldr	r2, [pc, #132]	@ (800061c <SystemClock_Config+0xd0>)
 8000596:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b1f      	ldr	r3, [pc, #124]	@ (800061c <SystemClock_Config+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a8:	2301      	movs	r3, #1
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005bc:	2308      	movs	r3, #8
 80005be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ca:	2307      	movs	r3, #7
 80005cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fc74 	bl	8001ec0 <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005de:	f000 f9d3 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2302      	movs	r3, #2
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2105      	movs	r1, #5
 8000600:	4618      	mov	r0, r3
 8000602:	f001 fed5 	bl	80023b0 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800060c:	f000 f9bc 	bl	8000988 <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3750      	adds	r7, #80	@ 0x50
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000624:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000626:	4a13      	ldr	r2, [pc, #76]	@ (8000674 <MX_I2C1_Init+0x54>)
 8000628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800062a:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MX_I2C1_Init+0x50>)
 800062c:	4a12      	ldr	r2, [pc, #72]	@ (8000678 <MX_I2C1_Init+0x58>)
 800062e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000630:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <MX_I2C1_Init+0x50>)
 800063e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	@ (8000670 <MX_I2C1_Init+0x50>)
 800065e:	f000 fe4b 	bl	80012f8 <HAL_I2C_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000668:	f000 f98e 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000028 	.word	0x20000028
 8000674:	40005400 	.word	0x40005400
 8000678:	000186a0 	.word	0x000186a0

0800067c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000680:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <MX_I2S3_Init+0x54>)
 8000682:	4a14      	ldr	r2, [pc, #80]	@ (80006d4 <MX_I2S3_Init+0x58>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000686:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <MX_I2S3_Init+0x54>)
 8000688:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800068c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800068e:	4b10      	ldr	r3, [pc, #64]	@ (80006d0 <MX_I2S3_Init+0x54>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000694:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <MX_I2S3_Init+0x54>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800069a:	4b0d      	ldr	r3, [pc, #52]	@ (80006d0 <MX_I2S3_Init+0x54>)
 800069c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <MX_I2S3_Init+0x54>)
 80006a4:	4a0c      	ldr	r2, [pc, #48]	@ (80006d8 <MX_I2S3_Init+0x5c>)
 80006a6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006a8:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <MX_I2S3_Init+0x54>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ae:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <MX_I2S3_Init+0x54>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <MX_I2S3_Init+0x54>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <MX_I2S3_Init+0x54>)
 80006bc:	f000 ff60 	bl	8001580 <HAL_I2S_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006c6:	f000 f95f 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000007c 	.word	0x2000007c
 80006d4:	40003c00 	.word	0x40003c00
 80006d8:	00017700 	.word	0x00017700

080006dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	@ (800072c <MX_USART2_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_USART2_UART_Init+0x4c>)
 8000714:	f002 f9ae 	bl	8002a74 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f933 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000c4 	.word	0x200000c4
 800072c:	40004400 	.word	0x40004400

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	@ 0x30
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	4b89      	ldr	r3, [pc, #548]	@ (8000970 <MX_GPIO_Init+0x240>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a88      	ldr	r2, [pc, #544]	@ (8000970 <MX_GPIO_Init+0x240>)
 8000750:	f043 0310 	orr.w	r3, r3, #16
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b86      	ldr	r3, [pc, #536]	@ (8000970 <MX_GPIO_Init+0x240>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0310 	and.w	r3, r3, #16
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	4b82      	ldr	r3, [pc, #520]	@ (8000970 <MX_GPIO_Init+0x240>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a81      	ldr	r2, [pc, #516]	@ (8000970 <MX_GPIO_Init+0x240>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b7f      	ldr	r3, [pc, #508]	@ (8000970 <MX_GPIO_Init+0x240>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b7b      	ldr	r3, [pc, #492]	@ (8000970 <MX_GPIO_Init+0x240>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a7a      	ldr	r2, [pc, #488]	@ (8000970 <MX_GPIO_Init+0x240>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b78      	ldr	r3, [pc, #480]	@ (8000970 <MX_GPIO_Init+0x240>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b74      	ldr	r3, [pc, #464]	@ (8000970 <MX_GPIO_Init+0x240>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a73      	ldr	r2, [pc, #460]	@ (8000970 <MX_GPIO_Init+0x240>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b71      	ldr	r3, [pc, #452]	@ (8000970 <MX_GPIO_Init+0x240>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b6d      	ldr	r3, [pc, #436]	@ (8000970 <MX_GPIO_Init+0x240>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a6c      	ldr	r2, [pc, #432]	@ (8000970 <MX_GPIO_Init+0x240>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b6a      	ldr	r3, [pc, #424]	@ (8000970 <MX_GPIO_Init+0x240>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b66      	ldr	r3, [pc, #408]	@ (8000970 <MX_GPIO_Init+0x240>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a65      	ldr	r2, [pc, #404]	@ (8000970 <MX_GPIO_Init+0x240>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b63      	ldr	r3, [pc, #396]	@ (8000970 <MX_GPIO_Init+0x240>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2108      	movs	r1, #8
 80007f2:	4860      	ldr	r0, [pc, #384]	@ (8000974 <MX_GPIO_Init+0x244>)
 80007f4:	f000 fd66 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2101      	movs	r1, #1
 80007fc:	485e      	ldr	r0, [pc, #376]	@ (8000978 <MX_GPIO_Init+0x248>)
 80007fe:	f000 fd61 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000802:	2200      	movs	r2, #0
 8000804:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000808:	485c      	ldr	r0, [pc, #368]	@ (800097c <MX_GPIO_Init+0x24c>)
 800080a:	f000 fd5b 	bl	80012c4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800080e:	2308      	movs	r3, #8
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4853      	ldr	r0, [pc, #332]	@ (8000974 <MX_GPIO_Init+0x244>)
 8000826:	f000 fbb1 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800082a:	2301      	movs	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	484d      	ldr	r0, [pc, #308]	@ (8000978 <MX_GPIO_Init+0x248>)
 8000842:	f000 fba3 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000846:	2308      	movs	r3, #8
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000856:	2305      	movs	r3, #5
 8000858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4845      	ldr	r0, [pc, #276]	@ (8000978 <MX_GPIO_Init+0x248>)
 8000862:	f000 fb93 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000866:	2301      	movs	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800086a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	4841      	ldr	r0, [pc, #260]	@ (8000980 <MX_GPIO_Init+0x250>)
 800087c:	f000 fb86 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000880:	23e0      	movs	r3, #224	@ 0xe0
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000890:	2305      	movs	r3, #5
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4839      	ldr	r0, [pc, #228]	@ (8000980 <MX_GPIO_Init+0x250>)
 800089c:	f000 fb76 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a0:	2304      	movs	r3, #4
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	4834      	ldr	r0, [pc, #208]	@ (8000984 <MX_GPIO_Init+0x254>)
 80008b4:	f000 fb6a 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ca:	2305      	movs	r3, #5
 80008cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	482b      	ldr	r0, [pc, #172]	@ (8000984 <MX_GPIO_Init+0x254>)
 80008d6:	f000 fb59 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008da:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008de:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4822      	ldr	r0, [pc, #136]	@ (800097c <MX_GPIO_Init+0x24c>)
 80008f4:	f000 fb4a 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	481c      	ldr	r0, [pc, #112]	@ (8000980 <MX_GPIO_Init+0x250>)
 800090e:	f000 fb3d 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000912:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000924:	230a      	movs	r3, #10
 8000926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4814      	ldr	r0, [pc, #80]	@ (8000980 <MX_GPIO_Init+0x250>)
 8000930:	f000 fb2c 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000934:	2320      	movs	r3, #32
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	480d      	ldr	r0, [pc, #52]	@ (800097c <MX_GPIO_Init+0x24c>)
 8000948:	f000 fb20 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800094c:	2302      	movs	r3, #2
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000950:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_GPIO_Init+0x244>)
 8000962:	f000 fb13 	bl	8000f8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000966:	bf00      	nop
 8000968:	3730      	adds	r7, #48	@ 0x30
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40021000 	.word	0x40021000
 8000978:	40020800 	.word	0x40020800
 800097c:	40020c00 	.word	0x40020c00
 8000980:	40020000 	.word	0x40020000
 8000984:	40020400 	.word	0x40020400

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <Error_Handler+0x8>

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a2:	4a0f      	ldr	r2, [pc, #60]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009aa:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009be:	4a08      	ldr	r2, [pc, #32]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009d2:	2007      	movs	r0, #7
 80009d4:	f000 faa6 	bl	8000f24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	@ 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a19      	ldr	r2, [pc, #100]	@ (8000a68 <HAL_I2C_MspInit+0x84>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12c      	bne.n	8000a60 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a17      	ldr	r2, [pc, #92]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a22:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a28:	2312      	movs	r3, #18
 8000a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a34:	2304      	movs	r3, #4
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480c      	ldr	r0, [pc, #48]	@ (8000a70 <HAL_I2C_MspInit+0x8c>)
 8000a40:	f000 faa4 	bl	8000f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4c:	4a07      	ldr	r2, [pc, #28]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a54:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	@ 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020400 	.word	0x40020400

08000a74 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	@ 0x38
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a31      	ldr	r2, [pc, #196]	@ (8000b64 <HAL_I2S_MspInit+0xf0>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d15a      	bne.n	8000b5a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000aa8:	23c0      	movs	r3, #192	@ 0xc0
 8000aaa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 fe9b 	bl	80027f0 <HAL_RCCEx_PeriphCLKConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ac0:	f7ff ff62 	bl	8000988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	4b27      	ldr	r3, [pc, #156]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000acc:	4a26      	ldr	r2, [pc, #152]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000ace:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ad2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad4:	4b24      	ldr	r3, [pc, #144]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4b20      	ldr	r3, [pc, #128]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	4b19      	ldr	r3, [pc, #100]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b04:	4a18      	ldr	r2, [pc, #96]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0c:	4b16      	ldr	r3, [pc, #88]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b18:	2310      	movs	r3, #16
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b28:	2306      	movs	r3, #6
 8000b2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	480e      	ldr	r0, [pc, #56]	@ (8000b6c <HAL_I2S_MspInit+0xf8>)
 8000b34:	f000 fa2a 	bl	8000f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b38:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4806      	ldr	r0, [pc, #24]	@ (8000b70 <HAL_I2S_MspInit+0xfc>)
 8000b56:	f000 fa19 	bl	8000f8c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3738      	adds	r7, #56	@ 0x38
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40003c00 	.word	0x40003c00
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020800 	.word	0x40020800

08000b74 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	@ 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a19      	ldr	r2, [pc, #100]	@ (8000bf8 <HAL_UART_MspInit+0x84>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d12b      	bne.n	8000bee <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <HAL_UART_MspInit+0x88>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9e:	4a17      	ldr	r2, [pc, #92]	@ (8000bfc <HAL_UART_MspInit+0x88>)
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <HAL_UART_MspInit+0x88>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <HAL_UART_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a10      	ldr	r2, [pc, #64]	@ (8000bfc <HAL_UART_MspInit+0x88>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <HAL_UART_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bce:	230c      	movs	r3, #12
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bde:	2307      	movs	r3, #7
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <HAL_UART_MspInit+0x8c>)
 8000bea:	f000 f9cf 	bl	8000f8c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	@ 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40004400 	.word	0x40004400
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <NMI_Handler+0x4>

08000c0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5a:	f000 f891 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	@ (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cc0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c8c:	f7ff ffea 	bl	8000c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c90:	480c      	ldr	r0, [pc, #48]	@ (8000cc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c92:	490d      	ldr	r1, [pc, #52]	@ (8000cc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ca8:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f002 fb87 	bl	80033c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cba:	f7ff fc1b 	bl	80004f4 <main>
  bx  lr    
 8000cbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ccc:	08003460 	.word	0x08003460
  ldr r2, =_sbss
 8000cd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cd4:	20000110 	.word	0x20000110

08000cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>
	...

08000cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d1c <HAL_Init+0x40>)
 8000ce6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cec:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <HAL_Init+0x40>)
 8000cf2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	@ (8000d1c <HAL_Init+0x40>)
 8000cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 f90d 	bl	8000f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f808 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f7ff fe40 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023c00 	.word	0x40023c00

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <HAL_InitTick+0x54>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <HAL_InitTick+0x58>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f917 	bl	8000f72 <HAL_SYSTICK_Config>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00e      	b.n	8000d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d80a      	bhi.n	8000d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f000 f8ed 	bl	8000f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d60:	4a06      	ldr	r2, [pc, #24]	@ (8000d7c <HAL_InitTick+0x5c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e000      	b.n	8000d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000004 	.word	0x20000004

08000d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_IncTick+0x20>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <HAL_IncTick+0x24>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a04      	ldr	r2, [pc, #16]	@ (8000da4 <HAL_IncTick+0x24>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008
 8000da4:	2000010c 	.word	0x2000010c

08000da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b03      	ldr	r3, [pc, #12]	@ (8000dbc <HAL_GetTick+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	2000010c 	.word	0x2000010c

08000dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df2:	4a04      	ldr	r2, [pc, #16]	@ (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	60d3      	str	r3, [r2, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e0c:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <__NVIC_GetPriorityGrouping+0x18>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	f003 0307 	and.w	r3, r3, #7
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db0a      	blt.n	8000e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	490c      	ldr	r1, [pc, #48]	@ (8000e70 <__NVIC_SetPriority+0x4c>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	0112      	lsls	r2, r2, #4
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	440b      	add	r3, r1
 8000e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e4c:	e00a      	b.n	8000e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4908      	ldr	r1, [pc, #32]	@ (8000e74 <__NVIC_SetPriority+0x50>)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	0112      	lsls	r2, r2, #4
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	440b      	add	r3, r1
 8000e62:	761a      	strb	r2, [r3, #24]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	@ 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	bf28      	it	cs
 8000e96:	2304      	movcs	r3, #4
 8000e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	d902      	bls.n	8000ea8 <NVIC_EncodePriority+0x30>
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3b03      	subs	r3, #3
 8000ea6:	e000      	b.n	8000eaa <NVIC_EncodePriority+0x32>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	401a      	ands	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43d9      	mvns	r1, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	4313      	orrs	r3, r2
         );
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3724      	adds	r7, #36	@ 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ef0:	d301      	bcc.n	8000ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00f      	b.n	8000f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <SysTick_Config+0x40>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000efe:	210f      	movs	r1, #15
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f7ff ff8e 	bl	8000e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <SysTick_Config+0x40>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0e:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <SysTick_Config+0x40>)
 8000f10:	2207      	movs	r2, #7
 8000f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	e000e010 	.word	0xe000e010

08000f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ff47 	bl	8000dc0 <__NVIC_SetPriorityGrouping>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
 8000f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f4c:	f7ff ff5c 	bl	8000e08 <__NVIC_GetPriorityGrouping>
 8000f50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	68b9      	ldr	r1, [r7, #8]
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f7ff ff8e 	bl	8000e78 <NVIC_EncodePriority>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff5d 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f6a:	bf00      	nop
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ffb0 	bl	8000ee0 <SysTick_Config>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b089      	sub	sp, #36	@ 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	e16b      	b.n	8001280 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fa8:	2201      	movs	r2, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	f040 815a 	bne.w	800127a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d005      	beq.n	8000fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d130      	bne.n	8001040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	2203      	movs	r2, #3
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	68da      	ldr	r2, [r3, #12]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001014:	2201      	movs	r2, #1
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	091b      	lsrs	r3, r3, #4
 800102a:	f003 0201 	and.w	r2, r3, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b03      	cmp	r3, #3
 800104a:	d017      	beq.n	800107c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d123      	bne.n	80010d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	08da      	lsrs	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3208      	adds	r2, #8
 8001090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	691a      	ldr	r2, [r3, #16]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	08da      	lsrs	r2, r3, #3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3208      	adds	r2, #8
 80010ca:	69b9      	ldr	r1, [r7, #24]
 80010cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0203 	and.w	r2, r3, #3
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 80b4 	beq.w	800127a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b60      	ldr	r3, [pc, #384]	@ (8001298 <HAL_GPIO_Init+0x30c>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111a:	4a5f      	ldr	r2, [pc, #380]	@ (8001298 <HAL_GPIO_Init+0x30c>)
 800111c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001120:	6453      	str	r3, [r2, #68]	@ 0x44
 8001122:	4b5d      	ldr	r3, [pc, #372]	@ (8001298 <HAL_GPIO_Init+0x30c>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112e:	4a5b      	ldr	r2, [pc, #364]	@ (800129c <HAL_GPIO_Init+0x310>)
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	3302      	adds	r3, #2
 8001136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	220f      	movs	r2, #15
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a52      	ldr	r2, [pc, #328]	@ (80012a0 <HAL_GPIO_Init+0x314>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d02b      	beq.n	80011b2 <HAL_GPIO_Init+0x226>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a51      	ldr	r2, [pc, #324]	@ (80012a4 <HAL_GPIO_Init+0x318>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d025      	beq.n	80011ae <HAL_GPIO_Init+0x222>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a50      	ldr	r2, [pc, #320]	@ (80012a8 <HAL_GPIO_Init+0x31c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d01f      	beq.n	80011aa <HAL_GPIO_Init+0x21e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4f      	ldr	r2, [pc, #316]	@ (80012ac <HAL_GPIO_Init+0x320>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d019      	beq.n	80011a6 <HAL_GPIO_Init+0x21a>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a4e      	ldr	r2, [pc, #312]	@ (80012b0 <HAL_GPIO_Init+0x324>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d013      	beq.n	80011a2 <HAL_GPIO_Init+0x216>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4d      	ldr	r2, [pc, #308]	@ (80012b4 <HAL_GPIO_Init+0x328>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d00d      	beq.n	800119e <HAL_GPIO_Init+0x212>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4c      	ldr	r2, [pc, #304]	@ (80012b8 <HAL_GPIO_Init+0x32c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d007      	beq.n	800119a <HAL_GPIO_Init+0x20e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4b      	ldr	r2, [pc, #300]	@ (80012bc <HAL_GPIO_Init+0x330>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d101      	bne.n	8001196 <HAL_GPIO_Init+0x20a>
 8001192:	2307      	movs	r3, #7
 8001194:	e00e      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 8001196:	2308      	movs	r3, #8
 8001198:	e00c      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 800119a:	2306      	movs	r3, #6
 800119c:	e00a      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 800119e:	2305      	movs	r3, #5
 80011a0:	e008      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 80011a2:	2304      	movs	r3, #4
 80011a4:	e006      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 80011a6:	2303      	movs	r3, #3
 80011a8:	e004      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 80011aa:	2302      	movs	r3, #2
 80011ac:	e002      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <HAL_GPIO_Init+0x228>
 80011b2:	2300      	movs	r3, #0
 80011b4:	69fa      	ldr	r2, [r7, #28]
 80011b6:	f002 0203 	and.w	r2, r2, #3
 80011ba:	0092      	lsls	r2, r2, #2
 80011bc:	4093      	lsls	r3, r2
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c4:	4935      	ldr	r1, [pc, #212]	@ (800129c <HAL_GPIO_Init+0x310>)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d2:	4b3b      	ldr	r3, [pc, #236]	@ (80012c0 <HAL_GPIO_Init+0x334>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011f6:	4a32      	ldr	r2, [pc, #200]	@ (80012c0 <HAL_GPIO_Init+0x334>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011fc:	4b30      	ldr	r3, [pc, #192]	@ (80012c0 <HAL_GPIO_Init+0x334>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001220:	4a27      	ldr	r2, [pc, #156]	@ (80012c0 <HAL_GPIO_Init+0x334>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001226:	4b26      	ldr	r3, [pc, #152]	@ (80012c0 <HAL_GPIO_Init+0x334>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800124a:	4a1d      	ldr	r2, [pc, #116]	@ (80012c0 <HAL_GPIO_Init+0x334>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001250:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <HAL_GPIO_Init+0x334>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001274:	4a12      	ldr	r2, [pc, #72]	@ (80012c0 <HAL_GPIO_Init+0x334>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3301      	adds	r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	2b0f      	cmp	r3, #15
 8001284:	f67f ae90 	bls.w	8000fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3724      	adds	r7, #36	@ 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	40013800 	.word	0x40013800
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40020800 	.word	0x40020800
 80012ac:	40020c00 	.word	0x40020c00
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40021400 	.word	0x40021400
 80012b8:	40021800 	.word	0x40021800
 80012bc:	40021c00 	.word	0x40021c00
 80012c0:	40013c00 	.word	0x40013c00

080012c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
 80012d0:	4613      	mov	r3, r2
 80012d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d4:	787b      	ldrb	r3, [r7, #1]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e0:	e003      	b.n	80012ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	619a      	str	r2, [r3, #24]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e12b      	b.n	8001562 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d106      	bne.n	8001324 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fb60 	bl	80009e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2224      	movs	r2, #36	@ 0x24
 8001328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800134a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800135a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800135c:	f001 fa20 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 8001360:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4a81      	ldr	r2, [pc, #516]	@ (800156c <HAL_I2C_Init+0x274>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d807      	bhi.n	800137c <HAL_I2C_Init+0x84>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4a80      	ldr	r2, [pc, #512]	@ (8001570 <HAL_I2C_Init+0x278>)
 8001370:	4293      	cmp	r3, r2
 8001372:	bf94      	ite	ls
 8001374:	2301      	movls	r3, #1
 8001376:	2300      	movhi	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	e006      	b.n	800138a <HAL_I2C_Init+0x92>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4a7d      	ldr	r2, [pc, #500]	@ (8001574 <HAL_I2C_Init+0x27c>)
 8001380:	4293      	cmp	r3, r2
 8001382:	bf94      	ite	ls
 8001384:	2301      	movls	r3, #1
 8001386:	2300      	movhi	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e0e7      	b.n	8001562 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4a78      	ldr	r2, [pc, #480]	@ (8001578 <HAL_I2C_Init+0x280>)
 8001396:	fba2 2303 	umull	r2, r3, r2, r3
 800139a:	0c9b      	lsrs	r3, r3, #18
 800139c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	4a6a      	ldr	r2, [pc, #424]	@ (800156c <HAL_I2C_Init+0x274>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d802      	bhi.n	80013cc <HAL_I2C_Init+0xd4>
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	3301      	adds	r3, #1
 80013ca:	e009      	b.n	80013e0 <HAL_I2C_Init+0xe8>
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80013d2:	fb02 f303 	mul.w	r3, r2, r3
 80013d6:	4a69      	ldr	r2, [pc, #420]	@ (800157c <HAL_I2C_Init+0x284>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	099b      	lsrs	r3, r3, #6
 80013de:	3301      	adds	r3, #1
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	430b      	orrs	r3, r1
 80013e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80013f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	495c      	ldr	r1, [pc, #368]	@ (800156c <HAL_I2C_Init+0x274>)
 80013fc:	428b      	cmp	r3, r1
 80013fe:	d819      	bhi.n	8001434 <HAL_I2C_Init+0x13c>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	1e59      	subs	r1, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fbb1 f3f3 	udiv	r3, r1, r3
 800140e:	1c59      	adds	r1, r3, #1
 8001410:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001414:	400b      	ands	r3, r1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00a      	beq.n	8001430 <HAL_I2C_Init+0x138>
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1e59      	subs	r1, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fbb1 f3f3 	udiv	r3, r1, r3
 8001428:	3301      	adds	r3, #1
 800142a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800142e:	e051      	b.n	80014d4 <HAL_I2C_Init+0x1dc>
 8001430:	2304      	movs	r3, #4
 8001432:	e04f      	b.n	80014d4 <HAL_I2C_Init+0x1dc>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d111      	bne.n	8001460 <HAL_I2C_Init+0x168>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1e58      	subs	r0, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6859      	ldr	r1, [r3, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	440b      	add	r3, r1
 800144a:	fbb0 f3f3 	udiv	r3, r0, r3
 800144e:	3301      	adds	r3, #1
 8001450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001454:	2b00      	cmp	r3, #0
 8001456:	bf0c      	ite	eq
 8001458:	2301      	moveq	r3, #1
 800145a:	2300      	movne	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	e012      	b.n	8001486 <HAL_I2C_Init+0x18e>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	1e58      	subs	r0, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6859      	ldr	r1, [r3, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	0099      	lsls	r1, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	fbb0 f3f3 	udiv	r3, r0, r3
 8001476:	3301      	adds	r3, #1
 8001478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147c:	2b00      	cmp	r3, #0
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_I2C_Init+0x196>
 800148a:	2301      	movs	r3, #1
 800148c:	e022      	b.n	80014d4 <HAL_I2C_Init+0x1dc>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10e      	bne.n	80014b4 <HAL_I2C_Init+0x1bc>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	1e58      	subs	r0, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6859      	ldr	r1, [r3, #4]
 800149e:	460b      	mov	r3, r1
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	440b      	add	r3, r1
 80014a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80014a8:	3301      	adds	r3, #1
 80014aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014b2:	e00f      	b.n	80014d4 <HAL_I2C_Init+0x1dc>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	1e58      	subs	r0, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6859      	ldr	r1, [r3, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	0099      	lsls	r1, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ca:	3301      	adds	r3, #1
 80014cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	6809      	ldr	r1, [r1, #0]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69da      	ldr	r2, [r3, #28]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001502:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6911      	ldr	r1, [r2, #16]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68d2      	ldr	r2, [r2, #12]
 800150e:	4311      	orrs	r1, r2
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	430b      	orrs	r3, r1
 8001516:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0201 	orr.w	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2220      	movs	r2, #32
 800154e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	000186a0 	.word	0x000186a0
 8001570:	001e847f 	.word	0x001e847f
 8001574:	003d08ff 	.word	0x003d08ff
 8001578:	431bde83 	.word	0x431bde83
 800157c:	10624dd3 	.word	0x10624dd3

08001580 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e128      	b.n	80017e4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d109      	bne.n	80015b2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a90      	ldr	r2, [pc, #576]	@ (80017ec <HAL_I2S_Init+0x26c>)
 80015aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff fa61 	bl	8000a74 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2202      	movs	r2, #2
 80015b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80015c8:	f023 030f 	bic.w	r3, r3, #15
 80015cc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2202      	movs	r2, #2
 80015d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d060      	beq.n	80016a0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80015e6:	2310      	movs	r3, #16
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	e001      	b.n	80015f0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80015ec:	2320      	movs	r3, #32
 80015ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b20      	cmp	r3, #32
 80015f6:	d802      	bhi.n	80015fe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80015fe:	2001      	movs	r0, #1
 8001600:	f001 f9d8 	bl	80029b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001604:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800160e:	d125      	bne.n	800165c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d010      	beq.n	800163a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	461a      	mov	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	fbb2 f3f3 	udiv	r3, r2, r3
 8001634:	3305      	adds	r3, #5
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	e01f      	b.n	800167a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	fbb2 f2f3 	udiv	r2, r2, r3
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	461a      	mov	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	fbb2 f3f3 	udiv	r3, r2, r3
 8001656:	3305      	adds	r3, #5
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	e00e      	b.n	800167a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	fbb2 f2f3 	udiv	r2, r2, r3
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	461a      	mov	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	3305      	adds	r3, #5
 8001678:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4a5c      	ldr	r2, [pc, #368]	@ (80017f0 <HAL_I2S_Init+0x270>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	08db      	lsrs	r3, r3, #3
 8001684:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	085b      	lsrs	r3, r3, #1
 8001696:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	61bb      	str	r3, [r7, #24]
 800169e:	e003      	b.n	80016a8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d902      	bls.n	80016b4 <HAL_I2S_Init+0x134>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	2bff      	cmp	r3, #255	@ 0xff
 80016b2:	d907      	bls.n	80016c4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b8:	f043 0210 	orr.w	r2, r3, #16
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e08f      	b.n	80017e4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	ea42 0103 	orr.w	r1, r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80016e2:	f023 030f 	bic.w	r3, r3, #15
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6851      	ldr	r1, [r2, #4]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6892      	ldr	r2, [r2, #8]
 80016ee:	4311      	orrs	r1, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	68d2      	ldr	r2, [r2, #12]
 80016f4:	4311      	orrs	r1, r2
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6992      	ldr	r2, [r2, #24]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001706:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d161      	bne.n	80017d4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a38      	ldr	r2, [pc, #224]	@ (80017f4 <HAL_I2S_Init+0x274>)
 8001714:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a37      	ldr	r2, [pc, #220]	@ (80017f8 <HAL_I2S_Init+0x278>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d101      	bne.n	8001724 <HAL_I2S_Init+0x1a4>
 8001720:	4b36      	ldr	r3, [pc, #216]	@ (80017fc <HAL_I2S_Init+0x27c>)
 8001722:	e001      	b.n	8001728 <HAL_I2S_Init+0x1a8>
 8001724:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	4932      	ldr	r1, [pc, #200]	@ (80017f8 <HAL_I2S_Init+0x278>)
 8001730:	428a      	cmp	r2, r1
 8001732:	d101      	bne.n	8001738 <HAL_I2S_Init+0x1b8>
 8001734:	4a31      	ldr	r2, [pc, #196]	@ (80017fc <HAL_I2S_Init+0x27c>)
 8001736:	e001      	b.n	800173c <HAL_I2S_Init+0x1bc>
 8001738:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800173c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001740:	f023 030f 	bic.w	r3, r3, #15
 8001744:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a2b      	ldr	r2, [pc, #172]	@ (80017f8 <HAL_I2S_Init+0x278>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d101      	bne.n	8001754 <HAL_I2S_Init+0x1d4>
 8001750:	4b2a      	ldr	r3, [pc, #168]	@ (80017fc <HAL_I2S_Init+0x27c>)
 8001752:	e001      	b.n	8001758 <HAL_I2S_Init+0x1d8>
 8001754:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001758:	2202      	movs	r2, #2
 800175a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a25      	ldr	r2, [pc, #148]	@ (80017f8 <HAL_I2S_Init+0x278>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d101      	bne.n	800176a <HAL_I2S_Init+0x1ea>
 8001766:	4b25      	ldr	r3, [pc, #148]	@ (80017fc <HAL_I2S_Init+0x27c>)
 8001768:	e001      	b.n	800176e <HAL_I2S_Init+0x1ee>
 800176a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800177a:	d003      	beq.n	8001784 <HAL_I2S_Init+0x204>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d103      	bne.n	800178c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001784:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	e001      	b.n	8001790 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800179a:	4313      	orrs	r3, r2
 800179c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80017a4:	4313      	orrs	r3, r2
 80017a6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80017ae:	4313      	orrs	r3, r2
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	897b      	ldrh	r3, [r7, #10]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017bc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a0d      	ldr	r2, [pc, #52]	@ (80017f8 <HAL_I2S_Init+0x278>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d101      	bne.n	80017cc <HAL_I2S_Init+0x24c>
 80017c8:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <HAL_I2S_Init+0x27c>)
 80017ca:	e001      	b.n	80017d0 <HAL_I2S_Init+0x250>
 80017cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80017d0:	897a      	ldrh	r2, [r7, #10]
 80017d2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3720      	adds	r7, #32
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	080018f7 	.word	0x080018f7
 80017f0:	cccccccd 	.word	0xcccccccd
 80017f4:	08001a0d 	.word	0x08001a0d
 80017f8:	40003800 	.word	0x40003800
 80017fc:	40003400 	.word	0x40003400

08001800 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001848:	881a      	ldrh	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001854:	1c9a      	adds	r2, r3, #2
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800185e:	b29b      	uxth	r3, r3
 8001860:	3b01      	subs	r3, #1
 8001862:	b29a      	uxth	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800186c:	b29b      	uxth	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10e      	bne.n	8001890 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001880:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ffb8 	bl	8001800 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018aa:	b292      	uxth	r2, r2
 80018ac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b2:	1c9a      	adds	r2, r3, #2
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80018bc:	b29b      	uxth	r3, r3
 80018be:	3b01      	subs	r3, #1
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10e      	bne.n	80018ee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80018de:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff93 	bl	8001814 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b04      	cmp	r3, #4
 8001910:	d13a      	bne.n	8001988 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b01      	cmp	r3, #1
 800191a:	d109      	bne.n	8001930 <I2S_IRQHandler+0x3a>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001926:	2b40      	cmp	r3, #64	@ 0x40
 8001928:	d102      	bne.n	8001930 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ffb4 	bl	8001898 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001936:	2b40      	cmp	r3, #64	@ 0x40
 8001938:	d126      	bne.n	8001988 <I2S_IRQHandler+0x92>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0320 	and.w	r3, r3, #32
 8001944:	2b20      	cmp	r3, #32
 8001946:	d11f      	bne.n	8001988 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001956:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	f043 0202 	orr.w	r2, r3, #2
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ff50 	bl	8001828 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b03      	cmp	r3, #3
 8001992:	d136      	bne.n	8001a02 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b02      	cmp	r3, #2
 800199c:	d109      	bne.n	80019b2 <I2S_IRQHandler+0xbc>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019a8:	2b80      	cmp	r3, #128	@ 0x80
 80019aa:	d102      	bne.n	80019b2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ff45 	bl	800183c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d122      	bne.n	8001a02 <I2S_IRQHandler+0x10c>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0320 	and.w	r3, r3, #32
 80019c6:	2b20      	cmp	r3, #32
 80019c8:	d11b      	bne.n	8001a02 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80019d8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f4:	f043 0204 	orr.w	r2, r3, #4
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff13 	bl	8001828 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a92      	ldr	r2, [pc, #584]	@ (8001c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d101      	bne.n	8001a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001a26:	4b92      	ldr	r3, [pc, #584]	@ (8001c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001a28:	e001      	b.n	8001a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001a2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a8b      	ldr	r2, [pc, #556]	@ (8001c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d101      	bne.n	8001a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001a44:	4b8a      	ldr	r3, [pc, #552]	@ (8001c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001a46:	e001      	b.n	8001a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001a48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a58:	d004      	beq.n	8001a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f040 8099 	bne.w	8001b96 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d107      	bne.n	8001a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f925 	bl	8001cc8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d107      	bne.n	8001a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f9c8 	bl	8001e28 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a9e:	2b40      	cmp	r3, #64	@ 0x40
 8001aa0:	d13a      	bne.n	8001b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	f003 0320 	and.w	r3, r3, #32
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d035      	beq.n	8001b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a6e      	ldr	r2, [pc, #440]	@ (8001c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001ab6:	4b6e      	ldr	r3, [pc, #440]	@ (8001c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ab8:	e001      	b.n	8001abe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001aba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4969      	ldr	r1, [pc, #420]	@ (8001c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ac6:	428b      	cmp	r3, r1
 8001ac8:	d101      	bne.n	8001ace <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001aca:	4b69      	ldr	r3, [pc, #420]	@ (8001c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001acc:	e001      	b.n	8001ad2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001ace:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ad2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001ad6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001ae6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0a:	f043 0202 	orr.w	r2, r3, #2
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fe88 	bl	8001828 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	f040 80c3 	bne.w	8001caa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f003 0320 	and.w	r3, r3, #32
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 80bd 	beq.w	8001caa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001b3e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a49      	ldr	r2, [pc, #292]	@ (8001c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d101      	bne.n	8001b4e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001b4a:	4b49      	ldr	r3, [pc, #292]	@ (8001c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b4c:	e001      	b.n	8001b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001b4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4944      	ldr	r1, [pc, #272]	@ (8001c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001b5a:	428b      	cmp	r3, r1
 8001b5c:	d101      	bne.n	8001b62 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001b5e:	4b44      	ldr	r3, [pc, #272]	@ (8001c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001b60:	e001      	b.n	8001b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001b62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001b66:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001b6a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b86:	f043 0204 	orr.w	r2, r3, #4
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff fe4a 	bl	8001828 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001b94:	e089      	b.n	8001caa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d107      	bne.n	8001bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d002      	beq.n	8001bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f8be 	bl	8001d2c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d107      	bne.n	8001bca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f8fd 	bl	8001dc4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd0:	2b40      	cmp	r3, #64	@ 0x40
 8001bd2:	d12f      	bne.n	8001c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d02a      	beq.n	8001c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001bec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8001c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d101      	bne.n	8001bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001bfa:	e001      	b.n	8001c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001bfc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4919      	ldr	r1, [pc, #100]	@ (8001c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c08:	428b      	cmp	r3, r1
 8001c0a:	d101      	bne.n	8001c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001c0c:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c0e:	e001      	b.n	8001c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001c10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c14:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001c18:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	f043 0202 	orr.w	r2, r3, #2
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fdfa 	bl	8001828 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d136      	bne.n	8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	f003 0320 	and.w	r3, r3, #32
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d031      	beq.n	8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a07      	ldr	r2, [pc, #28]	@ (8001c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d101      	bne.n	8001c56 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001c52:	4b07      	ldr	r3, [pc, #28]	@ (8001c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c54:	e001      	b.n	8001c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001c56:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4902      	ldr	r1, [pc, #8]	@ (8001c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001c62:	428b      	cmp	r3, r1
 8001c64:	d106      	bne.n	8001c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001c66:	4b02      	ldr	r3, [pc, #8]	@ (8001c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001c68:	e006      	b.n	8001c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001c6a:	bf00      	nop
 8001c6c:	40003800 	.word	0x40003800
 8001c70:	40003400 	.word	0x40003400
 8001c74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c78:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001c7c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c8c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	f043 0204 	orr.w	r2, r3, #4
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff fdc0 	bl	8001828 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ca8:	e000      	b.n	8001cac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001caa:	bf00      	nop
}
 8001cac:	bf00      	nop
 8001cae:	3720      	adds	r7, #32
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd4:	1c99      	adds	r1, r3, #2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6251      	str	r1, [r2, #36]	@ 0x24
 8001cda:	881a      	ldrh	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d113      	bne.n	8001d22 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001d08:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d106      	bne.n	8001d22 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ffc9 	bl	8001cb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d38:	1c99      	adds	r1, r3, #2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6251      	str	r1, [r2, #36]	@ 0x24
 8001d3e:	8819      	ldrh	r1, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1d      	ldr	r2, [pc, #116]	@ (8001dbc <I2SEx_TxISR_I2SExt+0x90>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <I2SEx_TxISR_I2SExt+0x22>
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc0 <I2SEx_TxISR_I2SExt+0x94>)
 8001d4c:	e001      	b.n	8001d52 <I2SEx_TxISR_I2SExt+0x26>
 8001d4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d52:	460a      	mov	r2, r1
 8001d54:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d121      	bne.n	8001db2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a12      	ldr	r2, [pc, #72]	@ (8001dbc <I2SEx_TxISR_I2SExt+0x90>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d101      	bne.n	8001d7c <I2SEx_TxISR_I2SExt+0x50>
 8001d78:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <I2SEx_TxISR_I2SExt+0x94>)
 8001d7a:	e001      	b.n	8001d80 <I2SEx_TxISR_I2SExt+0x54>
 8001d7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	490d      	ldr	r1, [pc, #52]	@ (8001dbc <I2SEx_TxISR_I2SExt+0x90>)
 8001d88:	428b      	cmp	r3, r1
 8001d8a:	d101      	bne.n	8001d90 <I2SEx_TxISR_I2SExt+0x64>
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc0 <I2SEx_TxISR_I2SExt+0x94>)
 8001d8e:	e001      	b.n	8001d94 <I2SEx_TxISR_I2SExt+0x68>
 8001d90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001d98:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d106      	bne.n	8001db2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff81 	bl	8001cb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40003800 	.word	0x40003800
 8001dc0:	40003400 	.word	0x40003400

08001dc4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68d8      	ldr	r0, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd6:	1c99      	adds	r1, r3, #2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8001ddc:	b282      	uxth	r2, r0
 8001dde:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d113      	bne.n	8001e20 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001e06:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ff4a 	bl	8001cb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a20      	ldr	r2, [pc, #128]	@ (8001eb8 <I2SEx_RxISR_I2SExt+0x90>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d101      	bne.n	8001e3e <I2SEx_RxISR_I2SExt+0x16>
 8001e3a:	4b20      	ldr	r3, [pc, #128]	@ (8001ebc <I2SEx_RxISR_I2SExt+0x94>)
 8001e3c:	e001      	b.n	8001e42 <I2SEx_RxISR_I2SExt+0x1a>
 8001e3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e42:	68d8      	ldr	r0, [r3, #12]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e48:	1c99      	adds	r1, r3, #2
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8001e4e:	b282      	uxth	r2, r0
 8001e50:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d121      	bne.n	8001eae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a12      	ldr	r2, [pc, #72]	@ (8001eb8 <I2SEx_RxISR_I2SExt+0x90>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d101      	bne.n	8001e78 <I2SEx_RxISR_I2SExt+0x50>
 8001e74:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <I2SEx_RxISR_I2SExt+0x94>)
 8001e76:	e001      	b.n	8001e7c <I2SEx_RxISR_I2SExt+0x54>
 8001e78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	490d      	ldr	r1, [pc, #52]	@ (8001eb8 <I2SEx_RxISR_I2SExt+0x90>)
 8001e84:	428b      	cmp	r3, r1
 8001e86:	d101      	bne.n	8001e8c <I2SEx_RxISR_I2SExt+0x64>
 8001e88:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <I2SEx_RxISR_I2SExt+0x94>)
 8001e8a:	e001      	b.n	8001e90 <I2SEx_RxISR_I2SExt+0x68>
 8001e8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e90:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001e94:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d106      	bne.n	8001eae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff03 	bl	8001cb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40003800 	.word	0x40003800
 8001ebc:	40003400 	.word	0x40003400

08001ec0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e267      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d075      	beq.n	8001fca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ede:	4b88      	ldr	r3, [pc, #544]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d00c      	beq.n	8001f04 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eea:	4b85      	ldr	r3, [pc, #532]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d112      	bne.n	8001f1c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef6:	4b82      	ldr	r3, [pc, #520]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001efe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f02:	d10b      	bne.n	8001f1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f04:	4b7e      	ldr	r3, [pc, #504]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d05b      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x108>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d157      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e242      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f24:	d106      	bne.n	8001f34 <HAL_RCC_OscConfig+0x74>
 8001f26:	4b76      	ldr	r3, [pc, #472]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a75      	ldr	r2, [pc, #468]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e01d      	b.n	8001f70 <HAL_RCC_OscConfig+0xb0>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f3c:	d10c      	bne.n	8001f58 <HAL_RCC_OscConfig+0x98>
 8001f3e:	4b70      	ldr	r3, [pc, #448]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a6f      	ldr	r2, [pc, #444]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	4b6d      	ldr	r3, [pc, #436]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a6c      	ldr	r2, [pc, #432]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e00b      	b.n	8001f70 <HAL_RCC_OscConfig+0xb0>
 8001f58:	4b69      	ldr	r3, [pc, #420]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a68      	ldr	r2, [pc, #416]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	4b66      	ldr	r3, [pc, #408]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a65      	ldr	r2, [pc, #404]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d013      	beq.n	8001fa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7fe ff16 	bl	8000da8 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f80:	f7fe ff12 	bl	8000da8 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	@ 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e207      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	4b5b      	ldr	r3, [pc, #364]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0xc0>
 8001f9e:	e014      	b.n	8001fca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7fe ff02 	bl	8000da8 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7fe fefe 	bl	8000da8 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	@ 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e1f3      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fba:	4b51      	ldr	r3, [pc, #324]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0xe8>
 8001fc6:	e000      	b.n	8001fca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d063      	beq.n	800209e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00b      	beq.n	8001ffa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe2:	4b47      	ldr	r3, [pc, #284]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d11c      	bne.n	8002028 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fee:	4b44      	ldr	r3, [pc, #272]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d116      	bne.n	8002028 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffa:	4b41      	ldr	r3, [pc, #260]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_RCC_OscConfig+0x152>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e1c7      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002012:	4b3b      	ldr	r3, [pc, #236]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4937      	ldr	r1, [pc, #220]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002026:	e03a      	b.n	800209e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d020      	beq.n	8002072 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002030:	4b34      	ldr	r3, [pc, #208]	@ (8002104 <HAL_RCC_OscConfig+0x244>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002036:	f7fe feb7 	bl	8000da8 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203e:	f7fe feb3 	bl	8000da8 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e1a8      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	4b2b      	ldr	r3, [pc, #172]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4b28      	ldr	r3, [pc, #160]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4925      	ldr	r1, [pc, #148]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
 8002070:	e015      	b.n	800209e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002072:	4b24      	ldr	r3, [pc, #144]	@ (8002104 <HAL_RCC_OscConfig+0x244>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7fe fe96 	bl	8000da8 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002080:	f7fe fe92 	bl	8000da8 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e187      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002092:	4b1b      	ldr	r3, [pc, #108]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d036      	beq.n	8002118 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d016      	beq.n	80020e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b2:	4b15      	ldr	r3, [pc, #84]	@ (8002108 <HAL_RCC_OscConfig+0x248>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b8:	f7fe fe76 	bl	8000da8 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c0:	f7fe fe72 	bl	8000da8 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e167      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <HAL_RCC_OscConfig+0x240>)
 80020d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x200>
 80020de:	e01b      	b.n	8002118 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e0:	4b09      	ldr	r3, [pc, #36]	@ (8002108 <HAL_RCC_OscConfig+0x248>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e6:	f7fe fe5f 	bl	8000da8 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	e00e      	b.n	800210c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ee:	f7fe fe5b 	bl	8000da8 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d907      	bls.n	800210c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e150      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
 8002100:	40023800 	.word	0x40023800
 8002104:	42470000 	.word	0x42470000
 8002108:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	4b88      	ldr	r3, [pc, #544]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 800210e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1ea      	bne.n	80020ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 8097 	beq.w	8002254 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212a:	4b81      	ldr	r3, [pc, #516]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10f      	bne.n	8002156 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	4b7d      	ldr	r3, [pc, #500]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	4a7c      	ldr	r2, [pc, #496]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002144:	6413      	str	r3, [r2, #64]	@ 0x40
 8002146:	4b7a      	ldr	r3, [pc, #488]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002152:	2301      	movs	r3, #1
 8002154:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002156:	4b77      	ldr	r3, [pc, #476]	@ (8002334 <HAL_RCC_OscConfig+0x474>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d118      	bne.n	8002194 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002162:	4b74      	ldr	r3, [pc, #464]	@ (8002334 <HAL_RCC_OscConfig+0x474>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a73      	ldr	r2, [pc, #460]	@ (8002334 <HAL_RCC_OscConfig+0x474>)
 8002168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800216c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216e:	f7fe fe1b 	bl	8000da8 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002176:	f7fe fe17 	bl	8000da8 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e10c      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002188:	4b6a      	ldr	r3, [pc, #424]	@ (8002334 <HAL_RCC_OscConfig+0x474>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x2ea>
 800219c:	4b64      	ldr	r3, [pc, #400]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a0:	4a63      	ldr	r2, [pc, #396]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021a8:	e01c      	b.n	80021e4 <HAL_RCC_OscConfig+0x324>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b05      	cmp	r3, #5
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x30c>
 80021b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b6:	4a5e      	ldr	r2, [pc, #376]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80021be:	4b5c      	ldr	r3, [pc, #368]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ca:	e00b      	b.n	80021e4 <HAL_RCC_OscConfig+0x324>
 80021cc:	4b58      	ldr	r3, [pc, #352]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d0:	4a57      	ldr	r2, [pc, #348]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021d8:	4b55      	ldr	r3, [pc, #340]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021dc:	4a54      	ldr	r2, [pc, #336]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80021de:	f023 0304 	bic.w	r3, r3, #4
 80021e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d015      	beq.n	8002218 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ec:	f7fe fddc 	bl	8000da8 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f2:	e00a      	b.n	800220a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f4:	f7fe fdd8 	bl	8000da8 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e0cb      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220a:	4b49      	ldr	r3, [pc, #292]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0ee      	beq.n	80021f4 <HAL_RCC_OscConfig+0x334>
 8002216:	e014      	b.n	8002242 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002218:	f7fe fdc6 	bl	8000da8 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221e:	e00a      	b.n	8002236 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002220:	f7fe fdc2 	bl	8000da8 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e0b5      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002236:	4b3e      	ldr	r3, [pc, #248]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1ee      	bne.n	8002220 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002242:	7dfb      	ldrb	r3, [r7, #23]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d105      	bne.n	8002254 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002248:	4b39      	ldr	r3, [pc, #228]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224c:	4a38      	ldr	r2, [pc, #224]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 800224e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002252:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80a1 	beq.w	80023a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800225e:	4b34      	ldr	r3, [pc, #208]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b08      	cmp	r3, #8
 8002268:	d05c      	beq.n	8002324 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d141      	bne.n	80022f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002272:	4b31      	ldr	r3, [pc, #196]	@ (8002338 <HAL_RCC_OscConfig+0x478>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7fe fd96 	bl	8000da8 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002280:	f7fe fd92 	bl	8000da8 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e087      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	4b27      	ldr	r3, [pc, #156]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69da      	ldr	r2, [r3, #28]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	019b      	lsls	r3, r3, #6
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b4:	085b      	lsrs	r3, r3, #1
 80022b6:	3b01      	subs	r3, #1
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c0:	061b      	lsls	r3, r3, #24
 80022c2:	491b      	ldr	r1, [pc, #108]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002338 <HAL_RCC_OscConfig+0x478>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ce:	f7fe fd6b 	bl	8000da8 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d6:	f7fe fd67 	bl	8000da8 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e05c      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e8:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x416>
 80022f4:	e054      	b.n	80023a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f6:	4b10      	ldr	r3, [pc, #64]	@ (8002338 <HAL_RCC_OscConfig+0x478>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7fe fd54 	bl	8000da8 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002304:	f7fe fd50 	bl	8000da8 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e045      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002316:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <HAL_RCC_OscConfig+0x470>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x444>
 8002322:	e03d      	b.n	80023a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d107      	bne.n	800233c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e038      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
 8002330:	40023800 	.word	0x40023800
 8002334:	40007000 	.word	0x40007000
 8002338:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800233c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <HAL_RCC_OscConfig+0x4ec>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d028      	beq.n	800239c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d121      	bne.n	800239c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002362:	429a      	cmp	r2, r3
 8002364:	d11a      	bne.n	800239c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800236c:	4013      	ands	r3, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002372:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002374:	4293      	cmp	r3, r2
 8002376:	d111      	bne.n	800239c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002382:	085b      	lsrs	r3, r3, #1
 8002384:	3b01      	subs	r3, #1
 8002386:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d107      	bne.n	800239c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002396:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800

080023b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0cc      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c4:	4b68      	ldr	r3, [pc, #416]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d90c      	bls.n	80023ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d2:	4b65      	ldr	r3, [pc, #404]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b63      	ldr	r3, [pc, #396]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0b8      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d020      	beq.n	800243a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002404:	4b59      	ldr	r3, [pc, #356]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4a58      	ldr	r2, [pc, #352]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800240e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800241c:	4b53      	ldr	r3, [pc, #332]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a52      	ldr	r2, [pc, #328]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002426:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002428:	4b50      	ldr	r3, [pc, #320]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	494d      	ldr	r1, [pc, #308]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d044      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	4b47      	ldr	r3, [pc, #284]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d119      	bne.n	800248e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e07f      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d003      	beq.n	800246e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800246a:	2b03      	cmp	r3, #3
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246e:	4b3f      	ldr	r3, [pc, #252]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e06f      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247e:	4b3b      	ldr	r3, [pc, #236]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e067      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800248e:	4b37      	ldr	r3, [pc, #220]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f023 0203 	bic.w	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4934      	ldr	r1, [pc, #208]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	4313      	orrs	r3, r2
 800249e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a0:	f7fe fc82 	bl	8000da8 <HAL_GetTick>
 80024a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	e00a      	b.n	80024be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a8:	f7fe fc7e 	bl	8000da8 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e04f      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024be:	4b2b      	ldr	r3, [pc, #172]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 020c 	and.w	r2, r3, #12
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d1eb      	bne.n	80024a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024d0:	4b25      	ldr	r3, [pc, #148]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d20c      	bcs.n	80024f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b22      	ldr	r3, [pc, #136]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b20      	ldr	r3, [pc, #128]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e032      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002504:	4b19      	ldr	r3, [pc, #100]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4916      	ldr	r1, [pc, #88]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002522:	4b12      	ldr	r3, [pc, #72]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	490e      	ldr	r1, [pc, #56]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002536:	f000 f821 	bl	800257c <HAL_RCC_GetSysClockFreq>
 800253a:	4602      	mov	r2, r0
 800253c:	4b0b      	ldr	r3, [pc, #44]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	490a      	ldr	r1, [pc, #40]	@ (8002570 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	5ccb      	ldrb	r3, [r1, r3]
 800254a:	fa22 f303 	lsr.w	r3, r2, r3
 800254e:	4a09      	ldr	r2, [pc, #36]	@ (8002574 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002552:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fbe2 	bl	8000d20 <HAL_InitTick>

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023c00 	.word	0x40023c00
 800256c:	40023800 	.word	0x40023800
 8002570:	08003438 	.word	0x08003438
 8002574:	20000000 	.word	0x20000000
 8002578:	20000004 	.word	0x20000004

0800257c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002580:	b094      	sub	sp, #80	@ 0x50
 8002582:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002594:	4b79      	ldr	r3, [pc, #484]	@ (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	2b08      	cmp	r3, #8
 800259e:	d00d      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0x40>
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	f200 80e1 	bhi.w	8002768 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x34>
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d003      	beq.n	80025b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ae:	e0db      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025b0:	4b73      	ldr	r3, [pc, #460]	@ (8002780 <HAL_RCC_GetSysClockFreq+0x204>)
 80025b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025b4:	e0db      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025b6:	4b73      	ldr	r3, [pc, #460]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x208>)
 80025b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025ba:	e0d8      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025bc:	4b6f      	ldr	r3, [pc, #444]	@ (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025c6:	4b6d      	ldr	r3, [pc, #436]	@ (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d063      	beq.n	800269a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d2:	4b6a      	ldr	r3, [pc, #424]	@ (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	099b      	lsrs	r3, r3, #6
 80025d8:	2200      	movs	r2, #0
 80025da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80025e6:	2300      	movs	r3, #0
 80025e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025ee:	4622      	mov	r2, r4
 80025f0:	462b      	mov	r3, r5
 80025f2:	f04f 0000 	mov.w	r0, #0
 80025f6:	f04f 0100 	mov.w	r1, #0
 80025fa:	0159      	lsls	r1, r3, #5
 80025fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002600:	0150      	lsls	r0, r2, #5
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4621      	mov	r1, r4
 8002608:	1a51      	subs	r1, r2, r1
 800260a:	6139      	str	r1, [r7, #16]
 800260c:	4629      	mov	r1, r5
 800260e:	eb63 0301 	sbc.w	r3, r3, r1
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002620:	4659      	mov	r1, fp
 8002622:	018b      	lsls	r3, r1, #6
 8002624:	4651      	mov	r1, sl
 8002626:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800262a:	4651      	mov	r1, sl
 800262c:	018a      	lsls	r2, r1, #6
 800262e:	4651      	mov	r1, sl
 8002630:	ebb2 0801 	subs.w	r8, r2, r1
 8002634:	4659      	mov	r1, fp
 8002636:	eb63 0901 	sbc.w	r9, r3, r1
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002646:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800264a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800264e:	4690      	mov	r8, r2
 8002650:	4699      	mov	r9, r3
 8002652:	4623      	mov	r3, r4
 8002654:	eb18 0303 	adds.w	r3, r8, r3
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	462b      	mov	r3, r5
 800265c:	eb49 0303 	adc.w	r3, r9, r3
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800266e:	4629      	mov	r1, r5
 8002670:	024b      	lsls	r3, r1, #9
 8002672:	4621      	mov	r1, r4
 8002674:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002678:	4621      	mov	r1, r4
 800267a:	024a      	lsls	r2, r1, #9
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002682:	2200      	movs	r2, #0
 8002684:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002686:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002688:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800268c:	f7fd fd9c 	bl	80001c8 <__aeabi_uldivmod>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4613      	mov	r3, r2
 8002696:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002698:	e058      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269a:	4b38      	ldr	r3, [pc, #224]	@ (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	099b      	lsrs	r3, r3, #6
 80026a0:	2200      	movs	r2, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	4611      	mov	r1, r2
 80026a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026aa:	623b      	str	r3, [r7, #32]
 80026ac:	2300      	movs	r3, #0
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026b4:	4642      	mov	r2, r8
 80026b6:	464b      	mov	r3, r9
 80026b8:	f04f 0000 	mov.w	r0, #0
 80026bc:	f04f 0100 	mov.w	r1, #0
 80026c0:	0159      	lsls	r1, r3, #5
 80026c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026c6:	0150      	lsls	r0, r2, #5
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4641      	mov	r1, r8
 80026ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80026d2:	4649      	mov	r1, r9
 80026d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026ec:	ebb2 040a 	subs.w	r4, r2, sl
 80026f0:	eb63 050b 	sbc.w	r5, r3, fp
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	00eb      	lsls	r3, r5, #3
 80026fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002702:	00e2      	lsls	r2, r4, #3
 8002704:	4614      	mov	r4, r2
 8002706:	461d      	mov	r5, r3
 8002708:	4643      	mov	r3, r8
 800270a:	18e3      	adds	r3, r4, r3
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	464b      	mov	r3, r9
 8002710:	eb45 0303 	adc.w	r3, r5, r3
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002722:	4629      	mov	r1, r5
 8002724:	028b      	lsls	r3, r1, #10
 8002726:	4621      	mov	r1, r4
 8002728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800272c:	4621      	mov	r1, r4
 800272e:	028a      	lsls	r2, r1, #10
 8002730:	4610      	mov	r0, r2
 8002732:	4619      	mov	r1, r3
 8002734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002736:	2200      	movs	r2, #0
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	61fa      	str	r2, [r7, #28]
 800273c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002740:	f7fd fd42 	bl	80001c8 <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4613      	mov	r3, r2
 800274a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800274c:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	0c1b      	lsrs	r3, r3, #16
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	3301      	adds	r3, #1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800275c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800275e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002766:	e002      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002768:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <HAL_RCC_GetSysClockFreq+0x204>)
 800276a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800276c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800276e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002770:	4618      	mov	r0, r3
 8002772:	3750      	adds	r7, #80	@ 0x50
 8002774:	46bd      	mov	sp, r7
 8002776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800
 8002780:	00f42400 	.word	0x00f42400
 8002784:	007a1200 	.word	0x007a1200

08002788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800278c:	4b03      	ldr	r3, [pc, #12]	@ (800279c <HAL_RCC_GetHCLKFreq+0x14>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000000 	.word	0x20000000

080027a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027a4:	f7ff fff0 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	0a9b      	lsrs	r3, r3, #10
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4903      	ldr	r1, [pc, #12]	@ (80027c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40023800 	.word	0x40023800
 80027c4:	08003448 	.word	0x08003448

080027c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027cc:	f7ff ffdc 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b05      	ldr	r3, [pc, #20]	@ (80027e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	0b5b      	lsrs	r3, r3, #13
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	4903      	ldr	r1, [pc, #12]	@ (80027ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80027de:	5ccb      	ldrb	r3, [r1, r3]
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40023800 	.word	0x40023800
 80027ec:	08003448 	.word	0x08003448

080027f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d105      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002814:	2b00      	cmp	r3, #0
 8002816:	d035      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002818:	4b62      	ldr	r3, [pc, #392]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800281e:	f7fe fac3 	bl	8000da8 <HAL_GetTick>
 8002822:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002826:	f7fe fabf 	bl	8000da8 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e0b0      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002838:	4b5b      	ldr	r3, [pc, #364]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f0      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	019a      	lsls	r2, r3, #6
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	071b      	lsls	r3, r3, #28
 8002850:	4955      	ldr	r1, [pc, #340]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002858:	4b52      	ldr	r3, [pc, #328]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800285a:	2201      	movs	r2, #1
 800285c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800285e:	f7fe faa3 	bl	8000da8 <HAL_GetTick>
 8002862:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002866:	f7fe fa9f 	bl	8000da8 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e090      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002878:	4b4b      	ldr	r3, [pc, #300]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 8083 	beq.w	8002998 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	4b44      	ldr	r3, [pc, #272]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	4a43      	ldr	r2, [pc, #268]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a2:	4b41      	ldr	r3, [pc, #260]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80028ae:	4b3f      	ldr	r3, [pc, #252]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a3e      	ldr	r2, [pc, #248]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028ba:	f7fe fa75 	bl	8000da8 <HAL_GetTick>
 80028be:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80028c0:	e008      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c2:	f7fe fa71 	bl	8000da8 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e062      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80028d4:	4b35      	ldr	r3, [pc, #212]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028e0:	4b31      	ldr	r3, [pc, #196]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028e8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d02f      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d028      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028fe:	4b2a      	ldr	r3, [pc, #168]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002902:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002906:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002908:	4b29      	ldr	r3, [pc, #164]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800290a:	2201      	movs	r2, #1
 800290c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800290e:	4b28      	ldr	r3, [pc, #160]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002914:	4a24      	ldr	r2, [pc, #144]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800291a:	4b23      	ldr	r3, [pc, #140]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b01      	cmp	r3, #1
 8002924:	d114      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002926:	f7fe fa3f 	bl	8000da8 <HAL_GetTick>
 800292a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292c:	e00a      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292e:	f7fe fa3b 	bl	8000da8 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293c:	4293      	cmp	r3, r2
 800293e:	d901      	bls.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e02a      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002944:	4b18      	ldr	r3, [pc, #96]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0ee      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002958:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800295c:	d10d      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800295e:	4b12      	ldr	r3, [pc, #72]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800296e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002972:	490d      	ldr	r1, [pc, #52]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002974:	4313      	orrs	r3, r2
 8002976:	608b      	str	r3, [r1, #8]
 8002978:	e005      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800297a:	4b0b      	ldr	r3, [pc, #44]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	4a0a      	ldr	r2, [pc, #40]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002980:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002984:	6093      	str	r3, [r2, #8]
 8002986:	4b08      	ldr	r3, [pc, #32]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002988:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002992:	4905      	ldr	r1, [pc, #20]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002994:	4313      	orrs	r3, r2
 8002996:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	42470068 	.word	0x42470068
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40007000 	.word	0x40007000
 80029b0:	42470e40 	.word	0x42470e40

080029b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d13f      	bne.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80029d2:	4b24      	ldr	r3, [pc, #144]	@ (8002a64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029da:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d006      	beq.n	80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80029e8:	d12f      	bne.n	8002a4a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80029ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002a68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80029ec:	617b      	str	r3, [r7, #20]
          break;
 80029ee:	e02f      	b.n	8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80029f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029fc:	d108      	bne.n	8002a10 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80029fe:	4b19      	ldr	r3, [pc, #100]	@ (8002a64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a06:	4a19      	ldr	r2, [pc, #100]	@ (8002a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	e007      	b.n	8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002a10:	4b14      	ldr	r3, [pc, #80]	@ (8002a64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a18:	4a15      	ldr	r2, [pc, #84]	@ (8002a70 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002a20:	4b10      	ldr	r3, [pc, #64]	@ (8002a64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a26:	099b      	lsrs	r3, r3, #6
 8002a28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	fb02 f303 	mul.w	r3, r2, r3
 8002a32:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002a34:	4b0b      	ldr	r3, [pc, #44]	@ (8002a64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a3a:	0f1b      	lsrs	r3, r3, #28
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	617b      	str	r3, [r7, #20]
          break;
 8002a48:	e002      	b.n	8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
          break;
 8002a4e:	bf00      	nop
        }
      }
      break;
 8002a50:	e000      	b.n	8002a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8002a52:	bf00      	nop
    }
  }
  return frequency;
 8002a54:	697b      	ldr	r3, [r7, #20]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800
 8002a68:	00bb8000 	.word	0x00bb8000
 8002a6c:	007a1200 	.word	0x007a1200
 8002a70:	00f42400 	.word	0x00f42400

08002a74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e042      	b.n	8002b0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe f86a 	bl	8000b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2224      	movs	r2, #36	@ 0x24
 8002aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ab6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fa09 	bl	8002ed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002acc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695a      	ldr	r2, [r3, #20]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002adc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002aec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08a      	sub	sp, #40	@ 0x28
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	4613      	mov	r3, r2
 8002b22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d175      	bne.n	8002c20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_UART_Transmit+0x2c>
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e06e      	b.n	8002c22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2221      	movs	r2, #33	@ 0x21
 8002b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b52:	f7fe f929 	bl	8000da8 <HAL_GetTick>
 8002b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	88fa      	ldrh	r2, [r7, #6]
 8002b5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	88fa      	ldrh	r2, [r7, #6]
 8002b62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b6c:	d108      	bne.n	8002b80 <HAL_UART_Transmit+0x6c>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d104      	bne.n	8002b80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	e003      	b.n	8002b88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b88:	e02e      	b.n	8002be8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2200      	movs	r2, #0
 8002b92:	2180      	movs	r1, #128	@ 0x80
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f8df 	bl	8002d58 <UART_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e03a      	b.n	8002c22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10b      	bne.n	8002bca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	61bb      	str	r3, [r7, #24]
 8002bc8:	e007      	b.n	8002bda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	781a      	ldrb	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1cb      	bne.n	8002b8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2140      	movs	r1, #64	@ 0x40
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 f8ab 	bl	8002d58 <UART_WaitOnFlagUntilTimeout>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e006      	b.n	8002c22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e000      	b.n	8002c22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c20:	2302      	movs	r3, #2
  }
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3720      	adds	r7, #32
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b08a      	sub	sp, #40	@ 0x28
 8002c2e:	af02      	add	r7, sp, #8
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	603b      	str	r3, [r7, #0]
 8002c36:	4613      	mov	r3, r2
 8002c38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b20      	cmp	r3, #32
 8002c48:	f040 8081 	bne.w	8002d4e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_UART_Receive+0x2e>
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e079      	b.n	8002d50 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2222      	movs	r2, #34	@ 0x22
 8002c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c70:	f7fe f89a 	bl	8000da8 <HAL_GetTick>
 8002c74:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	88fa      	ldrh	r2, [r7, #6]
 8002c7a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	88fa      	ldrh	r2, [r7, #6]
 8002c80:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c8a:	d108      	bne.n	8002c9e <HAL_UART_Receive+0x74>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d104      	bne.n	8002c9e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	e003      	b.n	8002ca6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002ca6:	e047      	b.n	8002d38 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2120      	movs	r1, #32
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f850 	bl	8002d58 <UART_WaitOnFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e042      	b.n	8002d50 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10c      	bne.n	8002cea <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	3302      	adds	r3, #2
 8002ce6:	61bb      	str	r3, [r7, #24]
 8002ce8:	e01f      	b.n	8002d2a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cf2:	d007      	beq.n	8002d04 <HAL_UART_Receive+0xda>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10a      	bne.n	8002d12 <HAL_UART_Receive+0xe8>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d106      	bne.n	8002d12 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	701a      	strb	r2, [r3, #0]
 8002d10:	e008      	b.n	8002d24 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	3301      	adds	r3, #1
 8002d28:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1b2      	bne.n	8002ca8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2220      	movs	r2, #32
 8002d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	e000      	b.n	8002d50 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002d4e:	2302      	movs	r3, #2
  }
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3720      	adds	r7, #32
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d68:	e03b      	b.n	8002de2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d037      	beq.n	8002de2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d72:	f7fe f819 	bl	8000da8 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	6a3a      	ldr	r2, [r7, #32]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d302      	bcc.n	8002d88 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e03a      	b.n	8002e02 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d023      	beq.n	8002de2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b80      	cmp	r3, #128	@ 0x80
 8002d9e:	d020      	beq.n	8002de2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b40      	cmp	r3, #64	@ 0x40
 8002da4:	d01d      	beq.n	8002de2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d116      	bne.n	8002de2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 f81d 	bl	8002e0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e00f      	b.n	8002e02 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4013      	ands	r3, r2
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	bf0c      	ite	eq
 8002df2:	2301      	moveq	r3, #1
 8002df4:	2300      	movne	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d0b4      	beq.n	8002d6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b095      	sub	sp, #84	@ 0x54
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	330c      	adds	r3, #12
 8002e18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e1c:	e853 3f00 	ldrex	r3, [r3]
 8002e20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	330c      	adds	r3, #12
 8002e30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e32:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e3a:	e841 2300 	strex	r3, r2, [r1]
 8002e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e5      	bne.n	8002e12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3314      	adds	r3, #20
 8002e4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	e853 3f00 	ldrex	r3, [r3]
 8002e54:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3314      	adds	r3, #20
 8002e64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e6e:	e841 2300 	strex	r3, r2, [r1]
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1e5      	bne.n	8002e46 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d119      	bne.n	8002eb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	330c      	adds	r3, #12
 8002e88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	e853 3f00 	ldrex	r3, [r3]
 8002e90:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f023 0310 	bic.w	r3, r3, #16
 8002e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	330c      	adds	r3, #12
 8002ea0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ea2:	61ba      	str	r2, [r7, #24]
 8002ea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea6:	6979      	ldr	r1, [r7, #20]
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	e841 2300 	strex	r3, r2, [r1]
 8002eae:	613b      	str	r3, [r7, #16]
   return(result);
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1e5      	bne.n	8002e82 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ec4:	bf00      	nop
 8002ec6:	3754      	adds	r7, #84	@ 0x54
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed4:	b0c0      	sub	sp, #256	@ 0x100
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eec:	68d9      	ldr	r1, [r3, #12]
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	ea40 0301 	orr.w	r3, r0, r1
 8002ef8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002f28:	f021 010c 	bic.w	r1, r1, #12
 8002f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f36:	430b      	orrs	r3, r1
 8002f38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f4a:	6999      	ldr	r1, [r3, #24]
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	ea40 0301 	orr.w	r3, r0, r1
 8002f56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4b8f      	ldr	r3, [pc, #572]	@ (800319c <UART_SetConfig+0x2cc>)
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d005      	beq.n	8002f70 <UART_SetConfig+0xa0>
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	4b8d      	ldr	r3, [pc, #564]	@ (80031a0 <UART_SetConfig+0x2d0>)
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d104      	bne.n	8002f7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f70:	f7ff fc2a 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 8002f74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f78:	e003      	b.n	8002f82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f7a:	f7ff fc11 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 8002f7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f8c:	f040 810c 	bne.w	80031a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f94:	2200      	movs	r2, #0
 8002f96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002fa2:	4622      	mov	r2, r4
 8002fa4:	462b      	mov	r3, r5
 8002fa6:	1891      	adds	r1, r2, r2
 8002fa8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002faa:	415b      	adcs	r3, r3
 8002fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fb2:	4621      	mov	r1, r4
 8002fb4:	eb12 0801 	adds.w	r8, r2, r1
 8002fb8:	4629      	mov	r1, r5
 8002fba:	eb43 0901 	adc.w	r9, r3, r1
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fd2:	4690      	mov	r8, r2
 8002fd4:	4699      	mov	r9, r3
 8002fd6:	4623      	mov	r3, r4
 8002fd8:	eb18 0303 	adds.w	r3, r8, r3
 8002fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002fe0:	462b      	mov	r3, r5
 8002fe2:	eb49 0303 	adc.w	r3, r9, r3
 8002fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002ff6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002ffa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002ffe:	460b      	mov	r3, r1
 8003000:	18db      	adds	r3, r3, r3
 8003002:	653b      	str	r3, [r7, #80]	@ 0x50
 8003004:	4613      	mov	r3, r2
 8003006:	eb42 0303 	adc.w	r3, r2, r3
 800300a:	657b      	str	r3, [r7, #84]	@ 0x54
 800300c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003010:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003014:	f7fd f8d8 	bl	80001c8 <__aeabi_uldivmod>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4b61      	ldr	r3, [pc, #388]	@ (80031a4 <UART_SetConfig+0x2d4>)
 800301e:	fba3 2302 	umull	r2, r3, r3, r2
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	011c      	lsls	r4, r3, #4
 8003026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800302a:	2200      	movs	r2, #0
 800302c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003030:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003034:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003038:	4642      	mov	r2, r8
 800303a:	464b      	mov	r3, r9
 800303c:	1891      	adds	r1, r2, r2
 800303e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003040:	415b      	adcs	r3, r3
 8003042:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003044:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003048:	4641      	mov	r1, r8
 800304a:	eb12 0a01 	adds.w	sl, r2, r1
 800304e:	4649      	mov	r1, r9
 8003050:	eb43 0b01 	adc.w	fp, r3, r1
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003060:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003064:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003068:	4692      	mov	sl, r2
 800306a:	469b      	mov	fp, r3
 800306c:	4643      	mov	r3, r8
 800306e:	eb1a 0303 	adds.w	r3, sl, r3
 8003072:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003076:	464b      	mov	r3, r9
 8003078:	eb4b 0303 	adc.w	r3, fp, r3
 800307c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800308c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003090:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003094:	460b      	mov	r3, r1
 8003096:	18db      	adds	r3, r3, r3
 8003098:	643b      	str	r3, [r7, #64]	@ 0x40
 800309a:	4613      	mov	r3, r2
 800309c:	eb42 0303 	adc.w	r3, r2, r3
 80030a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80030a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80030a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80030aa:	f7fd f88d 	bl	80001c8 <__aeabi_uldivmod>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4611      	mov	r1, r2
 80030b4:	4b3b      	ldr	r3, [pc, #236]	@ (80031a4 <UART_SetConfig+0x2d4>)
 80030b6:	fba3 2301 	umull	r2, r3, r3, r1
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	2264      	movs	r2, #100	@ 0x64
 80030be:	fb02 f303 	mul.w	r3, r2, r3
 80030c2:	1acb      	subs	r3, r1, r3
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80030ca:	4b36      	ldr	r3, [pc, #216]	@ (80031a4 <UART_SetConfig+0x2d4>)
 80030cc:	fba3 2302 	umull	r2, r3, r3, r2
 80030d0:	095b      	lsrs	r3, r3, #5
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80030d8:	441c      	add	r4, r3
 80030da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030de:	2200      	movs	r2, #0
 80030e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80030e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80030ec:	4642      	mov	r2, r8
 80030ee:	464b      	mov	r3, r9
 80030f0:	1891      	adds	r1, r2, r2
 80030f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80030f4:	415b      	adcs	r3, r3
 80030f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80030fc:	4641      	mov	r1, r8
 80030fe:	1851      	adds	r1, r2, r1
 8003100:	6339      	str	r1, [r7, #48]	@ 0x30
 8003102:	4649      	mov	r1, r9
 8003104:	414b      	adcs	r3, r1
 8003106:	637b      	str	r3, [r7, #52]	@ 0x34
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003114:	4659      	mov	r1, fp
 8003116:	00cb      	lsls	r3, r1, #3
 8003118:	4651      	mov	r1, sl
 800311a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800311e:	4651      	mov	r1, sl
 8003120:	00ca      	lsls	r2, r1, #3
 8003122:	4610      	mov	r0, r2
 8003124:	4619      	mov	r1, r3
 8003126:	4603      	mov	r3, r0
 8003128:	4642      	mov	r2, r8
 800312a:	189b      	adds	r3, r3, r2
 800312c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003130:	464b      	mov	r3, r9
 8003132:	460a      	mov	r2, r1
 8003134:	eb42 0303 	adc.w	r3, r2, r3
 8003138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003148:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800314c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003150:	460b      	mov	r3, r1
 8003152:	18db      	adds	r3, r3, r3
 8003154:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003156:	4613      	mov	r3, r2
 8003158:	eb42 0303 	adc.w	r3, r2, r3
 800315c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800315e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003162:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003166:	f7fd f82f 	bl	80001c8 <__aeabi_uldivmod>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4b0d      	ldr	r3, [pc, #52]	@ (80031a4 <UART_SetConfig+0x2d4>)
 8003170:	fba3 1302 	umull	r1, r3, r3, r2
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	2164      	movs	r1, #100	@ 0x64
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	3332      	adds	r3, #50	@ 0x32
 8003182:	4a08      	ldr	r2, [pc, #32]	@ (80031a4 <UART_SetConfig+0x2d4>)
 8003184:	fba2 2303 	umull	r2, r3, r2, r3
 8003188:	095b      	lsrs	r3, r3, #5
 800318a:	f003 0207 	and.w	r2, r3, #7
 800318e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4422      	add	r2, r4
 8003196:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003198:	e106      	b.n	80033a8 <UART_SetConfig+0x4d8>
 800319a:	bf00      	nop
 800319c:	40011000 	.word	0x40011000
 80031a0:	40011400 	.word	0x40011400
 80031a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031ac:	2200      	movs	r2, #0
 80031ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80031b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80031ba:	4642      	mov	r2, r8
 80031bc:	464b      	mov	r3, r9
 80031be:	1891      	adds	r1, r2, r2
 80031c0:	6239      	str	r1, [r7, #32]
 80031c2:	415b      	adcs	r3, r3
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031ca:	4641      	mov	r1, r8
 80031cc:	1854      	adds	r4, r2, r1
 80031ce:	4649      	mov	r1, r9
 80031d0:	eb43 0501 	adc.w	r5, r3, r1
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	00eb      	lsls	r3, r5, #3
 80031de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031e2:	00e2      	lsls	r2, r4, #3
 80031e4:	4614      	mov	r4, r2
 80031e6:	461d      	mov	r5, r3
 80031e8:	4643      	mov	r3, r8
 80031ea:	18e3      	adds	r3, r4, r3
 80031ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031f0:	464b      	mov	r3, r9
 80031f2:	eb45 0303 	adc.w	r3, r5, r3
 80031f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003206:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003216:	4629      	mov	r1, r5
 8003218:	008b      	lsls	r3, r1, #2
 800321a:	4621      	mov	r1, r4
 800321c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003220:	4621      	mov	r1, r4
 8003222:	008a      	lsls	r2, r1, #2
 8003224:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003228:	f7fc ffce 	bl	80001c8 <__aeabi_uldivmod>
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	4b60      	ldr	r3, [pc, #384]	@ (80033b4 <UART_SetConfig+0x4e4>)
 8003232:	fba3 2302 	umull	r2, r3, r3, r2
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	011c      	lsls	r4, r3, #4
 800323a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800323e:	2200      	movs	r2, #0
 8003240:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003244:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003248:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800324c:	4642      	mov	r2, r8
 800324e:	464b      	mov	r3, r9
 8003250:	1891      	adds	r1, r2, r2
 8003252:	61b9      	str	r1, [r7, #24]
 8003254:	415b      	adcs	r3, r3
 8003256:	61fb      	str	r3, [r7, #28]
 8003258:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800325c:	4641      	mov	r1, r8
 800325e:	1851      	adds	r1, r2, r1
 8003260:	6139      	str	r1, [r7, #16]
 8003262:	4649      	mov	r1, r9
 8003264:	414b      	adcs	r3, r1
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003274:	4659      	mov	r1, fp
 8003276:	00cb      	lsls	r3, r1, #3
 8003278:	4651      	mov	r1, sl
 800327a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800327e:	4651      	mov	r1, sl
 8003280:	00ca      	lsls	r2, r1, #3
 8003282:	4610      	mov	r0, r2
 8003284:	4619      	mov	r1, r3
 8003286:	4603      	mov	r3, r0
 8003288:	4642      	mov	r2, r8
 800328a:	189b      	adds	r3, r3, r2
 800328c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003290:	464b      	mov	r3, r9
 8003292:	460a      	mov	r2, r1
 8003294:	eb42 0303 	adc.w	r3, r2, r3
 8003298:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80032b4:	4649      	mov	r1, r9
 80032b6:	008b      	lsls	r3, r1, #2
 80032b8:	4641      	mov	r1, r8
 80032ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032be:	4641      	mov	r1, r8
 80032c0:	008a      	lsls	r2, r1, #2
 80032c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80032c6:	f7fc ff7f 	bl	80001c8 <__aeabi_uldivmod>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4611      	mov	r1, r2
 80032d0:	4b38      	ldr	r3, [pc, #224]	@ (80033b4 <UART_SetConfig+0x4e4>)
 80032d2:	fba3 2301 	umull	r2, r3, r3, r1
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	2264      	movs	r2, #100	@ 0x64
 80032da:	fb02 f303 	mul.w	r3, r2, r3
 80032de:	1acb      	subs	r3, r1, r3
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	3332      	adds	r3, #50	@ 0x32
 80032e4:	4a33      	ldr	r2, [pc, #204]	@ (80033b4 <UART_SetConfig+0x4e4>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032f0:	441c      	add	r4, r3
 80032f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032f6:	2200      	movs	r2, #0
 80032f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80032fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80032fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003300:	4642      	mov	r2, r8
 8003302:	464b      	mov	r3, r9
 8003304:	1891      	adds	r1, r2, r2
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	415b      	adcs	r3, r3
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003310:	4641      	mov	r1, r8
 8003312:	1851      	adds	r1, r2, r1
 8003314:	6039      	str	r1, [r7, #0]
 8003316:	4649      	mov	r1, r9
 8003318:	414b      	adcs	r3, r1
 800331a:	607b      	str	r3, [r7, #4]
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003328:	4659      	mov	r1, fp
 800332a:	00cb      	lsls	r3, r1, #3
 800332c:	4651      	mov	r1, sl
 800332e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003332:	4651      	mov	r1, sl
 8003334:	00ca      	lsls	r2, r1, #3
 8003336:	4610      	mov	r0, r2
 8003338:	4619      	mov	r1, r3
 800333a:	4603      	mov	r3, r0
 800333c:	4642      	mov	r2, r8
 800333e:	189b      	adds	r3, r3, r2
 8003340:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003342:	464b      	mov	r3, r9
 8003344:	460a      	mov	r2, r1
 8003346:	eb42 0303 	adc.w	r3, r2, r3
 800334a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	663b      	str	r3, [r7, #96]	@ 0x60
 8003356:	667a      	str	r2, [r7, #100]	@ 0x64
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003364:	4649      	mov	r1, r9
 8003366:	008b      	lsls	r3, r1, #2
 8003368:	4641      	mov	r1, r8
 800336a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800336e:	4641      	mov	r1, r8
 8003370:	008a      	lsls	r2, r1, #2
 8003372:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003376:	f7fc ff27 	bl	80001c8 <__aeabi_uldivmod>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4b0d      	ldr	r3, [pc, #52]	@ (80033b4 <UART_SetConfig+0x4e4>)
 8003380:	fba3 1302 	umull	r1, r3, r3, r2
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	2164      	movs	r1, #100	@ 0x64
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	3332      	adds	r3, #50	@ 0x32
 8003392:	4a08      	ldr	r2, [pc, #32]	@ (80033b4 <UART_SetConfig+0x4e4>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	f003 020f 	and.w	r2, r3, #15
 800339e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4422      	add	r2, r4
 80033a6:	609a      	str	r2, [r3, #8]
}
 80033a8:	bf00      	nop
 80033aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80033ae:	46bd      	mov	sp, r7
 80033b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033b4:	51eb851f 	.word	0x51eb851f

080033b8 <memset>:
 80033b8:	4402      	add	r2, r0
 80033ba:	4603      	mov	r3, r0
 80033bc:	4293      	cmp	r3, r2
 80033be:	d100      	bne.n	80033c2 <memset+0xa>
 80033c0:	4770      	bx	lr
 80033c2:	f803 1b01 	strb.w	r1, [r3], #1
 80033c6:	e7f9      	b.n	80033bc <memset+0x4>

080033c8 <__libc_init_array>:
 80033c8:	b570      	push	{r4, r5, r6, lr}
 80033ca:	4d0d      	ldr	r5, [pc, #52]	@ (8003400 <__libc_init_array+0x38>)
 80033cc:	4c0d      	ldr	r4, [pc, #52]	@ (8003404 <__libc_init_array+0x3c>)
 80033ce:	1b64      	subs	r4, r4, r5
 80033d0:	10a4      	asrs	r4, r4, #2
 80033d2:	2600      	movs	r6, #0
 80033d4:	42a6      	cmp	r6, r4
 80033d6:	d109      	bne.n	80033ec <__libc_init_array+0x24>
 80033d8:	4d0b      	ldr	r5, [pc, #44]	@ (8003408 <__libc_init_array+0x40>)
 80033da:	4c0c      	ldr	r4, [pc, #48]	@ (800340c <__libc_init_array+0x44>)
 80033dc:	f000 f818 	bl	8003410 <_init>
 80033e0:	1b64      	subs	r4, r4, r5
 80033e2:	10a4      	asrs	r4, r4, #2
 80033e4:	2600      	movs	r6, #0
 80033e6:	42a6      	cmp	r6, r4
 80033e8:	d105      	bne.n	80033f6 <__libc_init_array+0x2e>
 80033ea:	bd70      	pop	{r4, r5, r6, pc}
 80033ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f0:	4798      	blx	r3
 80033f2:	3601      	adds	r6, #1
 80033f4:	e7ee      	b.n	80033d4 <__libc_init_array+0xc>
 80033f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80033fa:	4798      	blx	r3
 80033fc:	3601      	adds	r6, #1
 80033fe:	e7f2      	b.n	80033e6 <__libc_init_array+0x1e>
 8003400:	08003458 	.word	0x08003458
 8003404:	08003458 	.word	0x08003458
 8003408:	08003458 	.word	0x08003458
 800340c:	0800345c 	.word	0x0800345c

08003410 <_init>:
 8003410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003412:	bf00      	nop
 8003414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003416:	bc08      	pop	{r3}
 8003418:	469e      	mov	lr, r3
 800341a:	4770      	bx	lr

0800341c <_fini>:
 800341c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341e:	bf00      	nop
 8003420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003422:	bc08      	pop	{r3}
 8003424:	469e      	mov	lr, r3
 8003426:	4770      	bx	lr
