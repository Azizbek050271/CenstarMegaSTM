
CenstarMegaSTM_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bf0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08004d80  08004d80  00005d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800502c  0800502c  00007080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800502c  0800502c  0000602c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005034  08005034  00007080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005034  08005034  00006034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005038  08005038  00006038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800503c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007080  2**0
                  CONTENTS
 10 .bss          00000654  20000080  20000080  00007080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006d4  200006d4  00007080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cdce  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020be  00000000  00000000  00013e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b70  00000000  00000000  00015f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008e7  00000000  00000000  00016ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000215de  00000000  00000000  00017397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ffec  00000000  00000000  00038975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c75c3  00000000  00000000  00048961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010ff24  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033f0  00000000  00000000  0010ff68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00113358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d68 	.word	0x08004d68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08004d68 	.word	0x08004d68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <KEYPAD_Scan>:
static const uint16_t ColPin[4]={
    GPIO_PIN_0,GPIO_PIN_1,GPIO_PIN_11,GPIO_PIN_12};

/* вернёт символ или 0 */
char KEYPAD_Scan(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    for (uint8_t r=0;r<5;r++)
 80005b2:	2300      	movs	r3, #0
 80005b4:	71fb      	strb	r3, [r7, #7]
 80005b6:	e052      	b.n	800065e <KEYPAD_Scan+0xb2>
    {
        /* активируем одну строку (LOW), остальные HIGH */
        for (uint8_t i=0;i<5;i++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	71bb      	strb	r3, [r7, #6]
 80005bc:	e014      	b.n	80005e8 <KEYPAD_Scan+0x3c>
            HAL_GPIO_WritePin(RowPort[i],RowPin[i],
 80005be:	79bb      	ldrb	r3, [r7, #6]
 80005c0:	4a2b      	ldr	r2, [pc, #172]	@ (8000670 <KEYPAD_Scan+0xc4>)
 80005c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005c6:	79bb      	ldrb	r3, [r7, #6]
 80005c8:	4a2a      	ldr	r2, [pc, #168]	@ (8000674 <KEYPAD_Scan+0xc8>)
 80005ca:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005ce:	79ba      	ldrb	r2, [r7, #6]
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	bf14      	ite	ne
 80005d6:	2301      	movne	r3, #1
 80005d8:	2300      	moveq	r3, #0
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	461a      	mov	r2, r3
 80005de:	f001 f927 	bl	8001830 <HAL_GPIO_WritePin>
        for (uint8_t i=0;i<5;i++)
 80005e2:	79bb      	ldrb	r3, [r7, #6]
 80005e4:	3301      	adds	r3, #1
 80005e6:	71bb      	strb	r3, [r7, #6]
 80005e8:	79bb      	ldrb	r3, [r7, #6]
 80005ea:	2b04      	cmp	r3, #4
 80005ec:	d9e7      	bls.n	80005be <KEYPAD_Scan+0x12>
                              (i==r)?GPIO_PIN_RESET:GPIO_PIN_SET);

        HAL_Delay(1); /* стабилизация */
 80005ee:	2001      	movs	r0, #1
 80005f0:	f000 fe60 	bl	80012b4 <HAL_Delay>

        for (uint8_t c=0;c<4;c++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	717b      	strb	r3, [r7, #5]
 80005f8:	e02b      	b.n	8000652 <KEYPAD_Scan+0xa6>
        {
            if (HAL_GPIO_ReadPin(ColPort[c],ColPin[c])==GPIO_PIN_RESET)
 80005fa:	797b      	ldrb	r3, [r7, #5]
 80005fc:	4a1e      	ldr	r2, [pc, #120]	@ (8000678 <KEYPAD_Scan+0xcc>)
 80005fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000602:	797b      	ldrb	r3, [r7, #5]
 8000604:	491d      	ldr	r1, [pc, #116]	@ (800067c <KEYPAD_Scan+0xd0>)
 8000606:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800060a:	4619      	mov	r1, r3
 800060c:	4610      	mov	r0, r2
 800060e:	f001 f8f7 	bl	8001800 <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d119      	bne.n	800064c <KEYPAD_Scan+0xa0>
            {
                HAL_Delay(15);                      /* антидребезг */
 8000618:	200f      	movs	r0, #15
 800061a:	f000 fe4b 	bl	80012b4 <HAL_Delay>
                if (HAL_GPIO_ReadPin(ColPort[c],ColPin[c])==GPIO_PIN_RESET)
 800061e:	797b      	ldrb	r3, [r7, #5]
 8000620:	4a15      	ldr	r2, [pc, #84]	@ (8000678 <KEYPAD_Scan+0xcc>)
 8000622:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000626:	797b      	ldrb	r3, [r7, #5]
 8000628:	4914      	ldr	r1, [pc, #80]	@ (800067c <KEYPAD_Scan+0xd0>)
 800062a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800062e:	4619      	mov	r1, r3
 8000630:	4610      	mov	r0, r2
 8000632:	f001 f8e5 	bl	8001800 <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d107      	bne.n	800064c <KEYPAD_Scan+0xa0>
                    return KeyMap[r][c];
 800063c:	79fa      	ldrb	r2, [r7, #7]
 800063e:	797b      	ldrb	r3, [r7, #5]
 8000640:	490f      	ldr	r1, [pc, #60]	@ (8000680 <KEYPAD_Scan+0xd4>)
 8000642:	0092      	lsls	r2, r2, #2
 8000644:	440a      	add	r2, r1
 8000646:	4413      	add	r3, r2
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	e00c      	b.n	8000666 <KEYPAD_Scan+0xba>
        for (uint8_t c=0;c<4;c++)
 800064c:	797b      	ldrb	r3, [r7, #5]
 800064e:	3301      	adds	r3, #1
 8000650:	717b      	strb	r3, [r7, #5]
 8000652:	797b      	ldrb	r3, [r7, #5]
 8000654:	2b03      	cmp	r3, #3
 8000656:	d9d0      	bls.n	80005fa <KEYPAD_Scan+0x4e>
    for (uint8_t r=0;r<5;r++)
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	3301      	adds	r3, #1
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b04      	cmp	r3, #4
 8000662:	d9a9      	bls.n	80005b8 <KEYPAD_Scan+0xc>
            }
        }
    }
    return 0;
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000000 	.word	0x20000000
 8000674:	08004df0 	.word	0x08004df0
 8000678:	20000014 	.word	0x20000014
 800067c:	08004dfc 	.word	0x08004dfc
 8000680:	08004ddc 	.word	0x08004ddc

08000684 <main>:
static void MX_I2C1_Init(void);
static void MX_I2S3_Init(void);
static void MX_USART2_UART_Init(void);

int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	@ 0x28
 8000688:	af00      	add	r7, sp, #0
  /* === инициализация HAL и тактирования === */
  HAL_Init();
 800068a:	f000 fda1 	bl	80011d0 <HAL_Init>
  SystemClock_Config();
 800068e:	f000 f8b5 	bl	80007fc <SystemClock_Config>

  /* === инициализация периферии === */
  MX_GPIO_Init();
 8000692:	f000 f9a5 	bl	80009e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000696:	f000 f91b 	bl	80008d0 <MX_I2C1_Init>
  MX_I2S3_Init();
 800069a:	f000 f947 	bl	800092c <MX_I2S3_Init>
  MX_USART2_UART_Init();
 800069e:	f000 f975 	bl	800098c <MX_USART2_UART_Init>

  /* === приветствие в UART2 === */
  HAL_UART_Transmit(&huart2,
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	220d      	movs	r2, #13
 80006a8:	494c      	ldr	r1, [pc, #304]	@ (80007dc <main+0x158>)
 80006aa:	484d      	ldr	r0, [pc, #308]	@ (80007e0 <main+0x15c>)
 80006ac:	f003 fb00 	bl	8003cb0 <HAL_UART_Transmit>
        (uint8_t *)"Hello STM32\r\n", 13, HAL_MAX_DELAY);

  /* === инициализация OLED и короткая вспышка === */
  ssd1306_Init();
 80006b0:	f000 fa3a 	bl	8000b28 <ssd1306_Init>
  ssd1306_Fill(SSD1306_COLOR_WHITE);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 fac9 	bl	8000c4c <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80006ba:	f000 fa95 	bl	8000be8 <ssd1306_UpdateScreen>
  HAL_Delay(1000);                       /* белый экран 1 с */
 80006be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006c2:	f000 fdf7 	bl	80012b4 <HAL_Delay>
  ssd1306_Test();                        /* вывод «Hello OLED!» */
 80006c6:	f000 fb95 	bl	8000df4 <ssd1306_Test>

  /* счётчик проходов для I²C‑сканера */
  uint32_t pass = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
  char     buf[32];

  while (1)
  {
      /* ---------- I²C‑сканирование шины ---------- */
      sprintf(buf, "\r\nScan #%lu\r\n", pass++);
 80006ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d0:	1c5a      	adds	r2, r3, #1
 80006d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80006d4:	4638      	mov	r0, r7
 80006d6:	461a      	mov	r2, r3
 80006d8:	4942      	ldr	r1, [pc, #264]	@ (80007e4 <main+0x160>)
 80006da:	f003 fea5 	bl	8004428 <siprintf>
      HAL_UART_Transmit(&huart2,(uint8_t*)buf,strlen(buf),HAL_MAX_DELAY);
 80006de:	463b      	mov	r3, r7
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fd75 	bl	80001d0 <strlen>
 80006e6:	4603      	mov	r3, r0
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	4639      	mov	r1, r7
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	483b      	ldr	r0, [pc, #236]	@ (80007e0 <main+0x15c>)
 80006f2:	f003 fadd 	bl	8003cb0 <HAL_UART_Transmit>

      for (uint8_t addr = 1; addr < 128; addr++)
 80006f6:	2301      	movs	r3, #1
 80006f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80006fc:	e024      	b.n	8000748 <main+0xc4>
      {
          if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK)
 80006fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000702:	b29b      	uxth	r3, r3
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	b299      	uxth	r1, r3
 8000708:	230a      	movs	r3, #10
 800070a:	2201      	movs	r2, #1
 800070c:	4836      	ldr	r0, [pc, #216]	@ (80007e8 <main+0x164>)
 800070e:	f001 fbe5 	bl	8001edc <HAL_I2C_IsDeviceReady>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d112      	bne.n	800073e <main+0xba>
          {
              sprintf(buf, "Found 0x%02X\r\n", addr);
 8000718:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800071c:	463b      	mov	r3, r7
 800071e:	4933      	ldr	r1, [pc, #204]	@ (80007ec <main+0x168>)
 8000720:	4618      	mov	r0, r3
 8000722:	f003 fe81 	bl	8004428 <siprintf>
              HAL_UART_Transmit(&huart2,(uint8_t*)buf,strlen(buf),HAL_MAX_DELAY);
 8000726:	463b      	mov	r3, r7
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fd51 	bl	80001d0 <strlen>
 800072e:	4603      	mov	r3, r0
 8000730:	b29a      	uxth	r2, r3
 8000732:	4639      	mov	r1, r7
 8000734:	f04f 33ff 	mov.w	r3, #4294967295
 8000738:	4829      	ldr	r0, [pc, #164]	@ (80007e0 <main+0x15c>)
 800073a:	f003 fab9 	bl	8003cb0 <HAL_UART_Transmit>
      for (uint8_t addr = 1; addr < 128; addr++)
 800073e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000742:	3301      	adds	r3, #1
 8000744:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000748:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800074c:	2b00      	cmp	r3, #0
 800074e:	dad6      	bge.n	80006fe <main+0x7a>
          }
      }
      HAL_UART_Transmit(&huart2,(uint8_t*)"Scan done\r\n",11,HAL_MAX_DELAY);
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	220b      	movs	r2, #11
 8000756:	4926      	ldr	r1, [pc, #152]	@ (80007f0 <main+0x16c>)
 8000758:	4821      	ldr	r0, [pc, #132]	@ (80007e0 <main+0x15c>)
 800075a:	f003 faa9 	bl	8003cb0 <HAL_UART_Transmit>

      /* ---------- опрос клавиатуры ---------- */
      char k = KEYPAD_Scan();
 800075e:	f7ff ff25 	bl	80005ac <KEYPAD_Scan>
 8000762:	4603      	mov	r3, r0
 8000764:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (k)
 8000768:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800076c:	2b00      	cmp	r3, #0
 800076e:	d02f      	beq.n	80007d0 <main+0x14c>
      {
          /* вывод в UART2 */
          sprintf(buf, "Key [%c]\r\n", k);
 8000770:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8000774:	463b      	mov	r3, r7
 8000776:	491f      	ldr	r1, [pc, #124]	@ (80007f4 <main+0x170>)
 8000778:	4618      	mov	r0, r3
 800077a:	f003 fe55 	bl	8004428 <siprintf>
          HAL_UART_Transmit(&huart2,(uint8_t*)buf,strlen(buf),HAL_MAX_DELAY);
 800077e:	463b      	mov	r3, r7
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff fd25 	bl	80001d0 <strlen>
 8000786:	4603      	mov	r3, r0
 8000788:	b29a      	uxth	r2, r3
 800078a:	4639      	mov	r1, r7
 800078c:	f04f 33ff 	mov.w	r3, #4294967295
 8000790:	4813      	ldr	r0, [pc, #76]	@ (80007e0 <main+0x15c>)
 8000792:	f003 fa8d 	bl	8003cb0 <HAL_UART_Transmit>

          /* вывод на OLED на 1 с */
          ssd1306_Fill(SSD1306_COLOR_BLACK);
 8000796:	2000      	movs	r0, #0
 8000798:	f000 fa58 	bl	8000c4c <ssd1306_Fill>
          ssd1306_SetCursor(0, 0);
 800079c:	2100      	movs	r1, #0
 800079e:	2000      	movs	r0, #0
 80007a0:	f000 fa6c 	bl	8000c7c <ssd1306_SetCursor>
          ssd1306_WriteString("Key:", SSD1306_COLOR_WHITE);
 80007a4:	2101      	movs	r1, #1
 80007a6:	4814      	ldr	r0, [pc, #80]	@ (80007f8 <main+0x174>)
 80007a8:	f000 fb0a 	bl	8000dc0 <ssd1306_WriteString>
          ssd1306_SetCursor(40, 0);
 80007ac:	2100      	movs	r1, #0
 80007ae:	2028      	movs	r0, #40	@ 0x28
 80007b0:	f000 fa64 	bl	8000c7c <ssd1306_SetCursor>
          ssd1306_WriteChar(k, SSD1306_COLOR_WHITE);
 80007b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80007b8:	2101      	movs	r1, #1
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fa76 	bl	8000cac <ssd1306_WriteChar>
          ssd1306_UpdateScreen();
 80007c0:	f000 fa12 	bl	8000be8 <ssd1306_UpdateScreen>
          HAL_Delay(1000);
 80007c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007c8:	f000 fd74 	bl	80012b4 <HAL_Delay>

          /* вернуть основную заставку */
          ssd1306_Test();
 80007cc:	f000 fb12 	bl	8000df4 <ssd1306_Test>
      }

      HAL_Delay(500);   /* задержка перед следующим сканированием */
 80007d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007d4:	f000 fd6e 	bl	80012b4 <HAL_Delay>
  {
 80007d8:	e779      	b.n	80006ce <main+0x4a>
 80007da:	bf00      	nop
 80007dc:	08004d80 	.word	0x08004d80
 80007e0:	20000138 	.word	0x20000138
 80007e4:	08004d90 	.word	0x08004d90
 80007e8:	2000009c 	.word	0x2000009c
 80007ec:	08004da0 	.word	0x08004da0
 80007f0:	08004db0 	.word	0x08004db0
 80007f4:	08004dbc 	.word	0x08004dbc
 80007f8:	08004dc8 	.word	0x08004dc8

080007fc <SystemClock_Config>:
  }
}

/* -----------  ниже функции CubeMX  (оставить как есть) -------- */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	@ 0x50
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	2230      	movs	r2, #48	@ 0x30
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f003 fe2e 	bl	800446c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	4b28      	ldr	r3, [pc, #160]	@ (80008c8 <SystemClock_Config+0xcc>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000828:	4a27      	ldr	r2, [pc, #156]	@ (80008c8 <SystemClock_Config+0xcc>)
 800082a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800082e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000830:	4b25      	ldr	r3, [pc, #148]	@ (80008c8 <SystemClock_Config+0xcc>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b22      	ldr	r3, [pc, #136]	@ (80008cc <SystemClock_Config+0xd0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a21      	ldr	r2, [pc, #132]	@ (80008cc <SystemClock_Config+0xd0>)
 8000846:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b1f      	ldr	r3, [pc, #124]	@ (80008cc <SystemClock_Config+0xd0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 800085c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8000866:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800086a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM       = 8;
 800086c:	2308      	movs	r3, #8
 800086e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN       = 336;
 8000870:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000874:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV2;
 8000876:	2302      	movs	r3, #2
 8000878:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ       = 7;
 800087a:	2307      	movs	r3, #7
 800087c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	4618      	mov	r0, r3
 8000884:	f002 fbea 	bl	800305c <HAL_RCC_OscConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x96>
 800088e:	f000 f92b 	bl	8000ae8 <Error_Handler>

  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000892:	230f      	movs	r3, #15
 8000894:	60fb      	str	r3, [r7, #12]
                                   | RCC_CLOCKTYPE_PCLK1| RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8000896:	2302      	movs	r3, #2
 8000898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800089e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5)!=HAL_OK)
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	2105      	movs	r1, #5
 80008b0:	4618      	mov	r0, r3
 80008b2:	f002 fe4b 	bl	800354c <HAL_RCC_ClockConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0xc4>
      Error_Handler();
 80008bc:	f000 f914 	bl	8000ae8 <Error_Handler>
}
 80008c0:	bf00      	nop
 80008c2:	3750      	adds	r7, #80	@ 0x50
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  hi2c1.Instance             = I2C1;
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <MX_I2C1_Init+0x50>)
 80008d6:	4a13      	ldr	r2, [pc, #76]	@ (8000924 <MX_I2C1_Init+0x54>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed      = 100000;
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_I2C1_Init+0x50>)
 80008dc:	4a12      	ldr	r2, [pc, #72]	@ (8000928 <MX_I2C1_Init+0x58>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_I2C1_Init+0x50>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1     = 0;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <MX_I2C1_Init+0x50>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_I2C1_Init+0x50>)
 80008ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <MX_I2C1_Init+0x50>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2     = 0;
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_I2C1_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <MX_I2C1_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_I2C1_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) Error_Handler();
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <MX_I2C1_Init+0x50>)
 800090e:	f000 ffa9 	bl	8001864 <HAL_I2C_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_I2C1_Init+0x4c>
 8000918:	f000 f8e6 	bl	8000ae8 <Error_Handler>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000009c 	.word	0x2000009c
 8000924:	40005400 	.word	0x40005400
 8000928:	000186a0 	.word	0x000186a0

0800092c <MX_I2S3_Init>:

static void MX_I2S3_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  hi2s3.Instance          = SPI3;
 8000930:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <MX_I2S3_Init+0x54>)
 8000932:	4a14      	ldr	r2, [pc, #80]	@ (8000984 <MX_I2S3_Init+0x58>)
 8000934:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode         = I2S_MODE_MASTER_TX;
 8000936:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <MX_I2S3_Init+0x54>)
 8000938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800093c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard     = I2S_STANDARD_PHILIPS;
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <MX_I2S3_Init+0x54>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat   = I2S_DATAFORMAT_16B;
 8000944:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <MX_I2S3_Init+0x54>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput   = I2S_MCLKOUTPUT_ENABLE;
 800094a:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <MX_I2S3_Init+0x54>)
 800094c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000950:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq    = I2S_AUDIOFREQ_96K;
 8000952:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <MX_I2S3_Init+0x54>)
 8000954:	4a0c      	ldr	r2, [pc, #48]	@ (8000988 <MX_I2S3_Init+0x5c>)
 8000956:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL         = I2S_CPOL_LOW;
 8000958:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <MX_I2S3_Init+0x54>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource  = I2S_CLOCK_PLL;
 800095e:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <MX_I2S3_Init+0x54>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode=I2S_FULLDUPLEXMODE_DISABLE;
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <MX_I2S3_Init+0x54>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK) Error_Handler();
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_I2S3_Init+0x54>)
 800096c:	f001 fed6 	bl	800271c <HAL_I2S_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2S3_Init+0x4e>
 8000976:	f000 f8b7 	bl	8000ae8 <Error_Handler>
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200000f0 	.word	0x200000f0
 8000984:	40003c00 	.word	0x40003c00
 8000988:	00017700 	.word	0x00017700

0800098c <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  huart2.Instance          = USART2;
 8000990:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 8000992:	4a12      	ldr	r2, [pc, #72]	@ (80009dc <MX_USART2_UART_Init+0x50>)
 8000994:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate     = 9600;
 8000996:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 8000998:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800099c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits     = UART_STOPBITS_1;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity       = UART_PARITY_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode         = UART_MODE_TX_RX;
 80009b0:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) Error_Handler();
 80009c2:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <MX_USART2_UART_Init+0x4c>)
 80009c4:	f003 f924 	bl	8003c10 <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART2_UART_Init+0x46>
 80009ce:	f000 f88b 	bl	8000ae8 <Error_Handler>
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000138 	.word	0x20000138
 80009dc:	40004400 	.word	0x40004400

080009e0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	@ 0x30
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
 80009fa:	4b38      	ldr	r3, [pc, #224]	@ (8000adc <MX_GPIO_Init+0xfc>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a37      	ldr	r2, [pc, #220]	@ (8000adc <MX_GPIO_Init+0xfc>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b35      	ldr	r3, [pc, #212]	@ (8000adc <MX_GPIO_Init+0xfc>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	61bb      	str	r3, [r7, #24]
 8000a10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	4b31      	ldr	r3, [pc, #196]	@ (8000adc <MX_GPIO_Init+0xfc>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a30      	ldr	r2, [pc, #192]	@ (8000adc <MX_GPIO_Init+0xfc>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b2e      	ldr	r3, [pc, #184]	@ (8000adc <MX_GPIO_Init+0xfc>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b2a      	ldr	r3, [pc, #168]	@ (8000adc <MX_GPIO_Init+0xfc>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a29      	ldr	r2, [pc, #164]	@ (8000adc <MX_GPIO_Init+0xfc>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b27      	ldr	r3, [pc, #156]	@ (8000adc <MX_GPIO_Init+0xfc>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b23      	ldr	r3, [pc, #140]	@ (8000adc <MX_GPIO_Init+0xfc>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a22      	ldr	r2, [pc, #136]	@ (8000adc <MX_GPIO_Init+0xfc>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b20      	ldr	r3, [pc, #128]	@ (8000adc <MX_GPIO_Init+0xfc>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <MX_GPIO_Init+0xfc>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8000adc <MX_GPIO_Init+0xfc>)
 8000a70:	f043 0310 	orr.w	r3, r3, #16
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <MX_GPIO_Init+0xfc>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0310 	and.w	r3, r3, #16
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <MX_GPIO_Init+0xfc>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a14      	ldr	r2, [pc, #80]	@ (8000adc <MX_GPIO_Init+0xfc>)
 8000a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <MX_GPIO_Init+0xfc>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /* CubeMX — здесь будут настройки остальных пинов вашей платы */
  /* Настройки рядов keypad (PC0‑PC4) */
  GPIO_InitStruct.Pin   = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000a9e:	231f      	movs	r3, #31
 8000aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480a      	ldr	r0, [pc, #40]	@ (8000ae0 <MX_GPIO_Init+0x100>)
 8000ab6:	f000 fd07 	bl	80014c8 <HAL_GPIO_Init>

  /* Настройки колонок keypad (PB0,PB1,PB11,PB12) */
  GPIO_InitStruct.Pin   = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8000aba:	f641 0303 	movw	r3, #6147	@ 0x1803
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_GPIO_Init+0x104>)
 8000ad0:	f000 fcfa 	bl	80014c8 <HAL_GPIO_Init>
}
 8000ad4:	bf00      	nop
 8000ad6:	3730      	adds	r7, #48	@ 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <Error_Handler>:

void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  __disable_irq();
  while (1) { }
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <Error_Handler+0x8>

08000af4 <CMD>:
  #include "font5x7.inc"        /* файл приведён ниже */
};

/* ---- низкоуровневые функции ---- */
static HAL_StatusTypeDef CMD(uint8_t c)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af02      	add	r7, sp, #8
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
    uint8_t d[2] = {0x00, c};
 8000afe:	2300      	movs	r3, #0
 8000b00:	733b      	strb	r3, [r7, #12]
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(&hi2c1, SSD1306_I2C_ADDR, d, 2, HAL_MAX_DELAY);
 8000b06:	f107 020c 	add.w	r2, r7, #12
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2302      	movs	r3, #2
 8000b12:	2178      	movs	r1, #120	@ 0x78
 8000b14:	4803      	ldr	r0, [pc, #12]	@ (8000b24 <CMD+0x30>)
 8000b16:	f000 ffe9 	bl	8001aec <HAL_I2C_Master_Transmit>
 8000b1a:	4603      	mov	r3, r0
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2000009c 	.word	0x2000009c

08000b28 <ssd1306_Init>:

/* ---- публичные ---- */
void ssd1306_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 8000b2c:	2064      	movs	r0, #100	@ 0x64
 8000b2e:	f000 fbc1 	bl	80012b4 <HAL_Delay>
    CMD(0xAE); CMD(0x20); CMD(0x00); CMD(0xB0); CMD(0xC8);
 8000b32:	20ae      	movs	r0, #174	@ 0xae
 8000b34:	f7ff ffde 	bl	8000af4 <CMD>
 8000b38:	2020      	movs	r0, #32
 8000b3a:	f7ff ffdb 	bl	8000af4 <CMD>
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f7ff ffd8 	bl	8000af4 <CMD>
 8000b44:	20b0      	movs	r0, #176	@ 0xb0
 8000b46:	f7ff ffd5 	bl	8000af4 <CMD>
 8000b4a:	20c8      	movs	r0, #200	@ 0xc8
 8000b4c:	f7ff ffd2 	bl	8000af4 <CMD>
    CMD(0x00); CMD(0x10); CMD(0x40); CMD(0x81); CMD(0x7F);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff ffcf 	bl	8000af4 <CMD>
 8000b56:	2010      	movs	r0, #16
 8000b58:	f7ff ffcc 	bl	8000af4 <CMD>
 8000b5c:	2040      	movs	r0, #64	@ 0x40
 8000b5e:	f7ff ffc9 	bl	8000af4 <CMD>
 8000b62:	2081      	movs	r0, #129	@ 0x81
 8000b64:	f7ff ffc6 	bl	8000af4 <CMD>
 8000b68:	207f      	movs	r0, #127	@ 0x7f
 8000b6a:	f7ff ffc3 	bl	8000af4 <CMD>
    CMD(0xA1); CMD(0xA6); CMD(0xA8); CMD(0x3F); CMD(0xA4);
 8000b6e:	20a1      	movs	r0, #161	@ 0xa1
 8000b70:	f7ff ffc0 	bl	8000af4 <CMD>
 8000b74:	20a6      	movs	r0, #166	@ 0xa6
 8000b76:	f7ff ffbd 	bl	8000af4 <CMD>
 8000b7a:	20a8      	movs	r0, #168	@ 0xa8
 8000b7c:	f7ff ffba 	bl	8000af4 <CMD>
 8000b80:	203f      	movs	r0, #63	@ 0x3f
 8000b82:	f7ff ffb7 	bl	8000af4 <CMD>
 8000b86:	20a4      	movs	r0, #164	@ 0xa4
 8000b88:	f7ff ffb4 	bl	8000af4 <CMD>
    CMD(0xD3); CMD(0x00); CMD(0xD5); CMD(0xF0); CMD(0xD9);
 8000b8c:	20d3      	movs	r0, #211	@ 0xd3
 8000b8e:	f7ff ffb1 	bl	8000af4 <CMD>
 8000b92:	2000      	movs	r0, #0
 8000b94:	f7ff ffae 	bl	8000af4 <CMD>
 8000b98:	20d5      	movs	r0, #213	@ 0xd5
 8000b9a:	f7ff ffab 	bl	8000af4 <CMD>
 8000b9e:	20f0      	movs	r0, #240	@ 0xf0
 8000ba0:	f7ff ffa8 	bl	8000af4 <CMD>
 8000ba4:	20d9      	movs	r0, #217	@ 0xd9
 8000ba6:	f7ff ffa5 	bl	8000af4 <CMD>
    CMD(0x22); CMD(0xDA); CMD(0x12); CMD(0xDB); CMD(0x20);
 8000baa:	2022      	movs	r0, #34	@ 0x22
 8000bac:	f7ff ffa2 	bl	8000af4 <CMD>
 8000bb0:	20da      	movs	r0, #218	@ 0xda
 8000bb2:	f7ff ff9f 	bl	8000af4 <CMD>
 8000bb6:	2012      	movs	r0, #18
 8000bb8:	f7ff ff9c 	bl	8000af4 <CMD>
 8000bbc:	20db      	movs	r0, #219	@ 0xdb
 8000bbe:	f7ff ff99 	bl	8000af4 <CMD>
 8000bc2:	2020      	movs	r0, #32
 8000bc4:	f7ff ff96 	bl	8000af4 <CMD>
    CMD(0x8D); CMD(0x14); CMD(0xAF);
 8000bc8:	208d      	movs	r0, #141	@ 0x8d
 8000bca:	f7ff ff93 	bl	8000af4 <CMD>
 8000bce:	2014      	movs	r0, #20
 8000bd0:	f7ff ff90 	bl	8000af4 <CMD>
 8000bd4:	20af      	movs	r0, #175	@ 0xaf
 8000bd6:	f7ff ff8d 	bl	8000af4 <CMD>

    ssd1306_Fill(SSD1306_COLOR_BLACK);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f000 f836 	bl	8000c4c <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8000be0:	f000 f802 	bl	8000be8 <ssd1306_UpdateScreen>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <ssd1306_UpdateScreen>:

void ssd1306_UpdateScreen(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af04      	add	r7, sp, #16
    for (uint8_t page = 0; page < 8; page++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	71fb      	strb	r3, [r7, #7]
 8000bf2:	e01e      	b.n	8000c32 <ssd1306_UpdateScreen+0x4a>
    {
        CMD(0xB0 + page); CMD(0x00); CMD(0x10);
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	3b50      	subs	r3, #80	@ 0x50
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ff7a 	bl	8000af4 <CMD>
 8000c00:	2000      	movs	r0, #0
 8000c02:	f7ff ff77 	bl	8000af4 <CMD>
 8000c06:	2010      	movs	r0, #16
 8000c08:	f7ff ff74 	bl	8000af4 <CMD>
        HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40,
                          I2C_MEMADD_SIZE_8BIT,
                          &Buffer[SSD1306_WIDTH * page],
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	01db      	lsls	r3, r3, #7
        HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40,
 8000c10:	4a0c      	ldr	r2, [pc, #48]	@ (8000c44 <ssd1306_UpdateScreen+0x5c>)
 8000c12:	4413      	add	r3, r2
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	9202      	str	r2, [sp, #8]
 8000c1a:	2280      	movs	r2, #128	@ 0x80
 8000c1c:	9201      	str	r2, [sp, #4]
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2301      	movs	r3, #1
 8000c22:	2240      	movs	r2, #64	@ 0x40
 8000c24:	2178      	movs	r1, #120	@ 0x78
 8000c26:	4808      	ldr	r0, [pc, #32]	@ (8000c48 <ssd1306_UpdateScreen+0x60>)
 8000c28:	f001 f85e 	bl	8001ce8 <HAL_I2C_Mem_Write>
    for (uint8_t page = 0; page < 8; page++)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	71fb      	strb	r3, [r7, #7]
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b07      	cmp	r3, #7
 8000c36:	d9dd      	bls.n	8000bf4 <ssd1306_UpdateScreen+0xc>
                          SSD1306_WIDTH, HAL_MAX_DELAY);
    }
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000180 	.word	0x20000180
 8000c48:	2000009c 	.word	0x2000009c

08000c4c <ssd1306_Fill>:

void ssd1306_Fill(SSD1306_COLOR color)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
    memset(Buffer, color ? 0xFF : 0x00, sizeof(Buffer));
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <ssd1306_Fill+0x14>
 8000c5c:	23ff      	movs	r3, #255	@ 0xff
 8000c5e:	e000      	b.n	8000c62 <ssd1306_Fill+0x16>
 8000c60:	2300      	movs	r3, #0
 8000c62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c66:	4619      	mov	r1, r3
 8000c68:	4803      	ldr	r0, [pc, #12]	@ (8000c78 <ssd1306_Fill+0x2c>)
 8000c6a:	f003 fbff 	bl	800446c <memset>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000180 	.word	0x20000180

08000c7c <ssd1306_SetCursor>:

void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	460a      	mov	r2, r1
 8000c86:	71fb      	strb	r3, [r7, #7]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	71bb      	strb	r3, [r7, #6]
    CurrentX = x;
 8000c8c:	4a05      	ldr	r2, [pc, #20]	@ (8000ca4 <ssd1306_SetCursor+0x28>)
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	7013      	strb	r3, [r2, #0]
    CurrentY = y;
 8000c92:	4a05      	ldr	r2, [pc, #20]	@ (8000ca8 <ssd1306_SetCursor+0x2c>)
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	7013      	strb	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	20000580 	.word	0x20000580
 8000ca8:	20000581 	.word	0x20000581

08000cac <ssd1306_WriteChar>:

void ssd1306_WriteChar(char ch, SSD1306_COLOR color)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b087      	sub	sp, #28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	460a      	mov	r2, r1
 8000cb6:	71fb      	strb	r3, [r7, #7]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	71bb      	strb	r3, [r7, #6]
    if (ch < 32 || ch > 126) ch = '?';
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	2b1f      	cmp	r3, #31
 8000cc0:	d902      	bls.n	8000cc8 <ssd1306_WriteChar+0x1c>
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2b7e      	cmp	r3, #126	@ 0x7e
 8000cc6:	d901      	bls.n	8000ccc <ssd1306_WriteChar+0x20>
 8000cc8:	233f      	movs	r3, #63	@ 0x3f
 8000cca:	71fb      	strb	r3, [r7, #7]
    const uint8_t* glyph = &Font5x7[(ch - 32) * 5];
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f1a3 0220 	sub.w	r2, r3, #32
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a35      	ldr	r2, [pc, #212]	@ (8000db0 <ssd1306_WriteChar+0x104>)
 8000cda:	4413      	add	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]

    for (uint8_t col = 0; col < 5; col++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	75fb      	strb	r3, [r7, #23]
 8000ce2:	e056      	b.n	8000d92 <ssd1306_WriteChar+0xe6>
    {
        uint8_t line = glyph[col];
 8000ce4:	7dfb      	ldrb	r3, [r7, #23]
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4413      	add	r3, r2
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	75bb      	strb	r3, [r7, #22]
        for (uint8_t row = 0; row < 7; row++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	757b      	strb	r3, [r7, #21]
 8000cf2:	e042      	b.n	8000d7a <ssd1306_WriteChar+0xce>
        {
            uint32_t idx = CurrentX + ((CurrentY + row) / 8) * SSD1306_WIDTH;
 8000cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8000db4 <ssd1306_WriteChar+0x108>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8000db8 <ssd1306_WriteChar+0x10c>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	7d7b      	ldrb	r3, [r7, #21]
 8000d02:	440b      	add	r3, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	da00      	bge.n	8000d0a <ssd1306_WriteChar+0x5e>
 8000d08:	3307      	adds	r3, #7
 8000d0a:	10db      	asrs	r3, r3, #3
 8000d0c:	01db      	lsls	r3, r3, #7
 8000d0e:	4413      	add	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
            uint8_t  bit = 1 << ((CurrentY + row) % 8);
 8000d12:	4b29      	ldr	r3, [pc, #164]	@ (8000db8 <ssd1306_WriteChar+0x10c>)
 8000d14:	781a      	ldrb	r2, [r3, #0]
 8000d16:	7d7b      	ldrb	r3, [r7, #21]
 8000d18:	4413      	add	r3, r2
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	f003 0307 	and.w	r3, r3, #7
 8000d20:	2201      	movs	r2, #1
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	72fb      	strb	r3, [r7, #11]

            if (line & 0x01)
 8000d28:	7dbb      	ldrb	r3, [r7, #22]
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d00c      	beq.n	8000d4c <ssd1306_WriteChar+0xa0>
                Buffer[idx] |=  bit;
 8000d32:	4a22      	ldr	r2, [pc, #136]	@ (8000dbc <ssd1306_WriteChar+0x110>)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	781a      	ldrb	r2, [r3, #0]
 8000d3a:	7afb      	ldrb	r3, [r7, #11]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	b2d9      	uxtb	r1, r3
 8000d40:	4a1e      	ldr	r2, [pc, #120]	@ (8000dbc <ssd1306_WriteChar+0x110>)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4413      	add	r3, r2
 8000d46:	460a      	mov	r2, r1
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e010      	b.n	8000d6e <ssd1306_WriteChar+0xc2>
            else
                Buffer[idx] &= ~bit;
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dbc <ssd1306_WriteChar+0x110>)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4413      	add	r3, r2
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b25a      	sxtb	r2, r3
 8000d56:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	4013      	ands	r3, r2
 8000d60:	b25b      	sxtb	r3, r3
 8000d62:	b2d9      	uxtb	r1, r3
 8000d64:	4a15      	ldr	r2, [pc, #84]	@ (8000dbc <ssd1306_WriteChar+0x110>)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	4413      	add	r3, r2
 8000d6a:	460a      	mov	r2, r1
 8000d6c:	701a      	strb	r2, [r3, #0]
            line >>= 1;
 8000d6e:	7dbb      	ldrb	r3, [r7, #22]
 8000d70:	085b      	lsrs	r3, r3, #1
 8000d72:	75bb      	strb	r3, [r7, #22]
        for (uint8_t row = 0; row < 7; row++)
 8000d74:	7d7b      	ldrb	r3, [r7, #21]
 8000d76:	3301      	adds	r3, #1
 8000d78:	757b      	strb	r3, [r7, #21]
 8000d7a:	7d7b      	ldrb	r3, [r7, #21]
 8000d7c:	2b06      	cmp	r3, #6
 8000d7e:	d9b9      	bls.n	8000cf4 <ssd1306_WriteChar+0x48>
        }
        CurrentX++;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <ssd1306_WriteChar+0x108>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	3301      	adds	r3, #1
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <ssd1306_WriteChar+0x108>)
 8000d8a:	701a      	strb	r2, [r3, #0]
    for (uint8_t col = 0; col < 5; col++)
 8000d8c:	7dfb      	ldrb	r3, [r7, #23]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	75fb      	strb	r3, [r7, #23]
 8000d92:	7dfb      	ldrb	r3, [r7, #23]
 8000d94:	2b04      	cmp	r3, #4
 8000d96:	d9a5      	bls.n	8000ce4 <ssd1306_WriteChar+0x38>
    }
    CurrentX++; /* один столбец пробела */
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <ssd1306_WriteChar+0x108>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <ssd1306_WriteChar+0x108>)
 8000da2:	701a      	strb	r2, [r3, #0]
}
 8000da4:	bf00      	nop
 8000da6:	371c      	adds	r7, #28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	08004e04 	.word	0x08004e04
 8000db4:	20000580 	.word	0x20000580
 8000db8:	20000581 	.word	0x20000581
 8000dbc:	20000180 	.word	0x20000180

08000dc0 <ssd1306_WriteString>:

void ssd1306_WriteString(const char* str, SSD1306_COLOR color)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	70fb      	strb	r3, [r7, #3]
    while (*str)
 8000dcc:	e008      	b.n	8000de0 <ssd1306_WriteString+0x20>
        ssd1306_WriteChar(*str++, color);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	1c5a      	adds	r2, r3, #1
 8000dd2:	607a      	str	r2, [r7, #4]
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	78fa      	ldrb	r2, [r7, #3]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff66 	bl	8000cac <ssd1306_WriteChar>
    while (*str)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1f2      	bne.n	8000dce <ssd1306_WriteString+0xe>
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <ssd1306_Test>:

/* маленький тест: вывод "Hello OLED!" */
void ssd1306_Test(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
    ssd1306_Fill(SSD1306_COLOR_BLACK);
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f7ff ff27 	bl	8000c4c <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2000      	movs	r0, #0
 8000e02:	f7ff ff3b 	bl	8000c7c <ssd1306_SetCursor>
    ssd1306_WriteString("Hello OLED!", SSD1306_COLOR_WHITE);
 8000e06:	2101      	movs	r1, #1
 8000e08:	4803      	ldr	r0, [pc, #12]	@ (8000e18 <ssd1306_Test+0x24>)
 8000e0a:	f7ff ffd9 	bl	8000dc0 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000e0e:	f7ff feeb 	bl	8000be8 <ssd1306_UpdateScreen>
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	08004dd0 	.word	0x08004dd0

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <HAL_MspInit+0x4c>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e68 <HAL_MspInit+0x4c>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e32:	4b0d      	ldr	r3, [pc, #52]	@ (8000e68 <HAL_MspInit+0x4c>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <HAL_MspInit+0x4c>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	4a08      	ldr	r2, [pc, #32]	@ (8000e68 <HAL_MspInit+0x4c>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4e:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <HAL_MspInit+0x4c>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e5a:	2007      	movs	r0, #7
 8000e5c:	f000 fb00 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40023800 	.word	0x40023800

08000e6c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a19      	ldr	r2, [pc, #100]	@ (8000ef0 <HAL_I2C_MspInit+0x84>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d12b      	bne.n	8000ee6 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <HAL_I2C_MspInit+0x88>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a17      	ldr	r2, [pc, #92]	@ (8000ef4 <HAL_I2C_MspInit+0x88>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <HAL_I2C_MspInit+0x88>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eaa:	23c0      	movs	r3, #192	@ 0xc0
 8000eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eae:	2312      	movs	r3, #18
 8000eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480c      	ldr	r0, [pc, #48]	@ (8000ef8 <HAL_I2C_MspInit+0x8c>)
 8000ec6:	f000 faff 	bl	80014c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <HAL_I2C_MspInit+0x88>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	4a08      	ldr	r2, [pc, #32]	@ (8000ef4 <HAL_I2C_MspInit+0x88>)
 8000ed4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_I2C_MspInit+0x88>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ee6:	bf00      	nop
 8000ee8:	3728      	adds	r7, #40	@ 0x28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40005400 	.word	0x40005400
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020400 	.word	0x40020400

08000efc <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08e      	sub	sp, #56	@ 0x38
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a31      	ldr	r2, [pc, #196]	@ (8000fec <HAL_I2S_MspInit+0xf0>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d15a      	bne.n	8000fe2 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000f30:	23c0      	movs	r3, #192	@ 0xc0
 8000f32:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f002 fd25 	bl	800398c <HAL_RCCEx_PeriphCLKConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000f48:	f7ff fdce 	bl	8000ae8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	4b27      	ldr	r3, [pc, #156]	@ (8000ff0 <HAL_I2S_MspInit+0xf4>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f54:	4a26      	ldr	r2, [pc, #152]	@ (8000ff0 <HAL_I2S_MspInit+0xf4>)
 8000f56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f5c:	4b24      	ldr	r3, [pc, #144]	@ (8000ff0 <HAL_I2S_MspInit+0xf4>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <HAL_I2S_MspInit+0xf4>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f70:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff0 <HAL_I2S_MspInit+0xf4>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <HAL_I2S_MspInit+0xf4>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <HAL_I2S_MspInit+0xf4>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8c:	4a18      	ldr	r2, [pc, #96]	@ (8000ff0 <HAL_I2S_MspInit+0xf4>)
 8000f8e:	f043 0304 	orr.w	r3, r3, #4
 8000f92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f94:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <HAL_I2S_MspInit+0xf4>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000fa0:	2310      	movs	r3, #16
 8000fa2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fb0:	2306      	movs	r3, #6
 8000fb2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb8:	4619      	mov	r1, r3
 8000fba:	480e      	ldr	r0, [pc, #56]	@ (8000ff4 <HAL_I2S_MspInit+0xf8>)
 8000fbc:	f000 fa84 	bl	80014c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000fc0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4806      	ldr	r0, [pc, #24]	@ (8000ff8 <HAL_I2S_MspInit+0xfc>)
 8000fde:	f000 fa73 	bl	80014c8 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3738      	adds	r7, #56	@ 0x38
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40003c00 	.word	0x40003c00
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	40020800 	.word	0x40020800

08000ffc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	@ 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a19      	ldr	r2, [pc, #100]	@ (8001080 <HAL_UART_MspInit+0x84>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d12b      	bne.n	8001076 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b18      	ldr	r3, [pc, #96]	@ (8001084 <HAL_UART_MspInit+0x88>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	4a17      	ldr	r2, [pc, #92]	@ (8001084 <HAL_UART_MspInit+0x88>)
 8001028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800102c:	6413      	str	r3, [r2, #64]	@ 0x40
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <HAL_UART_MspInit+0x88>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <HAL_UART_MspInit+0x88>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a10      	ldr	r2, [pc, #64]	@ (8001084 <HAL_UART_MspInit+0x88>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <HAL_UART_MspInit+0x88>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001056:	230c      	movs	r3, #12
 8001058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001066:	2307      	movs	r3, #7
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	@ (8001088 <HAL_UART_MspInit+0x8c>)
 8001072:	f000 fa29 	bl	80014c8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	@ 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40004400 	.word	0x40004400
 8001084:	40023800 	.word	0x40023800
 8001088:	40020000 	.word	0x40020000

0800108c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <NMI_Handler+0x4>

08001094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <MemManage_Handler+0x4>

080010a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e2:	f000 f8c7 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f4:	4a14      	ldr	r2, [pc, #80]	@ (8001148 <_sbrk+0x5c>)
 80010f6:	4b15      	ldr	r3, [pc, #84]	@ (800114c <_sbrk+0x60>)
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001100:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001108:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <_sbrk+0x64>)
 800110a:	4a12      	ldr	r2, [pc, #72]	@ (8001154 <_sbrk+0x68>)
 800110c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110e:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	429a      	cmp	r2, r3
 800111a:	d207      	bcs.n	800112c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800111c:	f003 f9ae 	bl	800447c <__errno>
 8001120:	4603      	mov	r3, r0
 8001122:	220c      	movs	r2, #12
 8001124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	e009      	b.n	8001140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800112c:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001132:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	4a05      	ldr	r2, [pc, #20]	@ (8001150 <_sbrk+0x64>)
 800113c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113e:	68fb      	ldr	r3, [r7, #12]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20020000 	.word	0x20020000
 800114c:	00000400 	.word	0x00000400
 8001150:	20000584 	.word	0x20000584
 8001154:	200006d8 	.word	0x200006d8

08001158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <SystemInit+0x20>)
 800115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001162:	4a05      	ldr	r2, [pc, #20]	@ (8001178 <SystemInit+0x20>)
 8001164:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001168:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800117c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001180:	f7ff ffea 	bl	8001158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001184:	480c      	ldr	r0, [pc, #48]	@ (80011b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001186:	490d      	ldr	r1, [pc, #52]	@ (80011bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001188:	4a0d      	ldr	r2, [pc, #52]	@ (80011c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800118c:	e002      	b.n	8001194 <LoopCopyDataInit>

0800118e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001192:	3304      	adds	r3, #4

08001194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001198:	d3f9      	bcc.n	800118e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119a:	4a0a      	ldr	r2, [pc, #40]	@ (80011c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800119c:	4c0a      	ldr	r4, [pc, #40]	@ (80011c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a0:	e001      	b.n	80011a6 <LoopFillZerobss>

080011a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a4:	3204      	adds	r2, #4

080011a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a8:	d3fb      	bcc.n	80011a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011aa:	f003 f96d 	bl	8004488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ae:	f7ff fa69 	bl	8000684 <main>
  bx  lr    
 80011b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011bc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80011c0:	0800503c 	.word	0x0800503c
  ldr r2, =_sbss
 80011c4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80011c8:	200006d4 	.word	0x200006d4

080011cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011cc:	e7fe      	b.n	80011cc <ADC_IRQHandler>
	...

080011d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001210 <HAL_Init+0x40>)
 80011da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <HAL_Init+0x40>)
 80011e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a07      	ldr	r2, [pc, #28]	@ (8001210 <HAL_Init+0x40>)
 80011f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 f931 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 f808 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001204:	f7ff fe0a 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023c00 	.word	0x40023c00

08001214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <HAL_InitTick+0x54>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_InitTick+0x58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f93b 	bl	80014ae <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f000 f911 	bl	8001476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	@ (8001270 <HAL_InitTick+0x5c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000024 	.word	0x20000024
 800126c:	2000002c 	.word	0x2000002c
 8001270:	20000028 	.word	0x20000028

08001274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_IncTick+0x20>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_IncTick+0x24>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <HAL_IncTick+0x24>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	2000002c 	.word	0x2000002c
 8001298:	20000588 	.word	0x20000588

0800129c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <HAL_GetTick+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000588 	.word	0x20000588

080012b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff ffee 	bl	800129c <HAL_GetTick>
 80012c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012cc:	d005      	beq.n	80012da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ce:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <HAL_Delay+0x44>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4413      	add	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012da:	bf00      	nop
 80012dc:	f7ff ffde 	bl	800129c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d8f7      	bhi.n	80012dc <HAL_Delay+0x28>
  {
  }
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000002c 	.word	0x2000002c

080012fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001318:	4013      	ands	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001324:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800132c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132e:	4a04      	ldr	r2, [pc, #16]	@ (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60d3      	str	r3, [r2, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001348:	4b04      	ldr	r3, [pc, #16]	@ (800135c <__NVIC_GetPriorityGrouping+0x18>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	f003 0307 	and.w	r3, r3, #7
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db0a      	blt.n	800138a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	490c      	ldr	r1, [pc, #48]	@ (80013ac <__NVIC_SetPriority+0x4c>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	0112      	lsls	r2, r2, #4
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	440b      	add	r3, r1
 8001384:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001388:	e00a      	b.n	80013a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4908      	ldr	r1, [pc, #32]	@ (80013b0 <__NVIC_SetPriority+0x50>)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	3b04      	subs	r3, #4
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	440b      	add	r3, r1
 800139e:	761a      	strb	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	@ 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f1c3 0307 	rsb	r3, r3, #7
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	bf28      	it	cs
 80013d2:	2304      	movcs	r3, #4
 80013d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d902      	bls.n	80013e4 <NVIC_EncodePriority+0x30>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3b03      	subs	r3, #3
 80013e2:	e000      	b.n	80013e6 <NVIC_EncodePriority+0x32>
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43d9      	mvns	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	4313      	orrs	r3, r2
         );
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	@ 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800142c:	d301      	bcc.n	8001432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142e:	2301      	movs	r3, #1
 8001430:	e00f      	b.n	8001452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001432:	4a0a      	ldr	r2, [pc, #40]	@ (800145c <SysTick_Config+0x40>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143a:	210f      	movs	r1, #15
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f7ff ff8e 	bl	8001360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001444:	4b05      	ldr	r3, [pc, #20]	@ (800145c <SysTick_Config+0x40>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144a:	4b04      	ldr	r3, [pc, #16]	@ (800145c <SysTick_Config+0x40>)
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff47 	bl	80012fc <__NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001488:	f7ff ff5c 	bl	8001344 <__NVIC_GetPriorityGrouping>
 800148c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f7ff ff8e 	bl	80013b4 <NVIC_EncodePriority>
 8001498:	4602      	mov	r2, r0
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff5d 	bl	8001360 <__NVIC_SetPriority>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ffb0 	bl	800141c <SysTick_Config>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	@ 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
 80014e2:	e16b      	b.n	80017bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014e4:	2201      	movs	r2, #1
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	f040 815a 	bne.w	80017b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b01      	cmp	r3, #1
 800150c:	d005      	beq.n	800151a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001516:	2b02      	cmp	r3, #2
 8001518:	d130      	bne.n	800157c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	2203      	movs	r2, #3
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	68da      	ldr	r2, [r3, #12]
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001550:	2201      	movs	r2, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	f003 0201 	and.w	r2, r3, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b03      	cmp	r3, #3
 8001586:	d017      	beq.n	80015b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d123      	bne.n	800160c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	08da      	lsrs	r2, r3, #3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3208      	adds	r2, #8
 80015cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	220f      	movs	r2, #15
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	691a      	ldr	r2, [r3, #16]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	08da      	lsrs	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3208      	adds	r2, #8
 8001606:	69b9      	ldr	r1, [r7, #24]
 8001608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0203 	and.w	r2, r3, #3
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 80b4 	beq.w	80017b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b60      	ldr	r3, [pc, #384]	@ (80017d4 <HAL_GPIO_Init+0x30c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001656:	4a5f      	ldr	r2, [pc, #380]	@ (80017d4 <HAL_GPIO_Init+0x30c>)
 8001658:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800165c:	6453      	str	r3, [r2, #68]	@ 0x44
 800165e:	4b5d      	ldr	r3, [pc, #372]	@ (80017d4 <HAL_GPIO_Init+0x30c>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800166a:	4a5b      	ldr	r2, [pc, #364]	@ (80017d8 <HAL_GPIO_Init+0x310>)
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	3302      	adds	r3, #2
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	220f      	movs	r2, #15
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a52      	ldr	r2, [pc, #328]	@ (80017dc <HAL_GPIO_Init+0x314>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d02b      	beq.n	80016ee <HAL_GPIO_Init+0x226>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a51      	ldr	r2, [pc, #324]	@ (80017e0 <HAL_GPIO_Init+0x318>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d025      	beq.n	80016ea <HAL_GPIO_Init+0x222>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a50      	ldr	r2, [pc, #320]	@ (80017e4 <HAL_GPIO_Init+0x31c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d01f      	beq.n	80016e6 <HAL_GPIO_Init+0x21e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4f      	ldr	r2, [pc, #316]	@ (80017e8 <HAL_GPIO_Init+0x320>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d019      	beq.n	80016e2 <HAL_GPIO_Init+0x21a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4e      	ldr	r2, [pc, #312]	@ (80017ec <HAL_GPIO_Init+0x324>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_GPIO_Init+0x216>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4d      	ldr	r2, [pc, #308]	@ (80017f0 <HAL_GPIO_Init+0x328>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d00d      	beq.n	80016da <HAL_GPIO_Init+0x212>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4c      	ldr	r2, [pc, #304]	@ (80017f4 <HAL_GPIO_Init+0x32c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d007      	beq.n	80016d6 <HAL_GPIO_Init+0x20e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4b      	ldr	r2, [pc, #300]	@ (80017f8 <HAL_GPIO_Init+0x330>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d101      	bne.n	80016d2 <HAL_GPIO_Init+0x20a>
 80016ce:	2307      	movs	r3, #7
 80016d0:	e00e      	b.n	80016f0 <HAL_GPIO_Init+0x228>
 80016d2:	2308      	movs	r3, #8
 80016d4:	e00c      	b.n	80016f0 <HAL_GPIO_Init+0x228>
 80016d6:	2306      	movs	r3, #6
 80016d8:	e00a      	b.n	80016f0 <HAL_GPIO_Init+0x228>
 80016da:	2305      	movs	r3, #5
 80016dc:	e008      	b.n	80016f0 <HAL_GPIO_Init+0x228>
 80016de:	2304      	movs	r3, #4
 80016e0:	e006      	b.n	80016f0 <HAL_GPIO_Init+0x228>
 80016e2:	2303      	movs	r3, #3
 80016e4:	e004      	b.n	80016f0 <HAL_GPIO_Init+0x228>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e002      	b.n	80016f0 <HAL_GPIO_Init+0x228>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <HAL_GPIO_Init+0x228>
 80016ee:	2300      	movs	r3, #0
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	f002 0203 	and.w	r2, r2, #3
 80016f6:	0092      	lsls	r2, r2, #2
 80016f8:	4093      	lsls	r3, r2
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001700:	4935      	ldr	r1, [pc, #212]	@ (80017d8 <HAL_GPIO_Init+0x310>)
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	3302      	adds	r3, #2
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800170e:	4b3b      	ldr	r3, [pc, #236]	@ (80017fc <HAL_GPIO_Init+0x334>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001732:	4a32      	ldr	r2, [pc, #200]	@ (80017fc <HAL_GPIO_Init+0x334>)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001738:	4b30      	ldr	r3, [pc, #192]	@ (80017fc <HAL_GPIO_Init+0x334>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800175c:	4a27      	ldr	r2, [pc, #156]	@ (80017fc <HAL_GPIO_Init+0x334>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001762:	4b26      	ldr	r3, [pc, #152]	@ (80017fc <HAL_GPIO_Init+0x334>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	43db      	mvns	r3, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4013      	ands	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001786:	4a1d      	ldr	r2, [pc, #116]	@ (80017fc <HAL_GPIO_Init+0x334>)
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800178c:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <HAL_GPIO_Init+0x334>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017b0:	4a12      	ldr	r2, [pc, #72]	@ (80017fc <HAL_GPIO_Init+0x334>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3301      	adds	r3, #1
 80017ba:	61fb      	str	r3, [r7, #28]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	2b0f      	cmp	r3, #15
 80017c0:	f67f ae90 	bls.w	80014e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3724      	adds	r7, #36	@ 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40013800 	.word	0x40013800
 80017dc:	40020000 	.word	0x40020000
 80017e0:	40020400 	.word	0x40020400
 80017e4:	40020800 	.word	0x40020800
 80017e8:	40020c00 	.word	0x40020c00
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40021400 	.word	0x40021400
 80017f4:	40021800 	.word	0x40021800
 80017f8:	40021c00 	.word	0x40021c00
 80017fc:	40013c00 	.word	0x40013c00

08001800 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691a      	ldr	r2, [r3, #16]
 8001810:	887b      	ldrh	r3, [r7, #2]
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001818:	2301      	movs	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	e001      	b.n	8001822 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001822:	7bfb      	ldrb	r3, [r7, #15]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
 800183c:	4613      	mov	r3, r2
 800183e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001840:	787b      	ldrb	r3, [r7, #1]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001846:	887a      	ldrh	r2, [r7, #2]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800184c:	e003      	b.n	8001856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800184e:	887b      	ldrh	r3, [r7, #2]
 8001850:	041a      	lsls	r2, r3, #16
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	619a      	str	r2, [r3, #24]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e12b      	b.n	8001ace <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff faee 	bl	8000e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2224      	movs	r2, #36	@ 0x24
 8001894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0201 	bic.w	r2, r2, #1
 80018a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018c8:	f002 f838 	bl	800393c <HAL_RCC_GetPCLK1Freq>
 80018cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4a81      	ldr	r2, [pc, #516]	@ (8001ad8 <HAL_I2C_Init+0x274>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d807      	bhi.n	80018e8 <HAL_I2C_Init+0x84>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4a80      	ldr	r2, [pc, #512]	@ (8001adc <HAL_I2C_Init+0x278>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	bf94      	ite	ls
 80018e0:	2301      	movls	r3, #1
 80018e2:	2300      	movhi	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	e006      	b.n	80018f6 <HAL_I2C_Init+0x92>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4a7d      	ldr	r2, [pc, #500]	@ (8001ae0 <HAL_I2C_Init+0x27c>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	bf94      	ite	ls
 80018f0:	2301      	movls	r3, #1
 80018f2:	2300      	movhi	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0e7      	b.n	8001ace <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4a78      	ldr	r2, [pc, #480]	@ (8001ae4 <HAL_I2C_Init+0x280>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	0c9b      	lsrs	r3, r3, #18
 8001908:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	430a      	orrs	r2, r1
 800191c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ad8 <HAL_I2C_Init+0x274>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d802      	bhi.n	8001938 <HAL_I2C_Init+0xd4>
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	3301      	adds	r3, #1
 8001936:	e009      	b.n	800194c <HAL_I2C_Init+0xe8>
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	4a69      	ldr	r2, [pc, #420]	@ (8001ae8 <HAL_I2C_Init+0x284>)
 8001944:	fba2 2303 	umull	r2, r3, r2, r3
 8001948:	099b      	lsrs	r3, r3, #6
 800194a:	3301      	adds	r3, #1
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	430b      	orrs	r3, r1
 8001952:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800195e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	495c      	ldr	r1, [pc, #368]	@ (8001ad8 <HAL_I2C_Init+0x274>)
 8001968:	428b      	cmp	r3, r1
 800196a:	d819      	bhi.n	80019a0 <HAL_I2C_Init+0x13c>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	1e59      	subs	r1, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fbb1 f3f3 	udiv	r3, r1, r3
 800197a:	1c59      	adds	r1, r3, #1
 800197c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001980:	400b      	ands	r3, r1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00a      	beq.n	800199c <HAL_I2C_Init+0x138>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1e59      	subs	r1, r3, #1
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fbb1 f3f3 	udiv	r3, r1, r3
 8001994:	3301      	adds	r3, #1
 8001996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800199a:	e051      	b.n	8001a40 <HAL_I2C_Init+0x1dc>
 800199c:	2304      	movs	r3, #4
 800199e:	e04f      	b.n	8001a40 <HAL_I2C_Init+0x1dc>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d111      	bne.n	80019cc <HAL_I2C_Init+0x168>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1e58      	subs	r0, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6859      	ldr	r1, [r3, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	440b      	add	r3, r1
 80019b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ba:	3301      	adds	r3, #1
 80019bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf0c      	ite	eq
 80019c4:	2301      	moveq	r3, #1
 80019c6:	2300      	movne	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	e012      	b.n	80019f2 <HAL_I2C_Init+0x18e>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1e58      	subs	r0, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	0099      	lsls	r1, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e2:	3301      	adds	r3, #1
 80019e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	bf0c      	ite	eq
 80019ec:	2301      	moveq	r3, #1
 80019ee:	2300      	movne	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_I2C_Init+0x196>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e022      	b.n	8001a40 <HAL_I2C_Init+0x1dc>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10e      	bne.n	8001a20 <HAL_I2C_Init+0x1bc>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1e58      	subs	r0, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6859      	ldr	r1, [r3, #4]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	440b      	add	r3, r1
 8001a10:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a1e:	e00f      	b.n	8001a40 <HAL_I2C_Init+0x1dc>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1e58      	subs	r0, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	0099      	lsls	r1, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a36:	3301      	adds	r3, #1
 8001a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	6809      	ldr	r1, [r1, #0]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69da      	ldr	r2, [r3, #28]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6911      	ldr	r1, [r2, #16]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68d2      	ldr	r2, [r2, #12]
 8001a7a:	4311      	orrs	r1, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	430b      	orrs	r3, r1
 8001a82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2220      	movs	r2, #32
 8001aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	000186a0 	.word	0x000186a0
 8001adc:	001e847f 	.word	0x001e847f
 8001ae0:	003d08ff 	.word	0x003d08ff
 8001ae4:	431bde83 	.word	0x431bde83
 8001ae8:	10624dd3 	.word	0x10624dd3

08001aec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af02      	add	r7, sp, #8
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	461a      	mov	r2, r3
 8001af8:	460b      	mov	r3, r1
 8001afa:	817b      	strh	r3, [r7, #10]
 8001afc:	4613      	mov	r3, r2
 8001afe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff fbcc 	bl	800129c <HAL_GetTick>
 8001b04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b20      	cmp	r3, #32
 8001b10:	f040 80e0 	bne.w	8001cd4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2319      	movs	r3, #25
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4970      	ldr	r1, [pc, #448]	@ (8001ce0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 fc22 	bl	8002368 <I2C_WaitOnFlagUntilTimeout>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e0d3      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_I2C_Master_Transmit+0x50>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e0cc      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x1ea>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d007      	beq.n	8001b62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0201 	orr.w	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2221      	movs	r2, #33	@ 0x21
 8001b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2210      	movs	r2, #16
 8001b7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	893a      	ldrh	r2, [r7, #8]
 8001b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4a50      	ldr	r2, [pc, #320]	@ (8001ce4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ba2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ba4:	8979      	ldrh	r1, [r7, #10]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	6a3a      	ldr	r2, [r7, #32]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 fac4 	bl	8002138 <I2C_MasterRequestWrite>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e08d      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001bd0:	e066      	b.n	8001ca0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	6a39      	ldr	r1, [r7, #32]
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 fce0 	bl	800259c <I2C_WaitOnTXEFlagUntilTimeout>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00d      	beq.n	8001bfe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d107      	bne.n	8001bfa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bf8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e06b      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c02:	781a      	ldrb	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d11b      	bne.n	8001c74 <HAL_I2C_Master_Transmit+0x188>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d017      	beq.n	8001c74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c48:	781a      	ldrb	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	6a39      	ldr	r1, [r7, #32]
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 fcd7 	bl	800262c <I2C_WaitOnBTFFlagUntilTimeout>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00d      	beq.n	8001ca0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d107      	bne.n	8001c9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e01a      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d194      	bne.n	8001bd2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	e000      	b.n	8001cd6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001cd4:	2302      	movs	r3, #2
  }
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	00100002 	.word	0x00100002
 8001ce4:	ffff0000 	.word	0xffff0000

08001ce8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	4608      	mov	r0, r1
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	817b      	strh	r3, [r7, #10]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	813b      	strh	r3, [r7, #8]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d02:	f7ff facb 	bl	800129c <HAL_GetTick>
 8001d06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b20      	cmp	r3, #32
 8001d12:	f040 80d9 	bne.w	8001ec8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2319      	movs	r3, #25
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	496d      	ldr	r1, [pc, #436]	@ (8001ed4 <HAL_I2C_Mem_Write+0x1ec>)
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 fb21 	bl	8002368 <I2C_WaitOnFlagUntilTimeout>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e0cc      	b.n	8001eca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_I2C_Mem_Write+0x56>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e0c5      	b.n	8001eca <HAL_I2C_Mem_Write+0x1e2>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d007      	beq.n	8001d64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2221      	movs	r2, #33	@ 0x21
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2240      	movs	r2, #64	@ 0x40
 8001d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6a3a      	ldr	r2, [r7, #32]
 8001d8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4a4d      	ldr	r2, [pc, #308]	@ (8001ed8 <HAL_I2C_Mem_Write+0x1f0>)
 8001da4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001da6:	88f8      	ldrh	r0, [r7, #6]
 8001da8:	893a      	ldrh	r2, [r7, #8]
 8001daa:	8979      	ldrh	r1, [r7, #10]
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	4603      	mov	r3, r0
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 fa40 	bl	800223c <I2C_RequestMemoryWrite>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d052      	beq.n	8001e68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e081      	b.n	8001eca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 fbe6 	bl	800259c <I2C_WaitOnTXEFlagUntilTimeout>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00d      	beq.n	8001df2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d107      	bne.n	8001dee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e06b      	b.n	8001eca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df6:	781a      	ldrb	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d11b      	bne.n	8001e68 <HAL_I2C_Mem_Write+0x180>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d017      	beq.n	8001e68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1aa      	bne.n	8001dc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 fbd9 	bl	800262c <I2C_WaitOnBTFFlagUntilTimeout>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00d      	beq.n	8001e9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d107      	bne.n	8001e98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e016      	b.n	8001eca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	e000      	b.n	8001eca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ec8:	2302      	movs	r3, #2
  }
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	00100002 	.word	0x00100002
 8001ed8:	ffff0000 	.word	0xffff0000

08001edc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	@ 0x28
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff f9d6 	bl	800129c <HAL_GetTick>
 8001ef0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b20      	cmp	r3, #32
 8001f00:	f040 8111 	bne.w	8002126 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	2319      	movs	r3, #25
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	4988      	ldr	r1, [pc, #544]	@ (8002130 <HAL_I2C_IsDeviceReady+0x254>)
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 fa2a 	bl	8002368 <I2C_WaitOnFlagUntilTimeout>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e104      	b.n	8002128 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_I2C_IsDeviceReady+0x50>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e0fd      	b.n	8002128 <HAL_I2C_IsDeviceReady+0x24c>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d007      	beq.n	8001f52 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2224      	movs	r2, #36	@ 0x24
 8001f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4a70      	ldr	r2, [pc, #448]	@ (8002134 <HAL_I2C_IsDeviceReady+0x258>)
 8001f74:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f84:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f9e8 	bl	8002368 <I2C_WaitOnFlagUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00d      	beq.n	8001fba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fac:	d103      	bne.n	8001fb6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fb4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e0b6      	b.n	8002128 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fba:	897b      	ldrh	r3, [r7, #10]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001fc8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001fca:	f7ff f967 	bl	800129c <HAL_GetTick>
 8001fce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	bf0c      	ite	eq
 8001fde:	2301      	moveq	r3, #1
 8001fe0:	2300      	movne	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ff4:	bf0c      	ite	eq
 8001ff6:	2301      	moveq	r3, #1
 8001ff8:	2300      	movne	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ffe:	e025      	b.n	800204c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002000:	f7ff f94c 	bl	800129c <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d302      	bcc.n	8002016 <HAL_I2C_IsDeviceReady+0x13a>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d103      	bne.n	800201e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	22a0      	movs	r2, #160	@ 0xa0
 800201a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b02      	cmp	r3, #2
 800202a:	bf0c      	ite	eq
 800202c:	2301      	moveq	r3, #1
 800202e:	2300      	movne	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800203e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2ba0      	cmp	r3, #160	@ 0xa0
 8002056:	d005      	beq.n	8002064 <HAL_I2C_IsDeviceReady+0x188>
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d102      	bne.n	8002064 <HAL_I2C_IsDeviceReady+0x188>
 800205e:	7dbb      	ldrb	r3, [r7, #22]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0cd      	beq.n	8002000 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b02      	cmp	r3, #2
 8002078:	d129      	bne.n	80020ce <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002088:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	2319      	movs	r3, #25
 80020a6:	2201      	movs	r2, #1
 80020a8:	4921      	ldr	r1, [pc, #132]	@ (8002130 <HAL_I2C_IsDeviceReady+0x254>)
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 f95c 	bl	8002368 <I2C_WaitOnFlagUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e036      	b.n	8002128 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2220      	movs	r2, #32
 80020be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e02c      	b.n	8002128 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020dc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020e6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	2319      	movs	r3, #25
 80020ee:	2201      	movs	r2, #1
 80020f0:	490f      	ldr	r1, [pc, #60]	@ (8002130 <HAL_I2C_IsDeviceReady+0x254>)
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 f938 	bl	8002368 <I2C_WaitOnFlagUntilTimeout>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e012      	b.n	8002128 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	3301      	adds	r3, #1
 8002106:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	429a      	cmp	r2, r3
 800210e:	f4ff af32 	bcc.w	8001f76 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2220      	movs	r2, #32
 8002116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002126:	2302      	movs	r3, #2
  }
}
 8002128:	4618      	mov	r0, r3
 800212a:	3720      	adds	r7, #32
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	00100002 	.word	0x00100002
 8002134:	ffff0000 	.word	0xffff0000

08002138 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af02      	add	r7, sp, #8
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	460b      	mov	r3, r1
 8002146:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2b08      	cmp	r3, #8
 8002152:	d006      	beq.n	8002162 <I2C_MasterRequestWrite+0x2a>
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d003      	beq.n	8002162 <I2C_MasterRequestWrite+0x2a>
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002160:	d108      	bne.n	8002174 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	e00b      	b.n	800218c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002178:	2b12      	cmp	r3, #18
 800217a:	d107      	bne.n	800218c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800218a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 f8e5 	bl	8002368 <I2C_WaitOnFlagUntilTimeout>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00d      	beq.n	80021c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021b2:	d103      	bne.n	80021bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e035      	b.n	800222c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021c8:	d108      	bne.n	80021dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021ca:	897b      	ldrh	r3, [r7, #10]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	461a      	mov	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80021d8:	611a      	str	r2, [r3, #16]
 80021da:	e01b      	b.n	8002214 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021dc:	897b      	ldrh	r3, [r7, #10]
 80021de:	11db      	asrs	r3, r3, #7
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	f003 0306 	and.w	r3, r3, #6
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	f063 030f 	orn	r3, r3, #15
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	490e      	ldr	r1, [pc, #56]	@ (8002234 <I2C_MasterRequestWrite+0xfc>)
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 f92e 	bl	800245c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e010      	b.n	800222c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800220a:	897b      	ldrh	r3, [r7, #10]
 800220c:	b2da      	uxtb	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	4907      	ldr	r1, [pc, #28]	@ (8002238 <I2C_MasterRequestWrite+0x100>)
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f91e 	bl	800245c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	00010008 	.word	0x00010008
 8002238:	00010002 	.word	0x00010002

0800223c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	4608      	mov	r0, r1
 8002246:	4611      	mov	r1, r2
 8002248:	461a      	mov	r2, r3
 800224a:	4603      	mov	r3, r0
 800224c:	817b      	strh	r3, [r7, #10]
 800224e:	460b      	mov	r3, r1
 8002250:	813b      	strh	r3, [r7, #8]
 8002252:	4613      	mov	r3, r2
 8002254:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002264:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	2200      	movs	r2, #0
 800226e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f878 	bl	8002368 <I2C_WaitOnFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00d      	beq.n	800229a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002288:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800228c:	d103      	bne.n	8002296 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002294:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e05f      	b.n	800235a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800229a:	897b      	ldrh	r3, [r7, #10]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80022a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	6a3a      	ldr	r2, [r7, #32]
 80022ae:	492d      	ldr	r1, [pc, #180]	@ (8002364 <I2C_RequestMemoryWrite+0x128>)
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f8d3 	bl	800245c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e04c      	b.n	800235a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022d8:	6a39      	ldr	r1, [r7, #32]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f95e 	bl	800259c <I2C_WaitOnTXEFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00d      	beq.n	8002302 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d107      	bne.n	80022fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e02b      	b.n	800235a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002308:	893b      	ldrh	r3, [r7, #8]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	611a      	str	r2, [r3, #16]
 8002312:	e021      	b.n	8002358 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002314:	893b      	ldrh	r3, [r7, #8]
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	b29b      	uxth	r3, r3
 800231a:	b2da      	uxtb	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002324:	6a39      	ldr	r1, [r7, #32]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f938 	bl	800259c <I2C_WaitOnTXEFlagUntilTimeout>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00d      	beq.n	800234e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	2b04      	cmp	r3, #4
 8002338:	d107      	bne.n	800234a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002348:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e005      	b.n	800235a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800234e:	893b      	ldrh	r3, [r7, #8]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	00010002 	.word	0x00010002

08002368 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	4613      	mov	r3, r2
 8002376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002378:	e048      	b.n	800240c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002380:	d044      	beq.n	800240c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002382:	f7fe ff8b 	bl	800129c <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d302      	bcc.n	8002398 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d139      	bne.n	800240c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	0c1b      	lsrs	r3, r3, #16
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d10d      	bne.n	80023be <I2C_WaitOnFlagUntilTimeout+0x56>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	43da      	mvns	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	4013      	ands	r3, r2
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	bf0c      	ite	eq
 80023b4:	2301      	moveq	r3, #1
 80023b6:	2300      	movne	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	e00c      	b.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	43da      	mvns	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	4013      	ands	r3, r2
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf0c      	ite	eq
 80023d0:	2301      	moveq	r3, #1
 80023d2:	2300      	movne	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	461a      	mov	r2, r3
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d116      	bne.n	800240c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f8:	f043 0220 	orr.w	r2, r3, #32
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e023      	b.n	8002454 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	0c1b      	lsrs	r3, r3, #16
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d10d      	bne.n	8002432 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	43da      	mvns	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	4013      	ands	r3, r2
 8002422:	b29b      	uxth	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf0c      	ite	eq
 8002428:	2301      	moveq	r3, #1
 800242a:	2300      	movne	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	e00c      	b.n	800244c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	43da      	mvns	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	4013      	ands	r3, r2
 800243e:	b29b      	uxth	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf0c      	ite	eq
 8002444:	2301      	moveq	r3, #1
 8002446:	2300      	movne	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	461a      	mov	r2, r3
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	429a      	cmp	r2, r3
 8002450:	d093      	beq.n	800237a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800246a:	e071      	b.n	8002550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800247a:	d123      	bne.n	80024c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800248a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002494:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b0:	f043 0204 	orr.w	r2, r3, #4
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e067      	b.n	8002594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ca:	d041      	beq.n	8002550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024cc:	f7fe fee6 	bl	800129c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d302      	bcc.n	80024e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d136      	bne.n	8002550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	0c1b      	lsrs	r3, r3, #16
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d10c      	bne.n	8002506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	43da      	mvns	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	4013      	ands	r3, r2
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bf14      	ite	ne
 80024fe:	2301      	movne	r3, #1
 8002500:	2300      	moveq	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	e00b      	b.n	800251e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	43da      	mvns	r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	4013      	ands	r3, r2
 8002512:	b29b      	uxth	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	bf14      	ite	ne
 8002518:	2301      	movne	r3, #1
 800251a:	2300      	moveq	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d016      	beq.n	8002550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253c:	f043 0220 	orr.w	r2, r3, #32
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e021      	b.n	8002594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	0c1b      	lsrs	r3, r3, #16
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b01      	cmp	r3, #1
 8002558:	d10c      	bne.n	8002574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	43da      	mvns	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	4013      	ands	r3, r2
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf14      	ite	ne
 800256c:	2301      	movne	r3, #1
 800256e:	2300      	moveq	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	e00b      	b.n	800258c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	43da      	mvns	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4013      	ands	r3, r2
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf14      	ite	ne
 8002586:	2301      	movne	r3, #1
 8002588:	2300      	moveq	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	f47f af6d 	bne.w	800246c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025a8:	e034      	b.n	8002614 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 f886 	bl	80026bc <I2C_IsAcknowledgeFailed>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e034      	b.n	8002624 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c0:	d028      	beq.n	8002614 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c2:	f7fe fe6b 	bl	800129c <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d302      	bcc.n	80025d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d11d      	bne.n	8002614 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025e2:	2b80      	cmp	r3, #128	@ 0x80
 80025e4:	d016      	beq.n	8002614 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	f043 0220 	orr.w	r2, r3, #32
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e007      	b.n	8002624 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800261e:	2b80      	cmp	r3, #128	@ 0x80
 8002620:	d1c3      	bne.n	80025aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002638:	e034      	b.n	80026a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f83e 	bl	80026bc <I2C_IsAcknowledgeFailed>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e034      	b.n	80026b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002650:	d028      	beq.n	80026a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002652:	f7fe fe23 	bl	800129c <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	429a      	cmp	r2, r3
 8002660:	d302      	bcc.n	8002668 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d11d      	bne.n	80026a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b04      	cmp	r3, #4
 8002674:	d016      	beq.n	80026a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	f043 0220 	orr.w	r2, r3, #32
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e007      	b.n	80026b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d1c3      	bne.n	800263a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026d2:	d11b      	bne.n	800270c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f8:	f043 0204 	orr.w	r2, r3, #4
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e128      	b.n	8002980 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a90      	ldr	r2, [pc, #576]	@ (8002988 <HAL_I2S_Init+0x26c>)
 8002746:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7fe fbd7 	bl	8000efc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2202      	movs	r2, #2
 8002752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002764:	f023 030f 	bic.w	r3, r3, #15
 8002768:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2202      	movs	r2, #2
 8002770:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d060      	beq.n	800283c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d102      	bne.n	8002788 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002782:	2310      	movs	r3, #16
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	e001      	b.n	800278c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002788:	2320      	movs	r3, #32
 800278a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b20      	cmp	r3, #32
 8002792:	d802      	bhi.n	800279a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800279a:	2001      	movs	r0, #1
 800279c:	f001 f9d8 	bl	8003b50 <HAL_RCCEx_GetPeriphCLKFreq>
 80027a0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027aa:	d125      	bne.n	80027f8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d010      	beq.n	80027d6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	461a      	mov	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d0:	3305      	adds	r3, #5
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	e01f      	b.n	8002816 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	461a      	mov	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f2:	3305      	adds	r3, #5
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	e00e      	b.n	8002816 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	461a      	mov	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002812:	3305      	adds	r3, #5
 8002814:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4a5c      	ldr	r2, [pc, #368]	@ (800298c <HAL_I2S_Init+0x270>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	08db      	lsrs	r3, r3, #3
 8002820:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	085b      	lsrs	r3, r3, #1
 8002832:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	e003      	b.n	8002844 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800283c:	2302      	movs	r3, #2
 800283e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d902      	bls.n	8002850 <HAL_I2S_Init+0x134>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	2bff      	cmp	r3, #255	@ 0xff
 800284e:	d907      	bls.n	8002860 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002854:	f043 0210 	orr.w	r2, r3, #16
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e08f      	b.n	8002980 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	ea42 0103 	orr.w	r1, r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	430a      	orrs	r2, r1
 8002872:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800287e:	f023 030f 	bic.w	r3, r3, #15
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6851      	ldr	r1, [r2, #4]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6892      	ldr	r2, [r2, #8]
 800288a:	4311      	orrs	r1, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	68d2      	ldr	r2, [r2, #12]
 8002890:	4311      	orrs	r1, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6992      	ldr	r2, [r2, #24]
 8002896:	430a      	orrs	r2, r1
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028a2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d161      	bne.n	8002970 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a38      	ldr	r2, [pc, #224]	@ (8002990 <HAL_I2S_Init+0x274>)
 80028b0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a37      	ldr	r2, [pc, #220]	@ (8002994 <HAL_I2S_Init+0x278>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d101      	bne.n	80028c0 <HAL_I2S_Init+0x1a4>
 80028bc:	4b36      	ldr	r3, [pc, #216]	@ (8002998 <HAL_I2S_Init+0x27c>)
 80028be:	e001      	b.n	80028c4 <HAL_I2S_Init+0x1a8>
 80028c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	4932      	ldr	r1, [pc, #200]	@ (8002994 <HAL_I2S_Init+0x278>)
 80028cc:	428a      	cmp	r2, r1
 80028ce:	d101      	bne.n	80028d4 <HAL_I2S_Init+0x1b8>
 80028d0:	4a31      	ldr	r2, [pc, #196]	@ (8002998 <HAL_I2S_Init+0x27c>)
 80028d2:	e001      	b.n	80028d8 <HAL_I2S_Init+0x1bc>
 80028d4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80028d8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80028dc:	f023 030f 	bic.w	r3, r3, #15
 80028e0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002994 <HAL_I2S_Init+0x278>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d101      	bne.n	80028f0 <HAL_I2S_Init+0x1d4>
 80028ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002998 <HAL_I2S_Init+0x27c>)
 80028ee:	e001      	b.n	80028f4 <HAL_I2S_Init+0x1d8>
 80028f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80028f4:	2202      	movs	r2, #2
 80028f6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a25      	ldr	r2, [pc, #148]	@ (8002994 <HAL_I2S_Init+0x278>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d101      	bne.n	8002906 <HAL_I2S_Init+0x1ea>
 8002902:	4b25      	ldr	r3, [pc, #148]	@ (8002998 <HAL_I2S_Init+0x27c>)
 8002904:	e001      	b.n	800290a <HAL_I2S_Init+0x1ee>
 8002906:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002916:	d003      	beq.n	8002920 <HAL_I2S_Init+0x204>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d103      	bne.n	8002928 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002920:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	e001      	b.n	800292c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002928:	2300      	movs	r3, #0
 800292a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002936:	4313      	orrs	r3, r2
 8002938:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002940:	4313      	orrs	r3, r2
 8002942:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800294a:	4313      	orrs	r3, r2
 800294c:	b29a      	uxth	r2, r3
 800294e:	897b      	ldrh	r3, [r7, #10]
 8002950:	4313      	orrs	r3, r2
 8002952:	b29b      	uxth	r3, r3
 8002954:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002958:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a0d      	ldr	r2, [pc, #52]	@ (8002994 <HAL_I2S_Init+0x278>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d101      	bne.n	8002968 <HAL_I2S_Init+0x24c>
 8002964:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <HAL_I2S_Init+0x27c>)
 8002966:	e001      	b.n	800296c <HAL_I2S_Init+0x250>
 8002968:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800296c:	897a      	ldrh	r2, [r7, #10]
 800296e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3720      	adds	r7, #32
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	08002a93 	.word	0x08002a93
 800298c:	cccccccd 	.word	0xcccccccd
 8002990:	08002ba9 	.word	0x08002ba9
 8002994:	40003800 	.word	0x40003800
 8002998:	40003400 	.word	0x40003400

0800299c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e4:	881a      	ldrh	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	1c9a      	adds	r2, r3, #2
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10e      	bne.n	8002a2c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a1c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ffb8 	bl	800299c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a46:	b292      	uxth	r2, r2
 8002a48:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4e:	1c9a      	adds	r2, r3, #2
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10e      	bne.n	8002a8a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a7a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff ff93 	bl	80029b0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d13a      	bne.n	8002b24 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d109      	bne.n	8002acc <I2S_IRQHandler+0x3a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac2:	2b40      	cmp	r3, #64	@ 0x40
 8002ac4:	d102      	bne.n	8002acc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ffb4 	bl	8002a34 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad2:	2b40      	cmp	r3, #64	@ 0x40
 8002ad4:	d126      	bne.n	8002b24 <I2S_IRQHandler+0x92>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	d11f      	bne.n	8002b24 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002af2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b16:	f043 0202 	orr.w	r2, r3, #2
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff ff50 	bl	80029c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d136      	bne.n	8002b9e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d109      	bne.n	8002b4e <I2S_IRQHandler+0xbc>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b44:	2b80      	cmp	r3, #128	@ 0x80
 8002b46:	d102      	bne.n	8002b4e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff ff45 	bl	80029d8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d122      	bne.n	8002b9e <I2S_IRQHandler+0x10c>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	d11b      	bne.n	8002b9e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b74:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b90:	f043 0204 	orr.w	r2, r3, #4
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff ff13 	bl	80029c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a92      	ldr	r2, [pc, #584]	@ (8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d101      	bne.n	8002bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002bc2:	4b92      	ldr	r3, [pc, #584]	@ (8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bc4:	e001      	b.n	8002bca <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002bc6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a8b      	ldr	r2, [pc, #556]	@ (8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d101      	bne.n	8002be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002be0:	4b8a      	ldr	r3, [pc, #552]	@ (8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002be2:	e001      	b.n	8002be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002be4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bf4:	d004      	beq.n	8002c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f040 8099 	bne.w	8002d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d107      	bne.n	8002c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f925 	bl	8002e64 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d107      	bne.n	8002c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f9c8 	bl	8002fc4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c3a:	2b40      	cmp	r3, #64	@ 0x40
 8002c3c:	d13a      	bne.n	8002cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f003 0320 	and.w	r3, r3, #32
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d035      	beq.n	8002cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a6e      	ldr	r2, [pc, #440]	@ (8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d101      	bne.n	8002c56 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c52:	4b6e      	ldr	r3, [pc, #440]	@ (8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c54:	e001      	b.n	8002c5a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c56:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4969      	ldr	r1, [pc, #420]	@ (8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c62:	428b      	cmp	r3, r1
 8002c64:	d101      	bne.n	8002c6a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c66:	4b69      	ldr	r3, [pc, #420]	@ (8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c68:	e001      	b.n	8002c6e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c6e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002c72:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002c82:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca6:	f043 0202 	orr.w	r2, r3, #2
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff fe88 	bl	80029c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	f040 80c3 	bne.w	8002e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80bd 	beq.w	8002e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002cda:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a49      	ldr	r2, [pc, #292]	@ (8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002ce6:	4b49      	ldr	r3, [pc, #292]	@ (8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ce8:	e001      	b.n	8002cee <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002cea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4944      	ldr	r1, [pc, #272]	@ (8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cf6:	428b      	cmp	r3, r1
 8002cf8:	d101      	bne.n	8002cfe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002cfa:	4b44      	ldr	r3, [pc, #272]	@ (8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cfc:	e001      	b.n	8002d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002cfe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d02:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d06:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d22:	f043 0204 	orr.w	r2, r3, #4
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff fe4a 	bl	80029c4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d30:	e089      	b.n	8002e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d107      	bne.n	8002d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f8be 	bl	8002ec8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d107      	bne.n	8002d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f8fd 	bl	8002f60 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d6c:	2b40      	cmp	r3, #64	@ 0x40
 8002d6e:	d12f      	bne.n	8002dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d02a      	beq.n	8002dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d88:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d101      	bne.n	8002d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d94:	4b1d      	ldr	r3, [pc, #116]	@ (8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d96:	e001      	b.n	8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4919      	ldr	r1, [pc, #100]	@ (8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002da4:	428b      	cmp	r3, r1
 8002da6:	d101      	bne.n	8002dac <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002da8:	4b18      	ldr	r3, [pc, #96]	@ (8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002daa:	e001      	b.n	8002db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002dac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002db0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002db4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc2:	f043 0202 	orr.w	r2, r3, #2
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff fdfa 	bl	80029c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d136      	bne.n	8002e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d031      	beq.n	8002e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a07      	ldr	r2, [pc, #28]	@ (8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002dee:	4b07      	ldr	r3, [pc, #28]	@ (8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002df0:	e001      	b.n	8002df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002df2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4902      	ldr	r1, [pc, #8]	@ (8002e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dfe:	428b      	cmp	r3, r1
 8002e00:	d106      	bne.n	8002e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002e02:	4b02      	ldr	r3, [pc, #8]	@ (8002e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e04:	e006      	b.n	8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002e06:	bf00      	nop
 8002e08:	40003800 	.word	0x40003800
 8002e0c:	40003400 	.word	0x40003400
 8002e10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e14:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e18:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e28:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e36:	f043 0204 	orr.w	r2, r3, #4
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff fdc0 	bl	80029c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e44:	e000      	b.n	8002e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e46:	bf00      	nop
}
 8002e48:	bf00      	nop
 8002e4a:	3720      	adds	r7, #32
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	1c99      	adds	r1, r3, #2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6251      	str	r1, [r2, #36]	@ 0x24
 8002e76:	881a      	ldrh	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d113      	bne.n	8002ebe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002ea4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d106      	bne.n	8002ebe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff ffc9 	bl	8002e50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	1c99      	adds	r1, r3, #2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6251      	str	r1, [r2, #36]	@ 0x24
 8002eda:	8819      	ldrh	r1, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f58 <I2SEx_TxISR_I2SExt+0x90>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d101      	bne.n	8002eea <I2SEx_TxISR_I2SExt+0x22>
 8002ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f5c <I2SEx_TxISR_I2SExt+0x94>)
 8002ee8:	e001      	b.n	8002eee <I2SEx_TxISR_I2SExt+0x26>
 8002eea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002eee:	460a      	mov	r2, r1
 8002ef0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d121      	bne.n	8002f4e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a12      	ldr	r2, [pc, #72]	@ (8002f58 <I2SEx_TxISR_I2SExt+0x90>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d101      	bne.n	8002f18 <I2SEx_TxISR_I2SExt+0x50>
 8002f14:	4b11      	ldr	r3, [pc, #68]	@ (8002f5c <I2SEx_TxISR_I2SExt+0x94>)
 8002f16:	e001      	b.n	8002f1c <I2SEx_TxISR_I2SExt+0x54>
 8002f18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	490d      	ldr	r1, [pc, #52]	@ (8002f58 <I2SEx_TxISR_I2SExt+0x90>)
 8002f24:	428b      	cmp	r3, r1
 8002f26:	d101      	bne.n	8002f2c <I2SEx_TxISR_I2SExt+0x64>
 8002f28:	4b0c      	ldr	r3, [pc, #48]	@ (8002f5c <I2SEx_TxISR_I2SExt+0x94>)
 8002f2a:	e001      	b.n	8002f30 <I2SEx_TxISR_I2SExt+0x68>
 8002f2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f30:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002f34:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d106      	bne.n	8002f4e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ff81 	bl	8002e50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40003800 	.word	0x40003800
 8002f5c:	40003400 	.word	0x40003400

08002f60 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68d8      	ldr	r0, [r3, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f72:	1c99      	adds	r1, r3, #2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002f78:	b282      	uxth	r2, r0
 8002f7a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d113      	bne.n	8002fbc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002fa2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff ff4a 	bl	8002e50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a20      	ldr	r2, [pc, #128]	@ (8003054 <I2SEx_RxISR_I2SExt+0x90>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d101      	bne.n	8002fda <I2SEx_RxISR_I2SExt+0x16>
 8002fd6:	4b20      	ldr	r3, [pc, #128]	@ (8003058 <I2SEx_RxISR_I2SExt+0x94>)
 8002fd8:	e001      	b.n	8002fde <I2SEx_RxISR_I2SExt+0x1a>
 8002fda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fde:	68d8      	ldr	r0, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe4:	1c99      	adds	r1, r3, #2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002fea:	b282      	uxth	r2, r0
 8002fec:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d121      	bne.n	800304a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a12      	ldr	r2, [pc, #72]	@ (8003054 <I2SEx_RxISR_I2SExt+0x90>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d101      	bne.n	8003014 <I2SEx_RxISR_I2SExt+0x50>
 8003010:	4b11      	ldr	r3, [pc, #68]	@ (8003058 <I2SEx_RxISR_I2SExt+0x94>)
 8003012:	e001      	b.n	8003018 <I2SEx_RxISR_I2SExt+0x54>
 8003014:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	490d      	ldr	r1, [pc, #52]	@ (8003054 <I2SEx_RxISR_I2SExt+0x90>)
 8003020:	428b      	cmp	r3, r1
 8003022:	d101      	bne.n	8003028 <I2SEx_RxISR_I2SExt+0x64>
 8003024:	4b0c      	ldr	r3, [pc, #48]	@ (8003058 <I2SEx_RxISR_I2SExt+0x94>)
 8003026:	e001      	b.n	800302c <I2SEx_RxISR_I2SExt+0x68>
 8003028:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800302c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003030:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d106      	bne.n	800304a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff ff03 	bl	8002e50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40003800 	.word	0x40003800
 8003058:	40003400 	.word	0x40003400

0800305c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e267      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d075      	beq.n	8003166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800307a:	4b88      	ldr	r3, [pc, #544]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	2b04      	cmp	r3, #4
 8003084:	d00c      	beq.n	80030a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003086:	4b85      	ldr	r3, [pc, #532]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800308e:	2b08      	cmp	r3, #8
 8003090:	d112      	bne.n	80030b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003092:	4b82      	ldr	r3, [pc, #520]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800309a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800309e:	d10b      	bne.n	80030b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a0:	4b7e      	ldr	r3, [pc, #504]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d05b      	beq.n	8003164 <HAL_RCC_OscConfig+0x108>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d157      	bne.n	8003164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e242      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030c0:	d106      	bne.n	80030d0 <HAL_RCC_OscConfig+0x74>
 80030c2:	4b76      	ldr	r3, [pc, #472]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a75      	ldr	r2, [pc, #468]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80030c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e01d      	b.n	800310c <HAL_RCC_OscConfig+0xb0>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030d8:	d10c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x98>
 80030da:	4b70      	ldr	r3, [pc, #448]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6f      	ldr	r2, [pc, #444]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80030e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	4b6d      	ldr	r3, [pc, #436]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a6c      	ldr	r2, [pc, #432]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e00b      	b.n	800310c <HAL_RCC_OscConfig+0xb0>
 80030f4:	4b69      	ldr	r3, [pc, #420]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a68      	ldr	r2, [pc, #416]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80030fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	4b66      	ldr	r3, [pc, #408]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a65      	ldr	r2, [pc, #404]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800310a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d013      	beq.n	800313c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fe f8c2 	bl	800129c <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800311c:	f7fe f8be 	bl	800129c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b64      	cmp	r3, #100	@ 0x64
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e207      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	4b5b      	ldr	r3, [pc, #364]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0xc0>
 800313a:	e014      	b.n	8003166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fe f8ae 	bl	800129c <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003144:	f7fe f8aa 	bl	800129c <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	@ 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e1f3      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003156:	4b51      	ldr	r3, [pc, #324]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0xe8>
 8003162:	e000      	b.n	8003166 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d063      	beq.n	800323a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003172:	4b4a      	ldr	r3, [pc, #296]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00b      	beq.n	8003196 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317e:	4b47      	ldr	r3, [pc, #284]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003186:	2b08      	cmp	r3, #8
 8003188:	d11c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318a:	4b44      	ldr	r3, [pc, #272]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d116      	bne.n	80031c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003196:	4b41      	ldr	r3, [pc, #260]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_RCC_OscConfig+0x152>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d001      	beq.n	80031ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e1c7      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ae:	4b3b      	ldr	r3, [pc, #236]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4937      	ldr	r1, [pc, #220]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c2:	e03a      	b.n	800323a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d020      	beq.n	800320e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031cc:	4b34      	ldr	r3, [pc, #208]	@ (80032a0 <HAL_RCC_OscConfig+0x244>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d2:	f7fe f863 	bl	800129c <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031da:	f7fe f85f 	bl	800129c <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e1a8      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ec:	4b2b      	ldr	r3, [pc, #172]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f8:	4b28      	ldr	r3, [pc, #160]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4925      	ldr	r1, [pc, #148]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003208:	4313      	orrs	r3, r2
 800320a:	600b      	str	r3, [r1, #0]
 800320c:	e015      	b.n	800323a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800320e:	4b24      	ldr	r3, [pc, #144]	@ (80032a0 <HAL_RCC_OscConfig+0x244>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fe f842 	bl	800129c <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800321c:	f7fe f83e 	bl	800129c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e187      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322e:	4b1b      	ldr	r3, [pc, #108]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d036      	beq.n	80032b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800324e:	4b15      	ldr	r3, [pc, #84]	@ (80032a4 <HAL_RCC_OscConfig+0x248>)
 8003250:	2201      	movs	r2, #1
 8003252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003254:	f7fe f822 	bl	800129c <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325c:	f7fe f81e 	bl	800129c <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e167      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326e:	4b0b      	ldr	r3, [pc, #44]	@ (800329c <HAL_RCC_OscConfig+0x240>)
 8003270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x200>
 800327a:	e01b      	b.n	80032b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800327c:	4b09      	ldr	r3, [pc, #36]	@ (80032a4 <HAL_RCC_OscConfig+0x248>)
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003282:	f7fe f80b 	bl	800129c <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003288:	e00e      	b.n	80032a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800328a:	f7fe f807 	bl	800129c <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d907      	bls.n	80032a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e150      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
 800329c:	40023800 	.word	0x40023800
 80032a0:	42470000 	.word	0x42470000
 80032a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a8:	4b88      	ldr	r3, [pc, #544]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80032aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1ea      	bne.n	800328a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 8097 	beq.w	80033f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c2:	2300      	movs	r3, #0
 80032c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c6:	4b81      	ldr	r3, [pc, #516]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10f      	bne.n	80032f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	4b7d      	ldr	r3, [pc, #500]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	4a7c      	ldr	r2, [pc, #496]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80032dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032e2:	4b7a      	ldr	r3, [pc, #488]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ee:	2301      	movs	r3, #1
 80032f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f2:	4b77      	ldr	r3, [pc, #476]	@ (80034d0 <HAL_RCC_OscConfig+0x474>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d118      	bne.n	8003330 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fe:	4b74      	ldr	r3, [pc, #464]	@ (80034d0 <HAL_RCC_OscConfig+0x474>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a73      	ldr	r2, [pc, #460]	@ (80034d0 <HAL_RCC_OscConfig+0x474>)
 8003304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330a:	f7fd ffc7 	bl	800129c <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003312:	f7fd ffc3 	bl	800129c <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e10c      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003324:	4b6a      	ldr	r3, [pc, #424]	@ (80034d0 <HAL_RCC_OscConfig+0x474>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d106      	bne.n	8003346 <HAL_RCC_OscConfig+0x2ea>
 8003338:	4b64      	ldr	r3, [pc, #400]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333c:	4a63      	ldr	r2, [pc, #396]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	6713      	str	r3, [r2, #112]	@ 0x70
 8003344:	e01c      	b.n	8003380 <HAL_RCC_OscConfig+0x324>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b05      	cmp	r3, #5
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x30c>
 800334e:	4b5f      	ldr	r3, [pc, #380]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003352:	4a5e      	ldr	r2, [pc, #376]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 8003354:	f043 0304 	orr.w	r3, r3, #4
 8003358:	6713      	str	r3, [r2, #112]	@ 0x70
 800335a:	4b5c      	ldr	r3, [pc, #368]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335e:	4a5b      	ldr	r2, [pc, #364]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	6713      	str	r3, [r2, #112]	@ 0x70
 8003366:	e00b      	b.n	8003380 <HAL_RCC_OscConfig+0x324>
 8003368:	4b58      	ldr	r3, [pc, #352]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336c:	4a57      	ldr	r2, [pc, #348]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	6713      	str	r3, [r2, #112]	@ 0x70
 8003374:	4b55      	ldr	r3, [pc, #340]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003378:	4a54      	ldr	r2, [pc, #336]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 800337a:	f023 0304 	bic.w	r3, r3, #4
 800337e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d015      	beq.n	80033b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003388:	f7fd ff88 	bl	800129c <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003390:	f7fd ff84 	bl	800129c <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e0cb      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a6:	4b49      	ldr	r3, [pc, #292]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0ee      	beq.n	8003390 <HAL_RCC_OscConfig+0x334>
 80033b2:	e014      	b.n	80033de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b4:	f7fd ff72 	bl	800129c <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f7fd ff6e 	bl	800129c <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e0b5      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d2:	4b3e      	ldr	r3, [pc, #248]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1ee      	bne.n	80033bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033de:	7dfb      	ldrb	r3, [r7, #23]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d105      	bne.n	80033f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e4:	4b39      	ldr	r3, [pc, #228]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	4a38      	ldr	r2, [pc, #224]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80033ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80a1 	beq.w	800353c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033fa:	4b34      	ldr	r3, [pc, #208]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b08      	cmp	r3, #8
 8003404:	d05c      	beq.n	80034c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d141      	bne.n	8003492 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340e:	4b31      	ldr	r3, [pc, #196]	@ (80034d4 <HAL_RCC_OscConfig+0x478>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003414:	f7fd ff42 	bl	800129c <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341c:	f7fd ff3e 	bl	800129c <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e087      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342e:	4b27      	ldr	r3, [pc, #156]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69da      	ldr	r2, [r3, #28]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003450:	085b      	lsrs	r3, r3, #1
 8003452:	3b01      	subs	r3, #1
 8003454:	041b      	lsls	r3, r3, #16
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345c:	061b      	lsls	r3, r3, #24
 800345e:	491b      	ldr	r1, [pc, #108]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 8003460:	4313      	orrs	r3, r2
 8003462:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003464:	4b1b      	ldr	r3, [pc, #108]	@ (80034d4 <HAL_RCC_OscConfig+0x478>)
 8003466:	2201      	movs	r2, #1
 8003468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346a:	f7fd ff17 	bl	800129c <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003472:	f7fd ff13 	bl	800129c <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e05c      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003484:	4b11      	ldr	r3, [pc, #68]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x416>
 8003490:	e054      	b.n	800353c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003492:	4b10      	ldr	r3, [pc, #64]	@ (80034d4 <HAL_RCC_OscConfig+0x478>)
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7fd ff00 	bl	800129c <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a0:	f7fd fefc 	bl	800129c <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e045      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b2:	4b06      	ldr	r3, [pc, #24]	@ (80034cc <HAL_RCC_OscConfig+0x470>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0x444>
 80034be:	e03d      	b.n	800353c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d107      	bne.n	80034d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e038      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40007000 	.word	0x40007000
 80034d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003548 <HAL_RCC_OscConfig+0x4ec>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d028      	beq.n	8003538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d121      	bne.n	8003538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fe:	429a      	cmp	r2, r3
 8003500:	d11a      	bne.n	8003538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003508:	4013      	ands	r3, r2
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800350e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003510:	4293      	cmp	r3, r2
 8003512:	d111      	bne.n	8003538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351e:	085b      	lsrs	r3, r3, #1
 8003520:	3b01      	subs	r3, #1
 8003522:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d107      	bne.n	8003538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003532:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40023800 	.word	0x40023800

0800354c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e0cc      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003560:	4b68      	ldr	r3, [pc, #416]	@ (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d90c      	bls.n	8003588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356e:	4b65      	ldr	r3, [pc, #404]	@ (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b63      	ldr	r3, [pc, #396]	@ (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0b8      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d020      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a0:	4b59      	ldr	r3, [pc, #356]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4a58      	ldr	r2, [pc, #352]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035b8:	4b53      	ldr	r3, [pc, #332]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	4a52      	ldr	r2, [pc, #328]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c4:	4b50      	ldr	r3, [pc, #320]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	494d      	ldr	r1, [pc, #308]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d044      	beq.n	800366c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d107      	bne.n	80035fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	4b47      	ldr	r3, [pc, #284]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d119      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e07f      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d003      	beq.n	800360a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003606:	2b03      	cmp	r3, #3
 8003608:	d107      	bne.n	800361a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360a:	4b3f      	ldr	r3, [pc, #252]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e06f      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361a:	4b3b      	ldr	r3, [pc, #236]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e067      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800362a:	4b37      	ldr	r3, [pc, #220]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f023 0203 	bic.w	r2, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	4934      	ldr	r1, [pc, #208]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	4313      	orrs	r3, r2
 800363a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800363c:	f7fd fe2e 	bl	800129c <HAL_GetTick>
 8003640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003642:	e00a      	b.n	800365a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003644:	f7fd fe2a 	bl	800129c <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e04f      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365a:	4b2b      	ldr	r3, [pc, #172]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 020c 	and.w	r2, r3, #12
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	429a      	cmp	r2, r3
 800366a:	d1eb      	bne.n	8003644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800366c:	4b25      	ldr	r3, [pc, #148]	@ (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d20c      	bcs.n	8003694 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367a:	4b22      	ldr	r3, [pc, #136]	@ (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b20      	ldr	r3, [pc, #128]	@ (8003704 <HAL_RCC_ClockConfig+0x1b8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e032      	b.n	80036fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a0:	4b19      	ldr	r3, [pc, #100]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4916      	ldr	r1, [pc, #88]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036be:	4b12      	ldr	r3, [pc, #72]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	490e      	ldr	r1, [pc, #56]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036d2:	f000 f821 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 80036d6:	4602      	mov	r2, r0
 80036d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003708 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	490a      	ldr	r1, [pc, #40]	@ (800370c <HAL_RCC_ClockConfig+0x1c0>)
 80036e4:	5ccb      	ldrb	r3, [r1, r3]
 80036e6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ea:	4a09      	ldr	r2, [pc, #36]	@ (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036ee:	4b09      	ldr	r3, [pc, #36]	@ (8003714 <HAL_RCC_ClockConfig+0x1c8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fd fd8e 	bl	8001214 <HAL_InitTick>

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40023c00 	.word	0x40023c00
 8003708:	40023800 	.word	0x40023800
 800370c:	08004fe0 	.word	0x08004fe0
 8003710:	20000024 	.word	0x20000024
 8003714:	20000028 	.word	0x20000028

08003718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800371c:	b094      	sub	sp, #80	@ 0x50
 800371e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003730:	4b79      	ldr	r3, [pc, #484]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x200>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 030c 	and.w	r3, r3, #12
 8003738:	2b08      	cmp	r3, #8
 800373a:	d00d      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x40>
 800373c:	2b08      	cmp	r3, #8
 800373e:	f200 80e1 	bhi.w	8003904 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x34>
 8003746:	2b04      	cmp	r3, #4
 8003748:	d003      	beq.n	8003752 <HAL_RCC_GetSysClockFreq+0x3a>
 800374a:	e0db      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800374c:	4b73      	ldr	r3, [pc, #460]	@ (800391c <HAL_RCC_GetSysClockFreq+0x204>)
 800374e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003750:	e0db      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003752:	4b73      	ldr	r3, [pc, #460]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x208>)
 8003754:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003756:	e0d8      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003758:	4b6f      	ldr	r3, [pc, #444]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x200>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003760:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003762:	4b6d      	ldr	r3, [pc, #436]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x200>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d063      	beq.n	8003836 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376e:	4b6a      	ldr	r3, [pc, #424]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x200>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	099b      	lsrs	r3, r3, #6
 8003774:	2200      	movs	r2, #0
 8003776:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003778:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800377a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800377c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003780:	633b      	str	r3, [r7, #48]	@ 0x30
 8003782:	2300      	movs	r3, #0
 8003784:	637b      	str	r3, [r7, #52]	@ 0x34
 8003786:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800378a:	4622      	mov	r2, r4
 800378c:	462b      	mov	r3, r5
 800378e:	f04f 0000 	mov.w	r0, #0
 8003792:	f04f 0100 	mov.w	r1, #0
 8003796:	0159      	lsls	r1, r3, #5
 8003798:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800379c:	0150      	lsls	r0, r2, #5
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4621      	mov	r1, r4
 80037a4:	1a51      	subs	r1, r2, r1
 80037a6:	6139      	str	r1, [r7, #16]
 80037a8:	4629      	mov	r1, r5
 80037aa:	eb63 0301 	sbc.w	r3, r3, r1
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037bc:	4659      	mov	r1, fp
 80037be:	018b      	lsls	r3, r1, #6
 80037c0:	4651      	mov	r1, sl
 80037c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037c6:	4651      	mov	r1, sl
 80037c8:	018a      	lsls	r2, r1, #6
 80037ca:	4651      	mov	r1, sl
 80037cc:	ebb2 0801 	subs.w	r8, r2, r1
 80037d0:	4659      	mov	r1, fp
 80037d2:	eb63 0901 	sbc.w	r9, r3, r1
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ea:	4690      	mov	r8, r2
 80037ec:	4699      	mov	r9, r3
 80037ee:	4623      	mov	r3, r4
 80037f0:	eb18 0303 	adds.w	r3, r8, r3
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	462b      	mov	r3, r5
 80037f8:	eb49 0303 	adc.w	r3, r9, r3
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800380a:	4629      	mov	r1, r5
 800380c:	024b      	lsls	r3, r1, #9
 800380e:	4621      	mov	r1, r4
 8003810:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003814:	4621      	mov	r1, r4
 8003816:	024a      	lsls	r2, r1, #9
 8003818:	4610      	mov	r0, r2
 800381a:	4619      	mov	r1, r3
 800381c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800381e:	2200      	movs	r2, #0
 8003820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003822:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003824:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003828:	f7fc fd2a 	bl	8000280 <__aeabi_uldivmod>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	4613      	mov	r3, r2
 8003832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003834:	e058      	b.n	80038e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003836:	4b38      	ldr	r3, [pc, #224]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x200>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	099b      	lsrs	r3, r3, #6
 800383c:	2200      	movs	r2, #0
 800383e:	4618      	mov	r0, r3
 8003840:	4611      	mov	r1, r2
 8003842:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003846:	623b      	str	r3, [r7, #32]
 8003848:	2300      	movs	r3, #0
 800384a:	627b      	str	r3, [r7, #36]	@ 0x24
 800384c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003850:	4642      	mov	r2, r8
 8003852:	464b      	mov	r3, r9
 8003854:	f04f 0000 	mov.w	r0, #0
 8003858:	f04f 0100 	mov.w	r1, #0
 800385c:	0159      	lsls	r1, r3, #5
 800385e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003862:	0150      	lsls	r0, r2, #5
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4641      	mov	r1, r8
 800386a:	ebb2 0a01 	subs.w	sl, r2, r1
 800386e:	4649      	mov	r1, r9
 8003870:	eb63 0b01 	sbc.w	fp, r3, r1
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003880:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003884:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003888:	ebb2 040a 	subs.w	r4, r2, sl
 800388c:	eb63 050b 	sbc.w	r5, r3, fp
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	00eb      	lsls	r3, r5, #3
 800389a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800389e:	00e2      	lsls	r2, r4, #3
 80038a0:	4614      	mov	r4, r2
 80038a2:	461d      	mov	r5, r3
 80038a4:	4643      	mov	r3, r8
 80038a6:	18e3      	adds	r3, r4, r3
 80038a8:	603b      	str	r3, [r7, #0]
 80038aa:	464b      	mov	r3, r9
 80038ac:	eb45 0303 	adc.w	r3, r5, r3
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038be:	4629      	mov	r1, r5
 80038c0:	028b      	lsls	r3, r1, #10
 80038c2:	4621      	mov	r1, r4
 80038c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038c8:	4621      	mov	r1, r4
 80038ca:	028a      	lsls	r2, r1, #10
 80038cc:	4610      	mov	r0, r2
 80038ce:	4619      	mov	r1, r3
 80038d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038d2:	2200      	movs	r2, #0
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	61fa      	str	r2, [r7, #28]
 80038d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038dc:	f7fc fcd0 	bl	8000280 <__aeabi_uldivmod>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4613      	mov	r3, r2
 80038e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x200>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	0c1b      	lsrs	r3, r3, #16
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	3301      	adds	r3, #1
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80038f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003902:	e002      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003904:	4b05      	ldr	r3, [pc, #20]	@ (800391c <HAL_RCC_GetSysClockFreq+0x204>)
 8003906:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800390c:	4618      	mov	r0, r3
 800390e:	3750      	adds	r7, #80	@ 0x50
 8003910:	46bd      	mov	sp, r7
 8003912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003916:	bf00      	nop
 8003918:	40023800 	.word	0x40023800
 800391c:	00f42400 	.word	0x00f42400
 8003920:	007a1200 	.word	0x007a1200

08003924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003928:	4b03      	ldr	r3, [pc, #12]	@ (8003938 <HAL_RCC_GetHCLKFreq+0x14>)
 800392a:	681b      	ldr	r3, [r3, #0]
}
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	20000024 	.word	0x20000024

0800393c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003940:	f7ff fff0 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	4b05      	ldr	r3, [pc, #20]	@ (800395c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	0a9b      	lsrs	r3, r3, #10
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	4903      	ldr	r1, [pc, #12]	@ (8003960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003952:	5ccb      	ldrb	r3, [r1, r3]
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40023800 	.word	0x40023800
 8003960:	08004ff0 	.word	0x08004ff0

08003964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003968:	f7ff ffdc 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 800396c:	4602      	mov	r2, r0
 800396e:	4b05      	ldr	r3, [pc, #20]	@ (8003984 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	0b5b      	lsrs	r3, r3, #13
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	4903      	ldr	r1, [pc, #12]	@ (8003988 <HAL_RCC_GetPCLK2Freq+0x24>)
 800397a:	5ccb      	ldrb	r3, [r1, r3]
 800397c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003980:	4618      	mov	r0, r3
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40023800 	.word	0x40023800
 8003988:	08004ff0 	.word	0x08004ff0

0800398c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d105      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d035      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039b4:	4b62      	ldr	r3, [pc, #392]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039ba:	f7fd fc6f 	bl	800129c <HAL_GetTick>
 80039be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039c0:	e008      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039c2:	f7fd fc6b 	bl	800129c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e0b0      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039d4:	4b5b      	ldr	r3, [pc, #364]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1f0      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	019a      	lsls	r2, r3, #6
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	071b      	lsls	r3, r3, #28
 80039ec:	4955      	ldr	r1, [pc, #340]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039f4:	4b52      	ldr	r3, [pc, #328]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039fa:	f7fd fc4f 	bl	800129c <HAL_GetTick>
 80039fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a00:	e008      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a02:	f7fd fc4b 	bl	800129c <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e090      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a14:	4b4b      	ldr	r3, [pc, #300]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8083 	beq.w	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	4b44      	ldr	r3, [pc, #272]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	4a43      	ldr	r2, [pc, #268]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a3e:	4b41      	ldr	r3, [pc, #260]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a3e      	ldr	r2, [pc, #248]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a56:	f7fd fc21 	bl	800129c <HAL_GetTick>
 8003a5a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5e:	f7fd fc1d 	bl	800129c <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e062      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003a70:	4b35      	ldr	r3, [pc, #212]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a7c:	4b31      	ldr	r3, [pc, #196]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a84:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d02f      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d028      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a9a:	4b2a      	ldr	r3, [pc, #168]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003aa4:	4b29      	ldr	r3, [pc, #164]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aaa:	4b28      	ldr	r3, [pc, #160]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ab0:	4a24      	ldr	r2, [pc, #144]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ab6:	4b23      	ldr	r3, [pc, #140]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d114      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ac2:	f7fd fbeb 	bl	800129c <HAL_GetTick>
 8003ac6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac8:	e00a      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aca:	f7fd fbe7 	bl	800129c <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e02a      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae0:	4b18      	ldr	r3, [pc, #96]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0ee      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003af8:	d10d      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003afa:	4b12      	ldr	r3, [pc, #72]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003b0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b0e:	490d      	ldr	r1, [pc, #52]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	608b      	str	r3, [r1, #8]
 8003b14:	e005      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003b16:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b1c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003b20:	6093      	str	r3, [r2, #8]
 8003b22:	4b08      	ldr	r3, [pc, #32]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b24:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2e:	4905      	ldr	r1, [pc, #20]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	42470068 	.word	0x42470068
 8003b44:	40023800 	.word	0x40023800
 8003b48:	40007000 	.word	0x40007000
 8003b4c:	42470e40 	.word	0x42470e40

08003b50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d13f      	bne.n	8003bee <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003b6e:	4b24      	ldr	r3, [pc, #144]	@ (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b76:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d006      	beq.n	8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b84:	d12f      	bne.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003b86:	4b1f      	ldr	r3, [pc, #124]	@ (8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003b88:	617b      	str	r3, [r7, #20]
          break;
 8003b8a:	e02f      	b.n	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b98:	d108      	bne.n	8003bac <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b9a:	4b19      	ldr	r3, [pc, #100]	@ (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ba2:	4a19      	ldr	r2, [pc, #100]	@ (8003c08 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	e007      	b.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003bac:	4b14      	ldr	r3, [pc, #80]	@ (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bb4:	4a15      	ldr	r2, [pc, #84]	@ (8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bba:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003bbc:	4b10      	ldr	r3, [pc, #64]	@ (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bc2:	099b      	lsrs	r3, r3, #6
 8003bc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	fb02 f303 	mul.w	r3, r2, r3
 8003bce:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bd6:	0f1b      	lsrs	r3, r3, #28
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be2:	617b      	str	r3, [r7, #20]
          break;
 8003be4:	e002      	b.n	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
          break;
 8003bea:	bf00      	nop
        }
      }
      break;
 8003bec:	e000      	b.n	8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8003bee:	bf00      	nop
    }
  }
  return frequency;
 8003bf0:	697b      	ldr	r3, [r7, #20]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40023800 	.word	0x40023800
 8003c04:	00bb8000 	.word	0x00bb8000
 8003c08:	007a1200 	.word	0x007a1200
 8003c0c:	00f42400 	.word	0x00f42400

08003c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e042      	b.n	8003ca8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fd f9e0 	bl	8000ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2224      	movs	r2, #36	@ 0x24
 8003c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f973 	bl	8003f40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08a      	sub	sp, #40	@ 0x28
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d175      	bne.n	8003dbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_UART_Transmit+0x2c>
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e06e      	b.n	8003dbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2221      	movs	r2, #33	@ 0x21
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cee:	f7fd fad5 	bl	800129c <HAL_GetTick>
 8003cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	88fa      	ldrh	r2, [r7, #6]
 8003cf8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	88fa      	ldrh	r2, [r7, #6]
 8003cfe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d08:	d108      	bne.n	8003d1c <HAL_UART_Transmit+0x6c>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d104      	bne.n	8003d1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	e003      	b.n	8003d24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d24:	e02e      	b.n	8003d84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2180      	movs	r1, #128	@ 0x80
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f848 	bl	8003dc6 <UART_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e03a      	b.n	8003dbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10b      	bne.n	8003d66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	3302      	adds	r3, #2
 8003d62:	61bb      	str	r3, [r7, #24]
 8003d64:	e007      	b.n	8003d76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	781a      	ldrb	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	3301      	adds	r3, #1
 8003d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1cb      	bne.n	8003d26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2200      	movs	r2, #0
 8003d96:	2140      	movs	r1, #64	@ 0x40
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f814 	bl	8003dc6 <UART_WaitOnFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e006      	b.n	8003dbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3720      	adds	r7, #32
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b086      	sub	sp, #24
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	603b      	str	r3, [r7, #0]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd6:	e03b      	b.n	8003e50 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dde:	d037      	beq.n	8003e50 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de0:	f7fd fa5c 	bl	800129c <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	6a3a      	ldr	r2, [r7, #32]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d302      	bcc.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e03a      	b.n	8003e70 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d023      	beq.n	8003e50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b80      	cmp	r3, #128	@ 0x80
 8003e0c:	d020      	beq.n	8003e50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b40      	cmp	r3, #64	@ 0x40
 8003e12:	d01d      	beq.n	8003e50 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d116      	bne.n	8003e50 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f81d 	bl	8003e78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2208      	movs	r2, #8
 8003e42:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e00f      	b.n	8003e70 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	bf0c      	ite	eq
 8003e60:	2301      	moveq	r3, #1
 8003e62:	2300      	movne	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d0b4      	beq.n	8003dd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b095      	sub	sp, #84	@ 0x54
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	330c      	adds	r3, #12
 8003e9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ea0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ea6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ea8:	e841 2300 	strex	r3, r2, [r1]
 8003eac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e5      	bne.n	8003e80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3314      	adds	r3, #20
 8003eba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f023 0301 	bic.w	r3, r3, #1
 8003eca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3314      	adds	r3, #20
 8003ed2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ed4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e5      	bne.n	8003eb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d119      	bne.n	8003f24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	330c      	adds	r3, #12
 8003ef6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f023 0310 	bic.w	r3, r3, #16
 8003f06:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f10:	61ba      	str	r2, [r7, #24]
 8003f12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f14:	6979      	ldr	r1, [r7, #20]
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	e841 2300 	strex	r3, r2, [r1]
 8003f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e5      	bne.n	8003ef0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f32:	bf00      	nop
 8003f34:	3754      	adds	r7, #84	@ 0x54
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
	...

08003f40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f44:	b0c0      	sub	sp, #256	@ 0x100
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5c:	68d9      	ldr	r1, [r3, #12]
 8003f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	ea40 0301 	orr.w	r3, r0, r1
 8003f68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f98:	f021 010c 	bic.w	r1, r1, #12
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003fa6:	430b      	orrs	r3, r1
 8003fa8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fba:	6999      	ldr	r1, [r3, #24]
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	ea40 0301 	orr.w	r3, r0, r1
 8003fc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4b8f      	ldr	r3, [pc, #572]	@ (800420c <UART_SetConfig+0x2cc>)
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d005      	beq.n	8003fe0 <UART_SetConfig+0xa0>
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	4b8d      	ldr	r3, [pc, #564]	@ (8004210 <UART_SetConfig+0x2d0>)
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d104      	bne.n	8003fea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fe0:	f7ff fcc0 	bl	8003964 <HAL_RCC_GetPCLK2Freq>
 8003fe4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003fe8:	e003      	b.n	8003ff2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fea:	f7ff fca7 	bl	800393c <HAL_RCC_GetPCLK1Freq>
 8003fee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ffc:	f040 810c 	bne.w	8004218 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004004:	2200      	movs	r2, #0
 8004006:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800400a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800400e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004012:	4622      	mov	r2, r4
 8004014:	462b      	mov	r3, r5
 8004016:	1891      	adds	r1, r2, r2
 8004018:	65b9      	str	r1, [r7, #88]	@ 0x58
 800401a:	415b      	adcs	r3, r3
 800401c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800401e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004022:	4621      	mov	r1, r4
 8004024:	eb12 0801 	adds.w	r8, r2, r1
 8004028:	4629      	mov	r1, r5
 800402a:	eb43 0901 	adc.w	r9, r3, r1
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800403a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800403e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004042:	4690      	mov	r8, r2
 8004044:	4699      	mov	r9, r3
 8004046:	4623      	mov	r3, r4
 8004048:	eb18 0303 	adds.w	r3, r8, r3
 800404c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004050:	462b      	mov	r3, r5
 8004052:	eb49 0303 	adc.w	r3, r9, r3
 8004056:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800405a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004066:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800406a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800406e:	460b      	mov	r3, r1
 8004070:	18db      	adds	r3, r3, r3
 8004072:	653b      	str	r3, [r7, #80]	@ 0x50
 8004074:	4613      	mov	r3, r2
 8004076:	eb42 0303 	adc.w	r3, r2, r3
 800407a:	657b      	str	r3, [r7, #84]	@ 0x54
 800407c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004080:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004084:	f7fc f8fc 	bl	8000280 <__aeabi_uldivmod>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4b61      	ldr	r3, [pc, #388]	@ (8004214 <UART_SetConfig+0x2d4>)
 800408e:	fba3 2302 	umull	r2, r3, r3, r2
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	011c      	lsls	r4, r3, #4
 8004096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800409a:	2200      	movs	r2, #0
 800409c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040a8:	4642      	mov	r2, r8
 80040aa:	464b      	mov	r3, r9
 80040ac:	1891      	adds	r1, r2, r2
 80040ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040b0:	415b      	adcs	r3, r3
 80040b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040b8:	4641      	mov	r1, r8
 80040ba:	eb12 0a01 	adds.w	sl, r2, r1
 80040be:	4649      	mov	r1, r9
 80040c0:	eb43 0b01 	adc.w	fp, r3, r1
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040d8:	4692      	mov	sl, r2
 80040da:	469b      	mov	fp, r3
 80040dc:	4643      	mov	r3, r8
 80040de:	eb1a 0303 	adds.w	r3, sl, r3
 80040e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040e6:	464b      	mov	r3, r9
 80040e8:	eb4b 0303 	adc.w	r3, fp, r3
 80040ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004100:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004104:	460b      	mov	r3, r1
 8004106:	18db      	adds	r3, r3, r3
 8004108:	643b      	str	r3, [r7, #64]	@ 0x40
 800410a:	4613      	mov	r3, r2
 800410c:	eb42 0303 	adc.w	r3, r2, r3
 8004110:	647b      	str	r3, [r7, #68]	@ 0x44
 8004112:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004116:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800411a:	f7fc f8b1 	bl	8000280 <__aeabi_uldivmod>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	4611      	mov	r1, r2
 8004124:	4b3b      	ldr	r3, [pc, #236]	@ (8004214 <UART_SetConfig+0x2d4>)
 8004126:	fba3 2301 	umull	r2, r3, r3, r1
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	2264      	movs	r2, #100	@ 0x64
 800412e:	fb02 f303 	mul.w	r3, r2, r3
 8004132:	1acb      	subs	r3, r1, r3
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800413a:	4b36      	ldr	r3, [pc, #216]	@ (8004214 <UART_SetConfig+0x2d4>)
 800413c:	fba3 2302 	umull	r2, r3, r3, r2
 8004140:	095b      	lsrs	r3, r3, #5
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004148:	441c      	add	r4, r3
 800414a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800414e:	2200      	movs	r2, #0
 8004150:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004154:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004158:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800415c:	4642      	mov	r2, r8
 800415e:	464b      	mov	r3, r9
 8004160:	1891      	adds	r1, r2, r2
 8004162:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004164:	415b      	adcs	r3, r3
 8004166:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004168:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800416c:	4641      	mov	r1, r8
 800416e:	1851      	adds	r1, r2, r1
 8004170:	6339      	str	r1, [r7, #48]	@ 0x30
 8004172:	4649      	mov	r1, r9
 8004174:	414b      	adcs	r3, r1
 8004176:	637b      	str	r3, [r7, #52]	@ 0x34
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004184:	4659      	mov	r1, fp
 8004186:	00cb      	lsls	r3, r1, #3
 8004188:	4651      	mov	r1, sl
 800418a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800418e:	4651      	mov	r1, sl
 8004190:	00ca      	lsls	r2, r1, #3
 8004192:	4610      	mov	r0, r2
 8004194:	4619      	mov	r1, r3
 8004196:	4603      	mov	r3, r0
 8004198:	4642      	mov	r2, r8
 800419a:	189b      	adds	r3, r3, r2
 800419c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041a0:	464b      	mov	r3, r9
 80041a2:	460a      	mov	r2, r1
 80041a4:	eb42 0303 	adc.w	r3, r2, r3
 80041a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80041bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041c0:	460b      	mov	r3, r1
 80041c2:	18db      	adds	r3, r3, r3
 80041c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041c6:	4613      	mov	r3, r2
 80041c8:	eb42 0303 	adc.w	r3, r2, r3
 80041cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80041d6:	f7fc f853 	bl	8000280 <__aeabi_uldivmod>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4b0d      	ldr	r3, [pc, #52]	@ (8004214 <UART_SetConfig+0x2d4>)
 80041e0:	fba3 1302 	umull	r1, r3, r3, r2
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	2164      	movs	r1, #100	@ 0x64
 80041e8:	fb01 f303 	mul.w	r3, r1, r3
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	3332      	adds	r3, #50	@ 0x32
 80041f2:	4a08      	ldr	r2, [pc, #32]	@ (8004214 <UART_SetConfig+0x2d4>)
 80041f4:	fba2 2303 	umull	r2, r3, r2, r3
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	f003 0207 	and.w	r2, r3, #7
 80041fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4422      	add	r2, r4
 8004206:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004208:	e106      	b.n	8004418 <UART_SetConfig+0x4d8>
 800420a:	bf00      	nop
 800420c:	40011000 	.word	0x40011000
 8004210:	40011400 	.word	0x40011400
 8004214:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800421c:	2200      	movs	r2, #0
 800421e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004222:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004226:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800422a:	4642      	mov	r2, r8
 800422c:	464b      	mov	r3, r9
 800422e:	1891      	adds	r1, r2, r2
 8004230:	6239      	str	r1, [r7, #32]
 8004232:	415b      	adcs	r3, r3
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
 8004236:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800423a:	4641      	mov	r1, r8
 800423c:	1854      	adds	r4, r2, r1
 800423e:	4649      	mov	r1, r9
 8004240:	eb43 0501 	adc.w	r5, r3, r1
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	00eb      	lsls	r3, r5, #3
 800424e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004252:	00e2      	lsls	r2, r4, #3
 8004254:	4614      	mov	r4, r2
 8004256:	461d      	mov	r5, r3
 8004258:	4643      	mov	r3, r8
 800425a:	18e3      	adds	r3, r4, r3
 800425c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004260:	464b      	mov	r3, r9
 8004262:	eb45 0303 	adc.w	r3, r5, r3
 8004266:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800426a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004276:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004286:	4629      	mov	r1, r5
 8004288:	008b      	lsls	r3, r1, #2
 800428a:	4621      	mov	r1, r4
 800428c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004290:	4621      	mov	r1, r4
 8004292:	008a      	lsls	r2, r1, #2
 8004294:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004298:	f7fb fff2 	bl	8000280 <__aeabi_uldivmod>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4b60      	ldr	r3, [pc, #384]	@ (8004424 <UART_SetConfig+0x4e4>)
 80042a2:	fba3 2302 	umull	r2, r3, r3, r2
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	011c      	lsls	r4, r3, #4
 80042aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80042bc:	4642      	mov	r2, r8
 80042be:	464b      	mov	r3, r9
 80042c0:	1891      	adds	r1, r2, r2
 80042c2:	61b9      	str	r1, [r7, #24]
 80042c4:	415b      	adcs	r3, r3
 80042c6:	61fb      	str	r3, [r7, #28]
 80042c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042cc:	4641      	mov	r1, r8
 80042ce:	1851      	adds	r1, r2, r1
 80042d0:	6139      	str	r1, [r7, #16]
 80042d2:	4649      	mov	r1, r9
 80042d4:	414b      	adcs	r3, r1
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042e4:	4659      	mov	r1, fp
 80042e6:	00cb      	lsls	r3, r1, #3
 80042e8:	4651      	mov	r1, sl
 80042ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ee:	4651      	mov	r1, sl
 80042f0:	00ca      	lsls	r2, r1, #3
 80042f2:	4610      	mov	r0, r2
 80042f4:	4619      	mov	r1, r3
 80042f6:	4603      	mov	r3, r0
 80042f8:	4642      	mov	r2, r8
 80042fa:	189b      	adds	r3, r3, r2
 80042fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004300:	464b      	mov	r3, r9
 8004302:	460a      	mov	r2, r1
 8004304:	eb42 0303 	adc.w	r3, r2, r3
 8004308:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004316:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004324:	4649      	mov	r1, r9
 8004326:	008b      	lsls	r3, r1, #2
 8004328:	4641      	mov	r1, r8
 800432a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800432e:	4641      	mov	r1, r8
 8004330:	008a      	lsls	r2, r1, #2
 8004332:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004336:	f7fb ffa3 	bl	8000280 <__aeabi_uldivmod>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4611      	mov	r1, r2
 8004340:	4b38      	ldr	r3, [pc, #224]	@ (8004424 <UART_SetConfig+0x4e4>)
 8004342:	fba3 2301 	umull	r2, r3, r3, r1
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	2264      	movs	r2, #100	@ 0x64
 800434a:	fb02 f303 	mul.w	r3, r2, r3
 800434e:	1acb      	subs	r3, r1, r3
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	3332      	adds	r3, #50	@ 0x32
 8004354:	4a33      	ldr	r2, [pc, #204]	@ (8004424 <UART_SetConfig+0x4e4>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004360:	441c      	add	r4, r3
 8004362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004366:	2200      	movs	r2, #0
 8004368:	673b      	str	r3, [r7, #112]	@ 0x70
 800436a:	677a      	str	r2, [r7, #116]	@ 0x74
 800436c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004370:	4642      	mov	r2, r8
 8004372:	464b      	mov	r3, r9
 8004374:	1891      	adds	r1, r2, r2
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	415b      	adcs	r3, r3
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004380:	4641      	mov	r1, r8
 8004382:	1851      	adds	r1, r2, r1
 8004384:	6039      	str	r1, [r7, #0]
 8004386:	4649      	mov	r1, r9
 8004388:	414b      	adcs	r3, r1
 800438a:	607b      	str	r3, [r7, #4]
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004398:	4659      	mov	r1, fp
 800439a:	00cb      	lsls	r3, r1, #3
 800439c:	4651      	mov	r1, sl
 800439e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043a2:	4651      	mov	r1, sl
 80043a4:	00ca      	lsls	r2, r1, #3
 80043a6:	4610      	mov	r0, r2
 80043a8:	4619      	mov	r1, r3
 80043aa:	4603      	mov	r3, r0
 80043ac:	4642      	mov	r2, r8
 80043ae:	189b      	adds	r3, r3, r2
 80043b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043b2:	464b      	mov	r3, r9
 80043b4:	460a      	mov	r2, r1
 80043b6:	eb42 0303 	adc.w	r3, r2, r3
 80043ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80043c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80043d4:	4649      	mov	r1, r9
 80043d6:	008b      	lsls	r3, r1, #2
 80043d8:	4641      	mov	r1, r8
 80043da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043de:	4641      	mov	r1, r8
 80043e0:	008a      	lsls	r2, r1, #2
 80043e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80043e6:	f7fb ff4b 	bl	8000280 <__aeabi_uldivmod>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004424 <UART_SetConfig+0x4e4>)
 80043f0:	fba3 1302 	umull	r1, r3, r3, r2
 80043f4:	095b      	lsrs	r3, r3, #5
 80043f6:	2164      	movs	r1, #100	@ 0x64
 80043f8:	fb01 f303 	mul.w	r3, r1, r3
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	3332      	adds	r3, #50	@ 0x32
 8004402:	4a08      	ldr	r2, [pc, #32]	@ (8004424 <UART_SetConfig+0x4e4>)
 8004404:	fba2 2303 	umull	r2, r3, r2, r3
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	f003 020f 	and.w	r2, r3, #15
 800440e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4422      	add	r2, r4
 8004416:	609a      	str	r2, [r3, #8]
}
 8004418:	bf00      	nop
 800441a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800441e:	46bd      	mov	sp, r7
 8004420:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004424:	51eb851f 	.word	0x51eb851f

08004428 <siprintf>:
 8004428:	b40e      	push	{r1, r2, r3}
 800442a:	b510      	push	{r4, lr}
 800442c:	b09d      	sub	sp, #116	@ 0x74
 800442e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004430:	9002      	str	r0, [sp, #8]
 8004432:	9006      	str	r0, [sp, #24]
 8004434:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004438:	480a      	ldr	r0, [pc, #40]	@ (8004464 <siprintf+0x3c>)
 800443a:	9107      	str	r1, [sp, #28]
 800443c:	9104      	str	r1, [sp, #16]
 800443e:	490a      	ldr	r1, [pc, #40]	@ (8004468 <siprintf+0x40>)
 8004440:	f853 2b04 	ldr.w	r2, [r3], #4
 8004444:	9105      	str	r1, [sp, #20]
 8004446:	2400      	movs	r4, #0
 8004448:	a902      	add	r1, sp, #8
 800444a:	6800      	ldr	r0, [r0, #0]
 800444c:	9301      	str	r3, [sp, #4]
 800444e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004450:	f000 f994 	bl	800477c <_svfiprintf_r>
 8004454:	9b02      	ldr	r3, [sp, #8]
 8004456:	701c      	strb	r4, [r3, #0]
 8004458:	b01d      	add	sp, #116	@ 0x74
 800445a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800445e:	b003      	add	sp, #12
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	20000030 	.word	0x20000030
 8004468:	ffff0208 	.word	0xffff0208

0800446c <memset>:
 800446c:	4402      	add	r2, r0
 800446e:	4603      	mov	r3, r0
 8004470:	4293      	cmp	r3, r2
 8004472:	d100      	bne.n	8004476 <memset+0xa>
 8004474:	4770      	bx	lr
 8004476:	f803 1b01 	strb.w	r1, [r3], #1
 800447a:	e7f9      	b.n	8004470 <memset+0x4>

0800447c <__errno>:
 800447c:	4b01      	ldr	r3, [pc, #4]	@ (8004484 <__errno+0x8>)
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000030 	.word	0x20000030

08004488 <__libc_init_array>:
 8004488:	b570      	push	{r4, r5, r6, lr}
 800448a:	4d0d      	ldr	r5, [pc, #52]	@ (80044c0 <__libc_init_array+0x38>)
 800448c:	4c0d      	ldr	r4, [pc, #52]	@ (80044c4 <__libc_init_array+0x3c>)
 800448e:	1b64      	subs	r4, r4, r5
 8004490:	10a4      	asrs	r4, r4, #2
 8004492:	2600      	movs	r6, #0
 8004494:	42a6      	cmp	r6, r4
 8004496:	d109      	bne.n	80044ac <__libc_init_array+0x24>
 8004498:	4d0b      	ldr	r5, [pc, #44]	@ (80044c8 <__libc_init_array+0x40>)
 800449a:	4c0c      	ldr	r4, [pc, #48]	@ (80044cc <__libc_init_array+0x44>)
 800449c:	f000 fc64 	bl	8004d68 <_init>
 80044a0:	1b64      	subs	r4, r4, r5
 80044a2:	10a4      	asrs	r4, r4, #2
 80044a4:	2600      	movs	r6, #0
 80044a6:	42a6      	cmp	r6, r4
 80044a8:	d105      	bne.n	80044b6 <__libc_init_array+0x2e>
 80044aa:	bd70      	pop	{r4, r5, r6, pc}
 80044ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b0:	4798      	blx	r3
 80044b2:	3601      	adds	r6, #1
 80044b4:	e7ee      	b.n	8004494 <__libc_init_array+0xc>
 80044b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ba:	4798      	blx	r3
 80044bc:	3601      	adds	r6, #1
 80044be:	e7f2      	b.n	80044a6 <__libc_init_array+0x1e>
 80044c0:	08005034 	.word	0x08005034
 80044c4:	08005034 	.word	0x08005034
 80044c8:	08005034 	.word	0x08005034
 80044cc:	08005038 	.word	0x08005038

080044d0 <__retarget_lock_acquire_recursive>:
 80044d0:	4770      	bx	lr

080044d2 <__retarget_lock_release_recursive>:
 80044d2:	4770      	bx	lr

080044d4 <_free_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4605      	mov	r5, r0
 80044d8:	2900      	cmp	r1, #0
 80044da:	d041      	beq.n	8004560 <_free_r+0x8c>
 80044dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044e0:	1f0c      	subs	r4, r1, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bfb8      	it	lt
 80044e6:	18e4      	addlt	r4, r4, r3
 80044e8:	f000 f8e0 	bl	80046ac <__malloc_lock>
 80044ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004564 <_free_r+0x90>)
 80044ee:	6813      	ldr	r3, [r2, #0]
 80044f0:	b933      	cbnz	r3, 8004500 <_free_r+0x2c>
 80044f2:	6063      	str	r3, [r4, #4]
 80044f4:	6014      	str	r4, [r2, #0]
 80044f6:	4628      	mov	r0, r5
 80044f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044fc:	f000 b8dc 	b.w	80046b8 <__malloc_unlock>
 8004500:	42a3      	cmp	r3, r4
 8004502:	d908      	bls.n	8004516 <_free_r+0x42>
 8004504:	6820      	ldr	r0, [r4, #0]
 8004506:	1821      	adds	r1, r4, r0
 8004508:	428b      	cmp	r3, r1
 800450a:	bf01      	itttt	eq
 800450c:	6819      	ldreq	r1, [r3, #0]
 800450e:	685b      	ldreq	r3, [r3, #4]
 8004510:	1809      	addeq	r1, r1, r0
 8004512:	6021      	streq	r1, [r4, #0]
 8004514:	e7ed      	b.n	80044f2 <_free_r+0x1e>
 8004516:	461a      	mov	r2, r3
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	b10b      	cbz	r3, 8004520 <_free_r+0x4c>
 800451c:	42a3      	cmp	r3, r4
 800451e:	d9fa      	bls.n	8004516 <_free_r+0x42>
 8004520:	6811      	ldr	r1, [r2, #0]
 8004522:	1850      	adds	r0, r2, r1
 8004524:	42a0      	cmp	r0, r4
 8004526:	d10b      	bne.n	8004540 <_free_r+0x6c>
 8004528:	6820      	ldr	r0, [r4, #0]
 800452a:	4401      	add	r1, r0
 800452c:	1850      	adds	r0, r2, r1
 800452e:	4283      	cmp	r3, r0
 8004530:	6011      	str	r1, [r2, #0]
 8004532:	d1e0      	bne.n	80044f6 <_free_r+0x22>
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	6053      	str	r3, [r2, #4]
 800453a:	4408      	add	r0, r1
 800453c:	6010      	str	r0, [r2, #0]
 800453e:	e7da      	b.n	80044f6 <_free_r+0x22>
 8004540:	d902      	bls.n	8004548 <_free_r+0x74>
 8004542:	230c      	movs	r3, #12
 8004544:	602b      	str	r3, [r5, #0]
 8004546:	e7d6      	b.n	80044f6 <_free_r+0x22>
 8004548:	6820      	ldr	r0, [r4, #0]
 800454a:	1821      	adds	r1, r4, r0
 800454c:	428b      	cmp	r3, r1
 800454e:	bf04      	itt	eq
 8004550:	6819      	ldreq	r1, [r3, #0]
 8004552:	685b      	ldreq	r3, [r3, #4]
 8004554:	6063      	str	r3, [r4, #4]
 8004556:	bf04      	itt	eq
 8004558:	1809      	addeq	r1, r1, r0
 800455a:	6021      	streq	r1, [r4, #0]
 800455c:	6054      	str	r4, [r2, #4]
 800455e:	e7ca      	b.n	80044f6 <_free_r+0x22>
 8004560:	bd38      	pop	{r3, r4, r5, pc}
 8004562:	bf00      	nop
 8004564:	200006d0 	.word	0x200006d0

08004568 <sbrk_aligned>:
 8004568:	b570      	push	{r4, r5, r6, lr}
 800456a:	4e0f      	ldr	r6, [pc, #60]	@ (80045a8 <sbrk_aligned+0x40>)
 800456c:	460c      	mov	r4, r1
 800456e:	6831      	ldr	r1, [r6, #0]
 8004570:	4605      	mov	r5, r0
 8004572:	b911      	cbnz	r1, 800457a <sbrk_aligned+0x12>
 8004574:	f000 fba4 	bl	8004cc0 <_sbrk_r>
 8004578:	6030      	str	r0, [r6, #0]
 800457a:	4621      	mov	r1, r4
 800457c:	4628      	mov	r0, r5
 800457e:	f000 fb9f 	bl	8004cc0 <_sbrk_r>
 8004582:	1c43      	adds	r3, r0, #1
 8004584:	d103      	bne.n	800458e <sbrk_aligned+0x26>
 8004586:	f04f 34ff 	mov.w	r4, #4294967295
 800458a:	4620      	mov	r0, r4
 800458c:	bd70      	pop	{r4, r5, r6, pc}
 800458e:	1cc4      	adds	r4, r0, #3
 8004590:	f024 0403 	bic.w	r4, r4, #3
 8004594:	42a0      	cmp	r0, r4
 8004596:	d0f8      	beq.n	800458a <sbrk_aligned+0x22>
 8004598:	1a21      	subs	r1, r4, r0
 800459a:	4628      	mov	r0, r5
 800459c:	f000 fb90 	bl	8004cc0 <_sbrk_r>
 80045a0:	3001      	adds	r0, #1
 80045a2:	d1f2      	bne.n	800458a <sbrk_aligned+0x22>
 80045a4:	e7ef      	b.n	8004586 <sbrk_aligned+0x1e>
 80045a6:	bf00      	nop
 80045a8:	200006cc 	.word	0x200006cc

080045ac <_malloc_r>:
 80045ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045b0:	1ccd      	adds	r5, r1, #3
 80045b2:	f025 0503 	bic.w	r5, r5, #3
 80045b6:	3508      	adds	r5, #8
 80045b8:	2d0c      	cmp	r5, #12
 80045ba:	bf38      	it	cc
 80045bc:	250c      	movcc	r5, #12
 80045be:	2d00      	cmp	r5, #0
 80045c0:	4606      	mov	r6, r0
 80045c2:	db01      	blt.n	80045c8 <_malloc_r+0x1c>
 80045c4:	42a9      	cmp	r1, r5
 80045c6:	d904      	bls.n	80045d2 <_malloc_r+0x26>
 80045c8:	230c      	movs	r3, #12
 80045ca:	6033      	str	r3, [r6, #0]
 80045cc:	2000      	movs	r0, #0
 80045ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80046a8 <_malloc_r+0xfc>
 80045d6:	f000 f869 	bl	80046ac <__malloc_lock>
 80045da:	f8d8 3000 	ldr.w	r3, [r8]
 80045de:	461c      	mov	r4, r3
 80045e0:	bb44      	cbnz	r4, 8004634 <_malloc_r+0x88>
 80045e2:	4629      	mov	r1, r5
 80045e4:	4630      	mov	r0, r6
 80045e6:	f7ff ffbf 	bl	8004568 <sbrk_aligned>
 80045ea:	1c43      	adds	r3, r0, #1
 80045ec:	4604      	mov	r4, r0
 80045ee:	d158      	bne.n	80046a2 <_malloc_r+0xf6>
 80045f0:	f8d8 4000 	ldr.w	r4, [r8]
 80045f4:	4627      	mov	r7, r4
 80045f6:	2f00      	cmp	r7, #0
 80045f8:	d143      	bne.n	8004682 <_malloc_r+0xd6>
 80045fa:	2c00      	cmp	r4, #0
 80045fc:	d04b      	beq.n	8004696 <_malloc_r+0xea>
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	4639      	mov	r1, r7
 8004602:	4630      	mov	r0, r6
 8004604:	eb04 0903 	add.w	r9, r4, r3
 8004608:	f000 fb5a 	bl	8004cc0 <_sbrk_r>
 800460c:	4581      	cmp	r9, r0
 800460e:	d142      	bne.n	8004696 <_malloc_r+0xea>
 8004610:	6821      	ldr	r1, [r4, #0]
 8004612:	1a6d      	subs	r5, r5, r1
 8004614:	4629      	mov	r1, r5
 8004616:	4630      	mov	r0, r6
 8004618:	f7ff ffa6 	bl	8004568 <sbrk_aligned>
 800461c:	3001      	adds	r0, #1
 800461e:	d03a      	beq.n	8004696 <_malloc_r+0xea>
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	442b      	add	r3, r5
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	f8d8 3000 	ldr.w	r3, [r8]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	bb62      	cbnz	r2, 8004688 <_malloc_r+0xdc>
 800462e:	f8c8 7000 	str.w	r7, [r8]
 8004632:	e00f      	b.n	8004654 <_malloc_r+0xa8>
 8004634:	6822      	ldr	r2, [r4, #0]
 8004636:	1b52      	subs	r2, r2, r5
 8004638:	d420      	bmi.n	800467c <_malloc_r+0xd0>
 800463a:	2a0b      	cmp	r2, #11
 800463c:	d917      	bls.n	800466e <_malloc_r+0xc2>
 800463e:	1961      	adds	r1, r4, r5
 8004640:	42a3      	cmp	r3, r4
 8004642:	6025      	str	r5, [r4, #0]
 8004644:	bf18      	it	ne
 8004646:	6059      	strne	r1, [r3, #4]
 8004648:	6863      	ldr	r3, [r4, #4]
 800464a:	bf08      	it	eq
 800464c:	f8c8 1000 	streq.w	r1, [r8]
 8004650:	5162      	str	r2, [r4, r5]
 8004652:	604b      	str	r3, [r1, #4]
 8004654:	4630      	mov	r0, r6
 8004656:	f000 f82f 	bl	80046b8 <__malloc_unlock>
 800465a:	f104 000b 	add.w	r0, r4, #11
 800465e:	1d23      	adds	r3, r4, #4
 8004660:	f020 0007 	bic.w	r0, r0, #7
 8004664:	1ac2      	subs	r2, r0, r3
 8004666:	bf1c      	itt	ne
 8004668:	1a1b      	subne	r3, r3, r0
 800466a:	50a3      	strne	r3, [r4, r2]
 800466c:	e7af      	b.n	80045ce <_malloc_r+0x22>
 800466e:	6862      	ldr	r2, [r4, #4]
 8004670:	42a3      	cmp	r3, r4
 8004672:	bf0c      	ite	eq
 8004674:	f8c8 2000 	streq.w	r2, [r8]
 8004678:	605a      	strne	r2, [r3, #4]
 800467a:	e7eb      	b.n	8004654 <_malloc_r+0xa8>
 800467c:	4623      	mov	r3, r4
 800467e:	6864      	ldr	r4, [r4, #4]
 8004680:	e7ae      	b.n	80045e0 <_malloc_r+0x34>
 8004682:	463c      	mov	r4, r7
 8004684:	687f      	ldr	r7, [r7, #4]
 8004686:	e7b6      	b.n	80045f6 <_malloc_r+0x4a>
 8004688:	461a      	mov	r2, r3
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	42a3      	cmp	r3, r4
 800468e:	d1fb      	bne.n	8004688 <_malloc_r+0xdc>
 8004690:	2300      	movs	r3, #0
 8004692:	6053      	str	r3, [r2, #4]
 8004694:	e7de      	b.n	8004654 <_malloc_r+0xa8>
 8004696:	230c      	movs	r3, #12
 8004698:	6033      	str	r3, [r6, #0]
 800469a:	4630      	mov	r0, r6
 800469c:	f000 f80c 	bl	80046b8 <__malloc_unlock>
 80046a0:	e794      	b.n	80045cc <_malloc_r+0x20>
 80046a2:	6005      	str	r5, [r0, #0]
 80046a4:	e7d6      	b.n	8004654 <_malloc_r+0xa8>
 80046a6:	bf00      	nop
 80046a8:	200006d0 	.word	0x200006d0

080046ac <__malloc_lock>:
 80046ac:	4801      	ldr	r0, [pc, #4]	@ (80046b4 <__malloc_lock+0x8>)
 80046ae:	f7ff bf0f 	b.w	80044d0 <__retarget_lock_acquire_recursive>
 80046b2:	bf00      	nop
 80046b4:	200006c8 	.word	0x200006c8

080046b8 <__malloc_unlock>:
 80046b8:	4801      	ldr	r0, [pc, #4]	@ (80046c0 <__malloc_unlock+0x8>)
 80046ba:	f7ff bf0a 	b.w	80044d2 <__retarget_lock_release_recursive>
 80046be:	bf00      	nop
 80046c0:	200006c8 	.word	0x200006c8

080046c4 <__ssputs_r>:
 80046c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c8:	688e      	ldr	r6, [r1, #8]
 80046ca:	461f      	mov	r7, r3
 80046cc:	42be      	cmp	r6, r7
 80046ce:	680b      	ldr	r3, [r1, #0]
 80046d0:	4682      	mov	sl, r0
 80046d2:	460c      	mov	r4, r1
 80046d4:	4690      	mov	r8, r2
 80046d6:	d82d      	bhi.n	8004734 <__ssputs_r+0x70>
 80046d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80046e0:	d026      	beq.n	8004730 <__ssputs_r+0x6c>
 80046e2:	6965      	ldr	r5, [r4, #20]
 80046e4:	6909      	ldr	r1, [r1, #16]
 80046e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046ea:	eba3 0901 	sub.w	r9, r3, r1
 80046ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046f2:	1c7b      	adds	r3, r7, #1
 80046f4:	444b      	add	r3, r9
 80046f6:	106d      	asrs	r5, r5, #1
 80046f8:	429d      	cmp	r5, r3
 80046fa:	bf38      	it	cc
 80046fc:	461d      	movcc	r5, r3
 80046fe:	0553      	lsls	r3, r2, #21
 8004700:	d527      	bpl.n	8004752 <__ssputs_r+0x8e>
 8004702:	4629      	mov	r1, r5
 8004704:	f7ff ff52 	bl	80045ac <_malloc_r>
 8004708:	4606      	mov	r6, r0
 800470a:	b360      	cbz	r0, 8004766 <__ssputs_r+0xa2>
 800470c:	6921      	ldr	r1, [r4, #16]
 800470e:	464a      	mov	r2, r9
 8004710:	f000 fae6 	bl	8004ce0 <memcpy>
 8004714:	89a3      	ldrh	r3, [r4, #12]
 8004716:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800471a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800471e:	81a3      	strh	r3, [r4, #12]
 8004720:	6126      	str	r6, [r4, #16]
 8004722:	6165      	str	r5, [r4, #20]
 8004724:	444e      	add	r6, r9
 8004726:	eba5 0509 	sub.w	r5, r5, r9
 800472a:	6026      	str	r6, [r4, #0]
 800472c:	60a5      	str	r5, [r4, #8]
 800472e:	463e      	mov	r6, r7
 8004730:	42be      	cmp	r6, r7
 8004732:	d900      	bls.n	8004736 <__ssputs_r+0x72>
 8004734:	463e      	mov	r6, r7
 8004736:	6820      	ldr	r0, [r4, #0]
 8004738:	4632      	mov	r2, r6
 800473a:	4641      	mov	r1, r8
 800473c:	f000 faa6 	bl	8004c8c <memmove>
 8004740:	68a3      	ldr	r3, [r4, #8]
 8004742:	1b9b      	subs	r3, r3, r6
 8004744:	60a3      	str	r3, [r4, #8]
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	4433      	add	r3, r6
 800474a:	6023      	str	r3, [r4, #0]
 800474c:	2000      	movs	r0, #0
 800474e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004752:	462a      	mov	r2, r5
 8004754:	f000 fad2 	bl	8004cfc <_realloc_r>
 8004758:	4606      	mov	r6, r0
 800475a:	2800      	cmp	r0, #0
 800475c:	d1e0      	bne.n	8004720 <__ssputs_r+0x5c>
 800475e:	6921      	ldr	r1, [r4, #16]
 8004760:	4650      	mov	r0, sl
 8004762:	f7ff feb7 	bl	80044d4 <_free_r>
 8004766:	230c      	movs	r3, #12
 8004768:	f8ca 3000 	str.w	r3, [sl]
 800476c:	89a3      	ldrh	r3, [r4, #12]
 800476e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004772:	81a3      	strh	r3, [r4, #12]
 8004774:	f04f 30ff 	mov.w	r0, #4294967295
 8004778:	e7e9      	b.n	800474e <__ssputs_r+0x8a>
	...

0800477c <_svfiprintf_r>:
 800477c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004780:	4698      	mov	r8, r3
 8004782:	898b      	ldrh	r3, [r1, #12]
 8004784:	061b      	lsls	r3, r3, #24
 8004786:	b09d      	sub	sp, #116	@ 0x74
 8004788:	4607      	mov	r7, r0
 800478a:	460d      	mov	r5, r1
 800478c:	4614      	mov	r4, r2
 800478e:	d510      	bpl.n	80047b2 <_svfiprintf_r+0x36>
 8004790:	690b      	ldr	r3, [r1, #16]
 8004792:	b973      	cbnz	r3, 80047b2 <_svfiprintf_r+0x36>
 8004794:	2140      	movs	r1, #64	@ 0x40
 8004796:	f7ff ff09 	bl	80045ac <_malloc_r>
 800479a:	6028      	str	r0, [r5, #0]
 800479c:	6128      	str	r0, [r5, #16]
 800479e:	b930      	cbnz	r0, 80047ae <_svfiprintf_r+0x32>
 80047a0:	230c      	movs	r3, #12
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	f04f 30ff 	mov.w	r0, #4294967295
 80047a8:	b01d      	add	sp, #116	@ 0x74
 80047aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ae:	2340      	movs	r3, #64	@ 0x40
 80047b0:	616b      	str	r3, [r5, #20]
 80047b2:	2300      	movs	r3, #0
 80047b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80047b6:	2320      	movs	r3, #32
 80047b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80047c0:	2330      	movs	r3, #48	@ 0x30
 80047c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004960 <_svfiprintf_r+0x1e4>
 80047c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047ca:	f04f 0901 	mov.w	r9, #1
 80047ce:	4623      	mov	r3, r4
 80047d0:	469a      	mov	sl, r3
 80047d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047d6:	b10a      	cbz	r2, 80047dc <_svfiprintf_r+0x60>
 80047d8:	2a25      	cmp	r2, #37	@ 0x25
 80047da:	d1f9      	bne.n	80047d0 <_svfiprintf_r+0x54>
 80047dc:	ebba 0b04 	subs.w	fp, sl, r4
 80047e0:	d00b      	beq.n	80047fa <_svfiprintf_r+0x7e>
 80047e2:	465b      	mov	r3, fp
 80047e4:	4622      	mov	r2, r4
 80047e6:	4629      	mov	r1, r5
 80047e8:	4638      	mov	r0, r7
 80047ea:	f7ff ff6b 	bl	80046c4 <__ssputs_r>
 80047ee:	3001      	adds	r0, #1
 80047f0:	f000 80a7 	beq.w	8004942 <_svfiprintf_r+0x1c6>
 80047f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047f6:	445a      	add	r2, fp
 80047f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80047fa:	f89a 3000 	ldrb.w	r3, [sl]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 809f 	beq.w	8004942 <_svfiprintf_r+0x1c6>
 8004804:	2300      	movs	r3, #0
 8004806:	f04f 32ff 	mov.w	r2, #4294967295
 800480a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800480e:	f10a 0a01 	add.w	sl, sl, #1
 8004812:	9304      	str	r3, [sp, #16]
 8004814:	9307      	str	r3, [sp, #28]
 8004816:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800481a:	931a      	str	r3, [sp, #104]	@ 0x68
 800481c:	4654      	mov	r4, sl
 800481e:	2205      	movs	r2, #5
 8004820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004824:	484e      	ldr	r0, [pc, #312]	@ (8004960 <_svfiprintf_r+0x1e4>)
 8004826:	f7fb fcdb 	bl	80001e0 <memchr>
 800482a:	9a04      	ldr	r2, [sp, #16]
 800482c:	b9d8      	cbnz	r0, 8004866 <_svfiprintf_r+0xea>
 800482e:	06d0      	lsls	r0, r2, #27
 8004830:	bf44      	itt	mi
 8004832:	2320      	movmi	r3, #32
 8004834:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004838:	0711      	lsls	r1, r2, #28
 800483a:	bf44      	itt	mi
 800483c:	232b      	movmi	r3, #43	@ 0x2b
 800483e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004842:	f89a 3000 	ldrb.w	r3, [sl]
 8004846:	2b2a      	cmp	r3, #42	@ 0x2a
 8004848:	d015      	beq.n	8004876 <_svfiprintf_r+0xfa>
 800484a:	9a07      	ldr	r2, [sp, #28]
 800484c:	4654      	mov	r4, sl
 800484e:	2000      	movs	r0, #0
 8004850:	f04f 0c0a 	mov.w	ip, #10
 8004854:	4621      	mov	r1, r4
 8004856:	f811 3b01 	ldrb.w	r3, [r1], #1
 800485a:	3b30      	subs	r3, #48	@ 0x30
 800485c:	2b09      	cmp	r3, #9
 800485e:	d94b      	bls.n	80048f8 <_svfiprintf_r+0x17c>
 8004860:	b1b0      	cbz	r0, 8004890 <_svfiprintf_r+0x114>
 8004862:	9207      	str	r2, [sp, #28]
 8004864:	e014      	b.n	8004890 <_svfiprintf_r+0x114>
 8004866:	eba0 0308 	sub.w	r3, r0, r8
 800486a:	fa09 f303 	lsl.w	r3, r9, r3
 800486e:	4313      	orrs	r3, r2
 8004870:	9304      	str	r3, [sp, #16]
 8004872:	46a2      	mov	sl, r4
 8004874:	e7d2      	b.n	800481c <_svfiprintf_r+0xa0>
 8004876:	9b03      	ldr	r3, [sp, #12]
 8004878:	1d19      	adds	r1, r3, #4
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	9103      	str	r1, [sp, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	bfbb      	ittet	lt
 8004882:	425b      	neglt	r3, r3
 8004884:	f042 0202 	orrlt.w	r2, r2, #2
 8004888:	9307      	strge	r3, [sp, #28]
 800488a:	9307      	strlt	r3, [sp, #28]
 800488c:	bfb8      	it	lt
 800488e:	9204      	strlt	r2, [sp, #16]
 8004890:	7823      	ldrb	r3, [r4, #0]
 8004892:	2b2e      	cmp	r3, #46	@ 0x2e
 8004894:	d10a      	bne.n	80048ac <_svfiprintf_r+0x130>
 8004896:	7863      	ldrb	r3, [r4, #1]
 8004898:	2b2a      	cmp	r3, #42	@ 0x2a
 800489a:	d132      	bne.n	8004902 <_svfiprintf_r+0x186>
 800489c:	9b03      	ldr	r3, [sp, #12]
 800489e:	1d1a      	adds	r2, r3, #4
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	9203      	str	r2, [sp, #12]
 80048a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80048a8:	3402      	adds	r4, #2
 80048aa:	9305      	str	r3, [sp, #20]
 80048ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004970 <_svfiprintf_r+0x1f4>
 80048b0:	7821      	ldrb	r1, [r4, #0]
 80048b2:	2203      	movs	r2, #3
 80048b4:	4650      	mov	r0, sl
 80048b6:	f7fb fc93 	bl	80001e0 <memchr>
 80048ba:	b138      	cbz	r0, 80048cc <_svfiprintf_r+0x150>
 80048bc:	9b04      	ldr	r3, [sp, #16]
 80048be:	eba0 000a 	sub.w	r0, r0, sl
 80048c2:	2240      	movs	r2, #64	@ 0x40
 80048c4:	4082      	lsls	r2, r0
 80048c6:	4313      	orrs	r3, r2
 80048c8:	3401      	adds	r4, #1
 80048ca:	9304      	str	r3, [sp, #16]
 80048cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048d0:	4824      	ldr	r0, [pc, #144]	@ (8004964 <_svfiprintf_r+0x1e8>)
 80048d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048d6:	2206      	movs	r2, #6
 80048d8:	f7fb fc82 	bl	80001e0 <memchr>
 80048dc:	2800      	cmp	r0, #0
 80048de:	d036      	beq.n	800494e <_svfiprintf_r+0x1d2>
 80048e0:	4b21      	ldr	r3, [pc, #132]	@ (8004968 <_svfiprintf_r+0x1ec>)
 80048e2:	bb1b      	cbnz	r3, 800492c <_svfiprintf_r+0x1b0>
 80048e4:	9b03      	ldr	r3, [sp, #12]
 80048e6:	3307      	adds	r3, #7
 80048e8:	f023 0307 	bic.w	r3, r3, #7
 80048ec:	3308      	adds	r3, #8
 80048ee:	9303      	str	r3, [sp, #12]
 80048f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048f2:	4433      	add	r3, r6
 80048f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80048f6:	e76a      	b.n	80047ce <_svfiprintf_r+0x52>
 80048f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80048fc:	460c      	mov	r4, r1
 80048fe:	2001      	movs	r0, #1
 8004900:	e7a8      	b.n	8004854 <_svfiprintf_r+0xd8>
 8004902:	2300      	movs	r3, #0
 8004904:	3401      	adds	r4, #1
 8004906:	9305      	str	r3, [sp, #20]
 8004908:	4619      	mov	r1, r3
 800490a:	f04f 0c0a 	mov.w	ip, #10
 800490e:	4620      	mov	r0, r4
 8004910:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004914:	3a30      	subs	r2, #48	@ 0x30
 8004916:	2a09      	cmp	r2, #9
 8004918:	d903      	bls.n	8004922 <_svfiprintf_r+0x1a6>
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0c6      	beq.n	80048ac <_svfiprintf_r+0x130>
 800491e:	9105      	str	r1, [sp, #20]
 8004920:	e7c4      	b.n	80048ac <_svfiprintf_r+0x130>
 8004922:	fb0c 2101 	mla	r1, ip, r1, r2
 8004926:	4604      	mov	r4, r0
 8004928:	2301      	movs	r3, #1
 800492a:	e7f0      	b.n	800490e <_svfiprintf_r+0x192>
 800492c:	ab03      	add	r3, sp, #12
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	462a      	mov	r2, r5
 8004932:	4b0e      	ldr	r3, [pc, #56]	@ (800496c <_svfiprintf_r+0x1f0>)
 8004934:	a904      	add	r1, sp, #16
 8004936:	4638      	mov	r0, r7
 8004938:	f3af 8000 	nop.w
 800493c:	1c42      	adds	r2, r0, #1
 800493e:	4606      	mov	r6, r0
 8004940:	d1d6      	bne.n	80048f0 <_svfiprintf_r+0x174>
 8004942:	89ab      	ldrh	r3, [r5, #12]
 8004944:	065b      	lsls	r3, r3, #25
 8004946:	f53f af2d 	bmi.w	80047a4 <_svfiprintf_r+0x28>
 800494a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800494c:	e72c      	b.n	80047a8 <_svfiprintf_r+0x2c>
 800494e:	ab03      	add	r3, sp, #12
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	462a      	mov	r2, r5
 8004954:	4b05      	ldr	r3, [pc, #20]	@ (800496c <_svfiprintf_r+0x1f0>)
 8004956:	a904      	add	r1, sp, #16
 8004958:	4638      	mov	r0, r7
 800495a:	f000 f879 	bl	8004a50 <_printf_i>
 800495e:	e7ed      	b.n	800493c <_svfiprintf_r+0x1c0>
 8004960:	08004ff8 	.word	0x08004ff8
 8004964:	08005002 	.word	0x08005002
 8004968:	00000000 	.word	0x00000000
 800496c:	080046c5 	.word	0x080046c5
 8004970:	08004ffe 	.word	0x08004ffe

08004974 <_printf_common>:
 8004974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004978:	4616      	mov	r6, r2
 800497a:	4698      	mov	r8, r3
 800497c:	688a      	ldr	r2, [r1, #8]
 800497e:	690b      	ldr	r3, [r1, #16]
 8004980:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004984:	4293      	cmp	r3, r2
 8004986:	bfb8      	it	lt
 8004988:	4613      	movlt	r3, r2
 800498a:	6033      	str	r3, [r6, #0]
 800498c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004990:	4607      	mov	r7, r0
 8004992:	460c      	mov	r4, r1
 8004994:	b10a      	cbz	r2, 800499a <_printf_common+0x26>
 8004996:	3301      	adds	r3, #1
 8004998:	6033      	str	r3, [r6, #0]
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	0699      	lsls	r1, r3, #26
 800499e:	bf42      	ittt	mi
 80049a0:	6833      	ldrmi	r3, [r6, #0]
 80049a2:	3302      	addmi	r3, #2
 80049a4:	6033      	strmi	r3, [r6, #0]
 80049a6:	6825      	ldr	r5, [r4, #0]
 80049a8:	f015 0506 	ands.w	r5, r5, #6
 80049ac:	d106      	bne.n	80049bc <_printf_common+0x48>
 80049ae:	f104 0a19 	add.w	sl, r4, #25
 80049b2:	68e3      	ldr	r3, [r4, #12]
 80049b4:	6832      	ldr	r2, [r6, #0]
 80049b6:	1a9b      	subs	r3, r3, r2
 80049b8:	42ab      	cmp	r3, r5
 80049ba:	dc26      	bgt.n	8004a0a <_printf_common+0x96>
 80049bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049c0:	6822      	ldr	r2, [r4, #0]
 80049c2:	3b00      	subs	r3, #0
 80049c4:	bf18      	it	ne
 80049c6:	2301      	movne	r3, #1
 80049c8:	0692      	lsls	r2, r2, #26
 80049ca:	d42b      	bmi.n	8004a24 <_printf_common+0xb0>
 80049cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049d0:	4641      	mov	r1, r8
 80049d2:	4638      	mov	r0, r7
 80049d4:	47c8      	blx	r9
 80049d6:	3001      	adds	r0, #1
 80049d8:	d01e      	beq.n	8004a18 <_printf_common+0xa4>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	6922      	ldr	r2, [r4, #16]
 80049de:	f003 0306 	and.w	r3, r3, #6
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	bf02      	ittt	eq
 80049e6:	68e5      	ldreq	r5, [r4, #12]
 80049e8:	6833      	ldreq	r3, [r6, #0]
 80049ea:	1aed      	subeq	r5, r5, r3
 80049ec:	68a3      	ldr	r3, [r4, #8]
 80049ee:	bf0c      	ite	eq
 80049f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049f4:	2500      	movne	r5, #0
 80049f6:	4293      	cmp	r3, r2
 80049f8:	bfc4      	itt	gt
 80049fa:	1a9b      	subgt	r3, r3, r2
 80049fc:	18ed      	addgt	r5, r5, r3
 80049fe:	2600      	movs	r6, #0
 8004a00:	341a      	adds	r4, #26
 8004a02:	42b5      	cmp	r5, r6
 8004a04:	d11a      	bne.n	8004a3c <_printf_common+0xc8>
 8004a06:	2000      	movs	r0, #0
 8004a08:	e008      	b.n	8004a1c <_printf_common+0xa8>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	4652      	mov	r2, sl
 8004a0e:	4641      	mov	r1, r8
 8004a10:	4638      	mov	r0, r7
 8004a12:	47c8      	blx	r9
 8004a14:	3001      	adds	r0, #1
 8004a16:	d103      	bne.n	8004a20 <_printf_common+0xac>
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a20:	3501      	adds	r5, #1
 8004a22:	e7c6      	b.n	80049b2 <_printf_common+0x3e>
 8004a24:	18e1      	adds	r1, r4, r3
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	2030      	movs	r0, #48	@ 0x30
 8004a2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a2e:	4422      	add	r2, r4
 8004a30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a38:	3302      	adds	r3, #2
 8004a3a:	e7c7      	b.n	80049cc <_printf_common+0x58>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	4622      	mov	r2, r4
 8004a40:	4641      	mov	r1, r8
 8004a42:	4638      	mov	r0, r7
 8004a44:	47c8      	blx	r9
 8004a46:	3001      	adds	r0, #1
 8004a48:	d0e6      	beq.n	8004a18 <_printf_common+0xa4>
 8004a4a:	3601      	adds	r6, #1
 8004a4c:	e7d9      	b.n	8004a02 <_printf_common+0x8e>
	...

08004a50 <_printf_i>:
 8004a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a54:	7e0f      	ldrb	r7, [r1, #24]
 8004a56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a58:	2f78      	cmp	r7, #120	@ 0x78
 8004a5a:	4691      	mov	r9, r2
 8004a5c:	4680      	mov	r8, r0
 8004a5e:	460c      	mov	r4, r1
 8004a60:	469a      	mov	sl, r3
 8004a62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a66:	d807      	bhi.n	8004a78 <_printf_i+0x28>
 8004a68:	2f62      	cmp	r7, #98	@ 0x62
 8004a6a:	d80a      	bhi.n	8004a82 <_printf_i+0x32>
 8004a6c:	2f00      	cmp	r7, #0
 8004a6e:	f000 80d1 	beq.w	8004c14 <_printf_i+0x1c4>
 8004a72:	2f58      	cmp	r7, #88	@ 0x58
 8004a74:	f000 80b8 	beq.w	8004be8 <_printf_i+0x198>
 8004a78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a80:	e03a      	b.n	8004af8 <_printf_i+0xa8>
 8004a82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a86:	2b15      	cmp	r3, #21
 8004a88:	d8f6      	bhi.n	8004a78 <_printf_i+0x28>
 8004a8a:	a101      	add	r1, pc, #4	@ (adr r1, 8004a90 <_printf_i+0x40>)
 8004a8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a90:	08004ae9 	.word	0x08004ae9
 8004a94:	08004afd 	.word	0x08004afd
 8004a98:	08004a79 	.word	0x08004a79
 8004a9c:	08004a79 	.word	0x08004a79
 8004aa0:	08004a79 	.word	0x08004a79
 8004aa4:	08004a79 	.word	0x08004a79
 8004aa8:	08004afd 	.word	0x08004afd
 8004aac:	08004a79 	.word	0x08004a79
 8004ab0:	08004a79 	.word	0x08004a79
 8004ab4:	08004a79 	.word	0x08004a79
 8004ab8:	08004a79 	.word	0x08004a79
 8004abc:	08004bfb 	.word	0x08004bfb
 8004ac0:	08004b27 	.word	0x08004b27
 8004ac4:	08004bb5 	.word	0x08004bb5
 8004ac8:	08004a79 	.word	0x08004a79
 8004acc:	08004a79 	.word	0x08004a79
 8004ad0:	08004c1d 	.word	0x08004c1d
 8004ad4:	08004a79 	.word	0x08004a79
 8004ad8:	08004b27 	.word	0x08004b27
 8004adc:	08004a79 	.word	0x08004a79
 8004ae0:	08004a79 	.word	0x08004a79
 8004ae4:	08004bbd 	.word	0x08004bbd
 8004ae8:	6833      	ldr	r3, [r6, #0]
 8004aea:	1d1a      	adds	r2, r3, #4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6032      	str	r2, [r6, #0]
 8004af0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004af4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004af8:	2301      	movs	r3, #1
 8004afa:	e09c      	b.n	8004c36 <_printf_i+0x1e6>
 8004afc:	6833      	ldr	r3, [r6, #0]
 8004afe:	6820      	ldr	r0, [r4, #0]
 8004b00:	1d19      	adds	r1, r3, #4
 8004b02:	6031      	str	r1, [r6, #0]
 8004b04:	0606      	lsls	r6, r0, #24
 8004b06:	d501      	bpl.n	8004b0c <_printf_i+0xbc>
 8004b08:	681d      	ldr	r5, [r3, #0]
 8004b0a:	e003      	b.n	8004b14 <_printf_i+0xc4>
 8004b0c:	0645      	lsls	r5, r0, #25
 8004b0e:	d5fb      	bpl.n	8004b08 <_printf_i+0xb8>
 8004b10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b14:	2d00      	cmp	r5, #0
 8004b16:	da03      	bge.n	8004b20 <_printf_i+0xd0>
 8004b18:	232d      	movs	r3, #45	@ 0x2d
 8004b1a:	426d      	negs	r5, r5
 8004b1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b20:	4858      	ldr	r0, [pc, #352]	@ (8004c84 <_printf_i+0x234>)
 8004b22:	230a      	movs	r3, #10
 8004b24:	e011      	b.n	8004b4a <_printf_i+0xfa>
 8004b26:	6821      	ldr	r1, [r4, #0]
 8004b28:	6833      	ldr	r3, [r6, #0]
 8004b2a:	0608      	lsls	r0, r1, #24
 8004b2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b30:	d402      	bmi.n	8004b38 <_printf_i+0xe8>
 8004b32:	0649      	lsls	r1, r1, #25
 8004b34:	bf48      	it	mi
 8004b36:	b2ad      	uxthmi	r5, r5
 8004b38:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b3a:	4852      	ldr	r0, [pc, #328]	@ (8004c84 <_printf_i+0x234>)
 8004b3c:	6033      	str	r3, [r6, #0]
 8004b3e:	bf14      	ite	ne
 8004b40:	230a      	movne	r3, #10
 8004b42:	2308      	moveq	r3, #8
 8004b44:	2100      	movs	r1, #0
 8004b46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b4a:	6866      	ldr	r6, [r4, #4]
 8004b4c:	60a6      	str	r6, [r4, #8]
 8004b4e:	2e00      	cmp	r6, #0
 8004b50:	db05      	blt.n	8004b5e <_printf_i+0x10e>
 8004b52:	6821      	ldr	r1, [r4, #0]
 8004b54:	432e      	orrs	r6, r5
 8004b56:	f021 0104 	bic.w	r1, r1, #4
 8004b5a:	6021      	str	r1, [r4, #0]
 8004b5c:	d04b      	beq.n	8004bf6 <_printf_i+0x1a6>
 8004b5e:	4616      	mov	r6, r2
 8004b60:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b64:	fb03 5711 	mls	r7, r3, r1, r5
 8004b68:	5dc7      	ldrb	r7, [r0, r7]
 8004b6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b6e:	462f      	mov	r7, r5
 8004b70:	42bb      	cmp	r3, r7
 8004b72:	460d      	mov	r5, r1
 8004b74:	d9f4      	bls.n	8004b60 <_printf_i+0x110>
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d10b      	bne.n	8004b92 <_printf_i+0x142>
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	07df      	lsls	r7, r3, #31
 8004b7e:	d508      	bpl.n	8004b92 <_printf_i+0x142>
 8004b80:	6923      	ldr	r3, [r4, #16]
 8004b82:	6861      	ldr	r1, [r4, #4]
 8004b84:	4299      	cmp	r1, r3
 8004b86:	bfde      	ittt	le
 8004b88:	2330      	movle	r3, #48	@ 0x30
 8004b8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b92:	1b92      	subs	r2, r2, r6
 8004b94:	6122      	str	r2, [r4, #16]
 8004b96:	f8cd a000 	str.w	sl, [sp]
 8004b9a:	464b      	mov	r3, r9
 8004b9c:	aa03      	add	r2, sp, #12
 8004b9e:	4621      	mov	r1, r4
 8004ba0:	4640      	mov	r0, r8
 8004ba2:	f7ff fee7 	bl	8004974 <_printf_common>
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	d14a      	bne.n	8004c40 <_printf_i+0x1f0>
 8004baa:	f04f 30ff 	mov.w	r0, #4294967295
 8004bae:	b004      	add	sp, #16
 8004bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	f043 0320 	orr.w	r3, r3, #32
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	4832      	ldr	r0, [pc, #200]	@ (8004c88 <_printf_i+0x238>)
 8004bbe:	2778      	movs	r7, #120	@ 0x78
 8004bc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	6831      	ldr	r1, [r6, #0]
 8004bc8:	061f      	lsls	r7, r3, #24
 8004bca:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bce:	d402      	bmi.n	8004bd6 <_printf_i+0x186>
 8004bd0:	065f      	lsls	r7, r3, #25
 8004bd2:	bf48      	it	mi
 8004bd4:	b2ad      	uxthmi	r5, r5
 8004bd6:	6031      	str	r1, [r6, #0]
 8004bd8:	07d9      	lsls	r1, r3, #31
 8004bda:	bf44      	itt	mi
 8004bdc:	f043 0320 	orrmi.w	r3, r3, #32
 8004be0:	6023      	strmi	r3, [r4, #0]
 8004be2:	b11d      	cbz	r5, 8004bec <_printf_i+0x19c>
 8004be4:	2310      	movs	r3, #16
 8004be6:	e7ad      	b.n	8004b44 <_printf_i+0xf4>
 8004be8:	4826      	ldr	r0, [pc, #152]	@ (8004c84 <_printf_i+0x234>)
 8004bea:	e7e9      	b.n	8004bc0 <_printf_i+0x170>
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	f023 0320 	bic.w	r3, r3, #32
 8004bf2:	6023      	str	r3, [r4, #0]
 8004bf4:	e7f6      	b.n	8004be4 <_printf_i+0x194>
 8004bf6:	4616      	mov	r6, r2
 8004bf8:	e7bd      	b.n	8004b76 <_printf_i+0x126>
 8004bfa:	6833      	ldr	r3, [r6, #0]
 8004bfc:	6825      	ldr	r5, [r4, #0]
 8004bfe:	6961      	ldr	r1, [r4, #20]
 8004c00:	1d18      	adds	r0, r3, #4
 8004c02:	6030      	str	r0, [r6, #0]
 8004c04:	062e      	lsls	r6, r5, #24
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	d501      	bpl.n	8004c0e <_printf_i+0x1be>
 8004c0a:	6019      	str	r1, [r3, #0]
 8004c0c:	e002      	b.n	8004c14 <_printf_i+0x1c4>
 8004c0e:	0668      	lsls	r0, r5, #25
 8004c10:	d5fb      	bpl.n	8004c0a <_printf_i+0x1ba>
 8004c12:	8019      	strh	r1, [r3, #0]
 8004c14:	2300      	movs	r3, #0
 8004c16:	6123      	str	r3, [r4, #16]
 8004c18:	4616      	mov	r6, r2
 8004c1a:	e7bc      	b.n	8004b96 <_printf_i+0x146>
 8004c1c:	6833      	ldr	r3, [r6, #0]
 8004c1e:	1d1a      	adds	r2, r3, #4
 8004c20:	6032      	str	r2, [r6, #0]
 8004c22:	681e      	ldr	r6, [r3, #0]
 8004c24:	6862      	ldr	r2, [r4, #4]
 8004c26:	2100      	movs	r1, #0
 8004c28:	4630      	mov	r0, r6
 8004c2a:	f7fb fad9 	bl	80001e0 <memchr>
 8004c2e:	b108      	cbz	r0, 8004c34 <_printf_i+0x1e4>
 8004c30:	1b80      	subs	r0, r0, r6
 8004c32:	6060      	str	r0, [r4, #4]
 8004c34:	6863      	ldr	r3, [r4, #4]
 8004c36:	6123      	str	r3, [r4, #16]
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c3e:	e7aa      	b.n	8004b96 <_printf_i+0x146>
 8004c40:	6923      	ldr	r3, [r4, #16]
 8004c42:	4632      	mov	r2, r6
 8004c44:	4649      	mov	r1, r9
 8004c46:	4640      	mov	r0, r8
 8004c48:	47d0      	blx	sl
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d0ad      	beq.n	8004baa <_printf_i+0x15a>
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	079b      	lsls	r3, r3, #30
 8004c52:	d413      	bmi.n	8004c7c <_printf_i+0x22c>
 8004c54:	68e0      	ldr	r0, [r4, #12]
 8004c56:	9b03      	ldr	r3, [sp, #12]
 8004c58:	4298      	cmp	r0, r3
 8004c5a:	bfb8      	it	lt
 8004c5c:	4618      	movlt	r0, r3
 8004c5e:	e7a6      	b.n	8004bae <_printf_i+0x15e>
 8004c60:	2301      	movs	r3, #1
 8004c62:	4632      	mov	r2, r6
 8004c64:	4649      	mov	r1, r9
 8004c66:	4640      	mov	r0, r8
 8004c68:	47d0      	blx	sl
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	d09d      	beq.n	8004baa <_printf_i+0x15a>
 8004c6e:	3501      	adds	r5, #1
 8004c70:	68e3      	ldr	r3, [r4, #12]
 8004c72:	9903      	ldr	r1, [sp, #12]
 8004c74:	1a5b      	subs	r3, r3, r1
 8004c76:	42ab      	cmp	r3, r5
 8004c78:	dcf2      	bgt.n	8004c60 <_printf_i+0x210>
 8004c7a:	e7eb      	b.n	8004c54 <_printf_i+0x204>
 8004c7c:	2500      	movs	r5, #0
 8004c7e:	f104 0619 	add.w	r6, r4, #25
 8004c82:	e7f5      	b.n	8004c70 <_printf_i+0x220>
 8004c84:	08005009 	.word	0x08005009
 8004c88:	0800501a 	.word	0x0800501a

08004c8c <memmove>:
 8004c8c:	4288      	cmp	r0, r1
 8004c8e:	b510      	push	{r4, lr}
 8004c90:	eb01 0402 	add.w	r4, r1, r2
 8004c94:	d902      	bls.n	8004c9c <memmove+0x10>
 8004c96:	4284      	cmp	r4, r0
 8004c98:	4623      	mov	r3, r4
 8004c9a:	d807      	bhi.n	8004cac <memmove+0x20>
 8004c9c:	1e43      	subs	r3, r0, #1
 8004c9e:	42a1      	cmp	r1, r4
 8004ca0:	d008      	beq.n	8004cb4 <memmove+0x28>
 8004ca2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ca6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004caa:	e7f8      	b.n	8004c9e <memmove+0x12>
 8004cac:	4402      	add	r2, r0
 8004cae:	4601      	mov	r1, r0
 8004cb0:	428a      	cmp	r2, r1
 8004cb2:	d100      	bne.n	8004cb6 <memmove+0x2a>
 8004cb4:	bd10      	pop	{r4, pc}
 8004cb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cbe:	e7f7      	b.n	8004cb0 <memmove+0x24>

08004cc0 <_sbrk_r>:
 8004cc0:	b538      	push	{r3, r4, r5, lr}
 8004cc2:	4d06      	ldr	r5, [pc, #24]	@ (8004cdc <_sbrk_r+0x1c>)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	4608      	mov	r0, r1
 8004cca:	602b      	str	r3, [r5, #0]
 8004ccc:	f7fc fa0e 	bl	80010ec <_sbrk>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d102      	bne.n	8004cda <_sbrk_r+0x1a>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	b103      	cbz	r3, 8004cda <_sbrk_r+0x1a>
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	bd38      	pop	{r3, r4, r5, pc}
 8004cdc:	200006c4 	.word	0x200006c4

08004ce0 <memcpy>:
 8004ce0:	440a      	add	r2, r1
 8004ce2:	4291      	cmp	r1, r2
 8004ce4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ce8:	d100      	bne.n	8004cec <memcpy+0xc>
 8004cea:	4770      	bx	lr
 8004cec:	b510      	push	{r4, lr}
 8004cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cf6:	4291      	cmp	r1, r2
 8004cf8:	d1f9      	bne.n	8004cee <memcpy+0xe>
 8004cfa:	bd10      	pop	{r4, pc}

08004cfc <_realloc_r>:
 8004cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d00:	4607      	mov	r7, r0
 8004d02:	4614      	mov	r4, r2
 8004d04:	460d      	mov	r5, r1
 8004d06:	b921      	cbnz	r1, 8004d12 <_realloc_r+0x16>
 8004d08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	f7ff bc4d 	b.w	80045ac <_malloc_r>
 8004d12:	b92a      	cbnz	r2, 8004d20 <_realloc_r+0x24>
 8004d14:	f7ff fbde 	bl	80044d4 <_free_r>
 8004d18:	4625      	mov	r5, r4
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d20:	f000 f81a 	bl	8004d58 <_malloc_usable_size_r>
 8004d24:	4284      	cmp	r4, r0
 8004d26:	4606      	mov	r6, r0
 8004d28:	d802      	bhi.n	8004d30 <_realloc_r+0x34>
 8004d2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d2e:	d8f4      	bhi.n	8004d1a <_realloc_r+0x1e>
 8004d30:	4621      	mov	r1, r4
 8004d32:	4638      	mov	r0, r7
 8004d34:	f7ff fc3a 	bl	80045ac <_malloc_r>
 8004d38:	4680      	mov	r8, r0
 8004d3a:	b908      	cbnz	r0, 8004d40 <_realloc_r+0x44>
 8004d3c:	4645      	mov	r5, r8
 8004d3e:	e7ec      	b.n	8004d1a <_realloc_r+0x1e>
 8004d40:	42b4      	cmp	r4, r6
 8004d42:	4622      	mov	r2, r4
 8004d44:	4629      	mov	r1, r5
 8004d46:	bf28      	it	cs
 8004d48:	4632      	movcs	r2, r6
 8004d4a:	f7ff ffc9 	bl	8004ce0 <memcpy>
 8004d4e:	4629      	mov	r1, r5
 8004d50:	4638      	mov	r0, r7
 8004d52:	f7ff fbbf 	bl	80044d4 <_free_r>
 8004d56:	e7f1      	b.n	8004d3c <_realloc_r+0x40>

08004d58 <_malloc_usable_size_r>:
 8004d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d5c:	1f18      	subs	r0, r3, #4
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	bfbc      	itt	lt
 8004d62:	580b      	ldrlt	r3, [r1, r0]
 8004d64:	18c0      	addlt	r0, r0, r3
 8004d66:	4770      	bx	lr

08004d68 <_init>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	bf00      	nop
 8004d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6e:	bc08      	pop	{r3}
 8004d70:	469e      	mov	lr, r3
 8004d72:	4770      	bx	lr

08004d74 <_fini>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	bf00      	nop
 8004d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7a:	bc08      	pop	{r3}
 8004d7c:	469e      	mov	lr, r3
 8004d7e:	4770      	bx	lr
