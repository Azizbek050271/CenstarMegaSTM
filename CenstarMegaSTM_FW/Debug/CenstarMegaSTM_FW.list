
CenstarMegaSTM_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b08  0800fb90  0800fb90  00010b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010698  08010698  000121f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010698  08010698  00011698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106a0  080106a0  000121f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106a0  080106a0  000116a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080106a4  080106a4  000116a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  080106a8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000121f8  2**0
                  CONTENTS
 10 .bss          00008f10  200001f8  200001f8  000121f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20009108  20009108  000121f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000121f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fd87  00000000  00000000  00012228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000478d  00000000  00000000  00031faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ad0  00000000  00000000  00036740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001510  00000000  00000000  00038210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026057  00000000  00000000  00039720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021aed  00000000  00000000  0005f777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dba80  00000000  00000000  00081264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015cce4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008408  00000000  00000000  0015cd28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00165130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fb74 	.word	0x0800fb74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800fb74 	.word	0x0800fb74

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b9be 	b.w	8000fa0 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f83c 	bl	8000ca8 <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_d2lz>:
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2300      	movs	r3, #0
 8000c42:	4604      	mov	r4, r0
 8000c44:	460d      	mov	r5, r1
 8000c46:	f7ff ff49 	bl	8000adc <__aeabi_dcmplt>
 8000c4a:	b928      	cbnz	r0, 8000c58 <__aeabi_d2lz+0x1c>
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	4629      	mov	r1, r5
 8000c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c54:	f000 b80a 	b.w	8000c6c <__aeabi_d2ulz>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c5e:	f000 f805 	bl	8000c6c <__aeabi_d2ulz>
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	bd38      	pop	{r3, r4, r5, pc}
 8000c6a:	bf00      	nop

08000c6c <__aeabi_d2ulz>:
 8000c6c:	b5d0      	push	{r4, r6, r7, lr}
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <__aeabi_d2ulz+0x34>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	4606      	mov	r6, r0
 8000c74:	460f      	mov	r7, r1
 8000c76:	f7ff fcbf 	bl	80005f8 <__aeabi_dmul>
 8000c7a:	f7ff ff57 	bl	8000b2c <__aeabi_d2uiz>
 8000c7e:	4604      	mov	r4, r0
 8000c80:	f7ff fc40 	bl	8000504 <__aeabi_ui2d>
 8000c84:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <__aeabi_d2ulz+0x38>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f7ff fcb6 	bl	80005f8 <__aeabi_dmul>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4630      	mov	r0, r6
 8000c92:	4639      	mov	r1, r7
 8000c94:	f7ff faf8 	bl	8000288 <__aeabi_dsub>
 8000c98:	f7ff ff48 	bl	8000b2c <__aeabi_d2uiz>
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca0:	3df00000 	.word	0x3df00000
 8000ca4:	41f00000 	.word	0x41f00000

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	468e      	mov	lr, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	4688      	mov	r8, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d962      	bls.n	8000d84 <__udivmoddi4+0xdc>
 8000cbe:	fab2 f682 	clz	r6, r2
 8000cc2:	b14e      	cbz	r6, 8000cd8 <__udivmoddi4+0x30>
 8000cc4:	f1c6 0320 	rsb	r3, r6, #32
 8000cc8:	fa01 f806 	lsl.w	r8, r1, r6
 8000ccc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cd0:	40b7      	lsls	r7, r6
 8000cd2:	ea43 0808 	orr.w	r8, r3, r8
 8000cd6:	40b4      	lsls	r4, r6
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	fa1f fc87 	uxth.w	ip, r7
 8000ce0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ce4:	0c23      	lsrs	r3, r4, #16
 8000ce6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cee:	fb01 f20c 	mul.w	r2, r1, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cfc:	f080 80ea 	bcs.w	8000ed4 <__udivmoddi4+0x22c>
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f240 80e7 	bls.w	8000ed4 <__udivmoddi4+0x22c>
 8000d06:	3902      	subs	r1, #2
 8000d08:	443b      	add	r3, r7
 8000d0a:	1a9a      	subs	r2, r3, r2
 8000d0c:	b2a3      	uxth	r3, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1e:	459c      	cmp	ip, r3
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x8e>
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	f080 80d6 	bcs.w	8000ed8 <__udivmoddi4+0x230>
 8000d2c:	459c      	cmp	ip, r3
 8000d2e:	f240 80d3 	bls.w	8000ed8 <__udivmoddi4+0x230>
 8000d32:	443b      	add	r3, r7
 8000d34:	3802      	subs	r0, #2
 8000d36:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3a:	eba3 030c 	sub.w	r3, r3, ip
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11d      	cbz	r5, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40f3      	lsrs	r3, r6
 8000d44:	2200      	movs	r2, #0
 8000d46:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d905      	bls.n	8000d5e <__udivmoddi4+0xb6>
 8000d52:	b10d      	cbz	r5, 8000d58 <__udivmoddi4+0xb0>
 8000d54:	e9c5 0100 	strd	r0, r1, [r5]
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e7f5      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d5e:	fab3 f183 	clz	r1, r3
 8000d62:	2900      	cmp	r1, #0
 8000d64:	d146      	bne.n	8000df4 <__udivmoddi4+0x14c>
 8000d66:	4573      	cmp	r3, lr
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xc8>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	f200 8105 	bhi.w	8000f7a <__udivmoddi4+0x2d2>
 8000d70:	1a84      	subs	r4, r0, r2
 8000d72:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	4690      	mov	r8, r2
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d0e5      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d7e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d82:	e7e2      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f000 8090 	beq.w	8000eaa <__udivmoddi4+0x202>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	f040 80a4 	bne.w	8000edc <__udivmoddi4+0x234>
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9c:	b280      	uxth	r0, r0
 8000d9e:	b2bc      	uxth	r4, r7
 8000da0:	2101      	movs	r1, #1
 8000da2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000da6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dae:	fb04 f20c 	mul.w	r2, r4, ip
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x11e>
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x11c>
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	f200 80e0 	bhi.w	8000f84 <__udivmoddi4+0x2dc>
 8000dc4:	46c4      	mov	ip, r8
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dcc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dd0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dd4:	fb02 f404 	mul.w	r4, r2, r4
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x144>
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	f102 30ff 	add.w	r0, r2, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x142>
 8000de4:	429c      	cmp	r4, r3
 8000de6:	f200 80ca 	bhi.w	8000f7e <__udivmoddi4+0x2d6>
 8000dea:	4602      	mov	r2, r0
 8000dec:	1b1b      	subs	r3, r3, r4
 8000dee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000df2:	e7a5      	b.n	8000d40 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dfe:	431f      	orrs	r7, r3
 8000e00:	fa0e f401 	lsl.w	r4, lr, r1
 8000e04:	fa20 f306 	lsr.w	r3, r0, r6
 8000e08:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e0c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e10:	4323      	orrs	r3, r4
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	fa1f fc87 	uxth.w	ip, r7
 8000e1a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e1e:	0c1c      	lsrs	r4, r3, #16
 8000e20:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e24:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e28:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	d909      	bls.n	8000e48 <__udivmoddi4+0x1a0>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	f080 809c 	bcs.w	8000f76 <__udivmoddi4+0x2ce>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f240 8099 	bls.w	8000f76 <__udivmoddi4+0x2ce>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	eba4 040e 	sub.w	r4, r4, lr
 8000e4c:	fa1f fe83 	uxth.w	lr, r3
 8000e50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e54:	fb09 4413 	mls	r4, r9, r3, r4
 8000e58:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e5c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e60:	45a4      	cmp	ip, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x1ce>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e6a:	f080 8082 	bcs.w	8000f72 <__udivmoddi4+0x2ca>
 8000e6e:	45a4      	cmp	ip, r4
 8000e70:	d97f      	bls.n	8000f72 <__udivmoddi4+0x2ca>
 8000e72:	3b02      	subs	r3, #2
 8000e74:	443c      	add	r4, r7
 8000e76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e7a:	eba4 040c 	sub.w	r4, r4, ip
 8000e7e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e82:	4564      	cmp	r4, ip
 8000e84:	4673      	mov	r3, lr
 8000e86:	46e1      	mov	r9, ip
 8000e88:	d362      	bcc.n	8000f50 <__udivmoddi4+0x2a8>
 8000e8a:	d05f      	beq.n	8000f4c <__udivmoddi4+0x2a4>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x1fe>
 8000e8e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e92:	eb64 0409 	sbc.w	r4, r4, r9
 8000e96:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e9e:	431e      	orrs	r6, r3
 8000ea0:	40cc      	lsrs	r4, r1
 8000ea2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	e74f      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000eaa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eae:	0c01      	lsrs	r1, r0, #16
 8000eb0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000eb4:	b280      	uxth	r0, r0
 8000eb6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	463c      	mov	r4, r7
 8000ec0:	46b8      	mov	r8, r7
 8000ec2:	46be      	mov	lr, r7
 8000ec4:	2620      	movs	r6, #32
 8000ec6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eca:	eba2 0208 	sub.w	r2, r2, r8
 8000ece:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ed2:	e766      	b.n	8000da2 <__udivmoddi4+0xfa>
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	e718      	b.n	8000d0a <__udivmoddi4+0x62>
 8000ed8:	4610      	mov	r0, r2
 8000eda:	e72c      	b.n	8000d36 <__udivmoddi4+0x8e>
 8000edc:	f1c6 0220 	rsb	r2, r6, #32
 8000ee0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ee4:	40b7      	lsls	r7, r6
 8000ee6:	40b1      	lsls	r1, r6
 8000ee8:	fa20 f202 	lsr.w	r2, r0, r2
 8000eec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ef6:	b2bc      	uxth	r4, r7
 8000ef8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb08 f904 	mul.w	r9, r8, r4
 8000f06:	40b0      	lsls	r0, r6
 8000f08:	4589      	cmp	r9, r1
 8000f0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f0e:	b280      	uxth	r0, r0
 8000f10:	d93e      	bls.n	8000f90 <__udivmoddi4+0x2e8>
 8000f12:	1879      	adds	r1, r7, r1
 8000f14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f18:	d201      	bcs.n	8000f1e <__udivmoddi4+0x276>
 8000f1a:	4589      	cmp	r9, r1
 8000f1c:	d81f      	bhi.n	8000f5e <__udivmoddi4+0x2b6>
 8000f1e:	eba1 0109 	sub.w	r1, r1, r9
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fb09 f804 	mul.w	r8, r9, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	4542      	cmp	r2, r8
 8000f36:	d229      	bcs.n	8000f8c <__udivmoddi4+0x2e4>
 8000f38:	18ba      	adds	r2, r7, r2
 8000f3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f3e:	d2c4      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f40:	4542      	cmp	r2, r8
 8000f42:	d2c2      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f44:	f1a9 0102 	sub.w	r1, r9, #2
 8000f48:	443a      	add	r2, r7
 8000f4a:	e7be      	b.n	8000eca <__udivmoddi4+0x222>
 8000f4c:	45f0      	cmp	r8, lr
 8000f4e:	d29d      	bcs.n	8000e8c <__udivmoddi4+0x1e4>
 8000f50:	ebbe 0302 	subs.w	r3, lr, r2
 8000f54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f58:	3801      	subs	r0, #1
 8000f5a:	46e1      	mov	r9, ip
 8000f5c:	e796      	b.n	8000e8c <__udivmoddi4+0x1e4>
 8000f5e:	eba7 0909 	sub.w	r9, r7, r9
 8000f62:	4449      	add	r1, r9
 8000f64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6c:	fb09 f804 	mul.w	r8, r9, r4
 8000f70:	e7db      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f72:	4673      	mov	r3, lr
 8000f74:	e77f      	b.n	8000e76 <__udivmoddi4+0x1ce>
 8000f76:	4650      	mov	r0, sl
 8000f78:	e766      	b.n	8000e48 <__udivmoddi4+0x1a0>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e6fd      	b.n	8000d7a <__udivmoddi4+0xd2>
 8000f7e:	443b      	add	r3, r7
 8000f80:	3a02      	subs	r2, #2
 8000f82:	e733      	b.n	8000dec <__udivmoddi4+0x144>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	443b      	add	r3, r7
 8000f8a:	e71c      	b.n	8000dc6 <__udivmoddi4+0x11e>
 8000f8c:	4649      	mov	r1, r9
 8000f8e:	e79c      	b.n	8000eca <__udivmoddi4+0x222>
 8000f90:	eba1 0109 	sub.w	r1, r1, r9
 8000f94:	46c4      	mov	ip, r8
 8000f96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9a:	fb09 f804 	mul.w	r8, r9, r4
 8000f9e:	e7c4      	b.n	8000f2a <__udivmoddi4+0x282>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <calculateCRC>:
/* crc.c - Реализация расчёта CRC */

#include "crc.h"

// Расчёт CRC для буфера данных
uint8_t calculateCRC(const uint8_t* data, int length) {
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
    if (length < 2) return 0;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	dc01      	bgt.n	8000fb8 <calculateCRC+0x14>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e015      	b.n	8000fe4 <calculateCRC+0x40>
    uint8_t crc = data[1];
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	73fb      	strb	r3, [r7, #15]
    for (int i = 2; i < length; i++) {
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	e009      	b.n	8000fda <calculateCRC+0x36>
        crc ^= data[i];
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	4413      	add	r3, r2
 8000fcc:	781a      	ldrb	r2, [r3, #0]
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	4053      	eors	r3, r2
 8000fd2:	73fb      	strb	r3, [r7, #15]
    for (int i = 2; i < length; i++) {
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	dbf1      	blt.n	8000fc6 <calculateCRC+0x22>
    }
    return crc;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <EEPROM_WaitReady>:
#define EEPROM_STATE_ADDR 12
#define EEPROM_MODE_ADDR 14
#define EEPROM_MODE_SELECTED_ADDR 15

// Низкоуровневые функции чтения/записи (адаптированы из вашего тестового кода)
static HAL_StatusTypeDef EEPROM_WaitReady(void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
    uint32_t tick = HAL_GetTick();
 8000ff6:	f003 ff63 	bl	8004ec0 <HAL_GetTick>
 8000ffa:	6078      	str	r0, [r7, #4]
    while (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_I2C_ADDR, 1, 10) != HAL_OK) {
 8000ffc:	e00c      	b.n	8001018 <EEPROM_WaitReady+0x28>
        if (HAL_GetTick() - tick > 25) {
 8000ffe:	f003 ff5f 	bl	8004ec0 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b19      	cmp	r3, #25
 800100a:	d905      	bls.n	8001018 <EEPROM_WaitReady+0x28>
            logMessage(LOG_LEVEL_ERROR, "EEPROM Timeout");
 800100c:	4909      	ldr	r1, [pc, #36]	@ (8001034 <EEPROM_WaitReady+0x44>)
 800100e:	2001      	movs	r0, #1
 8001010:	f002 fb48 	bl	80036a4 <logMessage>
            return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e009      	b.n	800102c <EEPROM_WaitReady+0x3c>
    while (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_I2C_ADDR, 1, 10) != HAL_OK) {
 8001018:	230a      	movs	r3, #10
 800101a:	2201      	movs	r2, #1
 800101c:	21a0      	movs	r1, #160	@ 0xa0
 800101e:	4806      	ldr	r0, [pc, #24]	@ (8001038 <EEPROM_WaitReady+0x48>)
 8001020:	f005 fb7a 	bl	8006718 <HAL_I2C_IsDeviceReady>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1e9      	bne.n	8000ffe <EEPROM_WaitReady+0xe>
        }
    }
    return HAL_OK;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	0800fb90 	.word	0x0800fb90
 8001038:	20000240 	.word	0x20000240

0800103c <EEPROM_Write>:

static HAL_StatusTypeDef EEPROM_Write(uint16_t memAddr, const uint8_t* data, uint16_t len) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af04      	add	r7, sp, #16
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	80fb      	strh	r3, [r7, #6]
 8001048:	4613      	mov	r3, r2
 800104a:	80bb      	strh	r3, [r7, #4]
    if (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_I2C_ADDR, 2, 10) != HAL_OK) {
 800104c:	230a      	movs	r3, #10
 800104e:	2202      	movs	r2, #2
 8001050:	21a0      	movs	r1, #160	@ 0xa0
 8001052:	482a      	ldr	r0, [pc, #168]	@ (80010fc <EEPROM_Write+0xc0>)
 8001054:	f005 fb60 	bl	8006718 <HAL_I2C_IsDeviceReady>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d042      	beq.n	80010e4 <EEPROM_Write+0xa8>
        logMessage(LOG_LEVEL_ERROR, "EEPROM Not Found");
 800105e:	4928      	ldr	r1, [pc, #160]	@ (8001100 <EEPROM_Write+0xc4>)
 8001060:	2001      	movs	r0, #1
 8001062:	f002 fb1f 	bl	80036a4 <logMessage>
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e044      	b.n	80010f4 <EEPROM_Write+0xb8>
    }

    while (len) {
        uint16_t pageRemain = EEPROM_PAGE_SIZE - (memAddr % EEPROM_PAGE_SIZE);
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001070:	b29b      	uxth	r3, r3
 8001072:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001076:	81fb      	strh	r3, [r7, #14]
        uint16_t chunk = (len < pageRemain) ? len : pageRemain;
 8001078:	89fa      	ldrh	r2, [r7, #14]
 800107a:	88bb      	ldrh	r3, [r7, #4]
 800107c:	4293      	cmp	r3, r2
 800107e:	bf28      	it	cs
 8001080:	4613      	movcs	r3, r2
 8001082:	81bb      	strh	r3, [r7, #12]

        logMessage(LOG_LEVEL_DEBUG, "Writing chunk...");
 8001084:	491f      	ldr	r1, [pc, #124]	@ (8001104 <EEPROM_Write+0xc8>)
 8001086:	2000      	movs	r0, #0
 8001088:	f002 fb0c 	bl	80036a4 <logMessage>
        if (HAL_I2C_Mem_Write(&hi2c1, EEPROM_I2C_ADDR, memAddr, I2C_MEMADD_SIZE_16BIT,
 800108c:	88fa      	ldrh	r2, [r7, #6]
 800108e:	2364      	movs	r3, #100	@ 0x64
 8001090:	9302      	str	r3, [sp, #8]
 8001092:	89bb      	ldrh	r3, [r7, #12]
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2310      	movs	r3, #16
 800109c:	21a0      	movs	r1, #160	@ 0xa0
 800109e:	4817      	ldr	r0, [pc, #92]	@ (80010fc <EEPROM_Write+0xc0>)
 80010a0:	f005 f80e 	bl	80060c0 <HAL_I2C_Mem_Write>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d005      	beq.n	80010b6 <EEPROM_Write+0x7a>
                              (uint8_t*)data, chunk, 100) != HAL_OK) {
            logMessage(LOG_LEVEL_ERROR, "EEPROM Write Error");
 80010aa:	4917      	ldr	r1, [pc, #92]	@ (8001108 <EEPROM_Write+0xcc>)
 80010ac:	2001      	movs	r0, #1
 80010ae:	f002 faf9 	bl	80036a4 <logMessage>
            return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e01e      	b.n	80010f4 <EEPROM_Write+0xb8>
        }

        if (EEPROM_WaitReady() != HAL_OK) {
 80010b6:	f7ff ff9b 	bl	8000ff0 <EEPROM_WaitReady>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <EEPROM_Write+0x90>
            logMessage(LOG_LEVEL_ERROR, "EEPROM Wait Error");
 80010c0:	4912      	ldr	r1, [pc, #72]	@ (800110c <EEPROM_Write+0xd0>)
 80010c2:	2001      	movs	r0, #1
 80010c4:	f002 faee 	bl	80036a4 <logMessage>
            return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e013      	b.n	80010f4 <EEPROM_Write+0xb8>
        }

        memAddr += chunk;
 80010cc:	88fa      	ldrh	r2, [r7, #6]
 80010ce:	89bb      	ldrh	r3, [r7, #12]
 80010d0:	4413      	add	r3, r2
 80010d2:	80fb      	strh	r3, [r7, #6]
        data += chunk;
 80010d4:	89bb      	ldrh	r3, [r7, #12]
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	4413      	add	r3, r2
 80010da:	603b      	str	r3, [r7, #0]
        len -= chunk;
 80010dc:	88ba      	ldrh	r2, [r7, #4]
 80010de:	89bb      	ldrh	r3, [r7, #12]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	80bb      	strh	r3, [r7, #4]
    while (len) {
 80010e4:	88bb      	ldrh	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1bf      	bne.n	800106a <EEPROM_Write+0x2e>
    }
    logMessage(LOG_LEVEL_DEBUG, "EEPROM Write OK");
 80010ea:	4909      	ldr	r1, [pc, #36]	@ (8001110 <EEPROM_Write+0xd4>)
 80010ec:	2000      	movs	r0, #0
 80010ee:	f002 fad9 	bl	80036a4 <logMessage>
    return HAL_OK;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000240 	.word	0x20000240
 8001100:	0800fba0 	.word	0x0800fba0
 8001104:	0800fbb4 	.word	0x0800fbb4
 8001108:	0800fbc8 	.word	0x0800fbc8
 800110c:	0800fbdc 	.word	0x0800fbdc
 8001110:	0800fbf0 	.word	0x0800fbf0

08001114 <EEPROM_Read>:

static HAL_StatusTypeDef EEPROM_Read(uint16_t memAddr, uint8_t* data, uint16_t len) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af04      	add	r7, sp, #16
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	80fb      	strh	r3, [r7, #6]
 8001120:	4613      	mov	r3, r2
 8001122:	80bb      	strh	r3, [r7, #4]
    if (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_I2C_ADDR, 2, 10) != HAL_OK) {
 8001124:	230a      	movs	r3, #10
 8001126:	2202      	movs	r2, #2
 8001128:	21a0      	movs	r1, #160	@ 0xa0
 800112a:	4816      	ldr	r0, [pc, #88]	@ (8001184 <EEPROM_Read+0x70>)
 800112c:	f005 faf4 	bl	8006718 <HAL_I2C_IsDeviceReady>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <EEPROM_Read+0x2e>
        logMessage(LOG_LEVEL_ERROR, "EEPROM Not Found");
 8001136:	4914      	ldr	r1, [pc, #80]	@ (8001188 <EEPROM_Read+0x74>)
 8001138:	2001      	movs	r0, #1
 800113a:	f002 fab3 	bl	80036a4 <logMessage>
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e01b      	b.n	800117a <EEPROM_Read+0x66>
    }

    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_I2C_ADDR, memAddr,
 8001142:	88fa      	ldrh	r2, [r7, #6]
 8001144:	2364      	movs	r3, #100	@ 0x64
 8001146:	9302      	str	r3, [sp, #8]
 8001148:	88bb      	ldrh	r3, [r7, #4]
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2310      	movs	r3, #16
 8001152:	21a0      	movs	r1, #160	@ 0xa0
 8001154:	480b      	ldr	r0, [pc, #44]	@ (8001184 <EEPROM_Read+0x70>)
 8001156:	f005 f8ad 	bl	80062b4 <HAL_I2C_Mem_Read>
 800115a:	4603      	mov	r3, r0
 800115c:	73fb      	strb	r3, [r7, #15]
                                                I2C_MEMADD_SIZE_16BIT, data, len, 100);
    if (status != HAL_OK) {
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <EEPROM_Read+0x5c>
        logMessage(LOG_LEVEL_ERROR, "EEPROM Read Error");
 8001164:	4909      	ldr	r1, [pc, #36]	@ (800118c <EEPROM_Read+0x78>)
 8001166:	2001      	movs	r0, #1
 8001168:	f002 fa9c 	bl	80036a4 <logMessage>
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e004      	b.n	800117a <EEPROM_Read+0x66>
    }
    logMessage(LOG_LEVEL_DEBUG, "EEPROM Read OK");
 8001170:	4907      	ldr	r1, [pc, #28]	@ (8001190 <EEPROM_Read+0x7c>)
 8001172:	2000      	movs	r0, #0
 8001174:	f002 fa96 	bl	80036a4 <logMessage>
    return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000240 	.word	0x20000240
 8001188:	0800fba0 	.word	0x0800fba0
 800118c:	0800fc00 	.word	0x0800fc00
 8001190:	0800fc14 	.word	0x0800fc14

08001194 <handleEEPROMRequest>:

// Обработчик запросов для задачи FreeRTOS
void handleEEPROMRequest(EEPROMRequest* req) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	@ 0x30
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    if (req->isWrite) {
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d055      	beq.n	8001250 <handleEEPROMRequest+0xbc>
        if (req->memAddr == EEPROM_PRICE_ADDR) {
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	885b      	ldrh	r3, [r3, #2]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d113      	bne.n	80011d4 <handleEEPROMRequest+0x40>
            // Запись цены
            uint8_t buffer[2];
            buffer[0] = req->data.price & 0xFF;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	889b      	ldrh	r3, [r3, #4]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            buffer[1] = (req->data.price >> 8) & 0xFF;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	889b      	ldrh	r3, [r3, #4]
 80011ba:	0a1b      	lsrs	r3, r3, #8
 80011bc:	b29b      	uxth	r3, r3
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            EEPROM_Write(EEPROM_PRICE_ADDR, buffer, 2);
 80011c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c8:	2202      	movs	r2, #2
 80011ca:	4619      	mov	r1, r3
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff ff35 	bl	800103c <EEPROM_Write>
                *req->modeOut = (FuelMode)buffer[9];
                *req->modeSelectedOut = (bool)buffer[10];
            }
        }
    }
}
 80011d2:	e08d      	b.n	80012f0 <handleEEPROMRequest+0x15c>
            buffer[0] = req->data.transaction.liters & 0xFF;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	773b      	strb	r3, [r7, #28]
            buffer[1] = (req->data.transaction.liters >> 8) & 0xFF;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	777b      	strb	r3, [r7, #29]
            buffer[2] = (req->data.transaction.liters >> 16) & 0xFF;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	0c1b      	lsrs	r3, r3, #16
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	77bb      	strb	r3, [r7, #30]
            buffer[3] = (req->data.transaction.liters >> 24) & 0xFF;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	0e1b      	lsrs	r3, r3, #24
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	77fb      	strb	r3, [r7, #31]
            buffer[4] = req->data.transaction.price & 0xFF;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f887 3020 	strb.w	r3, [r7, #32]
            buffer[5] = (req->data.transaction.price >> 8) & 0xFF;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            buffer[6] = (req->data.transaction.price >> 16) & 0xFF;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	0c1b      	lsrs	r3, r3, #16
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            buffer[7] = (req->data.transaction.price >> 24) & 0xFF;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	0e1b      	lsrs	r3, r3, #24
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            buffer[8] = (uint8_t)req->data.transaction.state;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	7b1b      	ldrb	r3, [r3, #12]
 800122c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            buffer[9] = (uint8_t)req->data.transaction.mode;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	7b5b      	ldrb	r3, [r3, #13]
 8001234:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            buffer[10] = (uint8_t)req->data.transaction.modeSelected;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7b9b      	ldrb	r3, [r3, #14]
 800123c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            EEPROM_Write(EEPROM_LITERS_ADDR, buffer, 11);
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	220b      	movs	r2, #11
 8001246:	4619      	mov	r1, r3
 8001248:	2004      	movs	r0, #4
 800124a:	f7ff fef7 	bl	800103c <EEPROM_Write>
}
 800124e:	e04f      	b.n	80012f0 <handleEEPROMRequest+0x15c>
        if (req->memAddr == EEPROM_PRICE_ADDR) {
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	885b      	ldrh	r3, [r3, #2]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d116      	bne.n	8001286 <handleEEPROMRequest+0xf2>
            if (EEPROM_Read(EEPROM_PRICE_ADDR, buffer, 2) == HAL_OK) {
 8001258:	f107 0318 	add.w	r3, r7, #24
 800125c:	2202      	movs	r2, #2
 800125e:	4619      	mov	r1, r3
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff ff57 	bl	8001114 <EEPROM_Read>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d141      	bne.n	80012f0 <handleEEPROMRequest+0x15c>
                *req->priceOutSimple = (buffer[1] << 8) | buffer[0];
 800126c:	7e7b      	ldrb	r3, [r7, #25]
 800126e:	b21b      	sxth	r3, r3
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b21a      	sxth	r2, r3
 8001274:	7e3b      	ldrb	r3, [r7, #24]
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b21a      	sxth	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001280:	b292      	uxth	r2, r2
 8001282:	801a      	strh	r2, [r3, #0]
}
 8001284:	e034      	b.n	80012f0 <handleEEPROMRequest+0x15c>
            if (EEPROM_Read(EEPROM_LITERS_ADDR, buffer, 11) == HAL_OK) {
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	220b      	movs	r2, #11
 800128c:	4619      	mov	r1, r3
 800128e:	2004      	movs	r0, #4
 8001290:	f7ff ff40 	bl	8001114 <EEPROM_Read>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d12a      	bne.n	80012f0 <handleEEPROMRequest+0x15c>
                *req->litersOut = (buffer[3] << 24) | (buffer[2] << 16) | (buffer[1] << 8) | buffer[0];
 800129a:	7afb      	ldrb	r3, [r7, #11]
 800129c:	061a      	lsls	r2, r3, #24
 800129e:	7abb      	ldrb	r3, [r7, #10]
 80012a0:	041b      	lsls	r3, r3, #16
 80012a2:	431a      	orrs	r2, r3
 80012a4:	7a7b      	ldrb	r3, [r7, #9]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	4313      	orrs	r3, r2
 80012aa:	7a3a      	ldrb	r2, [r7, #8]
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	601a      	str	r2, [r3, #0]
                *req->priceOut = (buffer[7] << 24) | (buffer[6] << 16) | (buffer[5] << 8) | buffer[4];
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	061a      	lsls	r2, r3, #24
 80012b8:	7bbb      	ldrb	r3, [r7, #14]
 80012ba:	041b      	lsls	r3, r3, #16
 80012bc:	431a      	orrs	r2, r3
 80012be:	7b7b      	ldrb	r3, [r7, #13]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	4313      	orrs	r3, r2
 80012c4:	7b3a      	ldrb	r2, [r7, #12]
 80012c6:	431a      	orrs	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	601a      	str	r2, [r3, #0]
                *req->stateOut = (FSMState)buffer[8];
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	7c3a      	ldrb	r2, [r7, #16]
 80012d4:	701a      	strb	r2, [r3, #0]
                *req->modeOut = (FuelMode)buffer[9];
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	7c7a      	ldrb	r2, [r7, #17]
 80012dc:	701a      	strb	r2, [r3, #0]
                *req->modeSelectedOut = (bool)buffer[10];
 80012de:	7cba      	ldrb	r2, [r7, #18]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	bf14      	ite	ne
 80012e8:	2201      	movne	r2, #1
 80012ea:	2200      	moveq	r2, #0
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	701a      	strb	r2, [r3, #0]
}
 80012f0:	bf00      	nop
 80012f2:	3730      	adds	r7, #48	@ 0x30
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <writePriceToEEPROM>:

// Функции для вызова из других модулей
void writePriceToEEPROM(uint16_t price) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	@ 0x30
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
    extern QueueHandle_t eepromQueue;
    EEPROMRequest req = {
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	2228      	movs	r2, #40	@ 0x28
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f00c fb33 	bl	800d976 <memset>
 8001310:	2301      	movs	r3, #1
 8001312:	723b      	strb	r3, [r7, #8]
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	81bb      	strh	r3, [r7, #12]
        .isWrite = true,
        .memAddr = EEPROM_PRICE_ADDR,
        .data.price = price
    };
    xQueueSend(eepromQueue, &req, portMAX_DELAY);
 8001318:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <writePriceToEEPROM+0x3c>)
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	f107 0108 	add.w	r1, r7, #8
 8001320:	2300      	movs	r3, #0
 8001322:	f04f 32ff 	mov.w	r2, #4294967295
 8001326:	f008 fe41 	bl	8009fac <xQueueGenericSend>
}
 800132a:	bf00      	nop
 800132c:	3730      	adds	r7, #48	@ 0x30
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000388 	.word	0x20000388

08001338 <readPriceFromEEPROM>:

uint16_t readPriceFromEEPROM(void) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	@ 0x30
 800133c:	af00      	add	r7, sp, #0
    extern QueueHandle_t eepromQueue;
    uint16_t price = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    EEPROMRequest req = {
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2228      	movs	r2, #40	@ 0x28
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f00c fb14 	bl	800d976 <memset>
 800134e:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8001352:	62bb      	str	r3, [r7, #40]	@ 0x28
        .isWrite = false,
        .memAddr = EEPROM_PRICE_ADDR,
        .priceOutSimple = &price
    };
    xQueueSend(eepromQueue, &req, portMAX_DELAY);
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <readPriceFromEEPROM+0x50>)
 8001356:	6818      	ldr	r0, [r3, #0]
 8001358:	1d39      	adds	r1, r7, #4
 800135a:	2300      	movs	r3, #0
 800135c:	f04f 32ff 	mov.w	r2, #4294967295
 8001360:	f008 fe24 	bl	8009fac <xQueueGenericSend>
    // Ждём выполнения операции (блокирующий вызов)
    while (uxQueueMessagesWaiting(eepromQueue) > 0) {
 8001364:	e002      	b.n	800136c <readPriceFromEEPROM+0x34>
        vTaskDelay(1 / portTICK_PERIOD_MS);
 8001366:	2001      	movs	r0, #1
 8001368:	f009 fd16 	bl	800ad98 <vTaskDelay>
    while (uxQueueMessagesWaiting(eepromQueue) > 0) {
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <readPriceFromEEPROM+0x50>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f009 f9ad 	bl	800a6d0 <uxQueueMessagesWaiting>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f4      	bne.n	8001366 <readPriceFromEEPROM+0x2e>
    }
    return price;
 800137c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
}
 800137e:	4618      	mov	r0, r3
 8001380:	3730      	adds	r7, #48	@ 0x30
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000388 	.word	0x20000388

0800138c <saveTransactionState>:

void saveTransactionState(uint32_t liters, uint32_t price, FSMState state, FuelMode mode, bool modeSelected) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b08e      	sub	sp, #56	@ 0x38
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	4611      	mov	r1, r2
 8001398:	461a      	mov	r2, r3
 800139a:	460b      	mov	r3, r1
 800139c:	71fb      	strb	r3, [r7, #7]
 800139e:	4613      	mov	r3, r2
 80013a0:	71bb      	strb	r3, [r7, #6]
    extern QueueHandle_t eepromQueue;
    EEPROMRequest req = {
 80013a2:	f107 0310 	add.w	r3, r7, #16
 80013a6:	2228      	movs	r2, #40	@ 0x28
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f00c fae3 	bl	800d976 <memset>
 80013b0:	2301      	movs	r3, #1
 80013b2:	743b      	strb	r3, [r7, #16]
 80013b4:	2304      	movs	r3, #4
 80013b6:	827b      	strh	r3, [r7, #18]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	61bb      	str	r3, [r7, #24]
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	773b      	strb	r3, [r7, #28]
 80013c4:	79bb      	ldrb	r3, [r7, #6]
 80013c6:	777b      	strb	r3, [r7, #29]
 80013c8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80013cc:	77bb      	strb	r3, [r7, #30]
        .data.transaction.price = price,
        .data.transaction.state = state,
        .data.transaction.mode = mode,
        .data.transaction.modeSelected = modeSelected
    };
    xQueueSend(eepromQueue, &req, portMAX_DELAY);
 80013ce:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <saveTransactionState+0x5c>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	f107 0110 	add.w	r1, r7, #16
 80013d6:	2300      	movs	r3, #0
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	f008 fde6 	bl	8009fac <xQueueGenericSend>
}
 80013e0:	bf00      	nop
 80013e2:	3738      	adds	r7, #56	@ 0x38
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000388 	.word	0x20000388

080013ec <restoreTransactionState>:

bool restoreTransactionState(uint32_t* liters, uint32_t* price, FSMState* state, FuelMode* mode, bool* modeSelected) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	@ 0x38
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
 80013f8:	603b      	str	r3, [r7, #0]
    extern QueueHandle_t eepromQueue;
    EEPROMRequest req = {
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	2228      	movs	r2, #40	@ 0x28
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f00c fab7 	bl	800d976 <memset>
 8001408:	2304      	movs	r3, #4
 800140a:	827b      	strh	r3, [r7, #18]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	623b      	str	r3, [r7, #32]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800141c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800141e:	633b      	str	r3, [r7, #48]	@ 0x30
        .priceOut = price,
        .stateOut = state,
        .modeOut = mode,
        .modeSelectedOut = modeSelected
    };
    xQueueSend(eepromQueue, &req, portMAX_DELAY);
 8001420:	4b16      	ldr	r3, [pc, #88]	@ (800147c <restoreTransactionState+0x90>)
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	f107 0110 	add.w	r1, r7, #16
 8001428:	2300      	movs	r3, #0
 800142a:	f04f 32ff 	mov.w	r2, #4294967295
 800142e:	f008 fdbd 	bl	8009fac <xQueueGenericSend>
    // Ждём выполнения операции (блокирующий вызов)
    while (uxQueueMessagesWaiting(eepromQueue) > 0) {
 8001432:	e002      	b.n	800143a <restoreTransactionState+0x4e>
        vTaskDelay(1 / portTICK_PERIOD_MS);
 8001434:	2001      	movs	r0, #1
 8001436:	f009 fcaf 	bl	800ad98 <vTaskDelay>
    while (uxQueueMessagesWaiting(eepromQueue) > 0) {
 800143a:	4b10      	ldr	r3, [pc, #64]	@ (800147c <restoreTransactionState+0x90>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f009 f946 	bl	800a6d0 <uxQueueMessagesWaiting>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f4      	bne.n	8001434 <restoreTransactionState+0x48>
    }
    return (*liters != 0xFFFFFFFF && *price != 0xFFFFFFFF && *(uint8_t*)state != 0xFF);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001452:	d00a      	beq.n	800146a <restoreTransactionState+0x7e>
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800145c:	d005      	beq.n	800146a <restoreTransactionState+0x7e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2bff      	cmp	r3, #255	@ 0xff
 8001464:	d001      	beq.n	800146a <restoreTransactionState+0x7e>
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <restoreTransactionState+0x80>
 800146a:	2300      	movs	r3, #0
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	b2db      	uxtb	r3, r3
}
 8001472:	4618      	mov	r0, r3
 8001474:	3738      	adds	r7, #56	@ 0x38
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000388 	.word	0x20000388

08001480 <assembleFrame>:
#include "frame.h"
#include "crc.h"
#include "config.h"

// Формирование кадра
void assembleFrame(const uint8_t* slaveAddress, char command, const uint8_t* payload, int payloadLength, uint8_t* frameBuffer, int* frameLength) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	460b      	mov	r3, r1
 800148e:	72fb      	strb	r3, [r7, #11]
    if (payloadLength > MAX_FRAME_PAYLOAD) return;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	2b10      	cmp	r3, #16
 8001494:	dc4b      	bgt.n	800152e <assembleFrame+0xae>
    int index = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    frameBuffer[index++] = 0x02; // STX
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	61fa      	str	r2, [r7, #28]
 80014a0:	461a      	mov	r2, r3
 80014a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a4:	4413      	add	r3, r2
 80014a6:	2202      	movs	r2, #2
 80014a8:	701a      	strb	r2, [r3, #0]
    frameBuffer[index++] = slaveAddress[0];
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	61fa      	str	r2, [r7, #28]
 80014b0:	461a      	mov	r2, r3
 80014b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b4:	4413      	add	r3, r2
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	701a      	strb	r2, [r3, #0]
    frameBuffer[index++] = slaveAddress[1];
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	1c59      	adds	r1, r3, #1
 80014c4:	61f9      	str	r1, [r7, #28]
 80014c6:	4619      	mov	r1, r3
 80014c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ca:	440b      	add	r3, r1
 80014cc:	7812      	ldrb	r2, [r2, #0]
 80014ce:	701a      	strb	r2, [r3, #0]
    frameBuffer[index++] = (uint8_t)command;
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	61fa      	str	r2, [r7, #28]
 80014d6:	461a      	mov	r2, r3
 80014d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014da:	4413      	add	r3, r2
 80014dc:	7afa      	ldrb	r2, [r7, #11]
 80014de:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < payloadLength; i++) {
 80014e0:	2300      	movs	r3, #0
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	e00d      	b.n	8001502 <assembleFrame+0x82>
        frameBuffer[index++] = payload[i];
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	441a      	add	r2, r3
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	1c59      	adds	r1, r3, #1
 80014f0:	61f9      	str	r1, [r7, #28]
 80014f2:	4619      	mov	r1, r3
 80014f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f6:	440b      	add	r3, r1
 80014f8:	7812      	ldrb	r2, [r2, #0]
 80014fa:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < payloadLength; i++) {
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	3301      	adds	r3, #1
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	dbed      	blt.n	80014e6 <assembleFrame+0x66>
    }
    uint8_t crc = calculateCRC(frameBuffer, index);
 800150a:	69f9      	ldr	r1, [r7, #28]
 800150c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800150e:	f7ff fd49 	bl	8000fa4 <calculateCRC>
 8001512:	4603      	mov	r3, r0
 8001514:	75fb      	strb	r3, [r7, #23]
    frameBuffer[index++] = crc;
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	61fa      	str	r2, [r7, #28]
 800151c:	461a      	mov	r2, r3
 800151e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001520:	4413      	add	r3, r2
 8001522:	7dfa      	ldrb	r2, [r7, #23]
 8001524:	701a      	strb	r2, [r3, #0]
    *frameLength = index;
 8001526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	e000      	b.n	8001530 <assembleFrame+0xb0>
    if (payloadLength > MAX_FRAME_PAYLOAD) return;
 800152e:	bf00      	nop
}
 8001530:	3720      	adds	r7, #32
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <formatLiters>:
void Error_Handler(void);

static SemaphoreHandle_t logMutex; // Мьютекс для синхронизации логов

// Вспомогательные функции форматирования
static void formatLiters(uint32_t dl, char* dst, size_t dstLen) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af02      	add	r7, sp, #8
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
    uint32_t intPart = dl / 100;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <formatLiters+0x44>)
 8001548:	fba2 2303 	umull	r2, r3, r2, r3
 800154c:	095b      	lsrs	r3, r3, #5
 800154e:	617b      	str	r3, [r7, #20]
    uint32_t fracPart = dl % 100;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <formatLiters+0x44>)
 8001554:	fba2 1203 	umull	r1, r2, r2, r3
 8001558:	0952      	lsrs	r2, r2, #5
 800155a:	2164      	movs	r1, #100	@ 0x64
 800155c:	fb01 f202 	mul.w	r2, r1, r2
 8001560:	1a9b      	subs	r3, r3, r2
 8001562:	613b      	str	r3, [r7, #16]
    snprintf(dst, dstLen, "%lu.%02lu", (unsigned long)intPart, (unsigned long)fracPart);
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	4a05      	ldr	r2, [pc, #20]	@ (8001580 <formatLiters+0x48>)
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	68b8      	ldr	r0, [r7, #8]
 8001570:	f00c f988 	bl	800d884 <sniprintf>
}
 8001574:	bf00      	nop
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	51eb851f 	.word	0x51eb851f
 8001580:	0800fc24 	.word	0x0800fc24

08001584 <displayFuelMode>:

static void displayFuelMode(FuelMode mode) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	@ 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
    char msg[32];
    switch (mode) {
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d016      	beq.n	80015c2 <displayFuelMode+0x3e>
 8001594:	2b02      	cmp	r3, #2
 8001596:	dc1c      	bgt.n	80015d2 <displayFuelMode+0x4e>
 8001598:	2b00      	cmp	r3, #0
 800159a:	d002      	beq.n	80015a2 <displayFuelMode+0x1e>
 800159c:	2b01      	cmp	r3, #1
 800159e:	d008      	beq.n	80015b2 <displayFuelMode+0x2e>
 80015a0:	e017      	b.n	80015d2 <displayFuelMode+0x4e>
        case FUEL_BY_VOLUME:    snprintf(msg, sizeof(msg), "Mode: Volume");     break;
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	4a0f      	ldr	r2, [pc, #60]	@ (80015e4 <displayFuelMode+0x60>)
 80015a8:	2120      	movs	r1, #32
 80015aa:	4618      	mov	r0, r3
 80015ac:	f00c f96a 	bl	800d884 <sniprintf>
 80015b0:	e00f      	b.n	80015d2 <displayFuelMode+0x4e>
        case FUEL_BY_PRICE:     snprintf(msg, sizeof(msg), "Mode: Price");      break;
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	4a0c      	ldr	r2, [pc, #48]	@ (80015e8 <displayFuelMode+0x64>)
 80015b8:	2120      	movs	r1, #32
 80015ba:	4618      	mov	r0, r3
 80015bc:	f00c f962 	bl	800d884 <sniprintf>
 80015c0:	e007      	b.n	80015d2 <displayFuelMode+0x4e>
        case FUEL_BY_FULL_TANK: snprintf(msg, sizeof(msg), "Mode: Full Tank");  break;
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	4a09      	ldr	r2, [pc, #36]	@ (80015ec <displayFuelMode+0x68>)
 80015c8:	2120      	movs	r1, #32
 80015ca:	4618      	mov	r0, r3
 80015cc:	f00c f95a 	bl	800d884 <sniprintf>
 80015d0:	bf00      	nop
    }
    displayMessage(msg);
 80015d2:	f107 0308 	add.w	r3, r7, #8
 80015d6:	4618      	mov	r0, r3
 80015d8:	f002 fd4a 	bl	8004070 <displayMessage>
}
 80015dc:	bf00      	nop
 80015de:	3728      	adds	r7, #40	@ 0x28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	0800fc30 	.word	0x0800fc30
 80015e8:	0800fc40 	.word	0x0800fc40
 80015ec:	0800fc4c 	.word	0x0800fc4c

080015f0 <displayTransaction>:

static void displayTransaction(uint32_t liters, uint32_t price, const char* status, bool priceScaled) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b096      	sub	sp, #88	@ 0x58
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	70fb      	strb	r3, [r7, #3]
    char litersBuf[12];
    formatLiters(liters, litersBuf, sizeof(litersBuf));
 80015fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001602:	220c      	movs	r2, #12
 8001604:	4619      	mov	r1, r3
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f7ff ff96 	bl	8001538 <formatLiters>
    char displayStr[48];
    uint32_t displayPrice = priceScaled ? price * 10 : price;
 800160c:	78fb      	ldrb	r3, [r7, #3]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <displayTransaction+0x2e>
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	e000      	b.n	8001620 <displayTransaction+0x30>
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	64fb      	str	r3, [r7, #76]	@ 0x4c
    snprintf(displayStr, sizeof(displayStr), "%s\nL: %s\nP: %lu", status, litersBuf, (unsigned long)displayPrice);
 8001622:	f107 0010 	add.w	r0, r7, #16
 8001626:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a06      	ldr	r2, [pc, #24]	@ (800164c <displayTransaction+0x5c>)
 8001634:	2130      	movs	r1, #48	@ 0x30
 8001636:	f00c f925 	bl	800d884 <sniprintf>
    displayMessage(displayStr);
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	4618      	mov	r0, r3
 8001640:	f002 fd16 	bl	8004070 <displayMessage>
}
 8001644:	bf00      	nop
 8001646:	3750      	adds	r7, #80	@ 0x50
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	0800fc5c 	.word	0x0800fc5c

08001650 <handleResponse>:

// Обработка ответов ТРК
static bool handleResponse(uint8_t* buffer, int length, int expected, FSMContext* ctx) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	603b      	str	r3, [r7, #0]
    if (length >= expected) {
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	429a      	cmp	r2, r3
 8001664:	db07      	blt.n	8001676 <handleResponse+0x26>
        ctx->waitingForResponse = false;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2200      	movs	r2, #0
 800166a:	745a      	strb	r2, [r3, #17]
        ctx->errorCount = 0;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
        return true;
 8001672:	2301      	movs	r3, #1
 8001674:	e017      	b.n	80016a6 <handleResponse+0x56>
    }
    ctx->waitingForResponse = false;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	2200      	movs	r2, #0
 800167a:	745a      	strb	r2, [r3, #17]
    ctx->errorCount++;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	615a      	str	r2, [r3, #20]
    if (ctx->errorCount >= MAX_ERROR_COUNT) {
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	2b04      	cmp	r3, #4
 800168c:	dd0a      	ble.n	80016a4 <handleResponse+0x54>
        ctx->state = FSM_STATE_ERROR;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	2207      	movs	r2, #7
 8001692:	701a      	strb	r2, [r3, #0]
        ctx->stateEntryTime = getCurrentMillis();
 8001694:	f002 fa1e 	bl	8003ad4 <getCurrentMillis>
 8001698:	4602      	mov	r2, r0
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	63da      	str	r2, [r3, #60]	@ 0x3c
        displayMessage("Pump Error");
 800169e:	4804      	ldr	r0, [pc, #16]	@ (80016b0 <handleResponse+0x60>)
 80016a0:	f002 fce6 	bl	8004070 <displayMessage>
    }
    return false;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	0800fc6c 	.word	0x0800fc6c

080016b4 <isValidStatus>:
    {{'7', '1'}, FSM_STATE_TRANSACTION_PAUSED, false, NULL},
    {{'8', '1'}, FSM_STATE_TRANSACTION_END, true, NULL},
    {{'9', '0'}, FSM_STATE_IDLE, true, NULL}
};

static bool isValidStatus(uint8_t* buffer) {
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < sizeof(statusActions) / sizeof(statusActions[0]); i++) {
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	e017      	b.n	80016f2 <isValidStatus+0x3e>
        if (buffer[4] == statusActions[i].code[0] && buffer[5] == statusActions[i].code[1]) {
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3304      	adds	r3, #4
 80016c6:	781a      	ldrb	r2, [r3, #0]
 80016c8:	490f      	ldr	r1, [pc, #60]	@ (8001708 <isValidStatus+0x54>)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d10b      	bne.n	80016ec <isValidStatus+0x38>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3305      	adds	r3, #5
 80016d8:	781a      	ldrb	r2, [r3, #0]
 80016da:	490b      	ldr	r1, [pc, #44]	@ (8001708 <isValidStatus+0x54>)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	440b      	add	r3, r1
 80016e2:	785b      	ldrb	r3, [r3, #1]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d101      	bne.n	80016ec <isValidStatus+0x38>
            return true;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e006      	b.n	80016fa <isValidStatus+0x46>
    for (size_t i = 0; i < sizeof(statusActions) / sizeof(statusActions[0]); i++) {
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	3301      	adds	r3, #1
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2b07      	cmp	r3, #7
 80016f6:	d9e4      	bls.n	80016c2 <isValidStatus+0xe>
        }
    }
    return false;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	08010254 	.word	0x08010254

0800170c <updateCheckStatus>:

// Обновление состояний FSM
static void updateCheckStatus(FSMContext* ctx) {
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b08f      	sub	sp, #60	@ 0x3c
 8001710:	af02      	add	r7, sp, #8
 8001712:	6078      	str	r0, [r7, #4]
    unsigned long currentMillis = getCurrentMillis();
 8001714:	f002 f9de 	bl	8003ad4 <getCurrentMillis>
 8001718:	62f8      	str	r0, [r7, #44]	@ 0x2c
    static unsigned long lastResponseTime = 0;
    static unsigned long nozzleUpStartTime = 0;
    if (currentMillis - lastResponseTime < DELAY_AFTER_RESPONSE) return;
 800171a:	4b82      	ldr	r3, [pc, #520]	@ (8001924 <updateCheckStatus+0x218>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	f240 80f9 	bls.w	800191a <updateCheckStatus+0x20e>
    lastResponseTime = currentMillis;
 8001728:	4a7e      	ldr	r2, [pc, #504]	@ (8001924 <updateCheckStatus+0x218>)
 800172a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800172c:	6013      	str	r3, [r2, #0]

    if (!ctx->waitingForResponse) {
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	7c5b      	ldrb	r3, [r3, #17]
 8001732:	f083 0301 	eor.w	r3, r3, #1
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <updateCheckStatus+0x3c>
        rs422SendStatus();
 800173c:	f002 fcf0 	bl	8004120 <rs422SendStatus>
        ctx->waitingForResponse = true;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	745a      	strb	r2, [r3, #17]
 8001746:	e0e9      	b.n	800191c <updateCheckStatus+0x210>
    } else {
        uint8_t respBuffer[32] = {0};
 8001748:	f107 0308 	add.w	r3, r7, #8
 800174c:	2220      	movs	r2, #32
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f00c f910 	bl	800d976 <memset>
        int respLength = rs422WaitForResponse(respBuffer, STATUS_RESPONSE_LENGTH, 'S');
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	2253      	movs	r2, #83	@ 0x53
 800175c:	2107      	movs	r1, #7
 800175e:	4618      	mov	r0, r3
 8001760:	f002 fee6 	bl	8004530 <rs422WaitForResponse>
 8001764:	62b8      	str	r0, [r7, #40]	@ 0x28
        if (handleResponse(respBuffer, respLength, STATUS_RESPONSE_LENGTH, ctx)) {
 8001766:	f107 0008 	add.w	r0, r7, #8
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2207      	movs	r2, #7
 800176e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001770:	f7ff ff6e 	bl	8001650 <handleResponse>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80d0 	beq.w	800191c <updateCheckStatus+0x210>
            if (respBuffer[4] == '9' && respBuffer[5] == '0') {
 800177c:	7b3b      	ldrb	r3, [r7, #12]
 800177e:	2b39      	cmp	r3, #57	@ 0x39
 8001780:	d10b      	bne.n	800179a <updateCheckStatus+0x8e>
 8001782:	7b7b      	ldrb	r3, [r7, #13]
 8001784:	2b30      	cmp	r3, #48	@ 0x30
 8001786:	d108      	bne.n	800179a <updateCheckStatus+0x8e>
                rs422SendNozzleOff();
 8001788:	f002 fda8 	bl	80042dc <rs422SendNozzleOff>
                ctx->waitingForResponse = true;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	745a      	strb	r2, [r3, #17]
                nozzleUpStartTime = 0;
 8001792:	4b65      	ldr	r3, [pc, #404]	@ (8001928 <updateCheckStatus+0x21c>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	e0c0      	b.n	800191c <updateCheckStatus+0x210>
            } else if (respBuffer[4] == '1' && respBuffer[5] == '0') {
 800179a:	7b3b      	ldrb	r3, [r7, #12]
 800179c:	2b31      	cmp	r3, #49	@ 0x31
 800179e:	d11e      	bne.n	80017de <updateCheckStatus+0xd2>
 80017a0:	7b7b      	ldrb	r3, [r7, #13]
 80017a2:	2b30      	cmp	r3, #48	@ 0x30
 80017a4:	d11b      	bne.n	80017de <updateCheckStatus+0xd2>
                ctx->state = FSM_STATE_IDLE;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017b0:	63da      	str	r2, [r3, #60]	@ 0x3c
                ctx->nozzleUpWarning = false;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                if (ctx->modeSelected) {
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <updateCheckStatus+0xc4>
                    displayFuelMode(ctx->fuelMode);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	785b      	ldrb	r3, [r3, #1]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fedb 	bl	8001584 <displayFuelMode>
 80017ce:	e002      	b.n	80017d6 <updateCheckStatus+0xca>
                } else {
                    displayMessage("Please select mode");
 80017d0:	4856      	ldr	r0, [pc, #344]	@ (800192c <updateCheckStatus+0x220>)
 80017d2:	f002 fc4d 	bl	8004070 <displayMessage>
                }
                nozzleUpStartTime = 0;
 80017d6:	4b54      	ldr	r3, [pc, #336]	@ (8001928 <updateCheckStatus+0x21c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	e09e      	b.n	800191c <updateCheckStatus+0x210>
            } else if (respBuffer[4] == '2' && respBuffer[5] == '1') {
 80017de:	7b3b      	ldrb	r3, [r7, #12]
 80017e0:	2b32      	cmp	r3, #50	@ 0x32
 80017e2:	d128      	bne.n	8001836 <updateCheckStatus+0x12a>
 80017e4:	7b7b      	ldrb	r3, [r7, #13]
 80017e6:	2b31      	cmp	r3, #49	@ 0x31
 80017e8:	d125      	bne.n	8001836 <updateCheckStatus+0x12a>
                rs422SendNozzleOff();
 80017ea:	f002 fd77 	bl	80042dc <rs422SendNozzleOff>
                ctx->waitingForResponse = true;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	745a      	strb	r2, [r3, #17]
                ctx->nozzleUpWarning = true;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                if (nozzleUpStartTime == 0) {
 80017fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001928 <updateCheckStatus+0x21c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d102      	bne.n	800180a <updateCheckStatus+0xfe>
                    nozzleUpStartTime = currentMillis;
 8001804:	4a48      	ldr	r2, [pc, #288]	@ (8001928 <updateCheckStatus+0x21c>)
 8001806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001808:	6013      	str	r3, [r2, #0]
                }
                if (currentMillis - nozzleUpStartTime > 60000) {
 800180a:	4b47      	ldr	r3, [pc, #284]	@ (8001928 <updateCheckStatus+0x21c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001816:	4293      	cmp	r3, r2
 8001818:	d909      	bls.n	800182e <updateCheckStatus+0x122>
                    ctx->state = FSM_STATE_ERROR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2207      	movs	r2, #7
 800181e:	701a      	strb	r2, [r3, #0]
                    ctx->stateEntryTime = currentMillis;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001824:	63da      	str	r2, [r3, #60]	@ 0x3c
                    displayMessage("Nozzle up long! Check");
 8001826:	4842      	ldr	r0, [pc, #264]	@ (8001930 <updateCheckStatus+0x224>)
 8001828:	f002 fc22 	bl	8004070 <displayMessage>
                if (currentMillis - nozzleUpStartTime > 60000) {
 800182c:	e076      	b.n	800191c <updateCheckStatus+0x210>
                } else {
                    displayMessage("Nozzle up! Hang up");
 800182e:	4841      	ldr	r0, [pc, #260]	@ (8001934 <updateCheckStatus+0x228>)
 8001830:	f002 fc1e 	bl	8004070 <displayMessage>
                if (currentMillis - nozzleUpStartTime > 60000) {
 8001834:	e072      	b.n	800191c <updateCheckStatus+0x210>
                }
            } else if (respBuffer[4] == '7' && respBuffer[5] == '1') {
 8001836:	7b3b      	ldrb	r3, [r7, #12]
 8001838:	2b37      	cmp	r3, #55	@ 0x37
 800183a:	d12f      	bne.n	800189c <updateCheckStatus+0x190>
 800183c:	7b7b      	ldrb	r3, [r7, #13]
 800183e:	2b31      	cmp	r3, #49	@ 0x31
 8001840:	d12c      	bne.n	800189c <updateCheckStatus+0x190>
                ctx->state = FSM_STATE_TRANSACTION_PAUSED;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	220b      	movs	r2, #11
 8001846:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800184c:	63da      	str	r2, [r3, #60]	@ 0x3c
                ctx->monitorActive = true;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                ctx->monitorState = 0;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
                displayTransaction(ctx->currentLiters_dL, ctx->currentPriceTotal, "Paused", ctx->price > 9999);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	885b      	ldrh	r3, [r3, #2]
 8001868:	f242 720f 	movw	r2, #9999	@ 0x270f
 800186c:	4293      	cmp	r3, r2
 800186e:	bf8c      	ite	hi
 8001870:	2301      	movhi	r3, #1
 8001872:	2300      	movls	r3, #0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	4a30      	ldr	r2, [pc, #192]	@ (8001938 <updateCheckStatus+0x22c>)
 8001878:	f7ff feba 	bl	80015f0 <displayTransaction>
                saveTransactionState(ctx->currentLiters_dL, ctx->currentPriceTotal, ctx->state, ctx->fuelMode, ctx->modeSelected);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	781a      	ldrb	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	785c      	ldrb	r4, [r3, #1]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	4623      	mov	r3, r4
 8001896:	f7ff fd79 	bl	800138c <saveTransactionState>
 800189a:	e03f      	b.n	800191c <updateCheckStatus+0x210>
            } else if (respBuffer[4] == '6' && respBuffer[5] == '1') {
 800189c:	7b3b      	ldrb	r3, [r7, #12]
 800189e:	2b36      	cmp	r3, #54	@ 0x36
 80018a0:	d128      	bne.n	80018f4 <updateCheckStatus+0x1e8>
 80018a2:	7b7b      	ldrb	r3, [r7, #13]
 80018a4:	2b31      	cmp	r3, #49	@ 0x31
 80018a6:	d125      	bne.n	80018f4 <updateCheckStatus+0x1e8>
                ctx->state = FSM_STATE_TRANSACTION;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2208      	movs	r2, #8
 80018ac:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018b2:	63da      	str	r2, [r3, #60]	@ 0x3c
                ctx->monitorActive = true;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                ctx->monitorState = 1;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	621a      	str	r2, [r3, #32]
                ctx->transactionStarted = true;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	741a      	strb	r2, [r3, #16]
                rs422SendLitersMonitor();
 80018c8:	f002 fd36 	bl	8004338 <rs422SendLitersMonitor>
                ctx->waitingForResponse = true;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	745a      	strb	r2, [r3, #17]
                displayTransaction(ctx->currentLiters_dL, ctx->currentPriceTotal, "Restoring trans...", ctx->price > 9999);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	885b      	ldrh	r3, [r3, #2]
 80018de:	f242 720f 	movw	r2, #9999	@ 0x270f
 80018e2:	4293      	cmp	r3, r2
 80018e4:	bf8c      	ite	hi
 80018e6:	2301      	movhi	r3, #1
 80018e8:	2300      	movls	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	4a13      	ldr	r2, [pc, #76]	@ (800193c <updateCheckStatus+0x230>)
 80018ee:	f7ff fe7f 	bl	80015f0 <displayTransaction>
 80018f2:	e013      	b.n	800191c <updateCheckStatus+0x210>
            } else {
                ctx->errorCount++;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	615a      	str	r2, [r3, #20]
                if (ctx->errorCount >= MAX_ERROR_COUNT) {
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	2b04      	cmp	r3, #4
 8001904:	dd0a      	ble.n	800191c <updateCheckStatus+0x210>
                    ctx->state = FSM_STATE_ERROR;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2207      	movs	r2, #7
 800190a:	701a      	strb	r2, [r3, #0]
                    ctx->stateEntryTime = currentMillis;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001910:	63da      	str	r2, [r3, #60]	@ 0x3c
                    displayMessage("Pump Error");
 8001912:	480b      	ldr	r0, [pc, #44]	@ (8001940 <updateCheckStatus+0x234>)
 8001914:	f002 fbac 	bl	8004070 <displayMessage>
 8001918:	e000      	b.n	800191c <updateCheckStatus+0x210>
    if (currentMillis - lastResponseTime < DELAY_AFTER_RESPONSE) return;
 800191a:	bf00      	nop
                }
            }
        }
    }
}
 800191c:	3734      	adds	r7, #52	@ 0x34
 800191e:	46bd      	mov	sp, r7
 8001920:	bd90      	pop	{r4, r7, pc}
 8001922:	bf00      	nop
 8001924:	20000218 	.word	0x20000218
 8001928:	2000021c 	.word	0x2000021c
 800192c:	0800fc8c 	.word	0x0800fc8c
 8001930:	0800fca0 	.word	0x0800fca0
 8001934:	0800fc78 	.word	0x0800fc78
 8001938:	0800fcb8 	.word	0x0800fcb8
 800193c:	0800fcc0 	.word	0x0800fcc0
 8001940:	0800fc6c 	.word	0x0800fc6c

08001944 <updateError>:

static void updateError(FSMContext* ctx) {
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b08f      	sub	sp, #60	@ 0x3c
 8001948:	af02      	add	r7, sp, #8
 800194a:	6078      	str	r0, [r7, #4]
    unsigned long currentMillis = getCurrentMillis();
 800194c:	f002 f8c2 	bl	8003ad4 <getCurrentMillis>
 8001950:	62f8      	str	r0, [r7, #44]	@ 0x2c
    static unsigned long lastResponseTime = 0;
    if (currentMillis - lastResponseTime < DELAY_AFTER_RESPONSE) return;
 8001952:	4b64      	ldr	r3, [pc, #400]	@ (8001ae4 <updateError+0x1a0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	f240 80bd 	bls.w	8001ada <updateError+0x196>
    lastResponseTime = currentMillis;
 8001960:	4a60      	ldr	r2, [pc, #384]	@ (8001ae4 <updateError+0x1a0>)
 8001962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001964:	6013      	str	r3, [r2, #0]

    if (currentMillis - ctx->stateEntryTime >= RESPONSE_TIMEOUT) {
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800196a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001972:	4293      	cmp	r3, r2
 8001974:	d90a      	bls.n	800198c <updateError+0x48>
        rs422SendStatus();
 8001976:	f002 fbd3 	bl	8004120 <rs422SendStatus>
        ctx->waitingForResponse = true;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	745a      	strb	r2, [r3, #17]
        ctx->stateEntryTime = currentMillis;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001984:	63da      	str	r2, [r3, #60]	@ 0x3c
        displayMessage("Pump offline! Check");
 8001986:	4858      	ldr	r0, [pc, #352]	@ (8001ae8 <updateError+0x1a4>)
 8001988:	f002 fb72 	bl	8004070 <displayMessage>
    }
    if (ctx->waitingForResponse) {
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7c5b      	ldrb	r3, [r3, #17]
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80a3 	beq.w	8001adc <updateError+0x198>
        uint8_t respBuffer[32] = {0};
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	2220      	movs	r2, #32
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f00b ffe9 	bl	800d976 <memset>
        int respLength = rs422WaitForResponse(respBuffer, STATUS_RESPONSE_LENGTH, 'S');
 80019a4:	f107 0308 	add.w	r3, r7, #8
 80019a8:	2253      	movs	r2, #83	@ 0x53
 80019aa:	2107      	movs	r1, #7
 80019ac:	4618      	mov	r0, r3
 80019ae:	f002 fdbf 	bl	8004530 <rs422WaitForResponse>
 80019b2:	62b8      	str	r0, [r7, #40]	@ 0x28
        if (handleResponse(respBuffer, respLength, STATUS_RESPONSE_LENGTH, ctx)) {
 80019b4:	f107 0008 	add.w	r0, r7, #8
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2207      	movs	r2, #7
 80019bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019be:	f7ff fe47 	bl	8001650 <handleResponse>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 8089 	beq.w	8001adc <updateError+0x198>
            if (respBuffer[4] == '9' && respBuffer[5] == '0') {
 80019ca:	7b3b      	ldrb	r3, [r7, #12]
 80019cc:	2b39      	cmp	r3, #57	@ 0x39
 80019ce:	d108      	bne.n	80019e2 <updateError+0x9e>
 80019d0:	7b7b      	ldrb	r3, [r7, #13]
 80019d2:	2b30      	cmp	r3, #48	@ 0x30
 80019d4:	d105      	bne.n	80019e2 <updateError+0x9e>
                rs422SendNozzleOff();
 80019d6:	f002 fc81 	bl	80042dc <rs422SendNozzleOff>
                ctx->waitingForResponse = true;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	745a      	strb	r2, [r3, #17]
 80019e0:	e07c      	b.n	8001adc <updateError+0x198>
            } else if (respBuffer[4] == '1' && respBuffer[5] == '0') {
 80019e2:	7b3b      	ldrb	r3, [r7, #12]
 80019e4:	2b31      	cmp	r3, #49	@ 0x31
 80019e6:	d128      	bne.n	8001a3a <updateError+0xf6>
 80019e8:	7b7b      	ldrb	r3, [r7, #13]
 80019ea:	2b30      	cmp	r3, #48	@ 0x30
 80019ec:	d125      	bne.n	8001a3a <updateError+0xf6>
                ctx->state = FSM_STATE_IDLE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019f8:	63da      	str	r2, [r3, #60]	@ 0x3c
                ctx->nozzleUpWarning = false;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                ctx->transactionStarted = false;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	741a      	strb	r2, [r3, #16]
                ctx->monitorActive = false;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                ctx->monitorState = 0;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	621a      	str	r2, [r3, #32]
                ctx->waitingForResponse = false;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	745a      	strb	r2, [r3, #17]
                if (ctx->modeSelected) {
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <updateError+0xee>
                    displayFuelMode(ctx->fuelMode);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	785b      	ldrb	r3, [r3, #1]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fdaa 	bl	8001584 <displayFuelMode>
                if (ctx->modeSelected) {
 8001a30:	e054      	b.n	8001adc <updateError+0x198>
                } else {
                    displayMessage("Please select mode");
 8001a32:	482e      	ldr	r0, [pc, #184]	@ (8001aec <updateError+0x1a8>)
 8001a34:	f002 fb1c 	bl	8004070 <displayMessage>
                if (ctx->modeSelected) {
 8001a38:	e050      	b.n	8001adc <updateError+0x198>
                }
            } else if (respBuffer[4] == '2' && respBuffer[5] == '1') {
 8001a3a:	7b3b      	ldrb	r3, [r7, #12]
 8001a3c:	2b32      	cmp	r3, #50	@ 0x32
 8001a3e:	d10f      	bne.n	8001a60 <updateError+0x11c>
 8001a40:	7b7b      	ldrb	r3, [r7, #13]
 8001a42:	2b31      	cmp	r3, #49	@ 0x31
 8001a44:	d10c      	bne.n	8001a60 <updateError+0x11c>
                rs422SendNozzleOff();
 8001a46:	f002 fc49 	bl	80042dc <rs422SendNozzleOff>
                ctx->waitingForResponse = true;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	745a      	strb	r2, [r3, #17]
                ctx->nozzleUpWarning = true;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                displayMessage("Nozzle up! Hang up");
 8001a58:	4825      	ldr	r0, [pc, #148]	@ (8001af0 <updateError+0x1ac>)
 8001a5a:	f002 fb09 	bl	8004070 <displayMessage>
 8001a5e:	e03d      	b.n	8001adc <updateError+0x198>
            } else if (respBuffer[4] == '7' && respBuffer[5] == '1') {
 8001a60:	7b3b      	ldrb	r3, [r7, #12]
 8001a62:	2b37      	cmp	r3, #55	@ 0x37
 8001a64:	d12f      	bne.n	8001ac6 <updateError+0x182>
 8001a66:	7b7b      	ldrb	r3, [r7, #13]
 8001a68:	2b31      	cmp	r3, #49	@ 0x31
 8001a6a:	d12c      	bne.n	8001ac6 <updateError+0x182>
                ctx->state = FSM_STATE_TRANSACTION_PAUSED;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	220b      	movs	r2, #11
 8001a70:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a76:	63da      	str	r2, [r3, #60]	@ 0x3c
                ctx->monitorActive = true;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                ctx->monitorState = 0;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	621a      	str	r2, [r3, #32]
                displayTransaction(ctx->currentLiters_dL, ctx->currentPriceTotal, "Paused", ctx->price > 9999);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	885b      	ldrh	r3, [r3, #2]
 8001a92:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001a96:	4293      	cmp	r3, r2
 8001a98:	bf8c      	ite	hi
 8001a9a:	2301      	movhi	r3, #1
 8001a9c:	2300      	movls	r3, #0
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	4a14      	ldr	r2, [pc, #80]	@ (8001af4 <updateError+0x1b0>)
 8001aa2:	f7ff fda5 	bl	80015f0 <displayTransaction>
                saveTransactionState(ctx->currentLiters_dL, ctx->currentPriceTotal, ctx->state, ctx->fuelMode, ctx->modeSelected);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	781a      	ldrb	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	785c      	ldrb	r4, [r3, #1]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	4623      	mov	r3, r4
 8001ac0:	f7ff fc64 	bl	800138c <saveTransactionState>
 8001ac4:	e00a      	b.n	8001adc <updateError+0x198>
            } else {
                ctx->state = FSM_STATE_CHECK_STATUS;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ad0:	63da      	str	r2, [r3, #60]	@ 0x3c
                ctx->waitingForResponse = false;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	745a      	strb	r2, [r3, #17]
 8001ad8:	e000      	b.n	8001adc <updateError+0x198>
    if (currentMillis - lastResponseTime < DELAY_AFTER_RESPONSE) return;
 8001ada:	bf00      	nop
            }
        }
    }
}
 8001adc:	3734      	adds	r7, #52	@ 0x34
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd90      	pop	{r4, r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000220 	.word	0x20000220
 8001ae8:	0800fcd4 	.word	0x0800fcd4
 8001aec:	0800fc8c 	.word	0x0800fc8c
 8001af0:	0800fc78 	.word	0x0800fc78
 8001af4:	0800fcb8 	.word	0x0800fcb8

08001af8 <updateIdle>:

static void updateIdle(FSMContext* ctx) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	@ 0x30
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
    unsigned long currentMillis = getCurrentMillis();
 8001b00:	f001 ffe8 	bl	8003ad4 <getCurrentMillis>
 8001b04:	62f8      	str	r0, [r7, #44]	@ 0x2c
    static unsigned long lastResponseTime = 0;
    static unsigned long nozzleUpStartTime = 0;
    if (currentMillis - lastResponseTime < DELAY_AFTER_RESPONSE) return;
 8001b06:	4b71      	ldr	r3, [pc, #452]	@ (8001ccc <updateIdle+0x1d4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	f240 80d8 	bls.w	8001cc4 <updateIdle+0x1cc>
    lastResponseTime = currentMillis;
 8001b14:	4a6d      	ldr	r2, [pc, #436]	@ (8001ccc <updateIdle+0x1d4>)
 8001b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b18:	6013      	str	r3, [r2, #0]

    // Принудительный сброс nozzleUpWarning через 3 секунды после входа в IDLE
    if (ctx->nozzleUpWarning && (currentMillis - ctx->stateEntryTime > 3000)) {
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d020      	beq.n	8001b66 <updateIdle+0x6e>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d918      	bls.n	8001b66 <updateIdle+0x6e>
        ctx->nozzleUpWarning = false;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        ctx->errorCount = 0;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	615a      	str	r2, [r3, #20]
        logMessage(LOG_LEVEL_DEBUG, "Forced reset of nozzleUpWarning");
 8001b42:	4963      	ldr	r1, [pc, #396]	@ (8001cd0 <updateIdle+0x1d8>)
 8001b44:	2000      	movs	r0, #0
 8001b46:	f001 fdad 	bl	80036a4 <logMessage>
        if (ctx->modeSelected) {
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <updateIdle+0x68>
            displayFuelMode(ctx->fuelMode);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	785b      	ldrb	r3, [r3, #1]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fd13 	bl	8001584 <displayFuelMode>
 8001b5e:	e002      	b.n	8001b66 <updateIdle+0x6e>
        } else {
            displayMessage("Please select mode");
 8001b60:	485c      	ldr	r0, [pc, #368]	@ (8001cd4 <updateIdle+0x1dc>)
 8001b62:	f002 fa85 	bl	8004070 <displayMessage>
        }
    }

    if (ctx->skipFirstStatusCheck) {
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d01f      	beq.n	8001bb0 <updateIdle+0xb8>
        ctx->skipFirstStatusCheck = false;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        ctx->transactionStarted = false;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	741a      	strb	r2, [r3, #16]
        ctx->monitorActive = false;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        ctx->monitorState = 0;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
        ctx->waitingForResponse = false;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	745a      	strb	r2, [r3, #17]
        if (ctx->modeSelected) {
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <updateIdle+0xb0>
            displayFuelMode(ctx->fuelMode);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	785b      	ldrb	r3, [r3, #1]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fcef 	bl	8001584 <displayFuelMode>
        } else {
            displayMessage("Please select mode");
        }
        return;
 8001ba6:	e08e      	b.n	8001cc6 <updateIdle+0x1ce>
            displayMessage("Please select mode");
 8001ba8:	484a      	ldr	r0, [pc, #296]	@ (8001cd4 <updateIdle+0x1dc>)
 8001baa:	f002 fa61 	bl	8004070 <displayMessage>
        return;
 8001bae:	e08a      	b.n	8001cc6 <updateIdle+0x1ce>
    }
    if (ctx->statusPollingActive && !ctx->waitingForResponse) {
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7f1b      	ldrb	r3, [r3, #28]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00c      	beq.n	8001bd2 <updateIdle+0xda>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	7c5b      	ldrb	r3, [r3, #17]
 8001bbc:	f083 0301 	eor.w	r3, r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <updateIdle+0xda>
        rs422SendStatus();
 8001bc6:	f002 faab 	bl	8004120 <rs422SendStatus>
        ctx->waitingForResponse = true;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	745a      	strb	r2, [r3, #17]
 8001bd0:	e079      	b.n	8001cc6 <updateIdle+0x1ce>
    } else if (ctx->waitingForResponse) {
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	7c5b      	ldrb	r3, [r3, #17]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d075      	beq.n	8001cc6 <updateIdle+0x1ce>
        uint8_t respBuffer[32] = {0};
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	2220      	movs	r2, #32
 8001be0:	2100      	movs	r1, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f00b fec7 	bl	800d976 <memset>
        int respLength = rs422WaitForResponse(respBuffer, STATUS_RESPONSE_LENGTH, 'S');
 8001be8:	f107 0308 	add.w	r3, r7, #8
 8001bec:	2253      	movs	r2, #83	@ 0x53
 8001bee:	2107      	movs	r1, #7
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f002 fc9d 	bl	8004530 <rs422WaitForResponse>
 8001bf6:	62b8      	str	r0, [r7, #40]	@ 0x28
        if (handleResponse(respBuffer, respLength, STATUS_RESPONSE_LENGTH, ctx)) {
 8001bf8:	f107 0008 	add.w	r0, r7, #8
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2207      	movs	r2, #7
 8001c00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c02:	f7ff fd25 	bl	8001650 <handleResponse>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d05c      	beq.n	8001cc6 <updateIdle+0x1ce>
            if (respBuffer[4] == '9' && respBuffer[5] == '0') {
 8001c0c:	7b3b      	ldrb	r3, [r7, #12]
 8001c0e:	2b39      	cmp	r3, #57	@ 0x39
 8001c10:	d10f      	bne.n	8001c32 <updateIdle+0x13a>
 8001c12:	7b7b      	ldrb	r3, [r7, #13]
 8001c14:	2b30      	cmp	r3, #48	@ 0x30
 8001c16:	d10c      	bne.n	8001c32 <updateIdle+0x13a>
                rs422SendNozzleOff();
 8001c18:	f002 fb60 	bl	80042dc <rs422SendNozzleOff>
                ctx->waitingForResponse = true;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	745a      	strb	r2, [r3, #17]
                nozzleUpStartTime = 0;
 8001c22:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd8 <updateIdle+0x1e0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
                ctx->nozzleUpWarning = false;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001c30:	e049      	b.n	8001cc6 <updateIdle+0x1ce>
            } else if (respBuffer[4] == '1' && respBuffer[5] == '0') {
 8001c32:	7b3b      	ldrb	r3, [r7, #12]
 8001c34:	2b31      	cmp	r3, #49	@ 0x31
 8001c36:	d118      	bne.n	8001c6a <updateIdle+0x172>
 8001c38:	7b7b      	ldrb	r3, [r7, #13]
 8001c3a:	2b30      	cmp	r3, #48	@ 0x30
 8001c3c:	d115      	bne.n	8001c6a <updateIdle+0x172>
                ctx->nozzleUpWarning = false;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                if (ctx->modeSelected) {
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <updateIdle+0x164>
                    displayFuelMode(ctx->fuelMode);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	785b      	ldrb	r3, [r3, #1]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fc95 	bl	8001584 <displayFuelMode>
 8001c5a:	e002      	b.n	8001c62 <updateIdle+0x16a>
                } else {
                    displayMessage("Please select mode");
 8001c5c:	481d      	ldr	r0, [pc, #116]	@ (8001cd4 <updateIdle+0x1dc>)
 8001c5e:	f002 fa07 	bl	8004070 <displayMessage>
                }
                nozzleUpStartTime = 0;
 8001c62:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd8 <updateIdle+0x1e0>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e02d      	b.n	8001cc6 <updateIdle+0x1ce>
            } else if (respBuffer[4] == '2' && respBuffer[5] == '1') {
 8001c6a:	7b3b      	ldrb	r3, [r7, #12]
 8001c6c:	2b32      	cmp	r3, #50	@ 0x32
 8001c6e:	d116      	bne.n	8001c9e <updateIdle+0x1a6>
 8001c70:	7b7b      	ldrb	r3, [r7, #13]
 8001c72:	2b31      	cmp	r3, #49	@ 0x31
 8001c74:	d113      	bne.n	8001c9e <updateIdle+0x1a6>
                rs422SendNozzleOff();
 8001c76:	f002 fb31 	bl	80042dc <rs422SendNozzleOff>
                ctx->waitingForResponse = true;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	745a      	strb	r2, [r3, #17]
                ctx->nozzleUpWarning = true;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                if (nozzleUpStartTime == 0) {
 8001c88:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <updateIdle+0x1e0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <updateIdle+0x19e>
                    nozzleUpStartTime = currentMillis;
 8001c90:	4a11      	ldr	r2, [pc, #68]	@ (8001cd8 <updateIdle+0x1e0>)
 8001c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c94:	6013      	str	r3, [r2, #0]
                }
                displayMessage("Nozzle up! Hang up");
 8001c96:	4811      	ldr	r0, [pc, #68]	@ (8001cdc <updateIdle+0x1e4>)
 8001c98:	f002 f9ea 	bl	8004070 <displayMessage>
 8001c9c:	e013      	b.n	8001cc6 <updateIdle+0x1ce>
            } else {
                ctx->errorCount++;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	615a      	str	r2, [r3, #20]
                if (ctx->errorCount >= MAX_ERROR_COUNT) {
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	dd0a      	ble.n	8001cc6 <updateIdle+0x1ce>
                    ctx->state = FSM_STATE_ERROR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	701a      	strb	r2, [r3, #0]
                    ctx->stateEntryTime = currentMillis;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cba:	63da      	str	r2, [r3, #60]	@ 0x3c
                    displayMessage("Pump Error");
 8001cbc:	4808      	ldr	r0, [pc, #32]	@ (8001ce0 <updateIdle+0x1e8>)
 8001cbe:	f002 f9d7 	bl	8004070 <displayMessage>
 8001cc2:	e000      	b.n	8001cc6 <updateIdle+0x1ce>
    if (currentMillis - lastResponseTime < DELAY_AFTER_RESPONSE) return;
 8001cc4:	bf00      	nop
                }
            }
        }
    }
}
 8001cc6:	3730      	adds	r7, #48	@ 0x30
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000224 	.word	0x20000224
 8001cd0:	0800fce8 	.word	0x0800fce8
 8001cd4:	0800fc8c 	.word	0x0800fc8c
 8001cd8:	20000228 	.word	0x20000228
 8001cdc:	0800fc78 	.word	0x0800fc78
 8001ce0:	0800fc6c 	.word	0x0800fc6c

08001ce4 <updateWaitForPriceInput>:

static void updateWaitForPriceInput(FSMContext* ctx) {
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
    // Пустая реализация, обработка в processKeyFSM
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <updateViewPrice>:

static void updateViewPrice(FSMContext* ctx) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
    unsigned long currentMillis = getCurrentMillis();
 8001d00:	f001 fee8 	bl	8003ad4 <getCurrentMillis>
 8001d04:	60f8      	str	r0, [r7, #12]
    if (currentMillis - ctx->stateEntryTime >= 10000) {
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d91b      	bls.n	8001d4e <updateViewPrice+0x56>
        ctx->state = FSM_STATE_IDLE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
        ctx->stateEntryTime = currentMillis;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	63da      	str	r2, [r3, #60]	@ 0x3c
        if (!ctx->nozzleUpWarning) {
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d28:	f083 0301 	eor.w	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00d      	beq.n	8001d4e <updateViewPrice+0x56>
            if (ctx->modeSelected) {
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <updateViewPrice+0x50>
                displayFuelMode(ctx->fuelMode);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	785b      	ldrb	r3, [r3, #1]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fc1f 	bl	8001584 <displayFuelMode>
            } else {
                displayMessage("Please select mode");
            }
        }
    }
}
 8001d46:	e002      	b.n	8001d4e <updateViewPrice+0x56>
                displayMessage("Please select mode");
 8001d48:	4803      	ldr	r0, [pc, #12]	@ (8001d58 <updateViewPrice+0x60>)
 8001d4a:	f002 f991 	bl	8004070 <displayMessage>
}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	0800fc8c 	.word	0x0800fc8c

08001d5c <updateTransitionPriceSet>:

static void updateTransitionPriceSet(FSMContext* ctx) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
    unsigned long currentMillis = getCurrentMillis();
 8001d64:	f001 feb6 	bl	8003ad4 <getCurrentMillis>
 8001d68:	60f8      	str	r0, [r7, #12]
    if (currentMillis - ctx->stateEntryTime >= TRANSITION_TIMEOUT) {
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d76:	d308      	bcc.n	8001d8a <updateTransitionPriceSet+0x2e>
        ctx->waitingForResponse = false;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	745a      	strb	r2, [r3, #17]
        ctx->state = FSM_STATE_CHECK_STATUS;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
        ctx->stateEntryTime = currentMillis;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
}
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <updateTransitionEditPrice>:

static void updateTransitionEditPrice(FSMContext* ctx) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
    unsigned long currentMillis = getCurrentMillis();
 8001d9c:	f001 fe9a 	bl	8003ad4 <getCurrentMillis>
 8001da0:	60f8      	str	r0, [r7, #12]
    if (currentMillis - ctx->stateEntryTime >= TRANSITION_TIMEOUT) {
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001dae:	d31e      	bcc.n	8001dee <updateTransitionEditPrice+0x5a>
        ctx->waitingForResponse = false;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	745a      	strb	r2, [r3, #17]
        ctx->state = FSM_STATE_IDLE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
        ctx->stateEntryTime = currentMillis;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	63da      	str	r2, [r3, #60]	@ 0x3c
        if (!ctx->nozzleUpWarning) {
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001dc8:	f083 0301 	eor.w	r3, r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00d      	beq.n	8001dee <updateTransitionEditPrice+0x5a>
            if (ctx->modeSelected) {
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <updateTransitionEditPrice+0x54>
                displayFuelMode(ctx->fuelMode);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	785b      	ldrb	r3, [r3, #1]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fbcf 	bl	8001584 <displayFuelMode>
            } else {
                displayMessage("Please select mode");
            }
        }
    }
}
 8001de6:	e002      	b.n	8001dee <updateTransitionEditPrice+0x5a>
                displayMessage("Please select mode");
 8001de8:	4803      	ldr	r0, [pc, #12]	@ (8001df8 <updateTransitionEditPrice+0x64>)
 8001dea:	f002 f941 	bl	8004070 <displayMessage>
}
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	0800fc8c 	.word	0x0800fc8c

08001dfc <updateEditPrice>:

static void updateEditPrice(FSMContext* ctx) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
    unsigned long currentMillis = getCurrentMillis();
 8001e04:	f001 fe66 	bl	8003ad4 <getCurrentMillis>
 8001e08:	60f8      	str	r0, [r7, #12]
    if (currentMillis - ctx->stateEntryTime >= EDIT_TIMEOUT) {
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d91b      	bls.n	8001e52 <updateEditPrice+0x56>
        ctx->state = FSM_STATE_IDLE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	701a      	strb	r2, [r3, #0]
        ctx->stateEntryTime = currentMillis;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	63da      	str	r2, [r3, #60]	@ 0x3c
        if (!ctx->nozzleUpWarning) {
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e2c:	f083 0301 	eor.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00d      	beq.n	8001e52 <updateEditPrice+0x56>
            if (ctx->modeSelected) {
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <updateEditPrice+0x50>
                displayFuelMode(ctx->fuelMode);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	785b      	ldrb	r3, [r3, #1]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fb9d 	bl	8001584 <displayFuelMode>
            } else {
                displayMessage("Please select mode");
            }
        }
    }
}
 8001e4a:	e002      	b.n	8001e52 <updateEditPrice+0x56>
                displayMessage("Please select mode");
 8001e4c:	4803      	ldr	r0, [pc, #12]	@ (8001e5c <updateEditPrice+0x60>)
 8001e4e:	f002 f90f 	bl	8004070 <displayMessage>
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	0800fc8c 	.word	0x0800fc8c

08001e60 <updateConfirmTransaction>:

static void updateConfirmTransaction(FSMContext* ctx) {
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
    // Ждём действия пользователя, без таймаута
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <updateTransaction>:

static void updateTransaction(FSMContext* ctx) {
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b09b      	sub	sp, #108	@ 0x6c
 8001e78:	af02      	add	r7, sp, #8
 8001e7a:	6078      	str	r0, [r7, #4]
    unsigned long currentMillis = getCurrentMillis();
 8001e7c:	f001 fe2a 	bl	8003ad4 <getCurrentMillis>
 8001e80:	64b8      	str	r0, [r7, #72]	@ 0x48
    static unsigned long lastResponseTime = 0;
    if (currentMillis - lastResponseTime < DELAY_AFTER_RESPONSE) return;
 8001e82:	4b99      	ldr	r3, [pc, #612]	@ (80020e8 <updateTransaction+0x274>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	f240 8244 	bls.w	8002318 <updateTransaction+0x4a4>
    lastResponseTime = currentMillis;
 8001e90:	4a95      	ldr	r2, [pc, #596]	@ (80020e8 <updateTransaction+0x274>)
 8001e92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e94:	6013      	str	r3, [r2, #0]

    if (!ctx->waitingForResponse) {
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	7c5b      	ldrb	r3, [r3, #17]
 8001e9a:	f083 0301 	eor.w	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d032      	beq.n	8001f0a <updateTransaction+0x96>
        if (!ctx->transactionStarted) {
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7c1b      	ldrb	r3, [r3, #16]
 8001ea8:	f083 0301 	eor.w	r3, r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <updateTransaction+0x4a>
            rs422SendStatus();
 8001eb2:	f002 f935 	bl	8004120 <rs422SendStatus>
            ctx->waitingForResponse = true;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	745a      	strb	r2, [r3, #17]
 8001ebc:	e22f      	b.n	800231e <updateTransaction+0x4aa>
        } else {
            if (!ctx->monitorActive) {
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ec4:	f083 0301 	eor.w	r3, r3, #1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d005      	beq.n	8001eda <updateTransaction+0x66>
                rs422SendStatus();
 8001ece:	f002 f927 	bl	8004120 <rs422SendStatus>
                ctx->waitingForResponse = true;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	745a      	strb	r2, [r3, #17]
 8001ed8:	e221      	b.n	800231e <updateTransaction+0x4aa>
            } else {
                switch (ctx->monitorState) {
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d00c      	beq.n	8001efc <updateTransaction+0x88>
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	dc0d      	bgt.n	8001f02 <updateTransaction+0x8e>
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <updateTransaction+0x7c>
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d003      	beq.n	8001ef6 <updateTransaction+0x82>
 8001eee:	e008      	b.n	8001f02 <updateTransaction+0x8e>
                    case 0: rs422SendStatus(); break;
 8001ef0:	f002 f916 	bl	8004120 <rs422SendStatus>
 8001ef4:	e005      	b.n	8001f02 <updateTransaction+0x8e>
                    case 1: rs422SendLitersMonitor(); break;
 8001ef6:	f002 fa1f 	bl	8004338 <rs422SendLitersMonitor>
 8001efa:	e002      	b.n	8001f02 <updateTransaction+0x8e>
                    case 2: rs422SendRevenueStatus(); break;
 8001efc:	f002 fa4a 	bl	8004394 <rs422SendRevenueStatus>
 8001f00:	bf00      	nop
                }
                ctx->waitingForResponse = true;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	745a      	strb	r2, [r3, #17]
 8001f08:	e209      	b.n	800231e <updateTransaction+0x4aa>
            }
        }
    } else {
        uint8_t respBuffer[32] = {0};
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	2220      	movs	r2, #32
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f00b fd2f 	bl	800d976 <memset>
        int expectedLength = ctx->monitorActive ? (ctx->monitorState == 0 ? STATUS_RESPONSE_LENGTH : MONITOR_RESPONSE_LENGTH) : STATUS_RESPONSE_LENGTH;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <updateTransaction+0xbe>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <updateTransaction+0xba>
 8001f2a:	2307      	movs	r3, #7
 8001f2c:	e002      	b.n	8001f34 <updateTransaction+0xc0>
 8001f2e:	230f      	movs	r3, #15
 8001f30:	e000      	b.n	8001f34 <updateTransaction+0xc0>
 8001f32:	2307      	movs	r3, #7
 8001f34:	647b      	str	r3, [r7, #68]	@ 0x44
        char expectedCommand = ctx->monitorState == 0 ? 'S' : (ctx->monitorState == 1 ? 'L' : 'R');
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <updateTransaction+0xda>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <updateTransaction+0xd6>
 8001f46:	234c      	movs	r3, #76	@ 0x4c
 8001f48:	e002      	b.n	8001f50 <updateTransaction+0xdc>
 8001f4a:	2352      	movs	r3, #82	@ 0x52
 8001f4c:	e000      	b.n	8001f50 <updateTransaction+0xdc>
 8001f4e:	2353      	movs	r3, #83	@ 0x53
 8001f50:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
        int respLength = rs422WaitForResponse(respBuffer, expectedLength, expectedCommand);
 8001f54:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8001f58:	f107 0308 	add.w	r3, r7, #8
 8001f5c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f002 fae6 	bl	8004530 <rs422WaitForResponse>
 8001f64:	63f8      	str	r0, [r7, #60]	@ 0x3c
        if (handleResponse(respBuffer, respLength, STATUS_RESPONSE_LENGTH, ctx)) {
 8001f66:	f107 0008 	add.w	r0, r7, #8
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001f70:	f7ff fb6e 	bl	8001650 <handleResponse>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 81d1 	beq.w	800231e <updateTransaction+0x4aa>
            if (!ctx->transactionStarted && respBuffer[4] == '2' && respBuffer[5] == '1') { // Только S21
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	7c1b      	ldrb	r3, [r3, #16]
 8001f80:	f083 0301 	eor.w	r3, r3, #1
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d043      	beq.n	8002012 <updateTransaction+0x19e>
 8001f8a:	7b3b      	ldrb	r3, [r7, #12]
 8001f8c:	2b32      	cmp	r3, #50	@ 0x32
 8001f8e:	d140      	bne.n	8002012 <updateTransaction+0x19e>
 8001f90:	7b7b      	ldrb	r3, [r7, #13]
 8001f92:	2b31      	cmp	r3, #49	@ 0x31
 8001f94:	d13d      	bne.n	8002012 <updateTransaction+0x19e>
                uint16_t protocolPrice = ctx->price > 9999 ? ctx->price / 10 : ctx->price;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	885b      	ldrh	r3, [r3, #2]
 8001f9a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d907      	bls.n	8001fb2 <updateTransaction+0x13e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	885b      	ldrh	r3, [r3, #2]
 8001fa6:	4a51      	ldr	r2, [pc, #324]	@ (80020ec <updateTransaction+0x278>)
 8001fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fac:	08db      	lsrs	r3, r3, #3
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	e001      	b.n	8001fb6 <updateTransaction+0x142>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	885b      	ldrh	r3, [r3, #2]
 8001fb6:	877b      	strh	r3, [r7, #58]	@ 0x3a
                rs422SendTransaction(ctx->fuelMode, ctx->transactionVolume, ctx->transactionAmount, protocolPrice);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7858      	ldrb	r0, [r3, #1]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6899      	ldr	r1, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001fc6:	f002 f8d9 	bl	800417c <rs422SendTransaction>
                ctx->waitingForResponse = true;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	745a      	strb	r2, [r3, #17]
                ctx->transactionStarted = true;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	741a      	strb	r2, [r3, #16]
                ctx->currentLiters_dL = 0;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	629a      	str	r2, [r3, #40]	@ 0x28
                ctx->currentPriceTotal = 0;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	631a      	str	r2, [r3, #48]	@ 0x30
                ctx->errorCount = 0;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	615a      	str	r2, [r3, #20]
                displayTransaction(ctx->currentLiters_dL, ctx->currentPriceTotal, "Dispensing...", ctx->price > 9999);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	885b      	ldrh	r3, [r3, #2]
 8001ff4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	bf8c      	ite	hi
 8001ffc:	2301      	movhi	r3, #1
 8001ffe:	2300      	movls	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	4a3b      	ldr	r2, [pc, #236]	@ (80020f0 <updateTransaction+0x27c>)
 8002004:	f7ff faf4 	bl	80015f0 <displayTransaction>
                logMessage(LOG_LEVEL_DEBUG, "Transaction started");
 8002008:	493a      	ldr	r1, [pc, #232]	@ (80020f4 <updateTransaction+0x280>)
 800200a:	2000      	movs	r0, #0
 800200c:	f001 fb4a 	bl	80036a4 <logMessage>
            if (!ctx->transactionStarted && respBuffer[4] == '2' && respBuffer[5] == '1') { // Только S21
 8002010:	e185      	b.n	800231e <updateTransaction+0x4aa>
            } else if (ctx->monitorState == 0) {
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 80be 	bne.w	8002198 <updateTransaction+0x324>
                if (isValidStatus(respBuffer)) {
 800201c:	f107 0308 	add.w	r3, r7, #8
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fb47 	bl	80016b4 <isValidStatus>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 8178 	beq.w	800231e <updateTransaction+0x4aa>
                    for (size_t i = 0; i < sizeof(statusActions) / sizeof(statusActions[0]); i++) {
 800202e:	2300      	movs	r3, #0
 8002030:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002032:	e0ac      	b.n	800218e <updateTransaction+0x31a>
                        if (respBuffer[4] == statusActions[i].code[0] && respBuffer[5] == statusActions[i].code[1]) {
 8002034:	7b3a      	ldrb	r2, [r7, #12]
 8002036:	4930      	ldr	r1, [pc, #192]	@ (80020f8 <updateTransaction+0x284>)
 8002038:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800203a:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 800203e:	429a      	cmp	r2, r3
 8002040:	f040 80a2 	bne.w	8002188 <updateTransaction+0x314>
 8002044:	7b7a      	ldrb	r2, [r7, #13]
 8002046:	492c      	ldr	r1, [pc, #176]	@ (80020f8 <updateTransaction+0x284>)
 8002048:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	440b      	add	r3, r1
 800204e:	785b      	ldrb	r3, [r3, #1]
 8002050:	429a      	cmp	r2, r3
 8002052:	f040 8099 	bne.w	8002188 <updateTransaction+0x314>
                            ctx->state = statusActions[i].nextState;
 8002056:	4a28      	ldr	r2, [pc, #160]	@ (80020f8 <updateTransaction+0x284>)
 8002058:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4413      	add	r3, r2
 800205e:	789a      	ldrb	r2, [r3, #2]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	701a      	strb	r2, [r3, #0]
                            ctx->stateEntryTime = currentMillis;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002068:	63da      	str	r2, [r3, #60]	@ 0x3c
                            if (statusActions[i].resetErrorCount) ctx->errorCount = 0;
 800206a:	4a23      	ldr	r2, [pc, #140]	@ (80020f8 <updateTransaction+0x284>)
 800206c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	78db      	ldrb	r3, [r3, #3]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <updateTransaction+0x20a>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	615a      	str	r2, [r3, #20]
                            if (statusActions[i].nextState == FSM_STATE_TRANSACTION_END) {
 800207e:	4a1e      	ldr	r2, [pc, #120]	@ (80020f8 <updateTransaction+0x284>)
 8002080:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	789b      	ldrb	r3, [r3, #2]
 8002088:	2b09      	cmp	r3, #9
 800208a:	d139      	bne.n	8002100 <updateTransaction+0x28c>
                                rs422SendTransactionUpdate();
 800208c:	f002 f8f4 	bl	8004278 <rs422SendTransactionUpdate>
                                ctx->waitingForResponse = true;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	745a      	strb	r2, [r3, #17]
                                if (respBuffer[4] == '9' && respBuffer[5] == '0') {
 8002096:	7b3b      	ldrb	r3, [r7, #12]
 8002098:	2b39      	cmp	r3, #57	@ 0x39
 800209a:	d104      	bne.n	80020a6 <updateTransaction+0x232>
 800209c:	7b7b      	ldrb	r3, [r7, #13]
 800209e:	2b30      	cmp	r3, #48	@ 0x30
 80020a0:	d101      	bne.n	80020a6 <updateTransaction+0x232>
                                    rs422SendNozzleOff();
 80020a2:	f002 f91b 	bl	80042dc <rs422SendNozzleOff>
                                }
                                displayTransaction(ctx->currentLiters_dL, ctx->currentPriceTotal, "Trans stopped", ctx->price > 9999);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	885b      	ldrh	r3, [r3, #2]
 80020b2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80020b6:	4293      	cmp	r3, r2
 80020b8:	bf8c      	ite	hi
 80020ba:	2301      	movhi	r3, #1
 80020bc:	2300      	movls	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	4a0e      	ldr	r2, [pc, #56]	@ (80020fc <updateTransaction+0x288>)
 80020c2:	f7ff fa95 	bl	80015f0 <displayTransaction>
                                saveTransactionState(ctx->currentLiters_dL, ctx->currentPriceTotal, ctx->state, ctx->fuelMode, ctx->modeSelected);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	781a      	ldrb	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	785c      	ldrb	r4, [r3, #1]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	4623      	mov	r3, r4
 80020e0:	f7ff f954 	bl	800138c <saveTransactionState>
                                ctx->monitorActive = true;
                                ctx->monitorState = 1;
                                rs422SendLitersMonitor();
                                ctx->waitingForResponse = true;
                            }
                            break;
 80020e4:	e11a      	b.n	800231c <updateTransaction+0x4a8>
 80020e6:	bf00      	nop
 80020e8:	2000022c 	.word	0x2000022c
 80020ec:	cccccccd 	.word	0xcccccccd
 80020f0:	0800fd08 	.word	0x0800fd08
 80020f4:	0800fd18 	.word	0x0800fd18
 80020f8:	08010254 	.word	0x08010254
 80020fc:	0800fd2c 	.word	0x0800fd2c
                            } else if (statusActions[i].nextState == FSM_STATE_TRANSACTION_PAUSED) {
 8002100:	4a88      	ldr	r2, [pc, #544]	@ (8002324 <updateTransaction+0x4b0>)
 8002102:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	789b      	ldrb	r3, [r3, #2]
 800210a:	2b0b      	cmp	r3, #11
 800210c:	d11f      	bne.n	800214e <updateTransaction+0x2da>
                                displayTransaction(ctx->currentLiters_dL, ctx->currentPriceTotal, "Paused", ctx->price > 9999);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	885b      	ldrh	r3, [r3, #2]
 800211a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800211e:	4293      	cmp	r3, r2
 8002120:	bf8c      	ite	hi
 8002122:	2301      	movhi	r3, #1
 8002124:	2300      	movls	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	4a7f      	ldr	r2, [pc, #508]	@ (8002328 <updateTransaction+0x4b4>)
 800212a:	f7ff fa61 	bl	80015f0 <displayTransaction>
                                saveTransactionState(ctx->currentLiters_dL, ctx->currentPriceTotal, ctx->state, ctx->fuelMode, ctx->modeSelected);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	781a      	ldrb	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	785c      	ldrb	r4, [r3, #1]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	4623      	mov	r3, r4
 8002148:	f7ff f920 	bl	800138c <saveTransactionState>
                            break;
 800214c:	e0e6      	b.n	800231c <updateTransaction+0x4a8>
                            } else if (statusActions[i].nextState == FSM_STATE_TRANSACTION && respBuffer[4] == '6' && respBuffer[5] == '1') {
 800214e:	4a75      	ldr	r2, [pc, #468]	@ (8002324 <updateTransaction+0x4b0>)
 8002150:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4413      	add	r3, r2
 8002156:	789b      	ldrb	r3, [r3, #2]
 8002158:	2b08      	cmp	r3, #8
 800215a:	f040 80df 	bne.w	800231c <updateTransaction+0x4a8>
 800215e:	7b3b      	ldrb	r3, [r7, #12]
 8002160:	2b36      	cmp	r3, #54	@ 0x36
 8002162:	f040 80db 	bne.w	800231c <updateTransaction+0x4a8>
 8002166:	7b7b      	ldrb	r3, [r7, #13]
 8002168:	2b31      	cmp	r3, #49	@ 0x31
 800216a:	f040 80d7 	bne.w	800231c <updateTransaction+0x4a8>
                                ctx->monitorActive = true;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                                ctx->monitorState = 1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	621a      	str	r2, [r3, #32]
                                rs422SendLitersMonitor();
 800217c:	f002 f8dc 	bl	8004338 <rs422SendLitersMonitor>
                                ctx->waitingForResponse = true;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	745a      	strb	r2, [r3, #17]
                            break;
 8002186:	e0c9      	b.n	800231c <updateTransaction+0x4a8>
                    for (size_t i = 0; i < sizeof(statusActions) / sizeof(statusActions[0]); i++) {
 8002188:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800218a:	3301      	adds	r3, #1
 800218c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800218e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002190:	2b07      	cmp	r3, #7
 8002192:	f67f af4f 	bls.w	8002034 <updateTransaction+0x1c0>
 8002196:	e0c2      	b.n	800231e <updateTransaction+0x4aa>
                        }
                    }
                }
            } else if (ctx->monitorActive) {
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 80bd 	beq.w	800231e <updateTransaction+0x4aa>
                if (ctx->monitorState == 1 && respBuffer[3] == 'L' && respBuffer[4] == '1') {
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d158      	bne.n	800225e <updateTransaction+0x3ea>
 80021ac:	7afb      	ldrb	r3, [r7, #11]
 80021ae:	2b4c      	cmp	r3, #76	@ 0x4c
 80021b0:	d155      	bne.n	800225e <updateTransaction+0x3ea>
 80021b2:	7b3b      	ldrb	r3, [r7, #12]
 80021b4:	2b31      	cmp	r3, #49	@ 0x31
 80021b6:	d152      	bne.n	800225e <updateTransaction+0x3ea>
                    char litersStr[7] = {0};
 80021b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	f8c3 2003 	str.w	r2, [r3, #3]
                    if (respLength >= 14) {
 80021c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021c6:	2b0d      	cmp	r3, #13
 80021c8:	dd45      	ble.n	8002256 <updateTransaction+0x3e2>
                        memcpy(litersStr, respBuffer + 8, 6);
 80021ca:	f107 0308 	add.w	r3, r7, #8
 80021ce:	3308      	adds	r3, #8
 80021d0:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80021d4:	2206      	movs	r2, #6
 80021d6:	4619      	mov	r1, r3
 80021d8:	f00b fcd9 	bl	800db8e <memcpy>
                        bool valid = true;
 80021dc:	2301      	movs	r3, #1
 80021de:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
                        for (int i = 0; i < 6; i++) {
 80021e2:	2300      	movs	r3, #0
 80021e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80021e6:	e014      	b.n	8002212 <updateTransaction+0x39e>
                            if (litersStr[i] < '0' || litersStr[i] > '9') {
 80021e8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80021ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ee:	4413      	add	r3, r2
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80021f4:	d906      	bls.n	8002204 <updateTransaction+0x390>
 80021f6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80021fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021fc:	4413      	add	r3, r2
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b39      	cmp	r3, #57	@ 0x39
 8002202:	d903      	bls.n	800220c <updateTransaction+0x398>
                                valid = false;
 8002204:	2300      	movs	r3, #0
 8002206:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
                                break;
 800220a:	e005      	b.n	8002218 <updateTransaction+0x3a4>
                        for (int i = 0; i < 6; i++) {
 800220c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800220e:	3301      	adds	r3, #1
 8002210:	657b      	str	r3, [r7, #84]	@ 0x54
 8002212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002214:	2b05      	cmp	r3, #5
 8002216:	dde7      	ble.n	80021e8 <updateTransaction+0x374>
                            }
                        }
                        ctx->currentLiters_dL = valid ? atol(litersStr) : ctx->currentLiters_dL;
 8002218:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800221c:	2b00      	cmp	r3, #0
 800221e:	d006      	beq.n	800222e <updateTransaction+0x3ba>
 8002220:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002224:	4618      	mov	r0, r3
 8002226:	f00a fbd2 	bl	800c9ce <atol>
 800222a:	4603      	mov	r3, r0
 800222c:	e001      	b.n	8002232 <updateTransaction+0x3be>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6293      	str	r3, [r2, #40]	@ 0x28
                        displayTransaction(ctx->currentLiters_dL, ctx->currentPriceTotal, "Dispensing...", ctx->price > 9999);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	885b      	ldrh	r3, [r3, #2]
 8002242:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002246:	4293      	cmp	r3, r2
 8002248:	bf8c      	ite	hi
 800224a:	2301      	movhi	r3, #1
 800224c:	2300      	movls	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	4a36      	ldr	r2, [pc, #216]	@ (800232c <updateTransaction+0x4b8>)
 8002252:	f7ff f9cd 	bl	80015f0 <displayTransaction>
                    }
                    ctx->monitorState = 2;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2202      	movs	r2, #2
 800225a:	621a      	str	r2, [r3, #32]
                if (ctx->monitorState == 1 && respBuffer[3] == 'L' && respBuffer[4] == '1') {
 800225c:	e05f      	b.n	800231e <updateTransaction+0x4aa>
                } else if (ctx->monitorState == 2 && respBuffer[3] == 'R' && respBuffer[4] == '1') {
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d15b      	bne.n	800231e <updateTransaction+0x4aa>
 8002266:	7afb      	ldrb	r3, [r7, #11]
 8002268:	2b52      	cmp	r3, #82	@ 0x52
 800226a:	d158      	bne.n	800231e <updateTransaction+0x4aa>
 800226c:	7b3b      	ldrb	r3, [r7, #12]
 800226e:	2b31      	cmp	r3, #49	@ 0x31
 8002270:	d155      	bne.n	800231e <updateTransaction+0x4aa>
                    char priceStr[7] = {0};
 8002272:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	f8c3 2003 	str.w	r2, [r3, #3]
                    if (respLength >= 14) {
 800227e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002280:	2b0d      	cmp	r3, #13
 8002282:	dd45      	ble.n	8002310 <updateTransaction+0x49c>
                        memcpy(priceStr, respBuffer + 8, 6);
 8002284:	f107 0308 	add.w	r3, r7, #8
 8002288:	3308      	adds	r3, #8
 800228a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800228e:	2206      	movs	r2, #6
 8002290:	4619      	mov	r1, r3
 8002292:	f00b fc7c 	bl	800db8e <memcpy>
                        bool valid = true;
 8002296:	2301      	movs	r3, #1
 8002298:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
                        for (int i = 0; i < 6; i++) {
 800229c:	2300      	movs	r3, #0
 800229e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022a0:	e014      	b.n	80022cc <updateTransaction+0x458>
                            if (priceStr[i] < '0' || priceStr[i] > '9') {
 80022a2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80022a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022a8:	4413      	add	r3, r2
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80022ae:	d906      	bls.n	80022be <updateTransaction+0x44a>
 80022b0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80022b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022b6:	4413      	add	r3, r2
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b39      	cmp	r3, #57	@ 0x39
 80022bc:	d903      	bls.n	80022c6 <updateTransaction+0x452>
                                valid = false;
 80022be:	2300      	movs	r3, #0
 80022c0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
                                break;
 80022c4:	e005      	b.n	80022d2 <updateTransaction+0x45e>
                        for (int i = 0; i < 6; i++) {
 80022c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022c8:	3301      	adds	r3, #1
 80022ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022ce:	2b05      	cmp	r3, #5
 80022d0:	dde7      	ble.n	80022a2 <updateTransaction+0x42e>
                            }
                        }
                        ctx->currentPriceTotal = valid ? atol(priceStr) : ctx->currentPriceTotal;
 80022d2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d006      	beq.n	80022e8 <updateTransaction+0x474>
 80022da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022de:	4618      	mov	r0, r3
 80022e0:	f00a fb75 	bl	800c9ce <atol>
 80022e4:	4603      	mov	r3, r0
 80022e6:	e001      	b.n	80022ec <updateTransaction+0x478>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6313      	str	r3, [r2, #48]	@ 0x30
                        displayTransaction(ctx->currentLiters_dL, ctx->currentPriceTotal, "Dispensing...", ctx->price > 9999);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	885b      	ldrh	r3, [r3, #2]
 80022fc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002300:	4293      	cmp	r3, r2
 8002302:	bf8c      	ite	hi
 8002304:	2301      	movhi	r3, #1
 8002306:	2300      	movls	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	4a08      	ldr	r2, [pc, #32]	@ (800232c <updateTransaction+0x4b8>)
 800230c:	f7ff f970 	bl	80015f0 <displayTransaction>
                    }
                    ctx->monitorState = 0;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	621a      	str	r2, [r3, #32]
 8002316:	e002      	b.n	800231e <updateTransaction+0x4aa>
    if (currentMillis - lastResponseTime < DELAY_AFTER_RESPONSE) return;
 8002318:	bf00      	nop
 800231a:	e000      	b.n	800231e <updateTransaction+0x4aa>
                            break;
 800231c:	bf00      	nop
                }
            }
        }
    }
}
 800231e:	3764      	adds	r7, #100	@ 0x64
 8002320:	46bd      	mov	sp, r7
 8002322:	bd90      	pop	{r4, r7, pc}
 8002324:	08010254 	.word	0x08010254
 8002328:	0800fcb8 	.word	0x0800fcb8
 800232c:	0800fd08 	.word	0x0800fd08

08002330 <updateTransactionPaused>:

static void updateTransactionPaused(FSMContext* ctx) {
 8002330:	b590      	push	{r4, r7, lr}
 8002332:	b08f      	sub	sp, #60	@ 0x3c
 8002334:	af02      	add	r7, sp, #8
 8002336:	6078      	str	r0, [r7, #4]
    unsigned long currentMillis = getCurrentMillis();
 8002338:	f001 fbcc 	bl	8003ad4 <getCurrentMillis>
 800233c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    static unsigned long lastResponseTime = 0;
    if (currentMillis - lastResponseTime < DELAY_AFTER_RESPONSE) return;
 800233e:	4b57      	ldr	r3, [pc, #348]	@ (800249c <updateTransactionPaused+0x16c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	f240 80a4 	bls.w	8002494 <updateTransactionPaused+0x164>
    lastResponseTime = currentMillis;
 800234c:	4a53      	ldr	r2, [pc, #332]	@ (800249c <updateTransactionPaused+0x16c>)
 800234e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002350:	6013      	str	r3, [r2, #0]

    if (currentMillis - ctx->stateEntryTime > 30000) {
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002356:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800235e:	4293      	cmp	r3, r2
 8002360:	d925      	bls.n	80023ae <updateTransactionPaused+0x7e>
        ctx->finalLiters_dL = ctx->currentLiters_dL;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	62da      	str	r2, [r3, #44]	@ 0x2c
        ctx->finalPriceTotal = ctx->currentPriceTotal;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	635a      	str	r2, [r3, #52]	@ 0x34
        rs422SendTransactionUpdate();
 8002372:	f001 ff81 	bl	8004278 <rs422SendTransactionUpdate>
        ctx->waitingForResponse = true;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	745a      	strb	r2, [r3, #17]
        ctx->state = FSM_STATE_TRANSACTION_END;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2209      	movs	r2, #9
 8002380:	701a      	strb	r2, [r3, #0]
        ctx->stateEntryTime = currentMillis;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002386:	63da      	str	r2, [r3, #60]	@ 0x3c
        displayMessage("Nozzle back! Trans end");
 8002388:	4845      	ldr	r0, [pc, #276]	@ (80024a0 <updateTransactionPaused+0x170>)
 800238a:	f001 fe71 	bl	8004070 <displayMessage>
        saveTransactionState(ctx->finalLiters_dL, ctx->finalPriceTotal, ctx->state, ctx->fuelMode, ctx->modeSelected);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	781a      	ldrb	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	785c      	ldrb	r4, [r3, #1]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	4623      	mov	r3, r4
 80023a8:	f7fe fff0 	bl	800138c <saveTransactionState>
        return;
 80023ac:	e073      	b.n	8002496 <updateTransactionPaused+0x166>
    }

    if (!ctx->waitingForResponse) {
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	7c5b      	ldrb	r3, [r3, #17]
 80023b2:	f083 0301 	eor.w	r3, r3, #1
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <updateTransactionPaused+0x98>
        rs422SendStatus();
 80023bc:	f001 feb0 	bl	8004120 <rs422SendStatus>
        ctx->waitingForResponse = true;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	745a      	strb	r2, [r3, #17]
 80023c6:	e066      	b.n	8002496 <updateTransactionPaused+0x166>
    } else {
        uint8_t respBuffer[32] = {0};
 80023c8:	f107 0308 	add.w	r3, r7, #8
 80023cc:	2220      	movs	r2, #32
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f00b fad0 	bl	800d976 <memset>
        int respLength = rs422WaitForResponse(respBuffer, STATUS_RESPONSE_LENGTH, 'S');
 80023d6:	f107 0308 	add.w	r3, r7, #8
 80023da:	2253      	movs	r2, #83	@ 0x53
 80023dc:	2107      	movs	r1, #7
 80023de:	4618      	mov	r0, r3
 80023e0:	f002 f8a6 	bl	8004530 <rs422WaitForResponse>
 80023e4:	62b8      	str	r0, [r7, #40]	@ 0x28
        if (handleResponse(respBuffer, respLength, STATUS_RESPONSE_LENGTH, ctx)) {
 80023e6:	f107 0008 	add.w	r0, r7, #8
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2207      	movs	r2, #7
 80023ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023f0:	f7ff f92e 	bl	8001650 <handleResponse>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d04d      	beq.n	8002496 <updateTransactionPaused+0x166>
            if (respBuffer[4] == '9' && respBuffer[5] == '0') {
 80023fa:	7b3b      	ldrb	r3, [r7, #12]
 80023fc:	2b39      	cmp	r3, #57	@ 0x39
 80023fe:	d125      	bne.n	800244c <updateTransactionPaused+0x11c>
 8002400:	7b7b      	ldrb	r3, [r7, #13]
 8002402:	2b30      	cmp	r3, #48	@ 0x30
 8002404:	d122      	bne.n	800244c <updateTransactionPaused+0x11c>
                ctx->finalLiters_dL = ctx->currentLiters_dL;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->finalPriceTotal = ctx->currentPriceTotal;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	635a      	str	r2, [r3, #52]	@ 0x34
                rs422SendTransactionUpdate();
 8002416:	f001 ff2f 	bl	8004278 <rs422SendTransactionUpdate>
                ctx->waitingForResponse = true;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	745a      	strb	r2, [r3, #17]
                ctx->state = FSM_STATE_TRANSACTION_END;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2209      	movs	r2, #9
 8002424:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800242a:	63da      	str	r2, [r3, #60]	@ 0x3c
                saveTransactionState(ctx->finalLiters_dL, ctx->finalPriceTotal, ctx->state, ctx->fuelMode, ctx->modeSelected);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	781a      	ldrb	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	785c      	ldrb	r4, [r3, #1]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	4623      	mov	r3, r4
 8002446:	f7fe ffa1 	bl	800138c <saveTransactionState>
 800244a:	e024      	b.n	8002496 <updateTransactionPaused+0x166>
            } else if (respBuffer[4] != '7' || respBuffer[5] != '1') {
 800244c:	7b3b      	ldrb	r3, [r7, #12]
 800244e:	2b37      	cmp	r3, #55	@ 0x37
 8002450:	d102      	bne.n	8002458 <updateTransactionPaused+0x128>
 8002452:	7b7b      	ldrb	r3, [r7, #13]
 8002454:	2b31      	cmp	r3, #49	@ 0x31
 8002456:	d01e      	beq.n	8002496 <updateTransactionPaused+0x166>
                ctx->monitorActive = true;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                ctx->monitorState = 0;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	621a      	str	r2, [r3, #32]
                ctx->state = FSM_STATE_TRANSACTION;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2208      	movs	r2, #8
 800246a:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002470:	63da      	str	r2, [r3, #60]	@ 0x3c
                displayTransaction(ctx->currentLiters_dL, ctx->currentPriceTotal, "Dispensing...", ctx->price > 9999);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	885b      	ldrh	r3, [r3, #2]
 800247e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002482:	4293      	cmp	r3, r2
 8002484:	bf8c      	ite	hi
 8002486:	2301      	movhi	r3, #1
 8002488:	2300      	movls	r3, #0
 800248a:	b2db      	uxtb	r3, r3
 800248c:	4a05      	ldr	r2, [pc, #20]	@ (80024a4 <updateTransactionPaused+0x174>)
 800248e:	f7ff f8af 	bl	80015f0 <displayTransaction>
 8002492:	e000      	b.n	8002496 <updateTransactionPaused+0x166>
    if (currentMillis - lastResponseTime < DELAY_AFTER_RESPONSE) return;
 8002494:	bf00      	nop
            }
        }
    }
}
 8002496:	3734      	adds	r7, #52	@ 0x34
 8002498:	46bd      	mov	sp, r7
 800249a:	bd90      	pop	{r4, r7, pc}
 800249c:	20000230 	.word	0x20000230
 80024a0:	0800fd3c 	.word	0x0800fd3c
 80024a4:	0800fd08 	.word	0x0800fd08

080024a8 <updateTransactionEnd>:

static void updateTransactionEnd(FSMContext* ctx) {
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b0a7      	sub	sp, #156	@ 0x9c
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	6078      	str	r0, [r7, #4]
    unsigned long currentMillis = getCurrentMillis();
 80024b0:	f001 fb10 	bl	8003ad4 <getCurrentMillis>
 80024b4:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    static unsigned long lastResponseTime = 0;
    static bool dataReceived = false;
    static uint8_t retryCount = 0;

    if (ctx->stateEntryTime == currentMillis) {
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d105      	bne.n	80024d0 <updateTransactionEnd+0x28>
        dataReceived = false;
 80024c4:	4b9f      	ldr	r3, [pc, #636]	@ (8002744 <updateTransactionEnd+0x29c>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
        retryCount = 0;
 80024ca:	4b9f      	ldr	r3, [pc, #636]	@ (8002748 <updateTransactionEnd+0x2a0>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
    }

    if (currentMillis - lastResponseTime < DELAY_AFTER_RESPONSE) return;
 80024d0:	4b9e      	ldr	r3, [pc, #632]	@ (800274c <updateTransactionEnd+0x2a4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	f240 812d 	bls.w	800273a <updateTransactionEnd+0x292>
    lastResponseTime = currentMillis;
 80024e0:	4a9a      	ldr	r2, [pc, #616]	@ (800274c <updateTransactionEnd+0x2a4>)
 80024e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024e6:	6013      	str	r3, [r2, #0]

    if (!ctx->waitingForResponse && !dataReceived && retryCount < 5) {
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7c5b      	ldrb	r3, [r3, #17]
 80024ec:	f083 0301 	eor.w	r3, r3, #1
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d024      	beq.n	8002540 <updateTransactionEnd+0x98>
 80024f6:	4b93      	ldr	r3, [pc, #588]	@ (8002744 <updateTransactionEnd+0x29c>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	f083 0301 	eor.w	r3, r3, #1
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01d      	beq.n	8002540 <updateTransactionEnd+0x98>
 8002504:	4b90      	ldr	r3, [pc, #576]	@ (8002748 <updateTransactionEnd+0x2a0>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b04      	cmp	r3, #4
 800250a:	d819      	bhi.n	8002540 <updateTransactionEnd+0x98>
        rs422SendTransactionUpdate();
 800250c:	f001 feb4 	bl	8004278 <rs422SendTransactionUpdate>
        ctx->waitingForResponse = true;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	745a      	strb	r2, [r3, #17]
        retryCount++;
 8002516:	4b8c      	ldr	r3, [pc, #560]	@ (8002748 <updateTransactionEnd+0x2a0>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	3301      	adds	r3, #1
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4b8a      	ldr	r3, [pc, #552]	@ (8002748 <updateTransactionEnd+0x2a0>)
 8002520:	701a      	strb	r2, [r3, #0]
        char logMsg[64];
        snprintf(logMsg, sizeof(logMsg), "Requesting transaction update, attempt: %d", retryCount);
 8002522:	4b89      	ldr	r3, [pc, #548]	@ (8002748 <updateTransactionEnd+0x2a0>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800252a:	4a89      	ldr	r2, [pc, #548]	@ (8002750 <updateTransactionEnd+0x2a8>)
 800252c:	2140      	movs	r1, #64	@ 0x40
 800252e:	f00b f9a9 	bl	800d884 <sniprintf>
        logMessage(LOG_LEVEL_DEBUG, logMsg);
 8002532:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002536:	4619      	mov	r1, r3
 8002538:	2000      	movs	r0, #0
 800253a:	f001 f8b3 	bl	80036a4 <logMessage>
    if (!ctx->waitingForResponse && !dataReceived && retryCount < 5) {
 800253e:	e0fd      	b.n	800273c <updateTransactionEnd+0x294>
    } else if (ctx->waitingForResponse) {
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	7c5b      	ldrb	r3, [r3, #17]
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80f9 	beq.w	800273c <updateTransactionEnd+0x294>
        uint8_t respBuffer[32] = {0};
 800254a:	f107 030c 	add.w	r3, r7, #12
 800254e:	2220      	movs	r2, #32
 8002550:	2100      	movs	r1, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f00b fa0f 	bl	800d976 <memset>
        int respLength = rs422WaitForResponse(respBuffer, TRANSACTION_END_RESPONSE_LENGTH, 'T');
 8002558:	f107 030c 	add.w	r3, r7, #12
 800255c:	2254      	movs	r2, #84	@ 0x54
 800255e:	211b      	movs	r1, #27
 8002560:	4618      	mov	r0, r3
 8002562:	f001 ffe5 	bl	8004530 <rs422WaitForResponse>
 8002566:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (respLength >= 18) {
 800256a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800256e:	2b11      	cmp	r3, #17
 8002570:	f340 80c2 	ble.w	80026f8 <updateTransactionEnd+0x250>
            ctx->waitingForResponse = false;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	745a      	strb	r2, [r3, #17]
            ctx->errorCount = 0;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	615a      	str	r2, [r3, #20]
            if (respBuffer[3] == 'T' && respBuffer[4] == '1') {
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	2b54      	cmp	r3, #84	@ 0x54
 8002584:	f040 80da 	bne.w	800273c <updateTransactionEnd+0x294>
 8002588:	7c3b      	ldrb	r3, [r7, #16]
 800258a:	2b31      	cmp	r3, #49	@ 0x31
 800258c:	f040 80d6 	bne.w	800273c <updateTransactionEnd+0x294>
                char priceStr[7] = {0};
 8002590:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	f8c3 2003 	str.w	r2, [r3, #3]
                char litersStr[7] = {0};
 800259c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	f8c3 2003 	str.w	r2, [r3, #3]
                int offset = (respBuffer[5] == 'u') ? 10 : 8;
 80025a8:	7c7b      	ldrb	r3, [r7, #17]
 80025aa:	2b75      	cmp	r3, #117	@ 0x75
 80025ac:	d101      	bne.n	80025b2 <updateTransactionEnd+0x10a>
 80025ae:	230a      	movs	r3, #10
 80025b0:	e000      	b.n	80025b4 <updateTransactionEnd+0x10c>
 80025b2:	2308      	movs	r3, #8
 80025b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
                memcpy(priceStr, respBuffer + offset, 6);
 80025b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025b8:	f107 020c 	add.w	r2, r7, #12
 80025bc:	18d1      	adds	r1, r2, r3
 80025be:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80025c2:	2206      	movs	r2, #6
 80025c4:	4618      	mov	r0, r3
 80025c6:	f00b fae2 	bl	800db8e <memcpy>
                memcpy(litersStr, respBuffer + offset + 7, 6);
 80025ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025cc:	3307      	adds	r3, #7
 80025ce:	f107 020c 	add.w	r2, r7, #12
 80025d2:	18d1      	adds	r1, r2, r3
 80025d4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80025d8:	2206      	movs	r2, #6
 80025da:	4618      	mov	r0, r3
 80025dc:	f00b fad7 	bl	800db8e <memcpy>
                bool valid = true;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                for (int i = 0; i < 6; i++) {
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80025ec:	e028      	b.n	8002640 <updateTransactionEnd+0x198>
                    if (litersStr[i] < '0' || litersStr[i] > '9' || priceStr[i] < '0' || priceStr[i] > '9') {
 80025ee:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80025f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025f6:	4413      	add	r3, r2
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80025fc:	d917      	bls.n	800262e <updateTransactionEnd+0x186>
 80025fe:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8002602:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002606:	4413      	add	r3, r2
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b39      	cmp	r3, #57	@ 0x39
 800260c:	d80f      	bhi.n	800262e <updateTransactionEnd+0x186>
 800260e:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002612:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002616:	4413      	add	r3, r2
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b2f      	cmp	r3, #47	@ 0x2f
 800261c:	d907      	bls.n	800262e <updateTransactionEnd+0x186>
 800261e:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8002622:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002626:	4413      	add	r3, r2
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b39      	cmp	r3, #57	@ 0x39
 800262c:	d903      	bls.n	8002636 <updateTransactionEnd+0x18e>
                        valid = false;
 800262e:	2300      	movs	r3, #0
 8002630:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                        break;
 8002634:	e008      	b.n	8002648 <updateTransactionEnd+0x1a0>
                for (int i = 0; i < 6; i++) {
 8002636:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800263a:	3301      	adds	r3, #1
 800263c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002640:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002644:	2b05      	cmp	r3, #5
 8002646:	ddd2      	ble.n	80025ee <updateTransactionEnd+0x146>
                    }
                }
                if (valid) {
 8002648:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800264c:	2b00      	cmp	r3, #0
 800264e:	d012      	beq.n	8002676 <updateTransactionEnd+0x1ce>
                    ctx->finalLiters_dL = atol(litersStr);
 8002650:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002654:	4618      	mov	r0, r3
 8002656:	f00a f9ba 	bl	800c9ce <atol>
 800265a:	4603      	mov	r3, r0
 800265c:	461a      	mov	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	62da      	str	r2, [r3, #44]	@ 0x2c
                    ctx->finalPriceTotal = atol(priceStr);
 8002662:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002666:	4618      	mov	r0, r3
 8002668:	f00a f9b1 	bl	800c9ce <atol>
 800266c:	4603      	mov	r3, r0
 800266e:	461a      	mov	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	635a      	str	r2, [r3, #52]	@ 0x34
 8002674:	e003      	b.n	800267e <updateTransactionEnd+0x1d6>
                } else {
                    logMessage(LOG_LEVEL_ERROR, "Invalid transaction data, using last valid values");
 8002676:	4937      	ldr	r1, [pc, #220]	@ (8002754 <updateTransactionEnd+0x2ac>)
 8002678:	2001      	movs	r0, #1
 800267a:	f001 f813 	bl	80036a4 <logMessage>
                }
                displayTransaction(ctx->finalLiters_dL, ctx->finalPriceTotal, "Filling end", ctx->price > 9999);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	885b      	ldrh	r3, [r3, #2]
 800268a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800268e:	4293      	cmp	r3, r2
 8002690:	bf8c      	ite	hi
 8002692:	2301      	movhi	r3, #1
 8002694:	2300      	movls	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	4a2f      	ldr	r2, [pc, #188]	@ (8002758 <updateTransactionEnd+0x2b0>)
 800269a:	f7fe ffa9 	bl	80015f0 <displayTransaction>
                rs422SendNozzleOff();
 800269e:	f001 fe1d 	bl	80042dc <rs422SendNozzleOff>
                ctx->waitingForResponse = false;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	745a      	strb	r2, [r3, #17]
                dataReceived = true;
 80026a8:	4b26      	ldr	r3, [pc, #152]	@ (8002744 <updateTransactionEnd+0x29c>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
                retryCount = 0;
 80026ae:	4b26      	ldr	r3, [pc, #152]	@ (8002748 <updateTransactionEnd+0x2a0>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
                saveTransactionState(ctx->finalLiters_dL, ctx->finalPriceTotal, ctx->state, ctx->fuelMode, ctx->modeSelected);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	781a      	ldrb	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	785c      	ldrb	r4, [r3, #1]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	4623      	mov	r3, r4
 80026ce:	f7fe fe5d 	bl	800138c <saveTransactionState>
                char logMsg[64];
                snprintf(logMsg, sizeof(logMsg), "Transaction end: Liters=%lu, Price=%lu",
                         (unsigned long)ctx->finalLiters_dL, (unsigned long)ctx->finalPriceTotal);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                snprintf(logMsg, sizeof(logMsg), "Transaction end: Liters=%lu, Price=%lu",
 80026da:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	4613      	mov	r3, r2
 80026e2:	4a1e      	ldr	r2, [pc, #120]	@ (800275c <updateTransactionEnd+0x2b4>)
 80026e4:	2140      	movs	r1, #64	@ 0x40
 80026e6:	f00b f8cd 	bl	800d884 <sniprintf>
                logMessage(LOG_LEVEL_DEBUG, logMsg);
 80026ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026ee:	4619      	mov	r1, r3
 80026f0:	2000      	movs	r0, #0
 80026f2:	f000 ffd7 	bl	80036a4 <logMessage>
 80026f6:	e021      	b.n	800273c <updateTransactionEnd+0x294>
            }
        } else {
            ctx->waitingForResponse = false;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	745a      	strb	r2, [r3, #17]
            ctx->errorCount++;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	615a      	str	r2, [r3, #20]
            retryCount++;
 8002708:	4b0f      	ldr	r3, [pc, #60]	@ (8002748 <updateTransactionEnd+0x2a0>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	3301      	adds	r3, #1
 800270e:	b2da      	uxtb	r2, r3
 8002710:	4b0d      	ldr	r3, [pc, #52]	@ (8002748 <updateTransactionEnd+0x2a0>)
 8002712:	701a      	strb	r2, [r3, #0]
            if (retryCount >= 5) {
 8002714:	4b0c      	ldr	r3, [pc, #48]	@ (8002748 <updateTransactionEnd+0x2a0>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b04      	cmp	r3, #4
 800271a:	d90f      	bls.n	800273c <updateTransactionEnd+0x294>
                ctx->state = FSM_STATE_ERROR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2207      	movs	r2, #7
 8002720:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002728:	63da      	str	r2, [r3, #60]	@ 0x3c
                displayMessage("Trans error! Check pump");
 800272a:	480d      	ldr	r0, [pc, #52]	@ (8002760 <updateTransactionEnd+0x2b8>)
 800272c:	f001 fca0 	bl	8004070 <displayMessage>
                logMessage(LOG_LEVEL_ERROR, "Transaction data error after retries");
 8002730:	490c      	ldr	r1, [pc, #48]	@ (8002764 <updateTransactionEnd+0x2bc>)
 8002732:	2001      	movs	r0, #1
 8002734:	f000 ffb6 	bl	80036a4 <logMessage>
 8002738:	e000      	b.n	800273c <updateTransactionEnd+0x294>
    if (currentMillis - lastResponseTime < DELAY_AFTER_RESPONSE) return;
 800273a:	bf00      	nop
            }
        }
    }
}
 800273c:	3794      	adds	r7, #148	@ 0x94
 800273e:	46bd      	mov	sp, r7
 8002740:	bd90      	pop	{r4, r7, pc}
 8002742:	bf00      	nop
 8002744:	20000234 	.word	0x20000234
 8002748:	20000235 	.word	0x20000235
 800274c:	20000238 	.word	0x20000238
 8002750:	0800fd54 	.word	0x0800fd54
 8002754:	0800fd80 	.word	0x0800fd80
 8002758:	0800fdb4 	.word	0x0800fdb4
 800275c:	0800fdc0 	.word	0x0800fdc0
 8002760:	0800fde8 	.word	0x0800fde8
 8002764:	0800fe00 	.word	0x0800fe00

08002768 <updateTotalCounter>:

static void updateTotalCounter(FSMContext* ctx) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b09e      	sub	sp, #120	@ 0x78
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
    unsigned long currentMillis = getCurrentMillis();
 8002770:	f001 f9b0 	bl	8003ad4 <getCurrentMillis>
 8002774:	66f8      	str	r0, [r7, #108]	@ 0x6c
    static unsigned long lastResponseTime = 0;
    if (currentMillis - lastResponseTime < DELAY_AFTER_RESPONSE) return;
 8002776:	4b5b      	ldr	r3, [pc, #364]	@ (80028e4 <updateTotalCounter+0x17c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	f240 80ab 	bls.w	80028da <updateTotalCounter+0x172>
    lastResponseTime = currentMillis;
 8002784:	4a57      	ldr	r2, [pc, #348]	@ (80028e4 <updateTotalCounter+0x17c>)
 8002786:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002788:	6013      	str	r3, [r2, #0]

    if (!ctx->waitingForResponse && ctx->c0RetryCount < MAX_ERROR_COUNT && (currentMillis - ctx->lastC0SendTime) >= RESPONSE_TIMEOUT) {
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	7c5b      	ldrb	r3, [r3, #17]
 800278e:	f083 0301 	eor.w	r3, r3, #1
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d019      	beq.n	80027cc <updateTotalCounter+0x64>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	2b04      	cmp	r3, #4
 800279e:	dc15      	bgt.n	80027cc <updateTotalCounter+0x64>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d90d      	bls.n	80027cc <updateTotalCounter+0x64>
        rs422SendTotalCounter();
 80027b0:	f001 fe1e 	bl	80043f0 <rs422SendTotalCounter>
        ctx->waitingForResponse = true;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	745a      	strb	r2, [r3, #17]
        ctx->lastC0SendTime = currentMillis;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80027be:	645a      	str	r2, [r3, #68]	@ 0x44
        ctx->c0RetryCount++;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	619a      	str	r2, [r3, #24]
 80027ca:	e087      	b.n	80028dc <updateTotalCounter+0x174>
    } else if (ctx->waitingForResponse) {
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	7c5b      	ldrb	r3, [r3, #17]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 8083 	beq.w	80028dc <updateTotalCounter+0x174>
        uint8_t respBuffer[32] = {0};
 80027d6:	f107 030c 	add.w	r3, r7, #12
 80027da:	2220      	movs	r2, #32
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f00b f8c9 	bl	800d976 <memset>
        int respLength = rs422WaitForResponse(respBuffer, TOTAL_COUNTER_RESPONSE_LENGTH, 'C');
 80027e4:	f107 030c 	add.w	r3, r7, #12
 80027e8:	2243      	movs	r2, #67	@ 0x43
 80027ea:	2110      	movs	r1, #16
 80027ec:	4618      	mov	r0, r3
 80027ee:	f001 fe9f 	bl	8004530 <rs422WaitForResponse>
 80027f2:	66b8      	str	r0, [r7, #104]	@ 0x68
        if (handleResponse(respBuffer, respLength, TOTAL_COUNTER_RESPONSE_LENGTH, ctx)) {
 80027f4:	f107 000c 	add.w	r0, r7, #12
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2210      	movs	r2, #16
 80027fc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80027fe:	f7fe ff27 	bl	8001650 <handleResponse>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d069      	beq.n	80028dc <updateTotalCounter+0x174>
            if (respBuffer[3] == 'C' && respBuffer[4] == '1') {
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	2b43      	cmp	r3, #67	@ 0x43
 800280c:	d15d      	bne.n	80028ca <updateTotalCounter+0x162>
 800280e:	7c3b      	ldrb	r3, [r7, #16]
 8002810:	2b31      	cmp	r3, #49	@ 0x31
 8002812:	d15a      	bne.n	80028ca <updateTotalCounter+0x162>
                char totalStr[10] = {0};
 8002814:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	811a      	strh	r2, [r3, #8]
                memcpy(totalStr, respBuffer + 6, 9);
 8002820:	f107 030c 	add.w	r3, r7, #12
 8002824:	3306      	adds	r3, #6
 8002826:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 800282a:	2209      	movs	r2, #9
 800282c:	4619      	mov	r1, r3
 800282e:	f00b f9ae 	bl	800db8e <memcpy>
                bool valid = true;
 8002832:	2301      	movs	r3, #1
 8002834:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
                for (int i = 0; i < 9; i++) {
 8002838:	2300      	movs	r3, #0
 800283a:	673b      	str	r3, [r7, #112]	@ 0x70
 800283c:	e014      	b.n	8002868 <updateTotalCounter+0x100>
                    if (totalStr[i] < '0' || totalStr[i] > '9') {
 800283e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002842:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002844:	4413      	add	r3, r2
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b2f      	cmp	r3, #47	@ 0x2f
 800284a:	d906      	bls.n	800285a <updateTotalCounter+0xf2>
 800284c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002850:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002852:	4413      	add	r3, r2
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b39      	cmp	r3, #57	@ 0x39
 8002858:	d903      	bls.n	8002862 <updateTotalCounter+0xfa>
                        valid = false;
 800285a:	2300      	movs	r3, #0
 800285c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
                        break;
 8002860:	e005      	b.n	800286e <updateTotalCounter+0x106>
                for (int i = 0; i < 9; i++) {
 8002862:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002864:	3301      	adds	r3, #1
 8002866:	673b      	str	r3, [r7, #112]	@ 0x70
 8002868:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800286a:	2b08      	cmp	r3, #8
 800286c:	dde7      	ble.n	800283e <updateTotalCounter+0xd6>
                    }
                }
                if (valid) {
 800286e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002872:	2b00      	cmp	r3, #0
 8002874:	d01f      	beq.n	80028b6 <updateTotalCounter+0x14e>
                    uint32_t totalLiters_mL = atol(totalStr);
 8002876:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800287a:	4618      	mov	r0, r3
 800287c:	f00a f8a7 	bl	800c9ce <atol>
 8002880:	4603      	mov	r3, r0
 8002882:	667b      	str	r3, [r7, #100]	@ 0x64
                    char litersBuf[12];
                    formatLiters(totalLiters_mL / 10, litersBuf, sizeof(litersBuf));
 8002884:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002886:	4a18      	ldr	r2, [pc, #96]	@ (80028e8 <updateTotalCounter+0x180>)
 8002888:	fba2 2303 	umull	r2, r3, r2, r3
 800288c:	08db      	lsrs	r3, r3, #3
 800288e:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8002892:	220c      	movs	r2, #12
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe fe4f 	bl	8001538 <formatLiters>
                    char displayStr[32];
                    snprintf(displayStr, sizeof(displayStr), "TOTAL:\n%s", litersBuf);
 800289a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800289e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80028a2:	4a12      	ldr	r2, [pc, #72]	@ (80028ec <updateTotalCounter+0x184>)
 80028a4:	2120      	movs	r1, #32
 80028a6:	f00a ffed 	bl	800d884 <sniprintf>
                    displayMessage(displayStr);
 80028aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028ae:	4618      	mov	r0, r3
 80028b0:	f001 fbde 	bl	8004070 <displayMessage>
 80028b4:	e002      	b.n	80028bc <updateTotalCounter+0x154>
                } else {
                    displayMessage("TOTAL:\nError");
 80028b6:	480e      	ldr	r0, [pc, #56]	@ (80028f0 <updateTotalCounter+0x188>)
 80028b8:	f001 fbda 	bl	8004070 <displayMessage>
                }
                ctx->waitingForResponse = false;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	745a      	strb	r2, [r3, #17]
                ctx->c0RetryCount = MAX_ERROR_COUNT;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2205      	movs	r2, #5
 80028c6:	619a      	str	r2, [r3, #24]
            if (respBuffer[3] == 'C' && respBuffer[4] == '1') {
 80028c8:	e008      	b.n	80028dc <updateTotalCounter+0x174>
            } else {
                if (ctx->c0RetryCount >= MAX_ERROR_COUNT) {
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	dd04      	ble.n	80028dc <updateTotalCounter+0x174>
                    displayMessage("TOTAL:\nError");
 80028d2:	4807      	ldr	r0, [pc, #28]	@ (80028f0 <updateTotalCounter+0x188>)
 80028d4:	f001 fbcc 	bl	8004070 <displayMessage>
 80028d8:	e000      	b.n	80028dc <updateTotalCounter+0x174>
    if (currentMillis - lastResponseTime < DELAY_AFTER_RESPONSE) return;
 80028da:	bf00      	nop
                }
            }
        }
    }
}
 80028dc:	3778      	adds	r7, #120	@ 0x78
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	2000023c 	.word	0x2000023c
 80028e8:	cccccccd 	.word	0xcccccccd
 80028ec:	0800fe28 	.word	0x0800fe28
 80028f0:	0800fe34 	.word	0x0800fe34

080028f4 <initFSM>:

// Инициализация FSM
void initFSM(FSMContext* ctx)
{
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b091      	sub	sp, #68	@ 0x44
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	6078      	str	r0, [r7, #4]
    // Инициализация мьютекса для логов
    logMutex = xSemaphoreCreateMutex();
 80028fc:	2001      	movs	r0, #1
 80028fe:	f007 fb3c 	bl	8009f7a <xQueueCreateMutex>
 8002902:	4603      	mov	r3, r0
 8002904:	4a78      	ldr	r2, [pc, #480]	@ (8002ae8 <initFSM+0x1f4>)
 8002906:	6013      	str	r3, [r2, #0]
    if (logMutex == NULL) {
 8002908:	4b77      	ldr	r3, [pc, #476]	@ (8002ae8 <initFSM+0x1f4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <initFSM+0x20>
        Error_Handler();
 8002910:	f001 fae4 	bl	8003edc <Error_Handler>
    }

    // Инициализация логов через UART3
    char logMsg[32];
    snprintf(logMsg, sizeof(logMsg), "FSM Initialized\r\n");
 8002914:	f107 0318 	add.w	r3, r7, #24
 8002918:	4a74      	ldr	r2, [pc, #464]	@ (8002aec <initFSM+0x1f8>)
 800291a:	2120      	movs	r1, #32
 800291c:	4618      	mov	r0, r3
 800291e:	f00a ffb1 	bl	800d884 <sniprintf>
    logMessage(LOG_LEVEL_DEBUG, logMsg);
 8002922:	f107 0318 	add.w	r3, r7, #24
 8002926:	4619      	mov	r1, r3
 8002928:	2000      	movs	r0, #0
 800292a:	f000 febb 	bl	80036a4 <logMessage>

    // Отправка команды Nozzle Off
    rs422SendNozzleOff();
 800292e:	f001 fcd5 	bl	80042dc <rs422SendNozzleOff>

    // Чтение цены из EEPROM
    ctx->price = readPriceFromEEPROM();
 8002932:	f7fe fd01 	bl	8001338 <readPriceFromEEPROM>
 8002936:	4603      	mov	r3, r0
 8002938:	461a      	mov	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	805a      	strh	r2, [r3, #2]
    ctx->priceValid = ctx->price > 0;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	885b      	ldrh	r3, [r3, #2]
 8002942:	2b00      	cmp	r3, #0
 8002944:	bf14      	ite	ne
 8002946:	2301      	movne	r3, #1
 8002948:	2300      	moveq	r3, #0
 800294a:	b2da      	uxtb	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	711a      	strb	r2, [r3, #4]
    ctx->fuelMode = FUEL_BY_VOLUME;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	705a      	strb	r2, [r3, #1]
    ctx->stateEntryTime = getCurrentMillis();
 8002956:	f001 f8bd 	bl	8003ad4 <getCurrentMillis>
 800295a:	4602      	mov	r2, r0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	63da      	str	r2, [r3, #60]	@ 0x3c
    ctx->waitingForResponse = false;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	745a      	strb	r2, [r3, #17]
    ctx->errorCount = 0;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	615a      	str	r2, [r3, #20]
    ctx->c0RetryCount = 0;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	619a      	str	r2, [r3, #24]
    ctx->lastC0SendTime = 0;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	645a      	str	r2, [r3, #68]	@ 0x44
    ctx->statusPollingActive = true;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	771a      	strb	r2, [r3, #28]
    ctx->transactionVolume = 0;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
    ctx->transactionAmount = 0;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	60da      	str	r2, [r3, #12]
    ctx->transactionStarted = false;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	741a      	strb	r2, [r3, #16]
    ctx->monitorState = 0;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	621a      	str	r2, [r3, #32]
    ctx->monitorActive = false;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    ctx->currentLiters_dL = 0;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->finalLiters_dL = 0;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    ctx->currentPriceTotal = 0;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	631a      	str	r2, [r3, #48]	@ 0x30
    ctx->finalPriceTotal = 0;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	635a      	str	r2, [r3, #52]	@ 0x34
    ctx->nozzleUpWarning = false;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ctx->skipFirstStatusCheck = false;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    ctx->lastKeyTime = 0;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	641a      	str	r2, [r3, #64]	@ 0x40
    ctx->priceInput[0] = '\0';
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    ctx->modeSelected = false;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    // Проверка сохранённой транзакции
    uint32_t savedLiters, savedPrice;
    FSMState savedState;
    FuelMode savedMode;
    bool savedModeSelected;
    if (restoreTransactionState(&savedLiters, &savedPrice, &savedState, &savedMode, &savedModeSelected)) {
 80029dc:	f107 040e 	add.w	r4, r7, #14
 80029e0:	f107 020f 	add.w	r2, r7, #15
 80029e4:	f107 0110 	add.w	r1, r7, #16
 80029e8:	f107 0014 	add.w	r0, r7, #20
 80029ec:	f107 030d 	add.w	r3, r7, #13
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	4623      	mov	r3, r4
 80029f4:	f7fe fcfa 	bl	80013ec <restoreTransactionState>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d048      	beq.n	8002a90 <initFSM+0x19c>
        ctx->currentLiters_dL = savedLiters;
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	629a      	str	r2, [r3, #40]	@ 0x28
        ctx->currentPriceTotal = savedPrice;
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	631a      	str	r2, [r3, #48]	@ 0x30
        ctx->state = savedState;
 8002a0a:	7bfa      	ldrb	r2, [r7, #15]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	701a      	strb	r2, [r3, #0]
        if (savedState == FSM_STATE_TRANSACTION || savedState == FSM_STATE_TRANSACTION_PAUSED) {
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d002      	beq.n	8002a1c <initFSM+0x128>
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	2b0b      	cmp	r3, #11
 8002a1a:	d121      	bne.n	8002a60 <initFSM+0x16c>
            ctx->fuelMode = savedMode;
 8002a1c:	7bba      	ldrb	r2, [r7, #14]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	705a      	strb	r2, [r3, #1]
            ctx->modeSelected = savedModeSelected;
 8002a22:	7b7a      	ldrb	r2, [r7, #13]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            ctx->transactionStarted = true;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	741a      	strb	r2, [r3, #16]
            ctx->monitorActive = true;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            ctx->monitorState = 1;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	621a      	str	r2, [r3, #32]
            displayTransaction(ctx->currentLiters_dL, ctx->currentPriceTotal, "Restoring trans...", ctx->price > 9999);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	885b      	ldrh	r3, [r3, #2]
 8002a4a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	bf8c      	ite	hi
 8002a52:	2301      	movhi	r3, #1
 8002a54:	2300      	movls	r3, #0
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	4a25      	ldr	r2, [pc, #148]	@ (8002af0 <initFSM+0x1fc>)
 8002a5a:	f7fe fdc9 	bl	80015f0 <displayTransaction>
 8002a5e:	e02e      	b.n	8002abe <initFSM+0x1ca>
        } else {
            // Игнорируем сохранённый режим для неактивных транзакций
            ctx->state = ctx->priceValid ? FSM_STATE_CHECK_STATUS : FSM_STATE_WAIT_FOR_PRICE_INPUT;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	791b      	ldrb	r3, [r3, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <initFSM+0x178>
 8002a68:	2200      	movs	r2, #0
 8002a6a:	e000      	b.n	8002a6e <initFSM+0x17a>
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	701a      	strb	r2, [r3, #0]
            if (!ctx->priceValid) {
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	791b      	ldrb	r3, [r3, #4]
 8002a76:	f083 0301 	eor.w	r3, r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <initFSM+0x194>
                displayMessage("Set price (0-99999)");
 8002a80:	481c      	ldr	r0, [pc, #112]	@ (8002af4 <initFSM+0x200>)
 8002a82:	f001 faf5 	bl	8004070 <displayMessage>
 8002a86:	e01a      	b.n	8002abe <initFSM+0x1ca>
            } else {
                displayMessage("Please select mode");
 8002a88:	481b      	ldr	r0, [pc, #108]	@ (8002af8 <initFSM+0x204>)
 8002a8a:	f001 faf1 	bl	8004070 <displayMessage>
 8002a8e:	e016      	b.n	8002abe <initFSM+0x1ca>
            }
        }
    } else {
        ctx->state = ctx->priceValid ? FSM_STATE_CHECK_STATUS : FSM_STATE_WAIT_FOR_PRICE_INPUT;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	791b      	ldrb	r3, [r3, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <initFSM+0x1a8>
 8002a98:	2200      	movs	r2, #0
 8002a9a:	e000      	b.n	8002a9e <initFSM+0x1aa>
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	701a      	strb	r2, [r3, #0]
        if (!ctx->priceValid) {
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	791b      	ldrb	r3, [r3, #4]
 8002aa6:	f083 0301 	eor.w	r3, r3, #1
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <initFSM+0x1c4>
            displayMessage("Set price (0-99999)");
 8002ab0:	4810      	ldr	r0, [pc, #64]	@ (8002af4 <initFSM+0x200>)
 8002ab2:	f001 fadd 	bl	8004070 <displayMessage>
 8002ab6:	e002      	b.n	8002abe <initFSM+0x1ca>
        } else {
            displayMessage("Please select mode");
 8002ab8:	480f      	ldr	r0, [pc, #60]	@ (8002af8 <initFSM+0x204>)
 8002aba:	f001 fad9 	bl	8004070 <displayMessage>
        }
    }

    if (ctx->state == FSM_STATE_CHECK_STATUS) {
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d104      	bne.n	8002ad0 <initFSM+0x1dc>
        rs422SendStatus();
 8002ac6:	f001 fb2b 	bl	8004120 <rs422SendStatus>
        ctx->waitingForResponse = true;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	745a      	strb	r2, [r3, #17]
    }

    // Отображение приветственного сообщения
    displayMessage("CENSTAR");
 8002ad0:	480a      	ldr	r0, [pc, #40]	@ (8002afc <initFSM+0x208>)
 8002ad2:	f001 facd 	bl	8004070 <displayMessage>
    vTaskDelay(DISPLAY_WELCOME_DURATION / portTICK_PERIOD_MS);
 8002ad6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ada:	f008 f95d 	bl	800ad98 <vTaskDelay>
}
 8002ade:	bf00      	nop
 8002ae0:	373c      	adds	r7, #60	@ 0x3c
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd90      	pop	{r4, r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000214 	.word	0x20000214
 8002aec:	0800fe44 	.word	0x0800fe44
 8002af0:	0800fcc0 	.word	0x0800fcc0
 8002af4:	0800fe58 	.word	0x0800fe58
 8002af8:	0800fc8c 	.word	0x0800fc8c
 8002afc:	0800fe6c 	.word	0x0800fe6c

08002b00 <updateFSM>:

// Основной цикл FSM
void updateFSM(FSMContext* ctx)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
    switch (ctx->state) {
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b0c      	cmp	r3, #12
 8002b0e:	d851      	bhi.n	8002bb4 <updateFSM+0xb4>
 8002b10:	a201      	add	r2, pc, #4	@ (adr r2, 8002b18 <updateFSM+0x18>)
 8002b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b16:	bf00      	nop
 8002b18:	08002b4d 	.word	0x08002b4d
 8002b1c:	08002b5d 	.word	0x08002b5d
 8002b20:	08002b65 	.word	0x08002b65
 8002b24:	08002b6d 	.word	0x08002b6d
 8002b28:	08002b75 	.word	0x08002b75
 8002b2c:	08002b85 	.word	0x08002b85
 8002b30:	08002b7d 	.word	0x08002b7d
 8002b34:	08002b55 	.word	0x08002b55
 8002b38:	08002b95 	.word	0x08002b95
 8002b3c:	08002ba5 	.word	0x08002ba5
 8002b40:	08002bad 	.word	0x08002bad
 8002b44:	08002b9d 	.word	0x08002b9d
 8002b48:	08002b8d 	.word	0x08002b8d
        case FSM_STATE_CHECK_STATUS:        updateCheckStatus(ctx); break;
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7fe fddd 	bl	800170c <updateCheckStatus>
 8002b52:	e030      	b.n	8002bb6 <updateFSM+0xb6>
        case FSM_STATE_ERROR:               updateError(ctx); break;
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7fe fef5 	bl	8001944 <updateError>
 8002b5a:	e02c      	b.n	8002bb6 <updateFSM+0xb6>
        case FSM_STATE_IDLE:                updateIdle(ctx); break;
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7fe ffcb 	bl	8001af8 <updateIdle>
 8002b62:	e028      	b.n	8002bb6 <updateFSM+0xb6>
        case FSM_STATE_WAIT_FOR_PRICE_INPUT: updateWaitForPriceInput(ctx); break;
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff f8bd 	bl	8001ce4 <updateWaitForPriceInput>
 8002b6a:	e024      	b.n	8002bb6 <updateFSM+0xb6>
        case FSM_STATE_VIEW_PRICE:          updateViewPrice(ctx); break;
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff f8c3 	bl	8001cf8 <updateViewPrice>
 8002b72:	e020      	b.n	8002bb6 <updateFSM+0xb6>
        case FSM_STATE_TRANSITION_PRICE_SET: updateTransitionPriceSet(ctx); break;
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff f8f1 	bl	8001d5c <updateTransitionPriceSet>
 8002b7a:	e01c      	b.n	8002bb6 <updateFSM+0xb6>
        case FSM_STATE_TRANSITION_EDIT_PRICE: updateTransitionEditPrice(ctx); break;
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7ff f909 	bl	8001d94 <updateTransitionEditPrice>
 8002b82:	e018      	b.n	8002bb6 <updateFSM+0xb6>
        case FSM_STATE_EDIT_PRICE:          updateEditPrice(ctx); break;
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff f939 	bl	8001dfc <updateEditPrice>
 8002b8a:	e014      	b.n	8002bb6 <updateFSM+0xb6>
        case FSM_STATE_CONFIRM_TRANSACTION: updateConfirmTransaction(ctx); break;
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff f967 	bl	8001e60 <updateConfirmTransaction>
 8002b92:	e010      	b.n	8002bb6 <updateFSM+0xb6>
        case FSM_STATE_TRANSACTION:         updateTransaction(ctx); break;
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff f96d 	bl	8001e74 <updateTransaction>
 8002b9a:	e00c      	b.n	8002bb6 <updateFSM+0xb6>
        case FSM_STATE_TRANSACTION_PAUSED:  updateTransactionPaused(ctx); break;
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff fbc7 	bl	8002330 <updateTransactionPaused>
 8002ba2:	e008      	b.n	8002bb6 <updateFSM+0xb6>
        case FSM_STATE_TRANSACTION_END:     updateTransactionEnd(ctx); break;
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fc7f 	bl	80024a8 <updateTransactionEnd>
 8002baa:	e004      	b.n	8002bb6 <updateFSM+0xb6>
        case FSM_STATE_TOTAL_COUNTER:       updateTotalCounter(ctx); break;
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff fddb 	bl	8002768 <updateTotalCounter>
 8002bb2:	e000      	b.n	8002bb6 <updateFSM+0xb6>
        default: break;
 8002bb4:	bf00      	nop
    }
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop

08002bc0 <processKeyFSM>:

// Управление вводом клавиш
void processKeyFSM(FSMContext* ctx, char key)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b0a1      	sub	sp, #132	@ 0x84
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	70fb      	strb	r3, [r7, #3]
    unsigned long currentMillis = getCurrentMillis();
 8002bcc:	f000 ff82 	bl	8003ad4 <getCurrentMillis>
 8002bd0:	6738      	str	r0, [r7, #112]	@ 0x70
    if (currentMillis - ctx->lastKeyTime < KEY_DEBOUNCE_MS) {
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b0e      	cmp	r3, #14
 8002bdc:	d804      	bhi.n	8002be8 <processKeyFSM+0x28>
        displayMessage("Slow down! Wait");
 8002bde:	48b2      	ldr	r0, [pc, #712]	@ (8002ea8 <processKeyFSM+0x2e8>)
 8002be0:	f001 fa46 	bl	8004070 <displayMessage>
 8002be4:	f000 bd4b 	b.w	800367e <processKeyFSM+0xabe>
        return;
    }
    ctx->lastKeyTime = currentMillis;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002bec:	641a      	str	r2, [r3, #64]	@ 0x40

    char logMsg[32];
    snprintf(logMsg, sizeof(logMsg), "Key pressed: %c", key);
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8002bf4:	4aad      	ldr	r2, [pc, #692]	@ (8002eac <processKeyFSM+0x2ec>)
 8002bf6:	2120      	movs	r1, #32
 8002bf8:	f00a fe44 	bl	800d884 <sniprintf>
    logMessage(LOG_LEVEL_DEBUG, logMsg);
 8002bfc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002c00:	4619      	mov	r1, r3
 8002c02:	2000      	movs	r0, #0
 8002c04:	f000 fd4e 	bl	80036a4 <logMessage>
    snprintf(logMsg, sizeof(logMsg), "Mode selected: %d", ctx->modeSelected);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c0e:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8002c12:	4aa7      	ldr	r2, [pc, #668]	@ (8002eb0 <processKeyFSM+0x2f0>)
 8002c14:	2120      	movs	r1, #32
 8002c16:	f00a fe35 	bl	800d884 <sniprintf>
    logMessage(LOG_LEVEL_DEBUG, logMsg);
 8002c1a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002c1e:	4619      	mov	r1, r3
 8002c20:	2000      	movs	r0, #0
 8002c22:	f000 fd3f 	bl	80036a4 <logMessage>
    snprintf(logMsg, sizeof(logMsg), "Current mode: %d", ctx->fuelMode);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	785b      	ldrb	r3, [r3, #1]
 8002c2a:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8002c2e:	4aa1      	ldr	r2, [pc, #644]	@ (8002eb4 <processKeyFSM+0x2f4>)
 8002c30:	2120      	movs	r1, #32
 8002c32:	f00a fe27 	bl	800d884 <sniprintf>
    logMessage(LOG_LEVEL_DEBUG, logMsg);
 8002c36:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f000 fd31 	bl	80036a4 <logMessage>

    // Обработка клавиш в зависимости от состояния
    // Не все состояния требуют обработки клавиш (например, CHECK_STATUS, ERROR, TRANSACTION),
    // поэтому обрабатываем только те, где пользовательский ввод имеет смысл
    switch (ctx->state) {
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	2b0b      	cmp	r3, #11
 8002c4a:	f200 8503 	bhi.w	8003654 <processKeyFSM+0xa94>
 8002c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c54 <processKeyFSM+0x94>)
 8002c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c54:	08002f81 	.word	0x08002f81
 8002c58:	08002c85 	.word	0x08002c85
 8002c5c:	080030e7 	.word	0x080030e7
 8002c60:	08003283 	.word	0x08003283
 8002c64:	08003185 	.word	0x08003185
 8002c68:	08003283 	.word	0x08003283
 8002c6c:	08003655 	.word	0x08003655
 8002c70:	08003369 	.word	0x08003369
 8002c74:	08003561 	.word	0x08003561
 8002c78:	080035ef 	.word	0x080035ef
 8002c7c:	080034b7 	.word	0x080034b7
 8002c80:	080032ed 	.word	0x080032ed
        case FSM_STATE_WAIT_FOR_PRICE_INPUT: {
            if (key >= '0' && key <= '9') {
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	2b2f      	cmp	r3, #47	@ 0x2f
 8002c88:	d942      	bls.n	8002d10 <processKeyFSM+0x150>
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	2b39      	cmp	r3, #57	@ 0x39
 8002c8e:	d83f      	bhi.n	8002d10 <processKeyFSM+0x150>
                size_t len = strlen(ctx->priceInput);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3349      	adds	r3, #73	@ 0x49
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd fa9b 	bl	80001d0 <strlen>
 8002c9a:	6678      	str	r0, [r7, #100]	@ 0x64
                if (len < PRICE_FORMAT_LENGTH) {
 8002c9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c9e:	2b06      	cmp	r3, #6
 8002ca0:	d830      	bhi.n	8002d04 <processKeyFSM+0x144>
                    ctx->priceInput[len] = key;
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3349      	adds	r3, #73	@ 0x49
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	701a      	strb	r2, [r3, #0]
                    ctx->priceInput[len + 1] = '\0';
 8002cae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
                    char displayStr[32];
                    snprintf(displayStr, sizeof(displayStr), "%s: %s",
                             ctx->fuelMode == FUEL_BY_VOLUME ? "Volume" : "Amount", ctx->priceInput);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	785b      	ldrb	r3, [r3, #1]
                    snprintf(displayStr, sizeof(displayStr), "%s: %s",
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <processKeyFSM+0x108>
 8002cc4:	4a7c      	ldr	r2, [pc, #496]	@ (8002eb8 <processKeyFSM+0x2f8>)
 8002cc6:	e000      	b.n	8002cca <processKeyFSM+0x10a>
 8002cc8:	4a7c      	ldr	r2, [pc, #496]	@ (8002ebc <processKeyFSM+0x2fc>)
                             ctx->fuelMode == FUEL_BY_VOLUME ? "Volume" : "Amount", ctx->priceInput);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3349      	adds	r3, #73	@ 0x49
                    snprintf(displayStr, sizeof(displayStr), "%s: %s",
 8002cce:	f107 000c 	add.w	r0, r7, #12
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	4a7a      	ldr	r2, [pc, #488]	@ (8002ec0 <processKeyFSM+0x300>)
 8002cd8:	2120      	movs	r1, #32
 8002cda:	f00a fdd3 	bl	800d884 <sniprintf>
                    displayMessage(displayStr);
 8002cde:	f107 030c 	add.w	r3, r7, #12
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f001 f9c4 	bl	8004070 <displayMessage>
                    snprintf(logMsg, sizeof(logMsg), "Input so far: %s", ctx->priceInput);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3349      	adds	r3, #73	@ 0x49
 8002cec:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8002cf0:	4a74      	ldr	r2, [pc, #464]	@ (8002ec4 <processKeyFSM+0x304>)
 8002cf2:	2120      	movs	r1, #32
 8002cf4:	f00a fdc6 	bl	800d884 <sniprintf>
                    logMessage(LOG_LEVEL_DEBUG, logMsg);
 8002cf8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f000 fcd0 	bl	80036a4 <logMessage>
                }
                ctx->stateEntryTime = currentMillis;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002d08:	63da      	str	r2, [r3, #60]	@ 0x3c
            if (key >= '0' && key <= '9') {
 8002d0a:	bf00      	nop
                    displayMessage("Confirm? Press K");
                    snprintf(logMsg, sizeof(logMsg), "Confirmed value: %lu", (unsigned long)value);
                    logMessage(LOG_LEVEL_DEBUG, logMsg);
                }
            }
            break;
 8002d0c:	f000 bca4 	b.w	8003658 <processKeyFSM+0xa98>
            else if (key == '*') {
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d14:	d147      	bne.n	8002da6 <processKeyFSM+0x1e6>
                size_t len = strlen(ctx->priceInput);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3349      	adds	r3, #73	@ 0x49
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fd fa58 	bl	80001d0 <strlen>
 8002d20:	65f8      	str	r0, [r7, #92]	@ 0x5c
                if (len < PRICE_FORMAT_LENGTH - 1 && strchr(ctx->priceInput, '.') == NULL) {
 8002d22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d24:	2b05      	cmp	r3, #5
 8002d26:	d839      	bhi.n	8002d9c <processKeyFSM+0x1dc>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3349      	adds	r3, #73	@ 0x49
 8002d2c:	212e      	movs	r1, #46	@ 0x2e
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f00a fe29 	bl	800d986 <strchr>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d130      	bne.n	8002d9c <processKeyFSM+0x1dc>
                    ctx->priceInput[len] = '.';
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d3e:	4413      	add	r3, r2
 8002d40:	3349      	adds	r3, #73	@ 0x49
 8002d42:	222e      	movs	r2, #46	@ 0x2e
 8002d44:	701a      	strb	r2, [r3, #0]
                    ctx->priceInput[len + 1] = '\0';
 8002d46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d48:	3301      	adds	r3, #1
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
                             ctx->fuelMode == FUEL_BY_VOLUME ? "Volume" : "Amount", ctx->priceInput);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	785b      	ldrb	r3, [r3, #1]
                    snprintf(displayStr, sizeof(displayStr), "%s: %s",
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <processKeyFSM+0x1a0>
 8002d5c:	4a56      	ldr	r2, [pc, #344]	@ (8002eb8 <processKeyFSM+0x2f8>)
 8002d5e:	e000      	b.n	8002d62 <processKeyFSM+0x1a2>
 8002d60:	4a56      	ldr	r2, [pc, #344]	@ (8002ebc <processKeyFSM+0x2fc>)
                             ctx->fuelMode == FUEL_BY_VOLUME ? "Volume" : "Amount", ctx->priceInput);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3349      	adds	r3, #73	@ 0x49
                    snprintf(displayStr, sizeof(displayStr), "%s: %s",
 8002d66:	f107 000c 	add.w	r0, r7, #12
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	4a54      	ldr	r2, [pc, #336]	@ (8002ec0 <processKeyFSM+0x300>)
 8002d70:	2120      	movs	r1, #32
 8002d72:	f00a fd87 	bl	800d884 <sniprintf>
                    displayMessage(displayStr);
 8002d76:	f107 030c 	add.w	r3, r7, #12
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f001 f978 	bl	8004070 <displayMessage>
                    snprintf(logMsg, sizeof(logMsg), "Input so far: %s", ctx->priceInput);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3349      	adds	r3, #73	@ 0x49
 8002d84:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8002d88:	4a4e      	ldr	r2, [pc, #312]	@ (8002ec4 <processKeyFSM+0x304>)
 8002d8a:	2120      	movs	r1, #32
 8002d8c:	f00a fd7a 	bl	800d884 <sniprintf>
                    logMessage(LOG_LEVEL_DEBUG, logMsg);
 8002d90:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002d94:	4619      	mov	r1, r3
 8002d96:	2000      	movs	r0, #0
 8002d98:	f000 fc84 	bl	80036a4 <logMessage>
                ctx->stateEntryTime = currentMillis;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002da0:	63da      	str	r2, [r3, #60]	@ 0x3c
            break;
 8002da2:	f000 bc59 	b.w	8003658 <processKeyFSM+0xa98>
            else if (key == 'E') {
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	2b45      	cmp	r3, #69	@ 0x45
 8002daa:	d130      	bne.n	8002e0e <processKeyFSM+0x24e>
                if (strlen(ctx->priceInput) == 0) {
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3349      	adds	r3, #73	@ 0x49
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d11f      	bne.n	8002df6 <processKeyFSM+0x236>
                    ctx->state = FSM_STATE_IDLE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]
                    ctx->stateEntryTime = currentMillis;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002dc0:	63da      	str	r2, [r3, #60]	@ 0x3c
                    if (!ctx->nozzleUpWarning) {
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002dc8:	f083 0301 	eor.w	r3, r3, #1
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 8442 	beq.w	8003658 <processKeyFSM+0xa98>
                        if (ctx->modeSelected) {
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d006      	beq.n	8002dec <processKeyFSM+0x22c>
                            displayFuelMode(ctx->fuelMode);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	785b      	ldrb	r3, [r3, #1]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe fbce 	bl	8001584 <displayFuelMode>
            break;
 8002de8:	f000 bc36 	b.w	8003658 <processKeyFSM+0xa98>
                            displayMessage("Please select mode");
 8002dec:	4836      	ldr	r0, [pc, #216]	@ (8002ec8 <processKeyFSM+0x308>)
 8002dee:	f001 f93f 	bl	8004070 <displayMessage>
            break;
 8002df2:	f000 bc31 	b.w	8003658 <processKeyFSM+0xa98>
                    ctx->priceInput[0] = '\0';
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
                    displayMessage("Cleared");
 8002dfe:	4833      	ldr	r0, [pc, #204]	@ (8002ecc <processKeyFSM+0x30c>)
 8002e00:	f001 f936 	bl	8004070 <displayMessage>
                    ctx->stateEntryTime = currentMillis;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002e08:	63da      	str	r2, [r3, #60]	@ 0x3c
            break;
 8002e0a:	f000 bc25 	b.w	8003658 <processKeyFSM+0xa98>
            else if (key == 'K') {
 8002e0e:	78fb      	ldrb	r3, [r7, #3]
 8002e10:	2b4b      	cmp	r3, #75	@ 0x4b
 8002e12:	f040 8421 	bne.w	8003658 <processKeyFSM+0xa98>
                if (strlen(ctx->priceInput) > 0) {
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3349      	adds	r3, #73	@ 0x49
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 841b 	beq.w	8003658 <processKeyFSM+0xa98>
                    if (ctx->fuelMode == FUEL_BY_VOLUME) {
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	785b      	ldrb	r3, [r3, #1]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d158      	bne.n	8002edc <processKeyFSM+0x31c>
                        float floatValue = atof(ctx->priceInput);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3349      	adds	r3, #73	@ 0x49
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f009 fdca 	bl	800c9c8 <atof>
 8002e34:	ec53 2b10 	vmov	r2, r3, d0
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f7fd fe96 	bl	8000b6c <__aeabi_d2f>
 8002e40:	4603      	mov	r3, r0
 8002e42:	663b      	str	r3, [r7, #96]	@ 0x60
                        if (floatValue > 0 && floatValue <= 9999.99) {
 8002e44:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002e48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e50:	dd16      	ble.n	8002e80 <processKeyFSM+0x2c0>
 8002e52:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002e54:	f7fd fb78 	bl	8000548 <__aeabi_f2d>
 8002e58:	a311      	add	r3, pc, #68	@ (adr r3, 8002ea0 <processKeyFSM+0x2e0>)
 8002e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5e:	f7fd fe47 	bl	8000af0 <__aeabi_dcmple>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00b      	beq.n	8002e80 <processKeyFSM+0x2c0>
                            value = (uint32_t)(floatValue * 100);
 8002e68:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002e6c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002ed0 <processKeyFSM+0x310>
 8002e70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e78:	ee17 3a90 	vmov	r3, s15
 8002e7c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e7e:	e053      	b.n	8002f28 <processKeyFSM+0x368>
                            displayMessage("Invalid volume!");
 8002e80:	4814      	ldr	r0, [pc, #80]	@ (8002ed4 <processKeyFSM+0x314>)
 8002e82:	f001 f8f5 	bl	8004070 <displayMessage>
                            ctx->priceInput[0] = '\0';
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
                            ctx->stateEntryTime = currentMillis;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002e92:	63da      	str	r2, [r3, #60]	@ 0x3c
                            logMessage(LOG_LEVEL_ERROR, "Invalid volume: Out of range");
 8002e94:	4910      	ldr	r1, [pc, #64]	@ (8002ed8 <processKeyFSM+0x318>)
 8002e96:	2001      	movs	r0, #1
 8002e98:	f000 fc04 	bl	80036a4 <logMessage>
                            break;
 8002e9c:	e3ef      	b.n	800367e <processKeyFSM+0xabe>
 8002e9e:	bf00      	nop
 8002ea0:	b851eb85 	.word	0xb851eb85
 8002ea4:	40c387fe 	.word	0x40c387fe
 8002ea8:	0800fe74 	.word	0x0800fe74
 8002eac:	0800fe84 	.word	0x0800fe84
 8002eb0:	0800fe94 	.word	0x0800fe94
 8002eb4:	0800fea8 	.word	0x0800fea8
 8002eb8:	0800febc 	.word	0x0800febc
 8002ebc:	0800fec4 	.word	0x0800fec4
 8002ec0:	0800fecc 	.word	0x0800fecc
 8002ec4:	0800fed4 	.word	0x0800fed4
 8002ec8:	0800fc8c 	.word	0x0800fc8c
 8002ecc:	0800fee8 	.word	0x0800fee8
 8002ed0:	42c80000 	.word	0x42c80000
 8002ed4:	0800fef0 	.word	0x0800fef0
 8002ed8:	0800ff00 	.word	0x0800ff00
                        value = atol(ctx->priceInput);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3349      	adds	r3, #73	@ 0x49
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f009 fd74 	bl	800c9ce <atol>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	677b      	str	r3, [r7, #116]	@ 0x74
                        if (value == 0) {
 8002eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10e      	bne.n	8002f0e <processKeyFSM+0x34e>
                            displayMessage("Invalid amount!");
 8002ef0:	4896      	ldr	r0, [pc, #600]	@ (800314c <processKeyFSM+0x58c>)
 8002ef2:	f001 f8bd 	bl	8004070 <displayMessage>
                            ctx->priceInput[0] = '\0';
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
                            ctx->stateEntryTime = currentMillis;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002f02:	63da      	str	r2, [r3, #60]	@ 0x3c
                            logMessage(LOG_LEVEL_ERROR, "Invalid amount: Zero");
 8002f04:	4992      	ldr	r1, [pc, #584]	@ (8003150 <processKeyFSM+0x590>)
 8002f06:	2001      	movs	r0, #1
 8002f08:	f000 fbcc 	bl	80036a4 <logMessage>
                            break;
 8002f0c:	e3b7      	b.n	800367e <processKeyFSM+0xabe>
                        snprintf(logMsg, sizeof(logMsg), "Parsed amount: %lu", (unsigned long)value);
 8002f0e:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8002f12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f14:	4a8f      	ldr	r2, [pc, #572]	@ (8003154 <processKeyFSM+0x594>)
 8002f16:	2120      	movs	r1, #32
 8002f18:	f00a fcb4 	bl	800d884 <sniprintf>
                        logMessage(LOG_LEVEL_DEBUG, logMsg);
 8002f1c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002f20:	4619      	mov	r1, r3
 8002f22:	2000      	movs	r0, #0
 8002f24:	f000 fbbe 	bl	80036a4 <logMessage>
                    if (ctx->fuelMode == FUEL_BY_VOLUME) {
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	785b      	ldrb	r3, [r3, #1]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d106      	bne.n	8002f3e <processKeyFSM+0x37e>
                        ctx->transactionVolume = value;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002f34:	609a      	str	r2, [r3, #8]
                        ctx->transactionAmount = 0;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	60da      	str	r2, [r3, #12]
 8002f3c:	e005      	b.n	8002f4a <processKeyFSM+0x38a>
                        ctx->transactionVolume = 0;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
                        ctx->transactionAmount = value;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002f48:	60da      	str	r2, [r3, #12]
                    ctx->state = FSM_STATE_CONFIRM_TRANSACTION;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	220c      	movs	r2, #12
 8002f4e:	701a      	strb	r2, [r3, #0]
                    ctx->stateEntryTime = currentMillis;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002f54:	63da      	str	r2, [r3, #60]	@ 0x3c
                    ctx->priceInput[0] = '\0';
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
                    displayMessage("Confirm? Press K");
 8002f5e:	487e      	ldr	r0, [pc, #504]	@ (8003158 <processKeyFSM+0x598>)
 8002f60:	f001 f886 	bl	8004070 <displayMessage>
                    snprintf(logMsg, sizeof(logMsg), "Confirmed value: %lu", (unsigned long)value);
 8002f64:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8002f68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f6a:	4a7c      	ldr	r2, [pc, #496]	@ (800315c <processKeyFSM+0x59c>)
 8002f6c:	2120      	movs	r1, #32
 8002f6e:	f00a fc89 	bl	800d884 <sniprintf>
                    logMessage(LOG_LEVEL_DEBUG, logMsg);
 8002f72:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002f76:	4619      	mov	r1, r3
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f000 fb93 	bl	80036a4 <logMessage>
            break;
 8002f7e:	e36b      	b.n	8003658 <processKeyFSM+0xa98>
        }
        case FSM_STATE_IDLE: {
            if (ctx->nozzleUpWarning && key == 'K') {
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d009      	beq.n	8002f9e <processKeyFSM+0x3de>
 8002f8a:	78fb      	ldrb	r3, [r7, #3]
 8002f8c:	2b4b      	cmp	r3, #75	@ 0x4b
 8002f8e:	d106      	bne.n	8002f9e <processKeyFSM+0x3de>
                displayMessage("Nozzle up! Hang up");
 8002f90:	4873      	ldr	r0, [pc, #460]	@ (8003160 <processKeyFSM+0x5a0>)
 8002f92:	f001 f86d 	bl	8004070 <displayMessage>
                ctx->stateEntryTime = currentMillis;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002f9c:	e0a2      	b.n	80030e4 <processKeyFSM+0x524>
            } else if (key == 'G') {
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	2b47      	cmp	r3, #71	@ 0x47
 8002fa2:	d113      	bne.n	8002fcc <processKeyFSM+0x40c>
                ctx->state = FSM_STATE_VIEW_PRICE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002fae:	63da      	str	r2, [r3, #60]	@ 0x3c
                char priceStr[16];
                snprintf(priceStr, sizeof(priceStr), "Price: %u", ctx->price);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	885b      	ldrh	r3, [r3, #2]
 8002fb4:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8002fb8:	4a6a      	ldr	r2, [pc, #424]	@ (8003164 <processKeyFSM+0x5a4>)
 8002fba:	2110      	movs	r1, #16
 8002fbc:	f00a fc62 	bl	800d884 <sniprintf>
                displayMessage(priceStr);
 8002fc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f001 f853 	bl	8004070 <displayMessage>
                ctx->waitingForResponse = true;
                ctx->lastC0SendTime = currentMillis;
                rs422SendTotalCounter();
                displayMessage("TOTAL:\nWaiting...");
            }
            break;
 8002fca:	e347      	b.n	800365c <processKeyFSM+0xa9c>
            } else if (key == 'E') {
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	2b45      	cmp	r3, #69	@ 0x45
 8002fd0:	d115      	bne.n	8002ffe <processKeyFSM+0x43e>
                ctx->statusPollingActive = true;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	771a      	strb	r2, [r3, #28]
                ctx->modeSelected = false;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
                if (!ctx->nozzleUpWarning) {
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002fe6:	f083 0301 	eor.w	r3, r3, #1
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <processKeyFSM+0x436>
                    displayMessage("Please select mode");
 8002ff0:	485d      	ldr	r0, [pc, #372]	@ (8003168 <processKeyFSM+0x5a8>)
 8002ff2:	f001 f83d 	bl	8004070 <displayMessage>
                ctx->stateEntryTime = currentMillis;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002ffa:	63da      	str	r2, [r3, #60]	@ 0x3c
            break;
 8002ffc:	e32e      	b.n	800365c <processKeyFSM+0xa9c>
            } else if (key == 'C') {
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	2b43      	cmp	r3, #67	@ 0x43
 8003002:	d11b      	bne.n	800303c <processKeyFSM+0x47c>
                ctx->fuelMode = (FuelMode)((ctx->fuelMode + 1) % 3);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	785b      	ldrb	r3, [r3, #1]
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	4b58      	ldr	r3, [pc, #352]	@ (800316c <processKeyFSM+0x5ac>)
 800300c:	fb83 3102 	smull	r3, r1, r3, r2
 8003010:	17d3      	asrs	r3, r2, #31
 8003012:	1ac9      	subs	r1, r1, r3
 8003014:	460b      	mov	r3, r1
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	440b      	add	r3, r1
 800301a:	1ad1      	subs	r1, r2, r3
 800301c:	b2ca      	uxtb	r2, r1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	705a      	strb	r2, [r3, #1]
                ctx->modeSelected = true;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
                displayFuelMode(ctx->fuelMode);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	785b      	ldrb	r3, [r3, #1]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe faa8 	bl	8001584 <displayFuelMode>
                ctx->stateEntryTime = currentMillis;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003038:	63da      	str	r2, [r3, #60]	@ 0x3c
            break;
 800303a:	e30f      	b.n	800365c <processKeyFSM+0xa9c>
            } else if (key == 'K' && !ctx->nozzleUpWarning) {
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	2b4b      	cmp	r3, #75	@ 0x4b
 8003040:	d131      	bne.n	80030a6 <processKeyFSM+0x4e6>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003048:	f083 0301 	eor.w	r3, r3, #1
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d029      	beq.n	80030a6 <processKeyFSM+0x4e6>
                if (ctx->fuelMode == FUEL_BY_VOLUME || ctx->fuelMode == FUEL_BY_PRICE) {
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	785b      	ldrb	r3, [r3, #1]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <processKeyFSM+0x4a2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	785b      	ldrb	r3, [r3, #1]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d111      	bne.n	8003086 <processKeyFSM+0x4c6>
                    ctx->priceInput[0] = '\0';
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
                    ctx->state = FSM_STATE_WAIT_FOR_PRICE_INPUT;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2202      	movs	r2, #2
 800306e:	701a      	strb	r2, [r3, #0]
                    displayMessage(ctx->fuelMode == FUEL_BY_VOLUME ? "Enter Volume" : "Enter Amount");
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	785b      	ldrb	r3, [r3, #1]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <processKeyFSM+0x4bc>
 8003078:	4b3d      	ldr	r3, [pc, #244]	@ (8003170 <processKeyFSM+0x5b0>)
 800307a:	e000      	b.n	800307e <processKeyFSM+0x4be>
 800307c:	4b3d      	ldr	r3, [pc, #244]	@ (8003174 <processKeyFSM+0x5b4>)
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fff6 	bl	8004070 <displayMessage>
                if (ctx->fuelMode == FUEL_BY_VOLUME || ctx->fuelMode == FUEL_BY_PRICE) {
 8003084:	e02e      	b.n	80030e4 <processKeyFSM+0x524>
                    ctx->transactionVolume = 0;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	609a      	str	r2, [r3, #8]
                    ctx->transactionAmount = 999999;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a3a      	ldr	r2, [pc, #232]	@ (8003178 <processKeyFSM+0x5b8>)
 8003090:	60da      	str	r2, [r3, #12]
                    ctx->state = FSM_STATE_CONFIRM_TRANSACTION;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	220c      	movs	r2, #12
 8003096:	701a      	strb	r2, [r3, #0]
                    ctx->stateEntryTime = currentMillis;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800309c:	63da      	str	r2, [r3, #60]	@ 0x3c
                    displayMessage("Confirm? Press K");
 800309e:	482e      	ldr	r0, [pc, #184]	@ (8003158 <processKeyFSM+0x598>)
 80030a0:	f000 ffe6 	bl	8004070 <displayMessage>
                if (ctx->fuelMode == FUEL_BY_VOLUME || ctx->fuelMode == FUEL_BY_PRICE) {
 80030a4:	e01e      	b.n	80030e4 <processKeyFSM+0x524>
            } else if (key == 'A') {
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	2b41      	cmp	r3, #65	@ 0x41
 80030aa:	f040 82d7 	bne.w	800365c <processKeyFSM+0xa9c>
                ctx->statusPollingActive = false;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	771a      	strb	r2, [r3, #28]
                ctx->state = FSM_STATE_TOTAL_COUNTER;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	220a      	movs	r2, #10
 80030b8:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80030be:	63da      	str	r2, [r3, #60]	@ 0x3c
                ctx->errorCount = 0;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	615a      	str	r2, [r3, #20]
                ctx->c0RetryCount = 0;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	619a      	str	r2, [r3, #24]
                ctx->waitingForResponse = true;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	745a      	strb	r2, [r3, #17]
                ctx->lastC0SendTime = currentMillis;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80030d6:	645a      	str	r2, [r3, #68]	@ 0x44
                rs422SendTotalCounter();
 80030d8:	f001 f98a 	bl	80043f0 <rs422SendTotalCounter>
                displayMessage("TOTAL:\nWaiting...");
 80030dc:	4827      	ldr	r0, [pc, #156]	@ (800317c <processKeyFSM+0x5bc>)
 80030de:	f000 ffc7 	bl	8004070 <displayMessage>
            break;
 80030e2:	e2bb      	b.n	800365c <processKeyFSM+0xa9c>
 80030e4:	e2ba      	b.n	800365c <processKeyFSM+0xa9c>
        }
        case FSM_STATE_VIEW_PRICE: {
            if (key == 'G') {
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	2b47      	cmp	r3, #71	@ 0x47
 80030ea:	d10d      	bne.n	8003108 <processKeyFSM+0x548>
                ctx->state = FSM_STATE_EDIT_PRICE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2205      	movs	r2, #5
 80030f0:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80030f6:	63da      	str	r2, [r3, #60]	@ 0x3c
                ctx->priceInput[0] = '\0';
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
                displayMessage("Editing Price");
 8003100:	481f      	ldr	r0, [pc, #124]	@ (8003180 <processKeyFSM+0x5c0>)
 8003102:	f000 ffb5 	bl	8004070 <displayMessage>
                    } else {
                        displayMessage("Please select mode");
                    }
                }
            }
            break;
 8003106:	e2ab      	b.n	8003660 <processKeyFSM+0xaa0>
            } else if (key == 'E') {
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	2b45      	cmp	r3, #69	@ 0x45
 800310c:	f040 82a8 	bne.w	8003660 <processKeyFSM+0xaa0>
                ctx->state = FSM_STATE_IDLE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800311a:	63da      	str	r2, [r3, #60]	@ 0x3c
                if (!ctx->nozzleUpWarning) {
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003122:	f083 0301 	eor.w	r3, r3, #1
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 8299 	beq.w	8003660 <processKeyFSM+0xaa0>
                    if (ctx->modeSelected) {
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <processKeyFSM+0x584>
                        displayFuelMode(ctx->fuelMode);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	785b      	ldrb	r3, [r3, #1]
 800313c:	4618      	mov	r0, r3
 800313e:	f7fe fa21 	bl	8001584 <displayFuelMode>
            break;
 8003142:	e28d      	b.n	8003660 <processKeyFSM+0xaa0>
                        displayMessage("Please select mode");
 8003144:	4808      	ldr	r0, [pc, #32]	@ (8003168 <processKeyFSM+0x5a8>)
 8003146:	f000 ff93 	bl	8004070 <displayMessage>
            break;
 800314a:	e289      	b.n	8003660 <processKeyFSM+0xaa0>
 800314c:	0800ff20 	.word	0x0800ff20
 8003150:	0800ff30 	.word	0x0800ff30
 8003154:	0800ff48 	.word	0x0800ff48
 8003158:	0800ff5c 	.word	0x0800ff5c
 800315c:	0800ff70 	.word	0x0800ff70
 8003160:	0800fc78 	.word	0x0800fc78
 8003164:	0800ff88 	.word	0x0800ff88
 8003168:	0800fc8c 	.word	0x0800fc8c
 800316c:	55555556 	.word	0x55555556
 8003170:	0800ff94 	.word	0x0800ff94
 8003174:	0800ffa4 	.word	0x0800ffa4
 8003178:	000f423f 	.word	0x000f423f
 800317c:	0800ffb4 	.word	0x0800ffb4
 8003180:	0800ffc8 	.word	0x0800ffc8
        }
        case FSM_STATE_EDIT_PRICE: {
            ctx->stateEntryTime = currentMillis;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003188:	63da      	str	r2, [r3, #60]	@ 0x3c
            if (key >= '0' && key <= '9') {
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	2b2f      	cmp	r3, #47	@ 0x2f
 800318e:	d926      	bls.n	80031de <processKeyFSM+0x61e>
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	2b39      	cmp	r3, #57	@ 0x39
 8003194:	d823      	bhi.n	80031de <processKeyFSM+0x61e>
                size_t len = strlen(ctx->priceInput);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	3349      	adds	r3, #73	@ 0x49
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd f818 	bl	80001d0 <strlen>
 80031a0:	66f8      	str	r0, [r7, #108]	@ 0x6c
                if (len < PRICE_FORMAT_LENGTH) {
 80031a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031a4:	2b06      	cmp	r3, #6
 80031a6:	d86a      	bhi.n	800327e <processKeyFSM+0x6be>
                    ctx->priceInput[len] = key;
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031ac:	4413      	add	r3, r2
 80031ae:	3349      	adds	r3, #73	@ 0x49
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	701a      	strb	r2, [r3, #0]
                    ctx->priceInput[len + 1] = '\0';
 80031b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031b6:	3301      	adds	r3, #1
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	4413      	add	r3, r2
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
                    char displayStr[32];
                    snprintf(displayStr, sizeof(displayStr), "New Price: %s", ctx->priceInput);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3349      	adds	r3, #73	@ 0x49
 80031c6:	f107 000c 	add.w	r0, r7, #12
 80031ca:	4a99      	ldr	r2, [pc, #612]	@ (8003430 <processKeyFSM+0x870>)
 80031cc:	2120      	movs	r1, #32
 80031ce:	f00a fb59 	bl	800d884 <sniprintf>
                    displayMessage(displayStr);
 80031d2:	f107 030c 	add.w	r3, r7, #12
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 ff4a 	bl	8004070 <displayMessage>
            if (key >= '0' && key <= '9') {
 80031dc:	e04f      	b.n	800327e <processKeyFSM+0x6be>
                }
            } else if (key == 'E') {
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	2b45      	cmp	r3, #69	@ 0x45
 80031e2:	d107      	bne.n	80031f4 <processKeyFSM+0x634>
                ctx->priceInput[0] = '\0';
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
                displayMessage("Price cleared");
 80031ec:	4891      	ldr	r0, [pc, #580]	@ (8003434 <processKeyFSM+0x874>)
 80031ee:	f000 ff3f 	bl	8004070 <displayMessage>
                        }
                    }
                    ctx->stateEntryTime = currentMillis;
                }
            }
            break;
 80031f2:	e237      	b.n	8003664 <processKeyFSM+0xaa4>
            } else if (key == 'K') {
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	2b4b      	cmp	r3, #75	@ 0x4b
 80031f8:	f040 8234 	bne.w	8003664 <processKeyFSM+0xaa4>
                if (strlen(ctx->priceInput) > 0) {
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3349      	adds	r3, #73	@ 0x49
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01e      	beq.n	8003244 <processKeyFSM+0x684>
                    uint16_t newPrice = atol(ctx->priceInput);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3349      	adds	r3, #73	@ 0x49
 800320a:	4618      	mov	r0, r3
 800320c:	f009 fbdf 	bl	800c9ce <atol>
 8003210:	4603      	mov	r3, r0
 8003212:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
                        ctx->price = newPrice;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f8b7 206a 	ldrh.w	r2, [r7, #106]	@ 0x6a
 800321c:	805a      	strh	r2, [r3, #2]
                        writePriceToEEPROM(ctx->price);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	885b      	ldrh	r3, [r3, #2]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe f868 	bl	80012f8 <writePriceToEEPROM>
                        displayMessage("Price updated!");
 8003228:	4883      	ldr	r0, [pc, #524]	@ (8003438 <processKeyFSM+0x878>)
 800322a:	f000 ff21 	bl	8004070 <displayMessage>
                        ctx->state = FSM_STATE_TRANSITION_EDIT_PRICE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2206      	movs	r2, #6
 8003232:	701a      	strb	r2, [r3, #0]
                        ctx->stateEntryTime = currentMillis;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003238:	63da      	str	r2, [r3, #60]	@ 0x3c
                        ctx->priceInput[0] = '\0';
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
            break;
 8003242:	e20f      	b.n	8003664 <processKeyFSM+0xaa4>
                    ctx->state = FSM_STATE_IDLE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
                    if (!ctx->nozzleUpWarning) {
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003250:	f083 0301 	eor.w	r3, r3, #1
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00d      	beq.n	8003276 <processKeyFSM+0x6b6>
                        if (ctx->modeSelected) {
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <processKeyFSM+0x6b0>
                            displayFuelMode(ctx->fuelMode);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	785b      	ldrb	r3, [r3, #1]
 8003268:	4618      	mov	r0, r3
 800326a:	f7fe f98b 	bl	8001584 <displayFuelMode>
 800326e:	e002      	b.n	8003276 <processKeyFSM+0x6b6>
                            displayMessage("Please select mode");
 8003270:	4872      	ldr	r0, [pc, #456]	@ (800343c <processKeyFSM+0x87c>)
 8003272:	f000 fefd 	bl	8004070 <displayMessage>
                    ctx->stateEntryTime = currentMillis;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800327a:	63da      	str	r2, [r3, #60]	@ 0x3c
            break;
 800327c:	e1f2      	b.n	8003664 <processKeyFSM+0xaa4>
            if (key >= '0' && key <= '9') {
 800327e:	bf00      	nop
            break;
 8003280:	e1f0      	b.n	8003664 <processKeyFSM+0xaa4>
        }
        case FSM_STATE_TRANSITION_PRICE_SET:
        case FSM_STATE_TRANSITION_EDIT_PRICE: {
            if (currentMillis - ctx->stateEntryTime >= TRANSITION_TIMEOUT) {
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003286:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800328e:	f0c0 81eb 	bcc.w	8003668 <processKeyFSM+0xaa8>
                ctx->waitingForResponse = false;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	745a      	strb	r2, [r3, #17]
                ctx->state = (ctx->state == FSM_STATE_TRANSITION_PRICE_SET) ? FSM_STATE_CHECK_STATUS : FSM_STATE_IDLE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b04      	cmp	r3, #4
 800329e:	bf14      	ite	ne
 80032a0:	2301      	movne	r3, #1
 80032a2:	2300      	moveq	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80032b0:	63da      	str	r2, [r3, #60]	@ 0x3c
                if (ctx->state == FSM_STATE_IDLE && !ctx->nozzleUpWarning) {
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	f040 81d6 	bne.w	8003668 <processKeyFSM+0xaa8>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80032c2:	f083 0301 	eor.w	r3, r3, #1
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 81cd 	beq.w	8003668 <processKeyFSM+0xaa8>
                    if (ctx->modeSelected) {
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <processKeyFSM+0x724>
                        displayFuelMode(ctx->fuelMode);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	785b      	ldrb	r3, [r3, #1]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe f951 	bl	8001584 <displayFuelMode>
                    } else {
                        displayMessage("Please select mode");
                    }
                }
            }
            break;
 80032e2:	e1c1      	b.n	8003668 <processKeyFSM+0xaa8>
                        displayMessage("Please select mode");
 80032e4:	4855      	ldr	r0, [pc, #340]	@ (800343c <processKeyFSM+0x87c>)
 80032e6:	f000 fec3 	bl	8004070 <displayMessage>
            break;
 80032ea:	e1bd      	b.n	8003668 <processKeyFSM+0xaa8>
        }
        case FSM_STATE_CONFIRM_TRANSACTION: {
            if (key == 'K') {
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	2b4b      	cmp	r3, #75	@ 0x4b
 80032f0:	d10d      	bne.n	800330e <processKeyFSM+0x74e>
                ctx->state = FSM_STATE_TRANSACTION;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2208      	movs	r2, #8
 80032f6:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80032fc:	63da      	str	r2, [r3, #60]	@ 0x3c
                displayMessage("Confirm! UP Nozzle");
 80032fe:	4850      	ldr	r0, [pc, #320]	@ (8003440 <processKeyFSM+0x880>)
 8003300:	f000 feb6 	bl	8004070 <displayMessage>
                logMessage(LOG_LEVEL_DEBUG, "Transaction confirmed");
 8003304:	494f      	ldr	r1, [pc, #316]	@ (8003444 <processKeyFSM+0x884>)
 8003306:	2000      	movs	r0, #0
 8003308:	f000 f9cc 	bl	80036a4 <logMessage>
                } else {
                    displayMessage("Please select mode");
                }
                logMessage(LOG_LEVEL_DEBUG, "Confirm cancelled, returning to idle");
            }
            break;
 800330c:	e1ae      	b.n	800366c <processKeyFSM+0xaac>
            } else if (key == 'E') {
 800330e:	78fb      	ldrb	r3, [r7, #3]
 8003310:	2b45      	cmp	r3, #69	@ 0x45
 8003312:	f040 81ab 	bne.w	800366c <processKeyFSM+0xaac>
                ctx->state = FSM_STATE_IDLE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003320:	63da      	str	r2, [r3, #60]	@ 0x3c
                ctx->transactionVolume = 0;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	609a      	str	r2, [r3, #8]
                ctx->transactionAmount = 0;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	60da      	str	r2, [r3, #12]
                ctx->nozzleUpWarning = false;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                ctx->waitingForResponse = false;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	745a      	strb	r2, [r3, #17]
                ctx->errorCount = 0;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	615a      	str	r2, [r3, #20]
                if (ctx->modeSelected) {
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <processKeyFSM+0x798>
                    displayFuelMode(ctx->fuelMode);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	785b      	ldrb	r3, [r3, #1]
 8003350:	4618      	mov	r0, r3
 8003352:	f7fe f917 	bl	8001584 <displayFuelMode>
 8003356:	e002      	b.n	800335e <processKeyFSM+0x79e>
                    displayMessage("Please select mode");
 8003358:	4838      	ldr	r0, [pc, #224]	@ (800343c <processKeyFSM+0x87c>)
 800335a:	f000 fe89 	bl	8004070 <displayMessage>
                logMessage(LOG_LEVEL_DEBUG, "Confirm cancelled, returning to idle");
 800335e:	493a      	ldr	r1, [pc, #232]	@ (8003448 <processKeyFSM+0x888>)
 8003360:	2000      	movs	r0, #0
 8003362:	f000 f99f 	bl	80036a4 <logMessage>
            break;
 8003366:	e181      	b.n	800366c <processKeyFSM+0xaac>
        }
        case FSM_STATE_TRANSACTION: {
            if (key == 'E' && !ctx->transactionStarted) {
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	2b45      	cmp	r3, #69	@ 0x45
 800336c:	d170      	bne.n	8003450 <processKeyFSM+0x890>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	7c1b      	ldrb	r3, [r3, #16]
 8003372:	f083 0301 	eor.w	r3, r3, #1
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d069      	beq.n	8003450 <processKeyFSM+0x890>
                rs422SendNozzleOff();
 800337c:	f000 ffae 	bl	80042dc <rs422SendNozzleOff>
                ctx->waitingForResponse = false;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	745a      	strb	r2, [r3, #17]
                ctx->statusPollingActive = false;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
                ctx->state = FSM_STATE_IDLE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003396:	63da      	str	r2, [r3, #60]	@ 0x3c
                ctx->transactionStarted = false;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	741a      	strb	r2, [r3, #16]
                ctx->monitorState = 0;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	621a      	str	r2, [r3, #32]
                ctx->monitorActive = false;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                ctx->currentLiters_dL = 0;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	629a      	str	r2, [r3, #40]	@ 0x28
                ctx->currentPriceTotal = 0;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	@ 0x30
                ctx->finalLiters_dL = 0;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->finalPriceTotal = 0;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	635a      	str	r2, [r3, #52]	@ 0x34
                ctx->errorCount = 0;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	615a      	str	r2, [r3, #20]
                ctx->nozzleUpWarning = false;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                ctx->skipFirstStatusCheck = true;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                ctx->transactionVolume = 0;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	609a      	str	r2, [r3, #8]
                ctx->transactionAmount = 0;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	60da      	str	r2, [r3, #12]
                rs422SendNozzleOff();
 80033e6:	f000 ff79 	bl	80042dc <rs422SendNozzleOff>
                vTaskDelay(100 / portTICK_PERIOD_MS);
 80033ea:	2064      	movs	r0, #100	@ 0x64
 80033ec:	f007 fcd4 	bl	800ad98 <vTaskDelay>
                ctx->statusPollingActive = true;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	771a      	strb	r2, [r3, #28]
                rs422SendStatus();
 80033f6:	f000 fe93 	bl	8004120 <rs422SendStatus>
                if (!ctx->nozzleUpWarning) {
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003400:	f083 0301 	eor.w	r3, r3, #1
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <processKeyFSM+0x866>
                    if (ctx->modeSelected) {
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <processKeyFSM+0x860>
                        displayFuelMode(ctx->fuelMode);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	785b      	ldrb	r3, [r3, #1]
 8003418:	4618      	mov	r0, r3
 800341a:	f7fe f8b3 	bl	8001584 <displayFuelMode>
 800341e:	e002      	b.n	8003426 <processKeyFSM+0x866>
                    } else {
                        displayMessage("Please select mode");
 8003420:	4806      	ldr	r0, [pc, #24]	@ (800343c <processKeyFSM+0x87c>)
 8003422:	f000 fe25 	bl	8004070 <displayMessage>
                    }
                }
                logMessage(LOG_LEVEL_DEBUG, "Transaction cancelled, returning to idle");
 8003426:	4909      	ldr	r1, [pc, #36]	@ (800344c <processKeyFSM+0x88c>)
 8003428:	2000      	movs	r0, #0
 800342a:	f000 f93b 	bl	80036a4 <logMessage>
                ctx->stateEntryTime = currentMillis;
                displayTransaction(ctx->currentLiters_dL, ctx->currentPriceTotal, "Paused", ctx->price > 9999);
                saveTransactionState(ctx->currentLiters_dL, ctx->currentPriceTotal, ctx->state, ctx->fuelMode, ctx->modeSelected);
                logMessage(LOG_LEVEL_DEBUG, "Transaction paused");
            }
            break;
 800342e:	e11f      	b.n	8003670 <processKeyFSM+0xab0>
 8003430:	0800ffd8 	.word	0x0800ffd8
 8003434:	0800ffe8 	.word	0x0800ffe8
 8003438:	0800fff8 	.word	0x0800fff8
 800343c:	0800fc8c 	.word	0x0800fc8c
 8003440:	08010008 	.word	0x08010008
 8003444:	0801001c 	.word	0x0801001c
 8003448:	08010034 	.word	0x08010034
 800344c:	0801005c 	.word	0x0801005c
            } else if (key == 'E') {
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	2b45      	cmp	r3, #69	@ 0x45
 8003454:	f040 810c 	bne.w	8003670 <processKeyFSM+0xab0>
                rs422SendPause();
 8003458:	f001 f802 	bl	8004460 <rs422SendPause>
                ctx->waitingForResponse = true;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	745a      	strb	r2, [r3, #17]
                ctx->state = FSM_STATE_TRANSACTION_PAUSED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	220b      	movs	r2, #11
 8003466:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800346c:	63da      	str	r2, [r3, #60]	@ 0x3c
                displayTransaction(ctx->currentLiters_dL, ctx->currentPriceTotal, "Paused", ctx->price > 9999);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	885b      	ldrh	r3, [r3, #2]
 800347a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800347e:	4293      	cmp	r3, r2
 8003480:	bf8c      	ite	hi
 8003482:	2301      	movhi	r3, #1
 8003484:	2300      	movls	r3, #0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	4a7e      	ldr	r2, [pc, #504]	@ (8003684 <processKeyFSM+0xac4>)
 800348a:	f7fe f8b1 	bl	80015f0 <displayTransaction>
                saveTransactionState(ctx->currentLiters_dL, ctx->currentPriceTotal, ctx->state, ctx->fuelMode, ctx->modeSelected);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	781a      	ldrb	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	785c      	ldrb	r4, [r3, #1]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	4623      	mov	r3, r4
 80034a8:	f7fd ff70 	bl	800138c <saveTransactionState>
                logMessage(LOG_LEVEL_DEBUG, "Transaction paused");
 80034ac:	4976      	ldr	r1, [pc, #472]	@ (8003688 <processKeyFSM+0xac8>)
 80034ae:	2000      	movs	r0, #0
 80034b0:	f000 f8f8 	bl	80036a4 <logMessage>
            break;
 80034b4:	e0dc      	b.n	8003670 <processKeyFSM+0xab0>
        }
        case FSM_STATE_TRANSACTION_PAUSED: {
            if (key == 'K') {
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	2b4b      	cmp	r3, #75	@ 0x4b
 80034ba:	d126      	bne.n	800350a <processKeyFSM+0x94a>
                rs422SendResume();
 80034bc:	f001 f804 	bl	80044c8 <rs422SendResume>
                ctx->waitingForResponse = true;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	745a      	strb	r2, [r3, #17]
                ctx->state = FSM_STATE_TRANSACTION;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2208      	movs	r2, #8
 80034ca:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80034d0:	63da      	str	r2, [r3, #60]	@ 0x3c
                ctx->monitorActive = true;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                ctx->monitorState = 0;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	621a      	str	r2, [r3, #32]
                displayTransaction(ctx->currentLiters_dL, ctx->currentPriceTotal, "Dispensing...", ctx->price > 9999);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	885b      	ldrh	r3, [r3, #2]
 80034ec:	f242 720f 	movw	r2, #9999	@ 0x270f
 80034f0:	4293      	cmp	r3, r2
 80034f2:	bf8c      	ite	hi
 80034f4:	2301      	movhi	r3, #1
 80034f6:	2300      	movls	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	4a64      	ldr	r2, [pc, #400]	@ (800368c <processKeyFSM+0xacc>)
 80034fc:	f7fe f878 	bl	80015f0 <displayTransaction>
                logMessage(LOG_LEVEL_DEBUG, "Transaction resumed");
 8003500:	4963      	ldr	r1, [pc, #396]	@ (8003690 <processKeyFSM+0xad0>)
 8003502:	2000      	movs	r0, #0
 8003504:	f000 f8ce 	bl	80036a4 <logMessage>
                ctx->state = FSM_STATE_TRANSACTION_END;
                ctx->stateEntryTime = currentMillis;
                saveTransactionState(ctx->finalLiters_dL, ctx->finalPriceTotal, ctx->state, ctx->fuelMode, ctx->modeSelected);
                logMessage(LOG_LEVEL_DEBUG, "Transaction ended from paused");
            }
            break;
 8003508:	e0b4      	b.n	8003674 <processKeyFSM+0xab4>
            } else if (key == 'E') {
 800350a:	78fb      	ldrb	r3, [r7, #3]
 800350c:	2b45      	cmp	r3, #69	@ 0x45
 800350e:	f040 80b1 	bne.w	8003674 <processKeyFSM+0xab4>
                ctx->finalLiters_dL = ctx->currentLiters_dL;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->finalPriceTotal = ctx->currentPriceTotal;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	635a      	str	r2, [r3, #52]	@ 0x34
                rs422SendTransactionUpdate();
 8003522:	f000 fea9 	bl	8004278 <rs422SendTransactionUpdate>
                ctx->waitingForResponse = true;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	745a      	strb	r2, [r3, #17]
                ctx->state = FSM_STATE_TRANSACTION_END;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2209      	movs	r2, #9
 8003530:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003536:	63da      	str	r2, [r3, #60]	@ 0x3c
                saveTransactionState(ctx->finalLiters_dL, ctx->finalPriceTotal, ctx->state, ctx->fuelMode, ctx->modeSelected);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	781a      	ldrb	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	785c      	ldrb	r4, [r3, #1]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	4623      	mov	r3, r4
 8003552:	f7fd ff1b 	bl	800138c <saveTransactionState>
                logMessage(LOG_LEVEL_DEBUG, "Transaction ended from paused");
 8003556:	494f      	ldr	r1, [pc, #316]	@ (8003694 <processKeyFSM+0xad4>)
 8003558:	2000      	movs	r0, #0
 800355a:	f000 f8a3 	bl	80036a4 <logMessage>
            break;
 800355e:	e089      	b.n	8003674 <processKeyFSM+0xab4>
        }
        case FSM_STATE_TRANSACTION_END: {
            if (key == 'E') {
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	2b45      	cmp	r3, #69	@ 0x45
 8003564:	f040 8088 	bne.w	8003678 <processKeyFSM+0xab8>
                ctx->state = FSM_STATE_IDLE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003572:	63da      	str	r2, [r3, #60]	@ 0x3c
                ctx->transactionStarted = false;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	741a      	strb	r2, [r3, #16]
                ctx->monitorState = 0;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	621a      	str	r2, [r3, #32]
                ctx->monitorActive = false;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                ctx->waitingForResponse = false;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	745a      	strb	r2, [r3, #17]
                ctx->currentLiters_dL = 0;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	629a      	str	r2, [r3, #40]	@ 0x28
                ctx->currentPriceTotal = 0;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	631a      	str	r2, [r3, #48]	@ 0x30
                ctx->finalLiters_dL = 0;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->finalPriceTotal = 0;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	635a      	str	r2, [r3, #52]	@ 0x34
                ctx->errorCount = 0;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	615a      	str	r2, [r3, #20]
                ctx->skipFirstStatusCheck = true;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                ctx->nozzleUpWarning = false;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                ctx->transactionVolume = 0;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	609a      	str	r2, [r3, #8]
                ctx->transactionAmount = 0;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	60da      	str	r2, [r3, #12]
                if (ctx->modeSelected) {
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <processKeyFSM+0xa1e>
                    displayFuelMode(ctx->fuelMode);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	785b      	ldrb	r3, [r3, #1]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fd ffd4 	bl	8001584 <displayFuelMode>
 80035dc:	e002      	b.n	80035e4 <processKeyFSM+0xa24>
                } else {
                    displayMessage("Please select mode");
 80035de:	482e      	ldr	r0, [pc, #184]	@ (8003698 <processKeyFSM+0xad8>)
 80035e0:	f000 fd46 	bl	8004070 <displayMessage>
                }
                logMessage(LOG_LEVEL_DEBUG, "Transaction end, returning to idle");
 80035e4:	492d      	ldr	r1, [pc, #180]	@ (800369c <processKeyFSM+0xadc>)
 80035e6:	2000      	movs	r0, #0
 80035e8:	f000 f85c 	bl	80036a4 <logMessage>
            }
            break;
 80035ec:	e044      	b.n	8003678 <processKeyFSM+0xab8>
        }
        case FSM_STATE_TOTAL_COUNTER: {
            if (key == 'E') {
 80035ee:	78fb      	ldrb	r3, [r7, #3]
 80035f0:	2b45      	cmp	r3, #69	@ 0x45
 80035f2:	d143      	bne.n	800367c <processKeyFSM+0xabc>
                ctx->state = FSM_STATE_IDLE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	701a      	strb	r2, [r3, #0]
                ctx->stateEntryTime = currentMillis;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80035fe:	63da      	str	r2, [r3, #60]	@ 0x3c
                ctx->transactionStarted = false;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	741a      	strb	r2, [r3, #16]
                ctx->monitorState = 0;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	621a      	str	r2, [r3, #32]
                ctx->monitorActive = false;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                ctx->waitingForResponse = false;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	745a      	strb	r2, [r3, #17]
                ctx->errorCount = 0;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	615a      	str	r2, [r3, #20]
                ctx->c0RetryCount = 0;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	619a      	str	r2, [r3, #24]
                ctx->nozzleUpWarning = false;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                if (ctx->modeSelected) {
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <processKeyFSM+0xa84>
                    displayFuelMode(ctx->fuelMode);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	785b      	ldrb	r3, [r3, #1]
 800363c:	4618      	mov	r0, r3
 800363e:	f7fd ffa1 	bl	8001584 <displayFuelMode>
 8003642:	e002      	b.n	800364a <processKeyFSM+0xa8a>
                } else {
                    displayMessage("Please select mode");
 8003644:	4814      	ldr	r0, [pc, #80]	@ (8003698 <processKeyFSM+0xad8>)
 8003646:	f000 fd13 	bl	8004070 <displayMessage>
                }
                logMessage(LOG_LEVEL_DEBUG, "Total counter cancelled, returning to idle");
 800364a:	4915      	ldr	r1, [pc, #84]	@ (80036a0 <processKeyFSM+0xae0>)
 800364c:	2000      	movs	r0, #0
 800364e:	f000 f829 	bl	80036a4 <logMessage>
            }
            break;
 8003652:	e013      	b.n	800367c <processKeyFSM+0xabc>
        }
        default: break;
 8003654:	bf00      	nop
 8003656:	e012      	b.n	800367e <processKeyFSM+0xabe>
            break;
 8003658:	bf00      	nop
 800365a:	e010      	b.n	800367e <processKeyFSM+0xabe>
            break;
 800365c:	bf00      	nop
 800365e:	e00e      	b.n	800367e <processKeyFSM+0xabe>
            break;
 8003660:	bf00      	nop
 8003662:	e00c      	b.n	800367e <processKeyFSM+0xabe>
            break;
 8003664:	bf00      	nop
 8003666:	e00a      	b.n	800367e <processKeyFSM+0xabe>
            break;
 8003668:	bf00      	nop
 800366a:	e008      	b.n	800367e <processKeyFSM+0xabe>
            break;
 800366c:	bf00      	nop
 800366e:	e006      	b.n	800367e <processKeyFSM+0xabe>
            break;
 8003670:	bf00      	nop
 8003672:	e004      	b.n	800367e <processKeyFSM+0xabe>
            break;
 8003674:	bf00      	nop
 8003676:	e002      	b.n	800367e <processKeyFSM+0xabe>
            break;
 8003678:	bf00      	nop
 800367a:	e000      	b.n	800367e <processKeyFSM+0xabe>
            break;
 800367c:	bf00      	nop
    }
}
 800367e:	377c      	adds	r7, #124	@ 0x7c
 8003680:	46bd      	mov	sp, r7
 8003682:	bd90      	pop	{r4, r7, pc}
 8003684:	0800fcb8 	.word	0x0800fcb8
 8003688:	08010088 	.word	0x08010088
 800368c:	0800fd08 	.word	0x0800fd08
 8003690:	0801009c 	.word	0x0801009c
 8003694:	080100b0 	.word	0x080100b0
 8003698:	0800fc8c 	.word	0x0800fc8c
 800369c:	080100d0 	.word	0x080100d0
 80036a0:	080100f4 	.word	0x080100f4

080036a4 <logMessage>:
FuelMode getCurrentFuelMode(const FSMContext* ctx) {
    return ctx->fuelMode;
}

// Функция логирования через UART3
void logMessage(int level, const char* msg) {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b0a4      	sub	sp, #144	@ 0x90
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
    if (level >= LOG_LEVEL) {
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	db2a      	blt.n	800370a <logMessage+0x66>
        extern UART_HandleTypeDef huart3;
        char logMsg[128];
        snprintf(logMsg, sizeof(logMsg), "[%lu] %s\r\n", getCurrentMillis(), msg);
 80036b4:	f000 fa0e 	bl	8003ad4 <getCurrentMillis>
 80036b8:	4602      	mov	r2, r0
 80036ba:	f107 0008 	add.w	r0, r7, #8
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	4613      	mov	r3, r2
 80036c4:	4a13      	ldr	r2, [pc, #76]	@ (8003714 <logMessage+0x70>)
 80036c6:	2180      	movs	r1, #128	@ 0x80
 80036c8:	f00a f8dc 	bl	800d884 <sniprintf>
        if (xSemaphoreTake(logMutex, portMAX_DELAY) == pdTRUE) {
 80036cc:	4b12      	ldr	r3, [pc, #72]	@ (8003718 <logMessage+0x74>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f04f 31ff 	mov.w	r1, #4294967295
 80036d4:	4618      	mov	r0, r3
 80036d6:	f006 feeb 	bl	800a4b0 <xQueueSemaphoreTake>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d114      	bne.n	800370a <logMessage+0x66>
            HAL_UART_Transmit(&huart3, (uint8_t*)logMsg, strlen(logMsg), HAL_MAX_DELAY);
 80036e0:	f107 0308 	add.w	r3, r7, #8
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fc fd73 	bl	80001d0 <strlen>
 80036ea:	4603      	mov	r3, r0
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	f107 0108 	add.w	r1, r7, #8
 80036f2:	f04f 33ff 	mov.w	r3, #4294967295
 80036f6:	4809      	ldr	r0, [pc, #36]	@ (800371c <logMessage+0x78>)
 80036f8:	f004 ff5e 	bl	80085b8 <HAL_UART_Transmit>
            xSemaphoreGive(logMutex);
 80036fc:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <logMessage+0x74>)
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	2300      	movs	r3, #0
 8003702:	2200      	movs	r2, #0
 8003704:	2100      	movs	r1, #0
 8003706:	f006 fc51 	bl	8009fac <xQueueGenericSend>
        }
    }
}
 800370a:	bf00      	nop
 800370c:	3788      	adds	r7, #136	@ 0x88
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	08010120 	.word	0x08010120
 8003718:	20000214 	.word	0x20000214
 800371c:	200002dc 	.word	0x200002dc

08003720 <getKeypadKey>:
// Столбцы (входы)
static GPIO_TypeDef* ColPort[KEYPAD_COL_COUNT] = {COL1_PORT, COL2_PORT, COL3_PORT, COL4_PORT};
static const uint16_t ColPin[KEYPAD_COL_COUNT] = {COL1_PIN, COL2_PIN, COL3_PIN, COL4_PIN};

// Функция сканирования клавиатуры
char getKeypadKey(void) {
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
    for (uint8_t r = 0; r < KEYPAD_ROW_COUNT; r++) {
 8003726:	2300      	movs	r3, #0
 8003728:	71fb      	strb	r3, [r7, #7]
 800372a:	e052      	b.n	80037d2 <getKeypadKey+0xb2>
        // Активируем одну строку (LOW), остальные HIGH
        for (uint8_t i = 0; i < KEYPAD_ROW_COUNT; i++) {
 800372c:	2300      	movs	r3, #0
 800372e:	71bb      	strb	r3, [r7, #6]
 8003730:	e014      	b.n	800375c <getKeypadKey+0x3c>
            HAL_GPIO_WritePin(RowPort[i], RowPin[i], (i == r) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8003732:	79bb      	ldrb	r3, [r7, #6]
 8003734:	4a2b      	ldr	r2, [pc, #172]	@ (80037e4 <getKeypadKey+0xc4>)
 8003736:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800373a:	79bb      	ldrb	r3, [r7, #6]
 800373c:	4a2a      	ldr	r2, [pc, #168]	@ (80037e8 <getKeypadKey+0xc8>)
 800373e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003742:	79ba      	ldrb	r2, [r7, #6]
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	429a      	cmp	r2, r3
 8003748:	bf14      	ite	ne
 800374a:	2301      	movne	r3, #1
 800374c:	2300      	moveq	r3, #0
 800374e:	b2db      	uxtb	r3, r3
 8003750:	461a      	mov	r2, r3
 8003752:	f002 fa59 	bl	8005c08 <HAL_GPIO_WritePin>
        for (uint8_t i = 0; i < KEYPAD_ROW_COUNT; i++) {
 8003756:	79bb      	ldrb	r3, [r7, #6]
 8003758:	3301      	adds	r3, #1
 800375a:	71bb      	strb	r3, [r7, #6]
 800375c:	79bb      	ldrb	r3, [r7, #6]
 800375e:	2b04      	cmp	r3, #4
 8003760:	d9e7      	bls.n	8003732 <getKeypadKey+0x12>
        }

        vTaskDelay(1 / portTICK_PERIOD_MS); // Задержка для стабилизации (1 мс)
 8003762:	2001      	movs	r0, #1
 8003764:	f007 fb18 	bl	800ad98 <vTaskDelay>

        for (uint8_t c = 0; c < KEYPAD_COL_COUNT; c++) {
 8003768:	2300      	movs	r3, #0
 800376a:	717b      	strb	r3, [r7, #5]
 800376c:	e02b      	b.n	80037c6 <getKeypadKey+0xa6>
            if (HAL_GPIO_ReadPin(ColPort[c], ColPin[c]) == GPIO_PIN_RESET) {
 800376e:	797b      	ldrb	r3, [r7, #5]
 8003770:	4a1e      	ldr	r2, [pc, #120]	@ (80037ec <getKeypadKey+0xcc>)
 8003772:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003776:	797b      	ldrb	r3, [r7, #5]
 8003778:	491d      	ldr	r1, [pc, #116]	@ (80037f0 <getKeypadKey+0xd0>)
 800377a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800377e:	4619      	mov	r1, r3
 8003780:	4610      	mov	r0, r2
 8003782:	f002 fa29 	bl	8005bd8 <HAL_GPIO_ReadPin>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d119      	bne.n	80037c0 <getKeypadKey+0xa0>
                vTaskDelay(KEY_DEBOUNCE_MS / portTICK_PERIOD_MS); // Антидребезг
 800378c:	200f      	movs	r0, #15
 800378e:	f007 fb03 	bl	800ad98 <vTaskDelay>
                if (HAL_GPIO_ReadPin(ColPort[c], ColPin[c]) == GPIO_PIN_RESET) {
 8003792:	797b      	ldrb	r3, [r7, #5]
 8003794:	4a15      	ldr	r2, [pc, #84]	@ (80037ec <getKeypadKey+0xcc>)
 8003796:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800379a:	797b      	ldrb	r3, [r7, #5]
 800379c:	4914      	ldr	r1, [pc, #80]	@ (80037f0 <getKeypadKey+0xd0>)
 800379e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80037a2:	4619      	mov	r1, r3
 80037a4:	4610      	mov	r0, r2
 80037a6:	f002 fa17 	bl	8005bd8 <HAL_GPIO_ReadPin>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d107      	bne.n	80037c0 <getKeypadKey+0xa0>
                    return KeyMap[r][c];
 80037b0:	79fa      	ldrb	r2, [r7, #7]
 80037b2:	797b      	ldrb	r3, [r7, #5]
 80037b4:	490f      	ldr	r1, [pc, #60]	@ (80037f4 <getKeypadKey+0xd4>)
 80037b6:	0092      	lsls	r2, r2, #2
 80037b8:	440a      	add	r2, r1
 80037ba:	4413      	add	r3, r2
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	e00c      	b.n	80037da <getKeypadKey+0xba>
        for (uint8_t c = 0; c < KEYPAD_COL_COUNT; c++) {
 80037c0:	797b      	ldrb	r3, [r7, #5]
 80037c2:	3301      	adds	r3, #1
 80037c4:	717b      	strb	r3, [r7, #5]
 80037c6:	797b      	ldrb	r3, [r7, #5]
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d9d0      	bls.n	800376e <getKeypadKey+0x4e>
    for (uint8_t r = 0; r < KEYPAD_ROW_COUNT; r++) {
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	3301      	adds	r3, #1
 80037d0:	71fb      	strb	r3, [r7, #7]
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d9a9      	bls.n	800372c <getKeypadKey+0xc>
                }
            }
        }
    }
    return 0; // Ничего не нажато
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000000 	.word	0x20000000
 80037e8:	080102a8 	.word	0x080102a8
 80037ec:	20000014 	.word	0x20000014
 80037f0:	080102b4 	.word	0x080102b4
 80037f4:	08010294 	.word	0x08010294

080037f8 <main>:

// Глобальные переменные
static volatile uint32_t tim2_counter = 0; // Счётчик для замены millis()

int main(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af02      	add	r7, sp, #8
    // Инициализация HAL
    HAL_Init();
 80037fe:	f001 fb3d 	bl	8004e7c <HAL_Init>

    // Настройка системного тактирования
    SystemClock_Config();
 8003802:	f000 f973 	bl	8003aec <SystemClock_Config>

    // Инициализация периферии
    MX_GPIO_Init();
 8003806:	f000 fac5 	bl	8003d94 <MX_GPIO_Init>
    MX_DMA_Init();
 800380a:	f000 fb47 	bl	8003e9c <MX_DMA_Init>
    MX_I2C1_Init();
 800380e:	f000 f9d7 	bl	8003bc0 <MX_I2C1_Init>
    MX_USART2_UART_Init();
 8003812:	f000 fa03 	bl	8003c1c <MX_USART2_UART_Init>
    MX_USART3_UART_Init();
 8003816:	f000 fa2b 	bl	8003c70 <MX_USART3_UART_Init>
    MX_IWDG_Init();
 800381a:	f000 fa53 	bl	8003cc4 <MX_IWDG_Init>
    MX_TIM2_Init();
 800381e:	f000 fa6b 	bl	8003cf8 <MX_TIM2_Init>

    // Запуск TIM2 для отсчёта времени
    HAL_TIM_Base_Start_IT(&htim2);
 8003822:	4843      	ldr	r0, [pc, #268]	@ (8003930 <main+0x138>)
 8003824:	f004 fa52 	bl	8007ccc <HAL_TIM_Base_Start_IT>

    // Создание очередей FreeRTOS
    keypadQueue = xQueueCreate(10, sizeof(char));              // Очередь для клавиш
 8003828:	2200      	movs	r2, #0
 800382a:	2101      	movs	r1, #1
 800382c:	200a      	movs	r0, #10
 800382e:	f006 fb2c 	bl	8009e8a <xQueueGenericCreate>
 8003832:	4603      	mov	r3, r0
 8003834:	4a3f      	ldr	r2, [pc, #252]	@ (8003934 <main+0x13c>)
 8003836:	6013      	str	r3, [r2, #0]
    oledQueue = xQueueCreate(5, 128 * sizeof(char));          // Очередь для сообщений OLED
 8003838:	2200      	movs	r2, #0
 800383a:	2180      	movs	r1, #128	@ 0x80
 800383c:	2005      	movs	r0, #5
 800383e:	f006 fb24 	bl	8009e8a <xQueueGenericCreate>
 8003842:	4603      	mov	r3, r0
 8003844:	4a3c      	ldr	r2, [pc, #240]	@ (8003938 <main+0x140>)
 8003846:	6013      	str	r3, [r2, #0]
    rs422TxQueue = xQueueCreate(10, sizeof(RS422Command));    // Очередь для команд RS-422
 8003848:	2200      	movs	r2, #0
 800384a:	2118      	movs	r1, #24
 800384c:	200a      	movs	r0, #10
 800384e:	f006 fb1c 	bl	8009e8a <xQueueGenericCreate>
 8003852:	4603      	mov	r3, r0
 8003854:	4a39      	ldr	r2, [pc, #228]	@ (800393c <main+0x144>)
 8003856:	6013      	str	r3, [r2, #0]
    rs422RxQueue = xQueueCreate(10, 32 * sizeof(uint8_t));    // Очередь для ответов RS-422
 8003858:	2200      	movs	r2, #0
 800385a:	2120      	movs	r1, #32
 800385c:	200a      	movs	r0, #10
 800385e:	f006 fb14 	bl	8009e8a <xQueueGenericCreate>
 8003862:	4603      	mov	r3, r0
 8003864:	4a36      	ldr	r2, [pc, #216]	@ (8003940 <main+0x148>)
 8003866:	6013      	str	r3, [r2, #0]
    eepromQueue = xQueueCreate(5, sizeof(EEPROMRequest));     // Очередь для операций с EEPROM
 8003868:	2200      	movs	r2, #0
 800386a:	2128      	movs	r1, #40	@ 0x28
 800386c:	2005      	movs	r0, #5
 800386e:	f006 fb0c 	bl	8009e8a <xQueueGenericCreate>
 8003872:	4603      	mov	r3, r0
 8003874:	4a33      	ldr	r2, [pc, #204]	@ (8003944 <main+0x14c>)
 8003876:	6013      	str	r3, [r2, #0]

    // Проверка создания очередей
    if (keypadQueue == NULL || oledQueue == NULL || rs422TxQueue == NULL ||
 8003878:	4b2e      	ldr	r3, [pc, #184]	@ (8003934 <main+0x13c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00f      	beq.n	80038a0 <main+0xa8>
 8003880:	4b2d      	ldr	r3, [pc, #180]	@ (8003938 <main+0x140>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00b      	beq.n	80038a0 <main+0xa8>
 8003888:	4b2c      	ldr	r3, [pc, #176]	@ (800393c <main+0x144>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <main+0xa8>
        rs422RxQueue == NULL || eepromQueue == NULL) {
 8003890:	4b2b      	ldr	r3, [pc, #172]	@ (8003940 <main+0x148>)
 8003892:	681b      	ldr	r3, [r3, #0]
    if (keypadQueue == NULL || oledQueue == NULL || rs422TxQueue == NULL ||
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <main+0xa8>
        rs422RxQueue == NULL || eepromQueue == NULL) {
 8003898:	4b2a      	ldr	r3, [pc, #168]	@ (8003944 <main+0x14c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <main+0xac>
        Error_Handler();
 80038a0:	f000 fb1c 	bl	8003edc <Error_Handler>
    }

    // Создание задач FreeRTOS
    xTaskCreate(StartFSMTask, "FSM", 512, NULL, 3, NULL);         // Задача FSM
 80038a4:	2300      	movs	r3, #0
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	2303      	movs	r3, #3
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	2300      	movs	r3, #0
 80038ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038b2:	4925      	ldr	r1, [pc, #148]	@ (8003948 <main+0x150>)
 80038b4:	4825      	ldr	r0, [pc, #148]	@ (800394c <main+0x154>)
 80038b6:	f007 f911 	bl	800aadc <xTaskCreate>
    xTaskCreate(StartKeypadTask, "Keypad", 256, NULL, 4, NULL);   // Задача клавиатуры
 80038ba:	2300      	movs	r3, #0
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	2304      	movs	r3, #4
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	2300      	movs	r3, #0
 80038c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038c8:	4921      	ldr	r1, [pc, #132]	@ (8003950 <main+0x158>)
 80038ca:	4822      	ldr	r0, [pc, #136]	@ (8003954 <main+0x15c>)
 80038cc:	f007 f906 	bl	800aadc <xTaskCreate>
    xTaskCreate(StartRS422Task, "RS422", 512, NULL, 4, NULL);     // Задача RS-422
 80038d0:	2300      	movs	r3, #0
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	2304      	movs	r3, #4
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	2300      	movs	r3, #0
 80038da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038de:	491e      	ldr	r1, [pc, #120]	@ (8003958 <main+0x160>)
 80038e0:	481e      	ldr	r0, [pc, #120]	@ (800395c <main+0x164>)
 80038e2:	f007 f8fb 	bl	800aadc <xTaskCreate>
    xTaskCreate(StartOLEDTask, "OLED", 256, NULL, 2, NULL);       // Задача OLED
 80038e6:	2300      	movs	r3, #0
 80038e8:	9301      	str	r3, [sp, #4]
 80038ea:	2302      	movs	r3, #2
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	2300      	movs	r3, #0
 80038f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038f4:	491a      	ldr	r1, [pc, #104]	@ (8003960 <main+0x168>)
 80038f6:	481b      	ldr	r0, [pc, #108]	@ (8003964 <main+0x16c>)
 80038f8:	f007 f8f0 	bl	800aadc <xTaskCreate>
    xTaskCreate(StartEEPROMTask, "EEPROM", 256, NULL, 2, NULL);   // Задача EEPROM
 80038fc:	2300      	movs	r3, #0
 80038fe:	9301      	str	r3, [sp, #4]
 8003900:	2302      	movs	r3, #2
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	2300      	movs	r3, #0
 8003906:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800390a:	4917      	ldr	r1, [pc, #92]	@ (8003968 <main+0x170>)
 800390c:	4817      	ldr	r0, [pc, #92]	@ (800396c <main+0x174>)
 800390e:	f007 f8e5 	bl	800aadc <xTaskCreate>
    xTaskCreate(StartWatchdogTask, "Watchdog", 128, NULL, 5, NULL); // Задача Watchdog
 8003912:	2300      	movs	r3, #0
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	2305      	movs	r3, #5
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	2300      	movs	r3, #0
 800391c:	2280      	movs	r2, #128	@ 0x80
 800391e:	4914      	ldr	r1, [pc, #80]	@ (8003970 <main+0x178>)
 8003920:	4814      	ldr	r0, [pc, #80]	@ (8003974 <main+0x17c>)
 8003922:	f007 f8db 	bl	800aadc <xTaskCreate>

    // Запуск планировщика FreeRTOS
    vTaskStartScheduler();
 8003926:	f007 fa6d 	bl	800ae04 <vTaskStartScheduler>

    // Этот код никогда не будет достигнут
    while (1) {}
 800392a:	bf00      	nop
 800392c:	e7fd      	b.n	800392a <main+0x132>
 800392e:	bf00      	nop
 8003930:	20000330 	.word	0x20000330
 8003934:	20000378 	.word	0x20000378
 8003938:	2000037c 	.word	0x2000037c
 800393c:	20000380 	.word	0x20000380
 8003940:	20000384 	.word	0x20000384
 8003944:	20000388 	.word	0x20000388
 8003948:	0801012c 	.word	0x0801012c
 800394c:	08003979 	.word	0x08003979
 8003950:	08010130 	.word	0x08010130
 8003954:	080039bd 	.word	0x080039bd
 8003958:	08010138 	.word	0x08010138
 800395c:	080039f1 	.word	0x080039f1
 8003960:	08010140 	.word	0x08010140
 8003964:	08003a25 	.word	0x08003a25
 8003968:	08010148 	.word	0x08010148
 800396c:	08003a59 	.word	0x08003a59
 8003970:	08010150 	.word	0x08010150
 8003974:	08003a89 	.word	0x08003a89

08003978 <StartFSMTask>:
}

// Задача FSM
void StartFSMTask(void *argument)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
    initFSM(&fsmContext);
 8003980:	480c      	ldr	r0, [pc, #48]	@ (80039b4 <StartFSMTask+0x3c>)
 8003982:	f7fe ffb7 	bl	80028f4 <initFSM>
    for (;;) {
        updateFSM(&fsmContext);
 8003986:	480b      	ldr	r0, [pc, #44]	@ (80039b4 <StartFSMTask+0x3c>)
 8003988:	f7ff f8ba 	bl	8002b00 <updateFSM>
        char key;
        if (xQueueReceive(keypadQueue, &key, 0) == pdTRUE) {
 800398c:	4b0a      	ldr	r3, [pc, #40]	@ (80039b8 <StartFSMTask+0x40>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f107 010f 	add.w	r1, r7, #15
 8003994:	2200      	movs	r2, #0
 8003996:	4618      	mov	r0, r3
 8003998:	f006 fca8 	bl	800a2ec <xQueueReceive>
 800399c:	4603      	mov	r3, r0
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d104      	bne.n	80039ac <StartFSMTask+0x34>
            processKeyFSM(&fsmContext, key);
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	4619      	mov	r1, r3
 80039a6:	4803      	ldr	r0, [pc, #12]	@ (80039b4 <StartFSMTask+0x3c>)
 80039a8:	f7ff f90a 	bl	8002bc0 <processKeyFSM>
        }
        vTaskDelay(10 / portTICK_PERIOD_MS); // Периодичность 10 мс
 80039ac:	200a      	movs	r0, #10
 80039ae:	f007 f9f3 	bl	800ad98 <vTaskDelay>
    for (;;) {
 80039b2:	e7e8      	b.n	8003986 <StartFSMTask+0xe>
 80039b4:	2000038c 	.word	0x2000038c
 80039b8:	20000378 	.word	0x20000378

080039bc <StartKeypadTask>:
    }
}

// Задача клавиатуры
void StartKeypadTask(void *argument)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
    for (;;) {
        char key = getKeypadKey();
 80039c4:	f7ff feac 	bl	8003720 <getKeypadKey>
 80039c8:	4603      	mov	r3, r0
 80039ca:	73fb      	strb	r3, [r7, #15]
        if (key) {
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <StartKeypadTask+0x28>
            xQueueSend(keypadQueue, &key, portMAX_DELAY);
 80039d2:	4b06      	ldr	r3, [pc, #24]	@ (80039ec <StartKeypadTask+0x30>)
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	f107 010f 	add.w	r1, r7, #15
 80039da:	2300      	movs	r3, #0
 80039dc:	f04f 32ff 	mov.w	r2, #4294967295
 80039e0:	f006 fae4 	bl	8009fac <xQueueGenericSend>
        }
        vTaskDelay(20 / portTICK_PERIOD_MS); // Периодичность 20 мс (с учётом антидребезга)
 80039e4:	2014      	movs	r0, #20
 80039e6:	f007 f9d7 	bl	800ad98 <vTaskDelay>
    for (;;) {
 80039ea:	e7eb      	b.n	80039c4 <StartKeypadTask+0x8>
 80039ec:	20000378 	.word	0x20000378

080039f0 <StartRS422Task>:
    }
}

// Задача RS-422
void StartRS422Task(void *argument)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
    initRS422();
 80039f8:	f000 fb5e 	bl	80040b8 <initRS422>
    RS422Command cmd;
    for (;;) {
        if (xQueueReceive(rs422TxQueue, &cmd, portMAX_DELAY) == pdTRUE) {
 80039fc:	4b08      	ldr	r3, [pc, #32]	@ (8003a20 <StartRS422Task+0x30>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f107 0108 	add.w	r1, r7, #8
 8003a04:	f04f 32ff 	mov.w	r2, #4294967295
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f006 fc6f 	bl	800a2ec <xQueueReceive>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d1f3      	bne.n	80039fc <StartRS422Task+0xc>
            sendRS422Command(&cmd);
 8003a14:	f107 0308 	add.w	r3, r7, #8
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fb5b 	bl	80040d4 <sendRS422Command>
        if (xQueueReceive(rs422TxQueue, &cmd, portMAX_DELAY) == pdTRUE) {
 8003a1e:	e7ed      	b.n	80039fc <StartRS422Task+0xc>
 8003a20:	20000380 	.word	0x20000380

08003a24 <StartOLEDTask>:
    }
}

// Задача OLED
void StartOLEDTask(void *argument)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b0a2      	sub	sp, #136	@ 0x88
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
    initOLED();
 8003a2c:	f000 fac0 	bl	8003fb0 <initOLED>
    char msg[128];
    for (;;) {
        if (xQueueReceive(oledQueue, msg, portMAX_DELAY) == pdTRUE) {
 8003a30:	4b08      	ldr	r3, [pc, #32]	@ (8003a54 <StartOLEDTask+0x30>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f107 0108 	add.w	r1, r7, #8
 8003a38:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f006 fc55 	bl	800a2ec <xQueueReceive>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d1f3      	bne.n	8003a30 <StartOLEDTask+0xc>
            displayMessage(msg);
 8003a48:	f107 0308 	add.w	r3, r7, #8
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fb0f 	bl	8004070 <displayMessage>
        if (xQueueReceive(oledQueue, msg, portMAX_DELAY) == pdTRUE) {
 8003a52:	e7ed      	b.n	8003a30 <StartOLEDTask+0xc>
 8003a54:	2000037c 	.word	0x2000037c

08003a58 <StartEEPROMTask>:
    }
}

// Задача EEPROM
void StartEEPROMTask(void *argument)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08c      	sub	sp, #48	@ 0x30
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
    EEPROMRequest req;
    for (;;) {
        if (xQueueReceive(eepromQueue, &req, portMAX_DELAY) == pdTRUE) {
 8003a60:	4b08      	ldr	r3, [pc, #32]	@ (8003a84 <StartEEPROMTask+0x2c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f107 0108 	add.w	r1, r7, #8
 8003a68:	f04f 32ff 	mov.w	r2, #4294967295
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f006 fc3d 	bl	800a2ec <xQueueReceive>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d1f3      	bne.n	8003a60 <StartEEPROMTask+0x8>
            handleEEPROMRequest(&req);
 8003a78:	f107 0308 	add.w	r3, r7, #8
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fd fb89 	bl	8001194 <handleEEPROMRequest>
        if (xQueueReceive(eepromQueue, &req, portMAX_DELAY) == pdTRUE) {
 8003a82:	e7ed      	b.n	8003a60 <StartEEPROMTask+0x8>
 8003a84:	20000388 	.word	0x20000388

08003a88 <StartWatchdogTask>:
    }
}

// Задача Watchdog
void StartWatchdogTask(void *argument)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
    for (;;) {
        HAL_IWDG_Refresh(&hiwdg); // Сброс Watchdog каждые 500 мс
 8003a90:	4804      	ldr	r0, [pc, #16]	@ (8003aa4 <StartWatchdogTask+0x1c>)
 8003a92:	f003 fbe7 	bl	8007264 <HAL_IWDG_Refresh>
        vTaskDelay(500 / portTICK_PERIOD_MS);
 8003a96:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003a9a:	f007 f97d 	bl	800ad98 <vTaskDelay>
        HAL_IWDG_Refresh(&hiwdg); // Сброс Watchdog каждые 500 мс
 8003a9e:	bf00      	nop
 8003aa0:	e7f6      	b.n	8003a90 <StartWatchdogTask+0x8>
 8003aa2:	bf00      	nop
 8003aa4:	20000324 	.word	0x20000324

08003aa8 <HAL_TIM_PeriodElapsedCallback>:
    }
}

// Обработчик прерывания TIM2 (замена millis())
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ab8:	d104      	bne.n	8003ac4 <HAL_TIM_PeriodElapsedCallback+0x1c>
        tim2_counter++; // Инкремент счётчика каждую миллисекунду
 8003aba:	4b05      	ldr	r3, [pc, #20]	@ (8003ad0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	4a03      	ldr	r2, [pc, #12]	@ (8003ad0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003ac2:	6013      	str	r3, [r2, #0]
    }
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	200003e0 	.word	0x200003e0

08003ad4 <getCurrentMillis>:

// Функция для получения текущего времени (замена millis())
uint32_t getCurrentMillis(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
    return tim2_counter;
 8003ad8:	4b03      	ldr	r3, [pc, #12]	@ (8003ae8 <getCurrentMillis+0x14>)
 8003ada:	681b      	ldr	r3, [r3, #0]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	200003e0 	.word	0x200003e0

08003aec <SystemClock_Config>:

// Функции инициализации (сгенерированы CubeMX, оставлены без изменений)
void SystemClock_Config(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b094      	sub	sp, #80	@ 0x50
 8003af0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003af2:	f107 0320 	add.w	r3, r7, #32
 8003af6:	2230      	movs	r2, #48	@ 0x30
 8003af8:	2100      	movs	r1, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f009 ff3b 	bl	800d976 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b00:	f107 030c 	add.w	r3, r7, #12
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	609a      	str	r2, [r3, #8]
 8003b0c:	60da      	str	r2, [r3, #12]
 8003b0e:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8003b10:	2300      	movs	r3, #0
 8003b12:	60bb      	str	r3, [r7, #8]
 8003b14:	4b28      	ldr	r3, [pc, #160]	@ (8003bb8 <SystemClock_Config+0xcc>)
 8003b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b18:	4a27      	ldr	r2, [pc, #156]	@ (8003bb8 <SystemClock_Config+0xcc>)
 8003b1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b20:	4b25      	ldr	r3, [pc, #148]	@ (8003bb8 <SystemClock_Config+0xcc>)
 8003b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	4b22      	ldr	r3, [pc, #136]	@ (8003bbc <SystemClock_Config+0xd0>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a21      	ldr	r2, [pc, #132]	@ (8003bbc <SystemClock_Config+0xd0>)
 8003b36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bbc <SystemClock_Config+0xd0>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b44:	607b      	str	r3, [r7, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003b48:	2309      	movs	r3, #9
 8003b4a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b50:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003b52:	2301      	movs	r3, #1
 8003b54:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b56:	2302      	movs	r3, #2
 8003b58:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8003b60:	2308      	movs	r3, #8
 8003b62:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 8003b64:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003b68:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8003b6a:	2307      	movs	r3, #7
 8003b6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 8003b6e:	f107 0320 	add.w	r3, r7, #32
 8003b72:	4618      	mov	r0, r3
 8003b74:	f003 fb86 	bl	8007284 <HAL_RCC_OscConfig>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <SystemClock_Config+0x96>
 8003b7e:	f000 f9ad 	bl	8003edc <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b82:	230f      	movs	r3, #15
 8003b84:	60fb      	str	r3, [r7, #12]
                                 |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b86:	2302      	movs	r3, #2
 8003b88:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b8e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003b92:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b98:	61fb      	str	r3, [r7, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) Error_Handler();
 8003b9a:	f107 030c 	add.w	r3, r7, #12
 8003b9e:	2105      	movs	r1, #5
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f003 fde7 	bl	8007774 <HAL_RCC_ClockConfig>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <SystemClock_Config+0xc4>
 8003bac:	f000 f996 	bl	8003edc <Error_Handler>
}
 8003bb0:	bf00      	nop
 8003bb2:	3750      	adds	r7, #80	@ 0x50
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	40007000 	.word	0x40007000

08003bc0 <MX_I2C1_Init>:

void MX_I2C1_Init(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8003bc4:	4b12      	ldr	r3, [pc, #72]	@ (8003c10 <MX_I2C1_Init+0x50>)
 8003bc6:	4a13      	ldr	r2, [pc, #76]	@ (8003c14 <MX_I2C1_Init+0x54>)
 8003bc8:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 8003bca:	4b11      	ldr	r3, [pc, #68]	@ (8003c10 <MX_I2C1_Init+0x50>)
 8003bcc:	4a12      	ldr	r2, [pc, #72]	@ (8003c18 <MX_I2C1_Init+0x58>)
 8003bce:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c10 <MX_I2C1_Init+0x50>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8003bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003c10 <MX_I2C1_Init+0x50>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c10 <MX_I2C1_Init+0x50>)
 8003bde:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003be2:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003be4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c10 <MX_I2C1_Init+0x50>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8003bea:	4b09      	ldr	r3, [pc, #36]	@ (8003c10 <MX_I2C1_Init+0x50>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bf0:	4b07      	ldr	r3, [pc, #28]	@ (8003c10 <MX_I2C1_Init+0x50>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bf6:	4b06      	ldr	r3, [pc, #24]	@ (8003c10 <MX_I2C1_Init+0x50>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) Error_Handler();
 8003bfc:	4804      	ldr	r0, [pc, #16]	@ (8003c10 <MX_I2C1_Init+0x50>)
 8003bfe:	f002 f81d 	bl	8005c3c <HAL_I2C_Init>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <MX_I2C1_Init+0x4c>
 8003c08:	f000 f968 	bl	8003edc <Error_Handler>
}
 8003c0c:	bf00      	nop
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20000240 	.word	0x20000240
 8003c14:	40005400 	.word	0x40005400
 8003c18:	00061a80 	.word	0x00061a80

08003c1c <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8003c20:	4b11      	ldr	r3, [pc, #68]	@ (8003c68 <MX_USART2_UART_Init+0x4c>)
 8003c22:	4a12      	ldr	r2, [pc, #72]	@ (8003c6c <MX_USART2_UART_Init+0x50>)
 8003c24:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 9600;
 8003c26:	4b10      	ldr	r3, [pc, #64]	@ (8003c68 <MX_USART2_UART_Init+0x4c>)
 8003c28:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003c2c:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c68 <MX_USART2_UART_Init+0x4c>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8003c34:	4b0c      	ldr	r3, [pc, #48]	@ (8003c68 <MX_USART2_UART_Init+0x4c>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c68 <MX_USART2_UART_Init+0x4c>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8003c40:	4b09      	ldr	r3, [pc, #36]	@ (8003c68 <MX_USART2_UART_Init+0x4c>)
 8003c42:	220c      	movs	r2, #12
 8003c44:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c46:	4b08      	ldr	r3, [pc, #32]	@ (8003c68 <MX_USART2_UART_Init+0x4c>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c4c:	4b06      	ldr	r3, [pc, #24]	@ (8003c68 <MX_USART2_UART_Init+0x4c>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) Error_Handler();
 8003c52:	4805      	ldr	r0, [pc, #20]	@ (8003c68 <MX_USART2_UART_Init+0x4c>)
 8003c54:	f004 fc60 	bl	8008518 <HAL_UART_Init>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <MX_USART2_UART_Init+0x46>
 8003c5e:	f000 f93d 	bl	8003edc <Error_Handler>
}
 8003c62:	bf00      	nop
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000294 	.word	0x20000294
 8003c6c:	40004400 	.word	0x40004400

08003c70 <MX_USART3_UART_Init>:

void MX_USART3_UART_Init(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
    huart3.Instance = USART3;
 8003c74:	4b11      	ldr	r3, [pc, #68]	@ (8003cbc <MX_USART3_UART_Init+0x4c>)
 8003c76:	4a12      	ldr	r2, [pc, #72]	@ (8003cc0 <MX_USART3_UART_Init+0x50>)
 8003c78:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 9600;
 8003c7a:	4b10      	ldr	r3, [pc, #64]	@ (8003cbc <MX_USART3_UART_Init+0x4c>)
 8003c7c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003c80:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003c82:	4b0e      	ldr	r3, [pc, #56]	@ (8003cbc <MX_USART3_UART_Init+0x4c>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8003c88:	4b0c      	ldr	r3, [pc, #48]	@ (8003cbc <MX_USART3_UART_Init+0x4c>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8003c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <MX_USART3_UART_Init+0x4c>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8003c94:	4b09      	ldr	r3, [pc, #36]	@ (8003cbc <MX_USART3_UART_Init+0x4c>)
 8003c96:	220c      	movs	r2, #12
 8003c98:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c9a:	4b08      	ldr	r3, [pc, #32]	@ (8003cbc <MX_USART3_UART_Init+0x4c>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ca0:	4b06      	ldr	r3, [pc, #24]	@ (8003cbc <MX_USART3_UART_Init+0x4c>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart3) != HAL_OK) Error_Handler();
 8003ca6:	4805      	ldr	r0, [pc, #20]	@ (8003cbc <MX_USART3_UART_Init+0x4c>)
 8003ca8:	f004 fc36 	bl	8008518 <HAL_UART_Init>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <MX_USART3_UART_Init+0x46>
 8003cb2:	f000 f913 	bl	8003edc <Error_Handler>
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	200002dc 	.word	0x200002dc
 8003cc0:	40004800 	.word	0x40004800

08003cc4 <MX_IWDG_Init>:

void MX_IWDG_Init(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
    hiwdg.Instance = IWDG;
 8003cc8:	4b09      	ldr	r3, [pc, #36]	@ (8003cf0 <MX_IWDG_Init+0x2c>)
 8003cca:	4a0a      	ldr	r2, [pc, #40]	@ (8003cf4 <MX_IWDG_Init+0x30>)
 8003ccc:	601a      	str	r2, [r3, #0]
    hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8003cce:	4b08      	ldr	r3, [pc, #32]	@ (8003cf0 <MX_IWDG_Init+0x2c>)
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	605a      	str	r2, [r3, #4]
    hiwdg.Init.Reload = 4095;
 8003cd4:	4b06      	ldr	r3, [pc, #24]	@ (8003cf0 <MX_IWDG_Init+0x2c>)
 8003cd6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8003cda:	609a      	str	r2, [r3, #8]
    if (HAL_IWDG_Init(&hiwdg) != HAL_OK) Error_Handler();
 8003cdc:	4804      	ldr	r0, [pc, #16]	@ (8003cf0 <MX_IWDG_Init+0x2c>)
 8003cde:	f003 fa7f 	bl	80071e0 <HAL_IWDG_Init>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <MX_IWDG_Init+0x28>
 8003ce8:	f000 f8f8 	bl	8003edc <Error_Handler>
}
 8003cec:	bf00      	nop
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000324 	.word	0x20000324
 8003cf4:	40003000 	.word	0x40003000

08003cf8 <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cfe:	f107 0308 	add.w	r3, r7, #8
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	605a      	str	r2, [r3, #4]
 8003d08:	609a      	str	r2, [r3, #8]
 8003d0a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d0c:	463b      	mov	r3, r7
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	605a      	str	r2, [r3, #4]

    htim2.Instance = TIM2;
 8003d14:	4b1e      	ldr	r3, [pc, #120]	@ (8003d90 <MX_TIM2_Init+0x98>)
 8003d16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003d1a:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 8399;
 8003d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8003d90 <MX_TIM2_Init+0x98>)
 8003d1e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8003d22:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d24:	4b1a      	ldr	r3, [pc, #104]	@ (8003d90 <MX_TIM2_Init+0x98>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 4294967295;
 8003d2a:	4b19      	ldr	r3, [pc, #100]	@ (8003d90 <MX_TIM2_Init+0x98>)
 8003d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d30:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d32:	4b17      	ldr	r3, [pc, #92]	@ (8003d90 <MX_TIM2_Init+0x98>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d38:	4b15      	ldr	r3, [pc, #84]	@ (8003d90 <MX_TIM2_Init+0x98>)
 8003d3a:	2280      	movs	r2, #128	@ 0x80
 8003d3c:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) Error_Handler();
 8003d3e:	4814      	ldr	r0, [pc, #80]	@ (8003d90 <MX_TIM2_Init+0x98>)
 8003d40:	f003 ff6a 	bl	8007c18 <HAL_TIM_Base_Init>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <MX_TIM2_Init+0x56>
 8003d4a:	f000 f8c7 	bl	8003edc <Error_Handler>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d52:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) Error_Handler();
 8003d54:	f107 0308 	add.w	r3, r7, #8
 8003d58:	4619      	mov	r1, r3
 8003d5a:	480d      	ldr	r0, [pc, #52]	@ (8003d90 <MX_TIM2_Init+0x98>)
 8003d5c:	f004 f916 	bl	8007f8c <HAL_TIM_ConfigClockSource>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <MX_TIM2_Init+0x72>
 8003d66:	f000 f8b9 	bl	8003edc <Error_Handler>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) Error_Handler();
 8003d72:	463b      	mov	r3, r7
 8003d74:	4619      	mov	r1, r3
 8003d76:	4806      	ldr	r0, [pc, #24]	@ (8003d90 <MX_TIM2_Init+0x98>)
 8003d78:	f004 fb3e 	bl	80083f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <MX_TIM2_Init+0x8e>
 8003d82:	f000 f8ab 	bl	8003edc <Error_Handler>
}
 8003d86:	bf00      	nop
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	20000330 	.word	0x20000330

08003d94 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08c      	sub	sp, #48	@ 0x30
 8003d98:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d9a:	f107 031c 	add.w	r3, r7, #28
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	605a      	str	r2, [r3, #4]
 8003da4:	609a      	str	r2, [r3, #8]
 8003da6:	60da      	str	r2, [r3, #12]
 8003da8:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	4b38      	ldr	r3, [pc, #224]	@ (8003e90 <MX_GPIO_Init+0xfc>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db2:	4a37      	ldr	r2, [pc, #220]	@ (8003e90 <MX_GPIO_Init+0xfc>)
 8003db4:	f043 0304 	orr.w	r3, r3, #4
 8003db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dba:	4b35      	ldr	r3, [pc, #212]	@ (8003e90 <MX_GPIO_Init+0xfc>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	4b31      	ldr	r3, [pc, #196]	@ (8003e90 <MX_GPIO_Init+0xfc>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dce:	4a30      	ldr	r2, [pc, #192]	@ (8003e90 <MX_GPIO_Init+0xfc>)
 8003dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dd6:	4b2e      	ldr	r3, [pc, #184]	@ (8003e90 <MX_GPIO_Init+0xfc>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	4b2a      	ldr	r3, [pc, #168]	@ (8003e90 <MX_GPIO_Init+0xfc>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dea:	4a29      	ldr	r2, [pc, #164]	@ (8003e90 <MX_GPIO_Init+0xfc>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003df2:	4b27      	ldr	r3, [pc, #156]	@ (8003e90 <MX_GPIO_Init+0xfc>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	4b23      	ldr	r3, [pc, #140]	@ (8003e90 <MX_GPIO_Init+0xfc>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e06:	4a22      	ldr	r2, [pc, #136]	@ (8003e90 <MX_GPIO_Init+0xfc>)
 8003e08:	f043 0302 	orr.w	r3, r3, #2
 8003e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e0e:	4b20      	ldr	r3, [pc, #128]	@ (8003e90 <MX_GPIO_Init+0xfc>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8003e90 <MX_GPIO_Init+0xfc>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e22:	4a1b      	ldr	r2, [pc, #108]	@ (8003e90 <MX_GPIO_Init+0xfc>)
 8003e24:	f043 0308 	orr.w	r3, r3, #8
 8003e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e2a:	4b19      	ldr	r3, [pc, #100]	@ (8003e90 <MX_GPIO_Init+0xfc>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	60bb      	str	r3, [r7, #8]
 8003e34:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	607b      	str	r3, [r7, #4]
 8003e3a:	4b15      	ldr	r3, [pc, #84]	@ (8003e90 <MX_GPIO_Init+0xfc>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3e:	4a14      	ldr	r2, [pc, #80]	@ (8003e90 <MX_GPIO_Init+0xfc>)
 8003e40:	f043 0310 	orr.w	r3, r3, #16
 8003e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e46:	4b12      	ldr	r3, [pc, #72]	@ (8003e90 <MX_GPIO_Init+0xfc>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	607b      	str	r3, [r7, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]

    // Клавиатура: строки (выходы)
    GPIO_InitStruct.Pin = ROW1_PIN | ROW2_PIN | ROW3_PIN | ROW4_PIN | ROW5_PIN;
 8003e52:	231f      	movs	r3, #31
 8003e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e56:	2301      	movs	r3, #1
 8003e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e5e:	2302      	movs	r3, #2
 8003e60:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e62:	f107 031c 	add.w	r3, r7, #28
 8003e66:	4619      	mov	r1, r3
 8003e68:	480a      	ldr	r0, [pc, #40]	@ (8003e94 <MX_GPIO_Init+0x100>)
 8003e6a:	f001 fd19 	bl	80058a0 <HAL_GPIO_Init>

    // Клавиатура: столбцы (входы с подтяжкой)
    GPIO_InitStruct.Pin = COL1_PIN | COL2_PIN | COL3_PIN | COL4_PIN;
 8003e6e:	f641 0303 	movw	r3, #6147	@ 0x1803
 8003e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e74:	2300      	movs	r3, #0
 8003e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e7c:	f107 031c 	add.w	r3, r7, #28
 8003e80:	4619      	mov	r1, r3
 8003e82:	4805      	ldr	r0, [pc, #20]	@ (8003e98 <MX_GPIO_Init+0x104>)
 8003e84:	f001 fd0c 	bl	80058a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
    */
}
 8003e88:	bf00      	nop
 8003e8a:	3730      	adds	r7, #48	@ 0x30
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40023800 	.word	0x40023800
 8003e94:	40020800 	.word	0x40020800
 8003e98:	40020400 	.word	0x40020400

08003e9c <MX_DMA_Init>:

void MX_DMA_Init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	607b      	str	r3, [r7, #4]
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed8 <MX_DMA_Init+0x3c>)
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eaa:	4a0b      	ldr	r2, [pc, #44]	@ (8003ed8 <MX_DMA_Init+0x3c>)
 8003eac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eb2:	4b09      	ldr	r3, [pc, #36]	@ (8003ed8 <MX_DMA_Init+0x3c>)
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eba:	607b      	str	r3, [r7, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
    HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2105      	movs	r1, #5
 8003ec2:	200b      	movs	r0, #11
 8003ec4:	f001 f8c0 	bl	8005048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003ec8:	200b      	movs	r0, #11
 8003eca:	f001 f8d9 	bl	8005080 <HAL_NVIC_EnableIRQ>
}
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023800 	.word	0x40023800

08003edc <Error_Handler>:

void Error_Handler(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ee0:	b672      	cpsid	i
}
 8003ee2:	bf00      	nop
    __disable_irq();
    while (1) {}
 8003ee4:	bf00      	nop
 8003ee6:	e7fd      	b.n	8003ee4 <Error_Handler+0x8>

08003ee8 <CMD>:
    0x00, 0x41, 0x36, 0x08, 0x00, // }
    0x10, 0x08, 0x08, 0x10, 0x08, // ~
};

// Низкоуровневые функции (взяты из вашего тестового кода)
static HAL_StatusTypeDef CMD(uint8_t c) {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	4603      	mov	r3, r0
 8003ef0:	71fb      	strb	r3, [r7, #7]
    uint8_t d[2] = {0x00, c};
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	733b      	strb	r3, [r7, #12]
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(&hi2c1, OLED_I2C_ADDR, d, 2, HAL_MAX_DELAY);
 8003efa:	f107 020c 	add.w	r2, r7, #12
 8003efe:	f04f 33ff 	mov.w	r3, #4294967295
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	2302      	movs	r3, #2
 8003f06:	2178      	movs	r1, #120	@ 0x78
 8003f08:	4803      	ldr	r0, [pc, #12]	@ (8003f18 <CMD+0x30>)
 8003f0a:	f001 ffdb 	bl	8005ec4 <HAL_I2C_Master_Transmit>
 8003f0e:	4603      	mov	r3, r0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20000240 	.word	0x20000240

08003f1c <ssd1306_UpdateScreen>:

void ssd1306_UpdateScreen(void) {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af04      	add	r7, sp, #16
    for (uint8_t page = 0; page < 8; page++) {
 8003f22:	2300      	movs	r3, #0
 8003f24:	71fb      	strb	r3, [r7, #7]
 8003f26:	e01e      	b.n	8003f66 <ssd1306_UpdateScreen+0x4a>
        CMD(0xB0 + page);
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	3b50      	subs	r3, #80	@ 0x50
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff ffda 	bl	8003ee8 <CMD>
        CMD(0x00);
 8003f34:	2000      	movs	r0, #0
 8003f36:	f7ff ffd7 	bl	8003ee8 <CMD>
        CMD(0x10);
 8003f3a:	2010      	movs	r0, #16
 8003f3c:	f7ff ffd4 	bl	8003ee8 <CMD>
        HAL_I2C_Mem_Write(&hi2c1, OLED_I2C_ADDR, 0x40, I2C_MEMADD_SIZE_8BIT,
                          &Buffer[SSD1306_WIDTH * page], SSD1306_WIDTH, HAL_MAX_DELAY);
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	01db      	lsls	r3, r3, #7
        HAL_I2C_Mem_Write(&hi2c1, OLED_I2C_ADDR, 0x40, I2C_MEMADD_SIZE_8BIT,
 8003f44:	4a0c      	ldr	r2, [pc, #48]	@ (8003f78 <ssd1306_UpdateScreen+0x5c>)
 8003f46:	4413      	add	r3, r2
 8003f48:	f04f 32ff 	mov.w	r2, #4294967295
 8003f4c:	9202      	str	r2, [sp, #8]
 8003f4e:	2280      	movs	r2, #128	@ 0x80
 8003f50:	9201      	str	r2, [sp, #4]
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	2301      	movs	r3, #1
 8003f56:	2240      	movs	r2, #64	@ 0x40
 8003f58:	2178      	movs	r1, #120	@ 0x78
 8003f5a:	4808      	ldr	r0, [pc, #32]	@ (8003f7c <ssd1306_UpdateScreen+0x60>)
 8003f5c:	f002 f8b0 	bl	80060c0 <HAL_I2C_Mem_Write>
    for (uint8_t page = 0; page < 8; page++) {
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	3301      	adds	r3, #1
 8003f64:	71fb      	strb	r3, [r7, #7]
 8003f66:	79fb      	ldrb	r3, [r7, #7]
 8003f68:	2b07      	cmp	r3, #7
 8003f6a:	d9dd      	bls.n	8003f28 <ssd1306_UpdateScreen+0xc>
    }
}
 8003f6c:	bf00      	nop
 8003f6e:	bf00      	nop
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	200003e4 	.word	0x200003e4
 8003f7c:	20000240 	.word	0x20000240

08003f80 <ssd1306_Fill>:

void ssd1306_Fill(SSD1306_COLOR color) {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	4603      	mov	r3, r0
 8003f88:	71fb      	strb	r3, [r7, #7]
    memset(Buffer, color ? 0xFF : 0x00, sizeof(Buffer));
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <ssd1306_Fill+0x14>
 8003f90:	23ff      	movs	r3, #255	@ 0xff
 8003f92:	e000      	b.n	8003f96 <ssd1306_Fill+0x16>
 8003f94:	2300      	movs	r3, #0
 8003f96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4803      	ldr	r0, [pc, #12]	@ (8003fac <ssd1306_Fill+0x2c>)
 8003f9e:	f009 fcea 	bl	800d976 <memset>
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	200003e4 	.word	0x200003e4

08003fb0 <initOLED>:
    while (*str)
        ssd1306_WriteChar(*str++, color);
}

// Инициализация дисплея
void initOLED(void) {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
    vTaskDelay(100 / portTICK_PERIOD_MS); // Задержка для стабилизации
 8003fb4:	2064      	movs	r0, #100	@ 0x64
 8003fb6:	f006 feef 	bl	800ad98 <vTaskDelay>
    CMD(0xAE); CMD(0x20); CMD(0x00); CMD(0xB0); CMD(0xC8);
 8003fba:	20ae      	movs	r0, #174	@ 0xae
 8003fbc:	f7ff ff94 	bl	8003ee8 <CMD>
 8003fc0:	2020      	movs	r0, #32
 8003fc2:	f7ff ff91 	bl	8003ee8 <CMD>
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	f7ff ff8e 	bl	8003ee8 <CMD>
 8003fcc:	20b0      	movs	r0, #176	@ 0xb0
 8003fce:	f7ff ff8b 	bl	8003ee8 <CMD>
 8003fd2:	20c8      	movs	r0, #200	@ 0xc8
 8003fd4:	f7ff ff88 	bl	8003ee8 <CMD>
    CMD(0x00); CMD(0x10); CMD(0x40); CMD(0x81); CMD(0x7F);
 8003fd8:	2000      	movs	r0, #0
 8003fda:	f7ff ff85 	bl	8003ee8 <CMD>
 8003fde:	2010      	movs	r0, #16
 8003fe0:	f7ff ff82 	bl	8003ee8 <CMD>
 8003fe4:	2040      	movs	r0, #64	@ 0x40
 8003fe6:	f7ff ff7f 	bl	8003ee8 <CMD>
 8003fea:	2081      	movs	r0, #129	@ 0x81
 8003fec:	f7ff ff7c 	bl	8003ee8 <CMD>
 8003ff0:	207f      	movs	r0, #127	@ 0x7f
 8003ff2:	f7ff ff79 	bl	8003ee8 <CMD>
    CMD(0xA1); CMD(0xA6); CMD(0xA8); CMD(0x3F); CMD(0xA4);
 8003ff6:	20a1      	movs	r0, #161	@ 0xa1
 8003ff8:	f7ff ff76 	bl	8003ee8 <CMD>
 8003ffc:	20a6      	movs	r0, #166	@ 0xa6
 8003ffe:	f7ff ff73 	bl	8003ee8 <CMD>
 8004002:	20a8      	movs	r0, #168	@ 0xa8
 8004004:	f7ff ff70 	bl	8003ee8 <CMD>
 8004008:	203f      	movs	r0, #63	@ 0x3f
 800400a:	f7ff ff6d 	bl	8003ee8 <CMD>
 800400e:	20a4      	movs	r0, #164	@ 0xa4
 8004010:	f7ff ff6a 	bl	8003ee8 <CMD>
    CMD(0xD3); CMD(0x00); CMD(0xD5); CMD(0xF0); CMD(0xD9);
 8004014:	20d3      	movs	r0, #211	@ 0xd3
 8004016:	f7ff ff67 	bl	8003ee8 <CMD>
 800401a:	2000      	movs	r0, #0
 800401c:	f7ff ff64 	bl	8003ee8 <CMD>
 8004020:	20d5      	movs	r0, #213	@ 0xd5
 8004022:	f7ff ff61 	bl	8003ee8 <CMD>
 8004026:	20f0      	movs	r0, #240	@ 0xf0
 8004028:	f7ff ff5e 	bl	8003ee8 <CMD>
 800402c:	20d9      	movs	r0, #217	@ 0xd9
 800402e:	f7ff ff5b 	bl	8003ee8 <CMD>
    CMD(0x22); CMD(0xDA); CMD(0x12); CMD(0xDB); CMD(0x20);
 8004032:	2022      	movs	r0, #34	@ 0x22
 8004034:	f7ff ff58 	bl	8003ee8 <CMD>
 8004038:	20da      	movs	r0, #218	@ 0xda
 800403a:	f7ff ff55 	bl	8003ee8 <CMD>
 800403e:	2012      	movs	r0, #18
 8004040:	f7ff ff52 	bl	8003ee8 <CMD>
 8004044:	20db      	movs	r0, #219	@ 0xdb
 8004046:	f7ff ff4f 	bl	8003ee8 <CMD>
 800404a:	2020      	movs	r0, #32
 800404c:	f7ff ff4c 	bl	8003ee8 <CMD>
    CMD(0x8D); CMD(0x14); CMD(0xAF);
 8004050:	208d      	movs	r0, #141	@ 0x8d
 8004052:	f7ff ff49 	bl	8003ee8 <CMD>
 8004056:	2014      	movs	r0, #20
 8004058:	f7ff ff46 	bl	8003ee8 <CMD>
 800405c:	20af      	movs	r0, #175	@ 0xaf
 800405e:	f7ff ff43 	bl	8003ee8 <CMD>

    ssd1306_Fill(SSD1306_COLOR_BLACK);
 8004062:	2000      	movs	r0, #0
 8004064:	f7ff ff8c 	bl	8003f80 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8004068:	f7ff ff58 	bl	8003f1c <ssd1306_UpdateScreen>
}
 800406c:	bf00      	nop
 800406e:	bd80      	pop	{r7, pc}

08004070 <displayMessage>:

// Отображение сообщения (адаптировано для FreeRTOS)
bool displayMessage(const char* msg) {
 8004070:	b580      	push	{r7, lr}
 8004072:	b0a2      	sub	sp, #136	@ 0x88
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
    extern QueueHandle_t oledQueue;
    char buffer[128];
    strncpy(buffer, msg, sizeof(buffer) - 1);
 8004078:	f107 0308 	add.w	r3, r7, #8
 800407c:	227f      	movs	r2, #127	@ 0x7f
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4618      	mov	r0, r3
 8004082:	f009 fc9f 	bl	800d9c4 <strncpy>
    buffer[sizeof(buffer) - 1] = '\0';
 8004086:	2300      	movs	r3, #0
 8004088:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    return xQueueSend(oledQueue, buffer, portMAX_DELAY) == pdTRUE;
 800408c:	4b09      	ldr	r3, [pc, #36]	@ (80040b4 <displayMessage+0x44>)
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	f107 0108 	add.w	r1, r7, #8
 8004094:	2300      	movs	r3, #0
 8004096:	f04f 32ff 	mov.w	r2, #4294967295
 800409a:	f005 ff87 	bl	8009fac <xQueueGenericSend>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3788      	adds	r7, #136	@ 0x88
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	2000037c 	.word	0x2000037c

080040b8 <initRS422>:
static bool isReceiving = false;

static uint8_t rxBuffer[32]; // Буфер для приёма данных

// Инициализация RS-422
void initRS422(void) {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
    // UART2 уже инициализирован в main.c
    // Запускаем приём через DMA
    HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer));
 80040bc:	2220      	movs	r2, #32
 80040be:	4903      	ldr	r1, [pc, #12]	@ (80040cc <initRS422+0x14>)
 80040c0:	4803      	ldr	r0, [pc, #12]	@ (80040d0 <initRS422+0x18>)
 80040c2:	f004 fb75 	bl	80087b0 <HAL_UART_Receive_DMA>
}
 80040c6:	bf00      	nop
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	200007e8 	.word	0x200007e8
 80040d0:	20000294 	.word	0x20000294

080040d4 <sendRS422Command>:

// Отправка команды через очередь
void sendRS422Command(RS422Command* cmd) {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08e      	sub	sp, #56	@ 0x38
 80040d8:	af02      	add	r7, sp, #8
 80040da:	6078      	str	r0, [r7, #4]
    uint8_t frameBuffer[32];
    int frameLength = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]
    assembleFrame(slaveAddress, cmd->command, cmd->payload, cmd->payloadLength, frameBuffer, &frameLength);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	7819      	ldrb	r1, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6958      	ldr	r0, [r3, #20]
 80040ec:	f107 030c 	add.w	r3, r7, #12
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	f107 0310 	add.w	r3, r7, #16
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	4603      	mov	r3, r0
 80040fa:	4807      	ldr	r0, [pc, #28]	@ (8004118 <sendRS422Command+0x44>)
 80040fc:	f7fd f9c0 	bl	8001480 <assembleFrame>
    HAL_UART_Transmit_DMA(&huart2, frameBuffer, frameLength);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	b29a      	uxth	r2, r3
 8004104:	f107 0310 	add.w	r3, r7, #16
 8004108:	4619      	mov	r1, r3
 800410a:	4804      	ldr	r0, [pc, #16]	@ (800411c <sendRS422Command+0x48>)
 800410c:	f004 fae0 	bl	80086d0 <HAL_UART_Transmit_DMA>
}
 8004110:	bf00      	nop
 8004112:	3730      	adds	r7, #48	@ 0x30
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	080102bc 	.word	0x080102bc
 800411c:	20000294 	.word	0x20000294

08004120 <rs422SendStatus>:

// Функции отправки команд
void rs422SendStatus(void) {
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
    if (isSending || isReceiving) return;
 8004126:	4b12      	ldr	r3, [pc, #72]	@ (8004170 <rs422SendStatus+0x50>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d11c      	bne.n	8004168 <rs422SendStatus+0x48>
 800412e:	4b11      	ldr	r3, [pc, #68]	@ (8004174 <rs422SendStatus+0x54>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d118      	bne.n	8004168 <rs422SendStatus+0x48>
    isSending = true;
 8004136:	4b0e      	ldr	r3, [pc, #56]	@ (8004170 <rs422SendStatus+0x50>)
 8004138:	2201      	movs	r2, #1
 800413a:	701a      	strb	r2, [r3, #0]

    RS422Command cmd = {.command = 'S', .payloadLength = 0};
 800413c:	463b      	mov	r3, r7
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	605a      	str	r2, [r3, #4]
 8004144:	609a      	str	r2, [r3, #8]
 8004146:	60da      	str	r2, [r3, #12]
 8004148:	611a      	str	r2, [r3, #16]
 800414a:	615a      	str	r2, [r3, #20]
 800414c:	2353      	movs	r3, #83	@ 0x53
 800414e:	703b      	strb	r3, [r7, #0]
    xQueueSend(rs422TxQueue, &cmd, portMAX_DELAY);
 8004150:	4b09      	ldr	r3, [pc, #36]	@ (8004178 <rs422SendStatus+0x58>)
 8004152:	6818      	ldr	r0, [r3, #0]
 8004154:	4639      	mov	r1, r7
 8004156:	2300      	movs	r3, #0
 8004158:	f04f 32ff 	mov.w	r2, #4294967295
 800415c:	f005 ff26 	bl	8009fac <xQueueGenericSend>
    isSending = false;
 8004160:	4b03      	ldr	r3, [pc, #12]	@ (8004170 <rs422SendStatus+0x50>)
 8004162:	2200      	movs	r2, #0
 8004164:	701a      	strb	r2, [r3, #0]
 8004166:	e000      	b.n	800416a <rs422SendStatus+0x4a>
    if (isSending || isReceiving) return;
 8004168:	bf00      	nop
}
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	200007e4 	.word	0x200007e4
 8004174:	200007e5 	.word	0x200007e5
 8004178:	20000380 	.word	0x20000380

0800417c <rs422SendTransaction>:

void rs422SendTransaction(FuelMode mode, uint32_t volume, uint32_t amount, uint16_t price) {
 800417c:	b580      	push	{r7, lr}
 800417e:	b08c      	sub	sp, #48	@ 0x30
 8004180:	af02      	add	r7, sp, #8
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	461a      	mov	r2, r3
 8004188:	4603      	mov	r3, r0
 800418a:	73fb      	strb	r3, [r7, #15]
 800418c:	4613      	mov	r3, r2
 800418e:	81bb      	strh	r3, [r7, #12]
    if (isSending || isReceiving) return;
 8004190:	4b32      	ldr	r3, [pc, #200]	@ (800425c <rs422SendTransaction+0xe0>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d15d      	bne.n	8004254 <rs422SendTransaction+0xd8>
 8004198:	4b31      	ldr	r3, [pc, #196]	@ (8004260 <rs422SendTransaction+0xe4>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d159      	bne.n	8004254 <rs422SendTransaction+0xd8>
    if (price > 9999) {
 80041a0:	89bb      	ldrh	r3, [r7, #12]
 80041a2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d907      	bls.n	80041ba <rs422SendTransaction+0x3e>
        logMessage(LOG_LEVEL_ERROR, "Invalid price");
 80041aa:	492e      	ldr	r1, [pc, #184]	@ (8004264 <rs422SendTransaction+0xe8>)
 80041ac:	2001      	movs	r0, #1
 80041ae:	f7ff fa79 	bl	80036a4 <logMessage>
        displayMessage("Invalid price");
 80041b2:	482c      	ldr	r0, [pc, #176]	@ (8004264 <rs422SendTransaction+0xe8>)
 80041b4:	f7ff ff5c 	bl	8004070 <displayMessage>
        return;
 80041b8:	e04d      	b.n	8004256 <rs422SendTransaction+0xda>
    }
    isSending = true;
 80041ba:	4b28      	ldr	r3, [pc, #160]	@ (800425c <rs422SendTransaction+0xe0>)
 80041bc:	2201      	movs	r2, #1
 80041be:	701a      	strb	r2, [r3, #0]

    RS422Command cmd;
    cmd.command = (mode == FUEL_BY_VOLUME) ? 'V' : 'M';
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <rs422SendTransaction+0x4e>
 80041c6:	2356      	movs	r3, #86	@ 0x56
 80041c8:	e000      	b.n	80041cc <rs422SendTransaction+0x50>
 80041ca:	234d      	movs	r3, #77	@ 0x4d
 80041cc:	743b      	strb	r3, [r7, #16]
    switch (mode) {
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d020      	beq.n	8004216 <rs422SendTransaction+0x9a>
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	dc28      	bgt.n	800422a <rs422SendTransaction+0xae>
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <rs422SendTransaction+0x66>
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d00b      	beq.n	80041f8 <rs422SendTransaction+0x7c>
 80041e0:	e023      	b.n	800422a <rs422SendTransaction+0xae>
        case FUEL_BY_VOLUME:
            snprintf((char*)cmd.payload, sizeof(cmd.payload), "1;%06lu;%04u", volume, price);
 80041e2:	89bb      	ldrh	r3, [r7, #12]
 80041e4:	f107 0210 	add.w	r2, r7, #16
 80041e8:	1c50      	adds	r0, r2, #1
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004268 <rs422SendTransaction+0xec>)
 80041f0:	2110      	movs	r1, #16
 80041f2:	f009 fb47 	bl	800d884 <sniprintf>
            break;
 80041f6:	e018      	b.n	800422a <rs422SendTransaction+0xae>
        case FUEL_BY_PRICE:
            snprintf((char*)cmd.payload, sizeof(cmd.payload), "1;%06lu;%04u", amount, price);
 80041f8:	89bb      	ldrh	r3, [r7, #12]
 80041fa:	f107 0210 	add.w	r2, r7, #16
 80041fe:	1c50      	adds	r0, r2, #1
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a18      	ldr	r2, [pc, #96]	@ (8004268 <rs422SendTransaction+0xec>)
 8004206:	2110      	movs	r1, #16
 8004208:	f009 fb3c 	bl	800d884 <sniprintf>
            logMessage(LOG_LEVEL_DEBUG, "Sending transaction amount");
 800420c:	4917      	ldr	r1, [pc, #92]	@ (800426c <rs422SendTransaction+0xf0>)
 800420e:	2000      	movs	r0, #0
 8004210:	f7ff fa48 	bl	80036a4 <logMessage>
            break;
 8004214:	e009      	b.n	800422a <rs422SendTransaction+0xae>
        case FUEL_BY_FULL_TANK:
            snprintf((char*)cmd.payload, sizeof(cmd.payload), "1;999999;%04u", price);
 8004216:	89ba      	ldrh	r2, [r7, #12]
 8004218:	f107 0310 	add.w	r3, r7, #16
 800421c:	1c58      	adds	r0, r3, #1
 800421e:	4613      	mov	r3, r2
 8004220:	4a13      	ldr	r2, [pc, #76]	@ (8004270 <rs422SendTransaction+0xf4>)
 8004222:	2110      	movs	r1, #16
 8004224:	f009 fb2e 	bl	800d884 <sniprintf>
            break;
 8004228:	bf00      	nop
    }
    cmd.payloadLength = strlen((char*)cmd.payload);
 800422a:	f107 0310 	add.w	r3, r7, #16
 800422e:	3301      	adds	r3, #1
 8004230:	4618      	mov	r0, r3
 8004232:	f7fb ffcd 	bl	80001d0 <strlen>
 8004236:	4603      	mov	r3, r0
 8004238:	627b      	str	r3, [r7, #36]	@ 0x24
    xQueueSend(rs422TxQueue, &cmd, portMAX_DELAY);
 800423a:	4b0e      	ldr	r3, [pc, #56]	@ (8004274 <rs422SendTransaction+0xf8>)
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	f107 0110 	add.w	r1, r7, #16
 8004242:	2300      	movs	r3, #0
 8004244:	f04f 32ff 	mov.w	r2, #4294967295
 8004248:	f005 feb0 	bl	8009fac <xQueueGenericSend>
    isSending = false;
 800424c:	4b03      	ldr	r3, [pc, #12]	@ (800425c <rs422SendTransaction+0xe0>)
 800424e:	2200      	movs	r2, #0
 8004250:	701a      	strb	r2, [r3, #0]
 8004252:	e000      	b.n	8004256 <rs422SendTransaction+0xda>
    if (isSending || isReceiving) return;
 8004254:	bf00      	nop
}
 8004256:	3728      	adds	r7, #40	@ 0x28
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	200007e4 	.word	0x200007e4
 8004260:	200007e5 	.word	0x200007e5
 8004264:	0801015c 	.word	0x0801015c
 8004268:	0801016c 	.word	0x0801016c
 800426c:	0801017c 	.word	0x0801017c
 8004270:	08010198 	.word	0x08010198
 8004274:	20000380 	.word	0x20000380

08004278 <rs422SendTransactionUpdate>:

void rs422SendTransactionUpdate(void) {
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
    if (isSending || isReceiving) return;
 800427e:	4b14      	ldr	r3, [pc, #80]	@ (80042d0 <rs422SendTransactionUpdate+0x58>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d11f      	bne.n	80042c6 <rs422SendTransactionUpdate+0x4e>
 8004286:	4b13      	ldr	r3, [pc, #76]	@ (80042d4 <rs422SendTransactionUpdate+0x5c>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d11b      	bne.n	80042c6 <rs422SendTransactionUpdate+0x4e>
    isSending = true;
 800428e:	4b10      	ldr	r3, [pc, #64]	@ (80042d0 <rs422SendTransactionUpdate+0x58>)
 8004290:	2201      	movs	r2, #1
 8004292:	701a      	strb	r2, [r3, #0]

    RS422Command cmd = {.command = 'T', .payloadLength = 0};
 8004294:	463b      	mov	r3, r7
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	605a      	str	r2, [r3, #4]
 800429c:	609a      	str	r2, [r3, #8]
 800429e:	60da      	str	r2, [r3, #12]
 80042a0:	611a      	str	r2, [r3, #16]
 80042a2:	615a      	str	r2, [r3, #20]
 80042a4:	2354      	movs	r3, #84	@ 0x54
 80042a6:	703b      	strb	r3, [r7, #0]
    xQueueSend(rs422TxQueue, &cmd, portMAX_DELAY);
 80042a8:	4b0b      	ldr	r3, [pc, #44]	@ (80042d8 <rs422SendTransactionUpdate+0x60>)
 80042aa:	6818      	ldr	r0, [r3, #0]
 80042ac:	4639      	mov	r1, r7
 80042ae:	2300      	movs	r3, #0
 80042b0:	f04f 32ff 	mov.w	r2, #4294967295
 80042b4:	f005 fe7a 	bl	8009fac <xQueueGenericSend>
    osDelay(1); // Задержка 500 мкс заменена на 1 мс в FreeRTOS
 80042b8:	2001      	movs	r0, #1
 80042ba:	f005 fbfb 	bl	8009ab4 <osDelay>
    isSending = false;
 80042be:	4b04      	ldr	r3, [pc, #16]	@ (80042d0 <rs422SendTransactionUpdate+0x58>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	e000      	b.n	80042c8 <rs422SendTransactionUpdate+0x50>
    if (isSending || isReceiving) return;
 80042c6:	bf00      	nop
}
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	200007e4 	.word	0x200007e4
 80042d4:	200007e5 	.word	0x200007e5
 80042d8:	20000380 	.word	0x20000380

080042dc <rs422SendNozzleOff>:

void rs422SendNozzleOff(void) {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
    if (isSending || isReceiving) return;
 80042e2:	4b12      	ldr	r3, [pc, #72]	@ (800432c <rs422SendNozzleOff+0x50>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d11c      	bne.n	8004324 <rs422SendNozzleOff+0x48>
 80042ea:	4b11      	ldr	r3, [pc, #68]	@ (8004330 <rs422SendNozzleOff+0x54>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d118      	bne.n	8004324 <rs422SendNozzleOff+0x48>
    isSending = true;
 80042f2:	4b0e      	ldr	r3, [pc, #56]	@ (800432c <rs422SendNozzleOff+0x50>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	701a      	strb	r2, [r3, #0]

    RS422Command cmd = {.command = 'N', .payloadLength = 0};
 80042f8:	463b      	mov	r3, r7
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	605a      	str	r2, [r3, #4]
 8004300:	609a      	str	r2, [r3, #8]
 8004302:	60da      	str	r2, [r3, #12]
 8004304:	611a      	str	r2, [r3, #16]
 8004306:	615a      	str	r2, [r3, #20]
 8004308:	234e      	movs	r3, #78	@ 0x4e
 800430a:	703b      	strb	r3, [r7, #0]
    xQueueSend(rs422TxQueue, &cmd, portMAX_DELAY);
 800430c:	4b09      	ldr	r3, [pc, #36]	@ (8004334 <rs422SendNozzleOff+0x58>)
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	4639      	mov	r1, r7
 8004312:	2300      	movs	r3, #0
 8004314:	f04f 32ff 	mov.w	r2, #4294967295
 8004318:	f005 fe48 	bl	8009fac <xQueueGenericSend>
    isSending = false;
 800431c:	4b03      	ldr	r3, [pc, #12]	@ (800432c <rs422SendNozzleOff+0x50>)
 800431e:	2200      	movs	r2, #0
 8004320:	701a      	strb	r2, [r3, #0]
 8004322:	e000      	b.n	8004326 <rs422SendNozzleOff+0x4a>
    if (isSending || isReceiving) return;
 8004324:	bf00      	nop
}
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	200007e4 	.word	0x200007e4
 8004330:	200007e5 	.word	0x200007e5
 8004334:	20000380 	.word	0x20000380

08004338 <rs422SendLitersMonitor>:

void rs422SendLitersMonitor(void) {
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
    if (isSending || isReceiving) return;
 800433e:	4b12      	ldr	r3, [pc, #72]	@ (8004388 <rs422SendLitersMonitor+0x50>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d11c      	bne.n	8004380 <rs422SendLitersMonitor+0x48>
 8004346:	4b11      	ldr	r3, [pc, #68]	@ (800438c <rs422SendLitersMonitor+0x54>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d118      	bne.n	8004380 <rs422SendLitersMonitor+0x48>
    isSending = true;
 800434e:	4b0e      	ldr	r3, [pc, #56]	@ (8004388 <rs422SendLitersMonitor+0x50>)
 8004350:	2201      	movs	r2, #1
 8004352:	701a      	strb	r2, [r3, #0]

    RS422Command cmd = {.command = 'L', .payloadLength = 0};
 8004354:	463b      	mov	r3, r7
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	605a      	str	r2, [r3, #4]
 800435c:	609a      	str	r2, [r3, #8]
 800435e:	60da      	str	r2, [r3, #12]
 8004360:	611a      	str	r2, [r3, #16]
 8004362:	615a      	str	r2, [r3, #20]
 8004364:	234c      	movs	r3, #76	@ 0x4c
 8004366:	703b      	strb	r3, [r7, #0]
    xQueueSend(rs422TxQueue, &cmd, portMAX_DELAY);
 8004368:	4b09      	ldr	r3, [pc, #36]	@ (8004390 <rs422SendLitersMonitor+0x58>)
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	4639      	mov	r1, r7
 800436e:	2300      	movs	r3, #0
 8004370:	f04f 32ff 	mov.w	r2, #4294967295
 8004374:	f005 fe1a 	bl	8009fac <xQueueGenericSend>
    isSending = false;
 8004378:	4b03      	ldr	r3, [pc, #12]	@ (8004388 <rs422SendLitersMonitor+0x50>)
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	e000      	b.n	8004382 <rs422SendLitersMonitor+0x4a>
    if (isSending || isReceiving) return;
 8004380:	bf00      	nop
}
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	200007e4 	.word	0x200007e4
 800438c:	200007e5 	.word	0x200007e5
 8004390:	20000380 	.word	0x20000380

08004394 <rs422SendRevenueStatus>:

void rs422SendRevenueStatus(void) {
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
    if (isSending || isReceiving) return;
 800439a:	4b12      	ldr	r3, [pc, #72]	@ (80043e4 <rs422SendRevenueStatus+0x50>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d11c      	bne.n	80043dc <rs422SendRevenueStatus+0x48>
 80043a2:	4b11      	ldr	r3, [pc, #68]	@ (80043e8 <rs422SendRevenueStatus+0x54>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d118      	bne.n	80043dc <rs422SendRevenueStatus+0x48>
    isSending = true;
 80043aa:	4b0e      	ldr	r3, [pc, #56]	@ (80043e4 <rs422SendRevenueStatus+0x50>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	701a      	strb	r2, [r3, #0]

    RS422Command cmd = {.command = 'R', .payloadLength = 0};
 80043b0:	463b      	mov	r3, r7
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	605a      	str	r2, [r3, #4]
 80043b8:	609a      	str	r2, [r3, #8]
 80043ba:	60da      	str	r2, [r3, #12]
 80043bc:	611a      	str	r2, [r3, #16]
 80043be:	615a      	str	r2, [r3, #20]
 80043c0:	2352      	movs	r3, #82	@ 0x52
 80043c2:	703b      	strb	r3, [r7, #0]
    xQueueSend(rs422TxQueue, &cmd, portMAX_DELAY);
 80043c4:	4b09      	ldr	r3, [pc, #36]	@ (80043ec <rs422SendRevenueStatus+0x58>)
 80043c6:	6818      	ldr	r0, [r3, #0]
 80043c8:	4639      	mov	r1, r7
 80043ca:	2300      	movs	r3, #0
 80043cc:	f04f 32ff 	mov.w	r2, #4294967295
 80043d0:	f005 fdec 	bl	8009fac <xQueueGenericSend>
    isSending = false;
 80043d4:	4b03      	ldr	r3, [pc, #12]	@ (80043e4 <rs422SendRevenueStatus+0x50>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	701a      	strb	r2, [r3, #0]
 80043da:	e000      	b.n	80043de <rs422SendRevenueStatus+0x4a>
    if (isSending || isReceiving) return;
 80043dc:	bf00      	nop
}
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	200007e4 	.word	0x200007e4
 80043e8:	200007e5 	.word	0x200007e5
 80043ec:	20000380 	.word	0x20000380

080043f0 <rs422SendTotalCounter>:

void rs422SendTotalCounter(void) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
    if (isSending || isReceiving) return;
 80043f6:	4b16      	ldr	r3, [pc, #88]	@ (8004450 <rs422SendTotalCounter+0x60>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d124      	bne.n	8004448 <rs422SendTotalCounter+0x58>
 80043fe:	4b15      	ldr	r3, [pc, #84]	@ (8004454 <rs422SendTotalCounter+0x64>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d120      	bne.n	8004448 <rs422SendTotalCounter+0x58>
    isSending = true;
 8004406:	4b12      	ldr	r3, [pc, #72]	@ (8004450 <rs422SendTotalCounter+0x60>)
 8004408:	2201      	movs	r2, #1
 800440a:	701a      	strb	r2, [r3, #0]

    RS422Command cmd = {.command = 'C', .payloadLength = 1};
 800440c:	463b      	mov	r3, r7
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	605a      	str	r2, [r3, #4]
 8004414:	609a      	str	r2, [r3, #8]
 8004416:	60da      	str	r2, [r3, #12]
 8004418:	611a      	str	r2, [r3, #16]
 800441a:	615a      	str	r2, [r3, #20]
 800441c:	2343      	movs	r3, #67	@ 0x43
 800441e:	703b      	strb	r3, [r7, #0]
 8004420:	2301      	movs	r3, #1
 8004422:	617b      	str	r3, [r7, #20]
    cmd.payload[0] = '1';
 8004424:	2331      	movs	r3, #49	@ 0x31
 8004426:	707b      	strb	r3, [r7, #1]
    xQueueSend(rs422TxQueue, &cmd, portMAX_DELAY);
 8004428:	4b0b      	ldr	r3, [pc, #44]	@ (8004458 <rs422SendTotalCounter+0x68>)
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	4639      	mov	r1, r7
 800442e:	2300      	movs	r3, #0
 8004430:	f04f 32ff 	mov.w	r2, #4294967295
 8004434:	f005 fdba 	bl	8009fac <xQueueGenericSend>
    logMessage(LOG_LEVEL_DEBUG, "Sending C1 command");
 8004438:	4908      	ldr	r1, [pc, #32]	@ (800445c <rs422SendTotalCounter+0x6c>)
 800443a:	2000      	movs	r0, #0
 800443c:	f7ff f932 	bl	80036a4 <logMessage>
    isSending = false;
 8004440:	4b03      	ldr	r3, [pc, #12]	@ (8004450 <rs422SendTotalCounter+0x60>)
 8004442:	2200      	movs	r2, #0
 8004444:	701a      	strb	r2, [r3, #0]
 8004446:	e000      	b.n	800444a <rs422SendTotalCounter+0x5a>
    if (isSending || isReceiving) return;
 8004448:	bf00      	nop
}
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	200007e4 	.word	0x200007e4
 8004454:	200007e5 	.word	0x200007e5
 8004458:	20000380 	.word	0x20000380
 800445c:	080101a8 	.word	0x080101a8

08004460 <rs422SendPause>:

void rs422SendPause(void) {
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
    if (isSending || isReceiving) return;
 8004466:	4b14      	ldr	r3, [pc, #80]	@ (80044b8 <rs422SendPause+0x58>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d120      	bne.n	80044b0 <rs422SendPause+0x50>
 800446e:	4b13      	ldr	r3, [pc, #76]	@ (80044bc <rs422SendPause+0x5c>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d11c      	bne.n	80044b0 <rs422SendPause+0x50>
    isSending = true;
 8004476:	4b10      	ldr	r3, [pc, #64]	@ (80044b8 <rs422SendPause+0x58>)
 8004478:	2201      	movs	r2, #1
 800447a:	701a      	strb	r2, [r3, #0]

    RS422Command cmd = {.command = 'B', .payloadLength = 0};
 800447c:	463b      	mov	r3, r7
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	605a      	str	r2, [r3, #4]
 8004484:	609a      	str	r2, [r3, #8]
 8004486:	60da      	str	r2, [r3, #12]
 8004488:	611a      	str	r2, [r3, #16]
 800448a:	615a      	str	r2, [r3, #20]
 800448c:	2342      	movs	r3, #66	@ 0x42
 800448e:	703b      	strb	r3, [r7, #0]
    xQueueSend(rs422TxQueue, &cmd, portMAX_DELAY);
 8004490:	4b0b      	ldr	r3, [pc, #44]	@ (80044c0 <rs422SendPause+0x60>)
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	4639      	mov	r1, r7
 8004496:	2300      	movs	r3, #0
 8004498:	f04f 32ff 	mov.w	r2, #4294967295
 800449c:	f005 fd86 	bl	8009fac <xQueueGenericSend>
    logMessage(LOG_LEVEL_DEBUG, "Sending pause command");
 80044a0:	4908      	ldr	r1, [pc, #32]	@ (80044c4 <rs422SendPause+0x64>)
 80044a2:	2000      	movs	r0, #0
 80044a4:	f7ff f8fe 	bl	80036a4 <logMessage>
    isSending = false;
 80044a8:	4b03      	ldr	r3, [pc, #12]	@ (80044b8 <rs422SendPause+0x58>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
 80044ae:	e000      	b.n	80044b2 <rs422SendPause+0x52>
    if (isSending || isReceiving) return;
 80044b0:	bf00      	nop
}
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	200007e4 	.word	0x200007e4
 80044bc:	200007e5 	.word	0x200007e5
 80044c0:	20000380 	.word	0x20000380
 80044c4:	080101bc 	.word	0x080101bc

080044c8 <rs422SendResume>:

void rs422SendResume(void) {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
    if (isSending || isReceiving) return;
 80044ce:	4b14      	ldr	r3, [pc, #80]	@ (8004520 <rs422SendResume+0x58>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d120      	bne.n	8004518 <rs422SendResume+0x50>
 80044d6:	4b13      	ldr	r3, [pc, #76]	@ (8004524 <rs422SendResume+0x5c>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d11c      	bne.n	8004518 <rs422SendResume+0x50>
    isSending = true;
 80044de:	4b10      	ldr	r3, [pc, #64]	@ (8004520 <rs422SendResume+0x58>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	701a      	strb	r2, [r3, #0]

    RS422Command cmd = {.command = 'G', .payloadLength = 0};
 80044e4:	463b      	mov	r3, r7
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	605a      	str	r2, [r3, #4]
 80044ec:	609a      	str	r2, [r3, #8]
 80044ee:	60da      	str	r2, [r3, #12]
 80044f0:	611a      	str	r2, [r3, #16]
 80044f2:	615a      	str	r2, [r3, #20]
 80044f4:	2347      	movs	r3, #71	@ 0x47
 80044f6:	703b      	strb	r3, [r7, #0]
    xQueueSend(rs422TxQueue, &cmd, portMAX_DELAY);
 80044f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004528 <rs422SendResume+0x60>)
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	4639      	mov	r1, r7
 80044fe:	2300      	movs	r3, #0
 8004500:	f04f 32ff 	mov.w	r2, #4294967295
 8004504:	f005 fd52 	bl	8009fac <xQueueGenericSend>
    logMessage(LOG_LEVEL_DEBUG, "Sending resume command");
 8004508:	4908      	ldr	r1, [pc, #32]	@ (800452c <rs422SendResume+0x64>)
 800450a:	2000      	movs	r0, #0
 800450c:	f7ff f8ca 	bl	80036a4 <logMessage>
    isSending = false;
 8004510:	4b03      	ldr	r3, [pc, #12]	@ (8004520 <rs422SendResume+0x58>)
 8004512:	2200      	movs	r2, #0
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	e000      	b.n	800451a <rs422SendResume+0x52>
    if (isSending || isReceiving) return;
 8004518:	bf00      	nop
}
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	200007e4 	.word	0x200007e4
 8004524:	200007e5 	.word	0x200007e5
 8004528:	20000380 	.word	0x20000380
 800452c:	080101d4 	.word	0x080101d4

08004530 <rs422WaitForResponse>:

// Ожидание ответа (асинхронно через очередь)
int rs422WaitForResponse(uint8_t* buffer, int expectedLength, char expectedCommand) {
 8004530:	b580      	push	{r7, lr}
 8004532:	b090      	sub	sp, #64	@ 0x40
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	4613      	mov	r3, r2
 800453c:	71fb      	strb	r3, [r7, #7]
    if (isReceiving) return 0;
 800453e:	4b3a      	ldr	r3, [pc, #232]	@ (8004628 <rs422WaitForResponse+0xf8>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <rs422WaitForResponse+0x1a>
 8004546:	2300      	movs	r3, #0
 8004548:	e069      	b.n	800461e <rs422WaitForResponse+0xee>
    isReceiving = true;
 800454a:	4b37      	ldr	r3, [pc, #220]	@ (8004628 <rs422WaitForResponse+0xf8>)
 800454c:	2201      	movs	r2, #1
 800454e:	701a      	strb	r2, [r3, #0]

    int count = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint8_t rxData[32];
    TickType_t startTime = xTaskGetTickCount();
 8004554:	f006 fd72 	bl	800b03c <xTaskGetTickCount>
 8004558:	63b8      	str	r0, [r7, #56]	@ 0x38

    while ((xTaskGetTickCount() - startTime) * portTICK_PERIOD_MS < RESPONSE_TIMEOUT) {
 800455a:	e051      	b.n	8004600 <rs422WaitForResponse+0xd0>
        if (xQueueReceive(rs422RxQueue, rxData, 10 / portTICK_PERIOD_MS) == pdTRUE) {
 800455c:	4b33      	ldr	r3, [pc, #204]	@ (800462c <rs422WaitForResponse+0xfc>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f107 0114 	add.w	r1, r7, #20
 8004564:	220a      	movs	r2, #10
 8004566:	4618      	mov	r0, r3
 8004568:	f005 fec0 	bl	800a2ec <xQueueReceive>
 800456c:	4603      	mov	r3, r0
 800456e:	2b01      	cmp	r3, #1
 8004570:	d146      	bne.n	8004600 <rs422WaitForResponse+0xd0>
            memcpy(buffer, rxData, expectedLength);
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	f107 0314 	add.w	r3, r7, #20
 8004578:	4619      	mov	r1, r3
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f009 fb07 	bl	800db8e <memcpy>
            count = expectedLength;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	63fb      	str	r3, [r7, #60]	@ 0x3c

            // Проверка формата ответа
            if (buffer[0] != 0x02 || buffer[1] != slaveAddress[0] || buffer[2] != slaveAddress[1] || buffer[3] != expectedCommand) {
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b02      	cmp	r3, #2
 800458a:	d111      	bne.n	80045b0 <rs422WaitForResponse+0x80>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3301      	adds	r3, #1
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2200      	movs	r2, #0
 8004594:	4293      	cmp	r3, r2
 8004596:	d10b      	bne.n	80045b0 <rs422WaitForResponse+0x80>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3302      	adds	r3, #2
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2201      	movs	r2, #1
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d105      	bne.n	80045b0 <rs422WaitForResponse+0x80>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3303      	adds	r3, #3
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	79fa      	ldrb	r2, [r7, #7]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d00a      	beq.n	80045c6 <rs422WaitForResponse+0x96>
                logMessage(LOG_LEVEL_ERROR, "Invalid response format or command");
 80045b0:	491f      	ldr	r1, [pc, #124]	@ (8004630 <rs422WaitForResponse+0x100>)
 80045b2:	2001      	movs	r0, #1
 80045b4:	f7ff f876 	bl	80036a4 <logMessage>
                displayMessage("Invalid response from pump");
 80045b8:	481e      	ldr	r0, [pc, #120]	@ (8004634 <rs422WaitForResponse+0x104>)
 80045ba:	f7ff fd59 	bl	8004070 <displayMessage>
                count = -1;
 80045be:	f04f 33ff 	mov.w	r3, #4294967295
 80045c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                break;
 80045c4:	e027      	b.n	8004616 <rs422WaitForResponse+0xe6>
            }

            // Проверка CRC
            uint8_t calcCRC = calculateCRC(buffer, expectedLength - 1);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	3b01      	subs	r3, #1
 80045ca:	4619      	mov	r1, r3
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f7fc fce9 	bl	8000fa4 <calculateCRC>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            if (calcCRC != buffer[expectedLength - 1]) {
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	3b01      	subs	r3, #1
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d014      	beq.n	8004614 <rs422WaitForResponse+0xe4>
                logMessage(LOG_LEVEL_ERROR, "CRC mismatch");
 80045ea:	4913      	ldr	r1, [pc, #76]	@ (8004638 <rs422WaitForResponse+0x108>)
 80045ec:	2001      	movs	r0, #1
 80045ee:	f7ff f859 	bl	80036a4 <logMessage>
                displayMessage("Invalid response from pump");
 80045f2:	4810      	ldr	r0, [pc, #64]	@ (8004634 <rs422WaitForResponse+0x104>)
 80045f4:	f7ff fd3c 	bl	8004070 <displayMessage>
                count = -1;
 80045f8:	f04f 33ff 	mov.w	r3, #4294967295
 80045fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            break;
 80045fe:	e009      	b.n	8004614 <rs422WaitForResponse+0xe4>
    while ((xTaskGetTickCount() - startTime) * portTICK_PERIOD_MS < RESPONSE_TIMEOUT) {
 8004600:	f006 fd1c 	bl	800b03c <xTaskGetTickCount>
 8004604:	4602      	mov	r2, r0
 8004606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800460e:	4293      	cmp	r3, r2
 8004610:	d9a4      	bls.n	800455c <rs422WaitForResponse+0x2c>
 8004612:	e000      	b.n	8004616 <rs422WaitForResponse+0xe6>
            break;
 8004614:	bf00      	nop
        }
    }

    isReceiving = false;
 8004616:	4b04      	ldr	r3, [pc, #16]	@ (8004628 <rs422WaitForResponse+0xf8>)
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
    return count;
 800461c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800461e:	4618      	mov	r0, r3
 8004620:	3740      	adds	r7, #64	@ 0x40
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	200007e5 	.word	0x200007e5
 800462c:	20000384 	.word	0x20000384
 8004630:	080101ec 	.word	0x080101ec
 8004634:	08010210 	.word	0x08010210
 8004638:	0801022c 	.word	0x0801022c

0800463c <HAL_UART_RxCpltCallback>:

// Callback для приёма данных через DMA
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a10      	ldr	r2, [pc, #64]	@ (8004688 <HAL_UART_RxCpltCallback+0x4c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d119      	bne.n	8004680 <HAL_UART_RxCpltCallback+0x44>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]
        xQueueSendFromISR(rs422RxQueue, rxBuffer, &xHigherPriorityTaskWoken);
 8004650:	4b0e      	ldr	r3, [pc, #56]	@ (800468c <HAL_UART_RxCpltCallback+0x50>)
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	f107 020c 	add.w	r2, r7, #12
 8004658:	2300      	movs	r3, #0
 800465a:	490d      	ldr	r1, [pc, #52]	@ (8004690 <HAL_UART_RxCpltCallback+0x54>)
 800465c:	f005 fda8 	bl	800a1b0 <xQueueGenericSendFromISR>
        HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer));
 8004660:	2220      	movs	r2, #32
 8004662:	490b      	ldr	r1, [pc, #44]	@ (8004690 <HAL_UART_RxCpltCallback+0x54>)
 8004664:	4808      	ldr	r0, [pc, #32]	@ (8004688 <HAL_UART_RxCpltCallback+0x4c>)
 8004666:	f004 f8a3 	bl	80087b0 <HAL_UART_Receive_DMA>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <HAL_UART_RxCpltCallback+0x44>
 8004670:	4b08      	ldr	r3, [pc, #32]	@ (8004694 <HAL_UART_RxCpltCallback+0x58>)
 8004672:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	f3bf 8f6f 	isb	sy
    }
}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	20000294 	.word	0x20000294
 800468c:	20000384 	.word	0x20000384
 8004690:	200007e8 	.word	0x200007e8
 8004694:	e000ed04 	.word	0xe000ed04

08004698 <HAL_MspInit>:
DMA_HandleTypeDef hdma_usart2_tx;
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

void HAL_MspInit(void)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	607b      	str	r3, [r7, #4]
 80046a2:	4b10      	ldr	r3, [pc, #64]	@ (80046e4 <HAL_MspInit+0x4c>)
 80046a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a6:	4a0f      	ldr	r2, [pc, #60]	@ (80046e4 <HAL_MspInit+0x4c>)
 80046a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80046ae:	4b0d      	ldr	r3, [pc, #52]	@ (80046e4 <HAL_MspInit+0x4c>)
 80046b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046b6:	607b      	str	r3, [r7, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 80046ba:	2300      	movs	r3, #0
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	4b09      	ldr	r3, [pc, #36]	@ (80046e4 <HAL_MspInit+0x4c>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c2:	4a08      	ldr	r2, [pc, #32]	@ (80046e4 <HAL_MspInit+0x4c>)
 80046c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80046ca:	4b06      	ldr	r3, [pc, #24]	@ (80046e4 <HAL_MspInit+0x4c>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	683b      	ldr	r3, [r7, #0]
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40023800 	.word	0x40023800

080046e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08a      	sub	sp, #40	@ 0x28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f0:	f107 0314 	add.w	r3, r7, #20
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	605a      	str	r2, [r3, #4]
 80046fa:	609a      	str	r2, [r3, #8]
 80046fc:	60da      	str	r2, [r3, #12]
 80046fe:	611a      	str	r2, [r3, #16]
    if (hi2c->Instance == I2C1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a19      	ldr	r2, [pc, #100]	@ (800476c <HAL_I2C_MspInit+0x84>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d12b      	bne.n	8004762 <HAL_I2C_MspInit+0x7a>
    {
        __HAL_RCC_GPIOB_CLK_ENABLE();
 800470a:	2300      	movs	r3, #0
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	4b18      	ldr	r3, [pc, #96]	@ (8004770 <HAL_I2C_MspInit+0x88>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004712:	4a17      	ldr	r2, [pc, #92]	@ (8004770 <HAL_I2C_MspInit+0x88>)
 8004714:	f043 0302 	orr.w	r3, r3, #2
 8004718:	6313      	str	r3, [r2, #48]	@ 0x30
 800471a:	4b15      	ldr	r3, [pc, #84]	@ (8004770 <HAL_I2C_MspInit+0x88>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	693b      	ldr	r3, [r7, #16]
        GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8004726:	23c0      	movs	r3, #192	@ 0xc0
 8004728:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800472a:	2312      	movs	r3, #18
 800472c:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004732:	2303      	movs	r3, #3
 8004734:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004736:	2304      	movs	r3, #4
 8004738:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800473a:	f107 0314 	add.w	r3, r7, #20
 800473e:	4619      	mov	r1, r3
 8004740:	480c      	ldr	r0, [pc, #48]	@ (8004774 <HAL_I2C_MspInit+0x8c>)
 8004742:	f001 f8ad 	bl	80058a0 <HAL_GPIO_Init>

        __HAL_RCC_I2C1_CLK_ENABLE();
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	4b09      	ldr	r3, [pc, #36]	@ (8004770 <HAL_I2C_MspInit+0x88>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474e:	4a08      	ldr	r2, [pc, #32]	@ (8004770 <HAL_I2C_MspInit+0x88>)
 8004750:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004754:	6413      	str	r3, [r2, #64]	@ 0x40
 8004756:	4b06      	ldr	r3, [pc, #24]	@ (8004770 <HAL_I2C_MspInit+0x88>)
 8004758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
    }
}
 8004762:	bf00      	nop
 8004764:	3728      	adds	r7, #40	@ 0x28
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40005400 	.word	0x40005400
 8004770:	40023800 	.word	0x40023800
 8004774:	40020400 	.word	0x40020400

08004778 <HAL_UART_MspInit>:
        HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6 | GPIO_PIN_7);
    }
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08e      	sub	sp, #56	@ 0x38
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	609a      	str	r2, [r3, #8]
 800478c:	60da      	str	r2, [r3, #12]
 800478e:	611a      	str	r2, [r3, #16]
    if (huart->Instance == USART2)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a55      	ldr	r2, [pc, #340]	@ (80048ec <HAL_UART_MspInit+0x174>)
 8004796:	4293      	cmp	r3, r2
 8004798:	f040 80b6 	bne.w	8004908 <HAL_UART_MspInit+0x190>
    {
        __HAL_RCC_USART2_CLK_ENABLE();
 800479c:	2300      	movs	r3, #0
 800479e:	623b      	str	r3, [r7, #32]
 80047a0:	4b53      	ldr	r3, [pc, #332]	@ (80048f0 <HAL_UART_MspInit+0x178>)
 80047a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a4:	4a52      	ldr	r2, [pc, #328]	@ (80048f0 <HAL_UART_MspInit+0x178>)
 80047a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80047ac:	4b50      	ldr	r3, [pc, #320]	@ (80048f0 <HAL_UART_MspInit+0x178>)
 80047ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b4:	623b      	str	r3, [r7, #32]
 80047b6:	6a3b      	ldr	r3, [r7, #32]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b8:	2300      	movs	r3, #0
 80047ba:	61fb      	str	r3, [r7, #28]
 80047bc:	4b4c      	ldr	r3, [pc, #304]	@ (80048f0 <HAL_UART_MspInit+0x178>)
 80047be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c0:	4a4b      	ldr	r2, [pc, #300]	@ (80048f0 <HAL_UART_MspInit+0x178>)
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80047c8:	4b49      	ldr	r3, [pc, #292]	@ (80048f0 <HAL_UART_MspInit+0x178>)
 80047ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	61fb      	str	r3, [r7, #28]
 80047d2:	69fb      	ldr	r3, [r7, #28]

        // UART2 GPIO Configuration: PA2 (TX), PA3 (RX)
        GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80047d4:	230c      	movs	r3, #12
 80047d6:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d8:	2302      	movs	r3, #2
 80047da:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047dc:	2300      	movs	r3, #0
 80047de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047e0:	2303      	movs	r3, #3
 80047e2:	633b      	str	r3, [r7, #48]	@ 0x30
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80047e4:	2307      	movs	r3, #7
 80047e6:	637b      	str	r3, [r7, #52]	@ 0x34
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047ec:	4619      	mov	r1, r3
 80047ee:	4841      	ldr	r0, [pc, #260]	@ (80048f4 <HAL_UART_MspInit+0x17c>)
 80047f0:	f001 f856 	bl	80058a0 <HAL_GPIO_Init>

        // DMA для UART2
        __HAL_RCC_DMA1_CLK_ENABLE();
 80047f4:	2300      	movs	r3, #0
 80047f6:	61bb      	str	r3, [r7, #24]
 80047f8:	4b3d      	ldr	r3, [pc, #244]	@ (80048f0 <HAL_UART_MspInit+0x178>)
 80047fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fc:	4a3c      	ldr	r2, [pc, #240]	@ (80048f0 <HAL_UART_MspInit+0x178>)
 80047fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004802:	6313      	str	r3, [r2, #48]	@ 0x30
 8004804:	4b3a      	ldr	r3, [pc, #232]	@ (80048f0 <HAL_UART_MspInit+0x178>)
 8004806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004808:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	69bb      	ldr	r3, [r7, #24]

        // DMA для UART2 RX (DMA1 Stream 5, Channel 4)
        hdma_usart2_rx.Instance = DMA1_Stream5;
 8004810:	4b39      	ldr	r3, [pc, #228]	@ (80048f8 <HAL_UART_MspInit+0x180>)
 8004812:	4a3a      	ldr	r2, [pc, #232]	@ (80048fc <HAL_UART_MspInit+0x184>)
 8004814:	601a      	str	r2, [r3, #0]
        hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004816:	4b38      	ldr	r3, [pc, #224]	@ (80048f8 <HAL_UART_MspInit+0x180>)
 8004818:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800481c:	605a      	str	r2, [r3, #4]
        hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800481e:	4b36      	ldr	r3, [pc, #216]	@ (80048f8 <HAL_UART_MspInit+0x180>)
 8004820:	2200      	movs	r2, #0
 8004822:	609a      	str	r2, [r3, #8]
        hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004824:	4b34      	ldr	r3, [pc, #208]	@ (80048f8 <HAL_UART_MspInit+0x180>)
 8004826:	2200      	movs	r2, #0
 8004828:	60da      	str	r2, [r3, #12]
        hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800482a:	4b33      	ldr	r3, [pc, #204]	@ (80048f8 <HAL_UART_MspInit+0x180>)
 800482c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004830:	611a      	str	r2, [r3, #16]
        hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004832:	4b31      	ldr	r3, [pc, #196]	@ (80048f8 <HAL_UART_MspInit+0x180>)
 8004834:	2200      	movs	r2, #0
 8004836:	615a      	str	r2, [r3, #20]
        hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004838:	4b2f      	ldr	r3, [pc, #188]	@ (80048f8 <HAL_UART_MspInit+0x180>)
 800483a:	2200      	movs	r2, #0
 800483c:	619a      	str	r2, [r3, #24]
        hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800483e:	4b2e      	ldr	r3, [pc, #184]	@ (80048f8 <HAL_UART_MspInit+0x180>)
 8004840:	2200      	movs	r2, #0
 8004842:	61da      	str	r2, [r3, #28]
        hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004844:	4b2c      	ldr	r3, [pc, #176]	@ (80048f8 <HAL_UART_MspInit+0x180>)
 8004846:	2200      	movs	r2, #0
 8004848:	621a      	str	r2, [r3, #32]
        hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800484a:	4b2b      	ldr	r3, [pc, #172]	@ (80048f8 <HAL_UART_MspInit+0x180>)
 800484c:	2200      	movs	r2, #0
 800484e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004850:	4829      	ldr	r0, [pc, #164]	@ (80048f8 <HAL_UART_MspInit+0x180>)
 8004852:	f000 fc23 	bl	800509c <HAL_DMA_Init>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <HAL_UART_MspInit+0xe8>
        {
            Error_Handler();
 800485c:	f7ff fb3e 	bl	8003edc <Error_Handler>
        }
        __HAL_LINKDMA(huart, hdmarx, hdma_usart2_rx);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a25      	ldr	r2, [pc, #148]	@ (80048f8 <HAL_UART_MspInit+0x180>)
 8004864:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004866:	4a24      	ldr	r2, [pc, #144]	@ (80048f8 <HAL_UART_MspInit+0x180>)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6393      	str	r3, [r2, #56]	@ 0x38

        // DMA для UART2 TX (DMA1 Stream 6, Channel 4)
        hdma_usart2_tx.Instance = DMA1_Stream6;
 800486c:	4b24      	ldr	r3, [pc, #144]	@ (8004900 <HAL_UART_MspInit+0x188>)
 800486e:	4a25      	ldr	r2, [pc, #148]	@ (8004904 <HAL_UART_MspInit+0x18c>)
 8004870:	601a      	str	r2, [r3, #0]
        hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004872:	4b23      	ldr	r3, [pc, #140]	@ (8004900 <HAL_UART_MspInit+0x188>)
 8004874:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004878:	605a      	str	r2, [r3, #4]
        hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800487a:	4b21      	ldr	r3, [pc, #132]	@ (8004900 <HAL_UART_MspInit+0x188>)
 800487c:	2240      	movs	r2, #64	@ 0x40
 800487e:	609a      	str	r2, [r3, #8]
        hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004880:	4b1f      	ldr	r3, [pc, #124]	@ (8004900 <HAL_UART_MspInit+0x188>)
 8004882:	2200      	movs	r2, #0
 8004884:	60da      	str	r2, [r3, #12]
        hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004886:	4b1e      	ldr	r3, [pc, #120]	@ (8004900 <HAL_UART_MspInit+0x188>)
 8004888:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800488c:	611a      	str	r2, [r3, #16]
        hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800488e:	4b1c      	ldr	r3, [pc, #112]	@ (8004900 <HAL_UART_MspInit+0x188>)
 8004890:	2200      	movs	r2, #0
 8004892:	615a      	str	r2, [r3, #20]
        hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004894:	4b1a      	ldr	r3, [pc, #104]	@ (8004900 <HAL_UART_MspInit+0x188>)
 8004896:	2200      	movs	r2, #0
 8004898:	619a      	str	r2, [r3, #24]
        hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800489a:	4b19      	ldr	r3, [pc, #100]	@ (8004900 <HAL_UART_MspInit+0x188>)
 800489c:	2200      	movs	r2, #0
 800489e:	61da      	str	r2, [r3, #28]
        hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80048a0:	4b17      	ldr	r3, [pc, #92]	@ (8004900 <HAL_UART_MspInit+0x188>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	621a      	str	r2, [r3, #32]
        hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048a6:	4b16      	ldr	r3, [pc, #88]	@ (8004900 <HAL_UART_MspInit+0x188>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	625a      	str	r2, [r3, #36]	@ 0x24
        if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80048ac:	4814      	ldr	r0, [pc, #80]	@ (8004900 <HAL_UART_MspInit+0x188>)
 80048ae:	f000 fbf5 	bl	800509c <HAL_DMA_Init>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <HAL_UART_MspInit+0x144>
        {
            Error_Handler();
 80048b8:	f7ff fb10 	bl	8003edc <Error_Handler>
        }
        __HAL_LINKDMA(huart, hdmatx, hdma_usart2_tx);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a10      	ldr	r2, [pc, #64]	@ (8004900 <HAL_UART_MspInit+0x188>)
 80048c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80048c2:	4a0f      	ldr	r2, [pc, #60]	@ (8004900 <HAL_UART_MspInit+0x188>)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6393      	str	r3, [r2, #56]	@ 0x38

        // Прерывания DMA для UART2
        HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80048c8:	2200      	movs	r2, #0
 80048ca:	2105      	movs	r1, #5
 80048cc:	2010      	movs	r0, #16
 80048ce:	f000 fbbb 	bl	8005048 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80048d2:	2010      	movs	r0, #16
 80048d4:	f000 fbd4 	bl	8005080 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80048d8:	2200      	movs	r2, #0
 80048da:	2105      	movs	r1, #5
 80048dc:	2011      	movs	r0, #17
 80048de:	f000 fbb3 	bl	8005048 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80048e2:	2011      	movs	r0, #17
 80048e4:	f000 fbcc 	bl	8005080 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
        HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
        HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
        HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
    }
}
 80048e8:	e0d2      	b.n	8004a90 <HAL_UART_MspInit+0x318>
 80048ea:	bf00      	nop
 80048ec:	40004400 	.word	0x40004400
 80048f0:	40023800 	.word	0x40023800
 80048f4:	40020000 	.word	0x40020000
 80048f8:	20000808 	.word	0x20000808
 80048fc:	40026088 	.word	0x40026088
 8004900:	20000868 	.word	0x20000868
 8004904:	400260a0 	.word	0x400260a0
    else if (huart->Instance == USART3)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a62      	ldr	r2, [pc, #392]	@ (8004a98 <HAL_UART_MspInit+0x320>)
 800490e:	4293      	cmp	r3, r2
 8004910:	f040 80be 	bne.w	8004a90 <HAL_UART_MspInit+0x318>
        __HAL_RCC_USART3_CLK_ENABLE();
 8004914:	2300      	movs	r3, #0
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	4b60      	ldr	r3, [pc, #384]	@ (8004a9c <HAL_UART_MspInit+0x324>)
 800491a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491c:	4a5f      	ldr	r2, [pc, #380]	@ (8004a9c <HAL_UART_MspInit+0x324>)
 800491e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004922:	6413      	str	r3, [r2, #64]	@ 0x40
 8004924:	4b5d      	ldr	r3, [pc, #372]	@ (8004a9c <HAL_UART_MspInit+0x324>)
 8004926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004928:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800492c:	617b      	str	r3, [r7, #20]
 800492e:	697b      	ldr	r3, [r7, #20]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8004930:	2300      	movs	r3, #0
 8004932:	613b      	str	r3, [r7, #16]
 8004934:	4b59      	ldr	r3, [pc, #356]	@ (8004a9c <HAL_UART_MspInit+0x324>)
 8004936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004938:	4a58      	ldr	r2, [pc, #352]	@ (8004a9c <HAL_UART_MspInit+0x324>)
 800493a:	f043 0302 	orr.w	r3, r3, #2
 800493e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004940:	4b56      	ldr	r3, [pc, #344]	@ (8004a9c <HAL_UART_MspInit+0x324>)
 8004942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOD_CLK_ENABLE();
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	4b52      	ldr	r3, [pc, #328]	@ (8004a9c <HAL_UART_MspInit+0x324>)
 8004952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004954:	4a51      	ldr	r2, [pc, #324]	@ (8004a9c <HAL_UART_MspInit+0x324>)
 8004956:	f043 0308 	orr.w	r3, r3, #8
 800495a:	6313      	str	r3, [r2, #48]	@ 0x30
 800495c:	4b4f      	ldr	r3, [pc, #316]	@ (8004a9c <HAL_UART_MspInit+0x324>)
 800495e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	68fb      	ldr	r3, [r7, #12]
        GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004968:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800496c:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800496e:	2302      	movs	r3, #2
 8004970:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004972:	2300      	movs	r3, #0
 8004974:	62fb      	str	r3, [r7, #44]	@ 0x2c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004976:	2303      	movs	r3, #3
 8004978:	633b      	str	r3, [r7, #48]	@ 0x30
        GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800497a:	2307      	movs	r3, #7
 800497c:	637b      	str	r3, [r7, #52]	@ 0x34
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800497e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004982:	4619      	mov	r1, r3
 8004984:	4846      	ldr	r0, [pc, #280]	@ (8004aa0 <HAL_UART_MspInit+0x328>)
 8004986:	f000 ff8b 	bl	80058a0 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = GPIO_PIN_9;
 800498a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800498e:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004994:	4619      	mov	r1, r3
 8004996:	4843      	ldr	r0, [pc, #268]	@ (8004aa4 <HAL_UART_MspInit+0x32c>)
 8004998:	f000 ff82 	bl	80058a0 <HAL_GPIO_Init>
        __HAL_RCC_DMA1_CLK_ENABLE();
 800499c:	2300      	movs	r3, #0
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	4b3e      	ldr	r3, [pc, #248]	@ (8004a9c <HAL_UART_MspInit+0x324>)
 80049a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a4:	4a3d      	ldr	r2, [pc, #244]	@ (8004a9c <HAL_UART_MspInit+0x324>)
 80049a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80049aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80049ac:	4b3b      	ldr	r3, [pc, #236]	@ (8004a9c <HAL_UART_MspInit+0x324>)
 80049ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049b4:	60bb      	str	r3, [r7, #8]
 80049b6:	68bb      	ldr	r3, [r7, #8]
        hdma_usart3_rx.Instance = DMA1_Stream1;
 80049b8:	4b3b      	ldr	r3, [pc, #236]	@ (8004aa8 <HAL_UART_MspInit+0x330>)
 80049ba:	4a3c      	ldr	r2, [pc, #240]	@ (8004aac <HAL_UART_MspInit+0x334>)
 80049bc:	601a      	str	r2, [r3, #0]
        hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80049be:	4b3a      	ldr	r3, [pc, #232]	@ (8004aa8 <HAL_UART_MspInit+0x330>)
 80049c0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80049c4:	605a      	str	r2, [r3, #4]
        hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049c6:	4b38      	ldr	r3, [pc, #224]	@ (8004aa8 <HAL_UART_MspInit+0x330>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	609a      	str	r2, [r3, #8]
        hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049cc:	4b36      	ldr	r3, [pc, #216]	@ (8004aa8 <HAL_UART_MspInit+0x330>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	60da      	str	r2, [r3, #12]
        hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049d2:	4b35      	ldr	r3, [pc, #212]	@ (8004aa8 <HAL_UART_MspInit+0x330>)
 80049d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049d8:	611a      	str	r2, [r3, #16]
        hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049da:	4b33      	ldr	r3, [pc, #204]	@ (8004aa8 <HAL_UART_MspInit+0x330>)
 80049dc:	2200      	movs	r2, #0
 80049de:	615a      	str	r2, [r3, #20]
        hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049e0:	4b31      	ldr	r3, [pc, #196]	@ (8004aa8 <HAL_UART_MspInit+0x330>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	619a      	str	r2, [r3, #24]
        hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80049e6:	4b30      	ldr	r3, [pc, #192]	@ (8004aa8 <HAL_UART_MspInit+0x330>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	61da      	str	r2, [r3, #28]
        hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80049ec:	4b2e      	ldr	r3, [pc, #184]	@ (8004aa8 <HAL_UART_MspInit+0x330>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	621a      	str	r2, [r3, #32]
        hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049f2:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa8 <HAL_UART_MspInit+0x330>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80049f8:	482b      	ldr	r0, [pc, #172]	@ (8004aa8 <HAL_UART_MspInit+0x330>)
 80049fa:	f000 fb4f 	bl	800509c <HAL_DMA_Init>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_UART_MspInit+0x290>
            Error_Handler();
 8004a04:	f7ff fa6a 	bl	8003edc <Error_Handler>
        __HAL_LINKDMA(huart, hdmarx, hdma_usart3_rx);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a27      	ldr	r2, [pc, #156]	@ (8004aa8 <HAL_UART_MspInit+0x330>)
 8004a0c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a0e:	4a26      	ldr	r2, [pc, #152]	@ (8004aa8 <HAL_UART_MspInit+0x330>)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6393      	str	r3, [r2, #56]	@ 0x38
        hdma_usart3_tx.Instance = DMA1_Stream3;
 8004a14:	4b26      	ldr	r3, [pc, #152]	@ (8004ab0 <HAL_UART_MspInit+0x338>)
 8004a16:	4a27      	ldr	r2, [pc, #156]	@ (8004ab4 <HAL_UART_MspInit+0x33c>)
 8004a18:	601a      	str	r2, [r3, #0]
        hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004a1a:	4b25      	ldr	r3, [pc, #148]	@ (8004ab0 <HAL_UART_MspInit+0x338>)
 8004a1c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004a20:	605a      	str	r2, [r3, #4]
        hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a22:	4b23      	ldr	r3, [pc, #140]	@ (8004ab0 <HAL_UART_MspInit+0x338>)
 8004a24:	2240      	movs	r2, #64	@ 0x40
 8004a26:	609a      	str	r2, [r3, #8]
        hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a28:	4b21      	ldr	r3, [pc, #132]	@ (8004ab0 <HAL_UART_MspInit+0x338>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	60da      	str	r2, [r3, #12]
        hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a2e:	4b20      	ldr	r3, [pc, #128]	@ (8004ab0 <HAL_UART_MspInit+0x338>)
 8004a30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a34:	611a      	str	r2, [r3, #16]
        hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a36:	4b1e      	ldr	r3, [pc, #120]	@ (8004ab0 <HAL_UART_MspInit+0x338>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	615a      	str	r2, [r3, #20]
        hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ab0 <HAL_UART_MspInit+0x338>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	619a      	str	r2, [r3, #24]
        hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004a42:	4b1b      	ldr	r3, [pc, #108]	@ (8004ab0 <HAL_UART_MspInit+0x338>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	61da      	str	r2, [r3, #28]
        hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a48:	4b19      	ldr	r3, [pc, #100]	@ (8004ab0 <HAL_UART_MspInit+0x338>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	621a      	str	r2, [r3, #32]
        hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a4e:	4b18      	ldr	r3, [pc, #96]	@ (8004ab0 <HAL_UART_MspInit+0x338>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	625a      	str	r2, [r3, #36]	@ 0x24
        if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004a54:	4816      	ldr	r0, [pc, #88]	@ (8004ab0 <HAL_UART_MspInit+0x338>)
 8004a56:	f000 fb21 	bl	800509c <HAL_DMA_Init>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_UART_MspInit+0x2ec>
            Error_Handler();
 8004a60:	f7ff fa3c 	bl	8003edc <Error_Handler>
        __HAL_LINKDMA(huart, hdmatx, hdma_usart3_tx);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a12      	ldr	r2, [pc, #72]	@ (8004ab0 <HAL_UART_MspInit+0x338>)
 8004a68:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a6a:	4a11      	ldr	r2, [pc, #68]	@ (8004ab0 <HAL_UART_MspInit+0x338>)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6393      	str	r3, [r2, #56]	@ 0x38
        HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8004a70:	2200      	movs	r2, #0
 8004a72:	2105      	movs	r1, #5
 8004a74:	200c      	movs	r0, #12
 8004a76:	f000 fae7 	bl	8005048 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004a7a:	200c      	movs	r0, #12
 8004a7c:	f000 fb00 	bl	8005080 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8004a80:	2200      	movs	r2, #0
 8004a82:	2105      	movs	r1, #5
 8004a84:	200e      	movs	r0, #14
 8004a86:	f000 fadf 	bl	8005048 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004a8a:	200e      	movs	r0, #14
 8004a8c:	f000 faf8 	bl	8005080 <HAL_NVIC_EnableIRQ>
}
 8004a90:	bf00      	nop
 8004a92:	3738      	adds	r7, #56	@ 0x38
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40004800 	.word	0x40004800
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	40020400 	.word	0x40020400
 8004aa4:	40020c00 	.word	0x40020c00
 8004aa8:	200008c8 	.word	0x200008c8
 8004aac:	40026028 	.word	0x40026028
 8004ab0:	20000928 	.word	0x20000928
 8004ab4:	40026058 	.word	0x40026058

08004ab8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08e      	sub	sp, #56	@ 0x38
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	4b33      	ldr	r3, [pc, #204]	@ (8004b9c <HAL_InitTick+0xe4>)
 8004ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad0:	4a32      	ldr	r2, [pc, #200]	@ (8004b9c <HAL_InitTick+0xe4>)
 8004ad2:	f043 0302 	orr.w	r3, r3, #2
 8004ad6:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ad8:	4b30      	ldr	r3, [pc, #192]	@ (8004b9c <HAL_InitTick+0xe4>)
 8004ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004ae4:	f107 0210 	add.w	r2, r7, #16
 8004ae8:	f107 0314 	add.w	r3, r7, #20
 8004aec:	4611      	mov	r1, r2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f003 f860 	bl	8007bb4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d103      	bne.n	8004b06 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004afe:	f003 f831 	bl	8007b64 <HAL_RCC_GetPCLK1Freq>
 8004b02:	6378      	str	r0, [r7, #52]	@ 0x34
 8004b04:	e004      	b.n	8004b10 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004b06:	f003 f82d 	bl	8007b64 <HAL_RCC_GetPCLK1Freq>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b12:	4a23      	ldr	r2, [pc, #140]	@ (8004ba0 <HAL_InitTick+0xe8>)
 8004b14:	fba2 2303 	umull	r2, r3, r2, r3
 8004b18:	0c9b      	lsrs	r3, r3, #18
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8004b1e:	4b21      	ldr	r3, [pc, #132]	@ (8004ba4 <HAL_InitTick+0xec>)
 8004b20:	4a21      	ldr	r2, [pc, #132]	@ (8004ba8 <HAL_InitTick+0xf0>)
 8004b22:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8004b24:	4b1f      	ldr	r3, [pc, #124]	@ (8004ba4 <HAL_InitTick+0xec>)
 8004b26:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004b2a:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8004b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ba4 <HAL_InitTick+0xec>)
 8004b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b30:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8004b32:	4b1c      	ldr	r3, [pc, #112]	@ (8004ba4 <HAL_InitTick+0xec>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b38:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba4 <HAL_InitTick+0xec>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b3e:	4b19      	ldr	r3, [pc, #100]	@ (8004ba4 <HAL_InitTick+0xec>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8004b44:	4817      	ldr	r0, [pc, #92]	@ (8004ba4 <HAL_InitTick+0xec>)
 8004b46:	f003 f867 	bl	8007c18 <HAL_TIM_Base_Init>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004b50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d11b      	bne.n	8004b90 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8004b58:	4812      	ldr	r0, [pc, #72]	@ (8004ba4 <HAL_InitTick+0xec>)
 8004b5a:	f003 f8b7 	bl	8007ccc <HAL_TIM_Base_Start_IT>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004b64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d111      	bne.n	8004b90 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004b6c:	201d      	movs	r0, #29
 8004b6e:	f000 fa87 	bl	8005080 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b0f      	cmp	r3, #15
 8004b76:	d808      	bhi.n	8004b8a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8004b78:	2200      	movs	r2, #0
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	201d      	movs	r0, #29
 8004b7e:	f000 fa63 	bl	8005048 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b82:	4a0a      	ldr	r2, [pc, #40]	@ (8004bac <HAL_InitTick+0xf4>)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	e002      	b.n	8004b90 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004b90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3738      	adds	r7, #56	@ 0x38
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	431bde83 	.word	0x431bde83
 8004ba4:	20000988 	.word	0x20000988
 8004ba8:	40000400 	.word	0x40000400
 8004bac:	20000028 	.word	0x20000028

08004bb0 <NMI_Handler>:
extern DMA_HandleTypeDef hdma_usart3_tx;
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart3;

void NMI_Handler(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
}
 8004bb4:	bf00      	nop
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <HardFault_Handler>:

void HardFault_Handler(void)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	af00      	add	r7, sp, #0
    while (1) {}
 8004bc2:	bf00      	nop
 8004bc4:	e7fd      	b.n	8004bc2 <HardFault_Handler+0x4>

08004bc6 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	af00      	add	r7, sp, #0
    while (1) {}
 8004bca:	bf00      	nop
 8004bcc:	e7fd      	b.n	8004bca <MemManage_Handler+0x4>

08004bce <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	af00      	add	r7, sp, #0
    while (1) {}
 8004bd2:	bf00      	nop
 8004bd4:	e7fd      	b.n	8004bd2 <BusFault_Handler+0x4>

08004bd6 <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	af00      	add	r7, sp, #0
    while (1) {}
 8004bda:	bf00      	nop
 8004bdc:	e7fd      	b.n	8004bda <UsageFault_Handler+0x4>

08004bde <DebugMon_Handler>:
}

void DebugMon_Handler(void)
{
 8004bde:	b480      	push	{r7}
 8004be0:	af00      	add	r7, sp, #0
}
 8004be2:	bf00      	nop
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <TIM2_IRQHandler>:
// FreeRTOS управляет следующими обработчиками прерываний:
// SysTick_Handler, SVC_Handler, PendSV_Handler
// Поэтому мы их не переопределяем здесь.

void TIM2_IRQHandler(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim2);
 8004bf0:	4802      	ldr	r0, [pc, #8]	@ (8004bfc <TIM2_IRQHandler+0x10>)
 8004bf2:	f003 f8db 	bl	8007dac <HAL_TIM_IRQHandler>
}
 8004bf6:	bf00      	nop
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000330 	.word	0x20000330

08004c00 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004c04:	4802      	ldr	r0, [pc, #8]	@ (8004c10 <DMA1_Stream1_IRQHandler+0x10>)
 8004c06:	f000 fbe1 	bl	80053cc <HAL_DMA_IRQHandler>
}
 8004c0a:	bf00      	nop
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	200008c8 	.word	0x200008c8

08004c14 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004c18:	4802      	ldr	r0, [pc, #8]	@ (8004c24 <DMA1_Stream3_IRQHandler+0x10>)
 8004c1a:	f000 fbd7 	bl	80053cc <HAL_DMA_IRQHandler>
}
 8004c1e:	bf00      	nop
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20000928 	.word	0x20000928

08004c28 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004c2c:	4802      	ldr	r0, [pc, #8]	@ (8004c38 <DMA1_Stream5_IRQHandler+0x10>)
 8004c2e:	f000 fbcd 	bl	80053cc <HAL_DMA_IRQHandler>
}
 8004c32:	bf00      	nop
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20000808 	.word	0x20000808

08004c3c <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004c40:	4802      	ldr	r0, [pc, #8]	@ (8004c4c <DMA1_Stream6_IRQHandler+0x10>)
 8004c42:	f000 fbc3 	bl	80053cc <HAL_DMA_IRQHandler>
}
 8004c46:	bf00      	nop
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000868 	.word	0x20000868

08004c50 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart2);
 8004c54:	4802      	ldr	r0, [pc, #8]	@ (8004c60 <USART2_IRQHandler+0x10>)
 8004c56:	f003 fdd1 	bl	80087fc <HAL_UART_IRQHandler>
}
 8004c5a:	bf00      	nop
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000294 	.word	0x20000294

08004c64 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart3);
 8004c68:	4802      	ldr	r0, [pc, #8]	@ (8004c74 <USART3_IRQHandler+0x10>)
 8004c6a:	f003 fdc7 	bl	80087fc <HAL_UART_IRQHandler>
}
 8004c6e:	bf00      	nop
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	200002dc 	.word	0x200002dc

08004c78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  return 1;
 8004c7c:	2301      	movs	r3, #1
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <_kill>:

int _kill(int pid, int sig)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004c92:	f008 ff4f 	bl	800db34 <__errno>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2216      	movs	r2, #22
 8004c9a:	601a      	str	r2, [r3, #0]
  return -1;
 8004c9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <_exit>:

void _exit (int status)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff ffe7 	bl	8004c88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004cba:	bf00      	nop
 8004cbc:	e7fd      	b.n	8004cba <_exit+0x12>

08004cbe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b086      	sub	sp, #24
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	60f8      	str	r0, [r7, #12]
 8004cc6:	60b9      	str	r1, [r7, #8]
 8004cc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	e00a      	b.n	8004ce6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004cd0:	f3af 8000 	nop.w
 8004cd4:	4601      	mov	r1, r0
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	60ba      	str	r2, [r7, #8]
 8004cdc:	b2ca      	uxtb	r2, r1
 8004cde:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	dbf0      	blt.n	8004cd0 <_read+0x12>
  }

  return len;
 8004cee:	687b      	ldr	r3, [r7, #4]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	e009      	b.n	8004d1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	60ba      	str	r2, [r7, #8]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	dbf1      	blt.n	8004d0a <_write+0x12>
  }
  return len;
 8004d26:	687b      	ldr	r3, [r7, #4]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <_close>:

int _close(int file)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004d38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004d58:	605a      	str	r2, [r3, #4]
  return 0;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <_isatty>:

int _isatty(int file)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004d70:	2301      	movs	r3, #1
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b085      	sub	sp, #20
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004da0:	4a14      	ldr	r2, [pc, #80]	@ (8004df4 <_sbrk+0x5c>)
 8004da2:	4b15      	ldr	r3, [pc, #84]	@ (8004df8 <_sbrk+0x60>)
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004dac:	4b13      	ldr	r3, [pc, #76]	@ (8004dfc <_sbrk+0x64>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d102      	bne.n	8004dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004db4:	4b11      	ldr	r3, [pc, #68]	@ (8004dfc <_sbrk+0x64>)
 8004db6:	4a12      	ldr	r2, [pc, #72]	@ (8004e00 <_sbrk+0x68>)
 8004db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004dba:	4b10      	ldr	r3, [pc, #64]	@ (8004dfc <_sbrk+0x64>)
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d207      	bcs.n	8004dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004dc8:	f008 feb4 	bl	800db34 <__errno>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	220c      	movs	r2, #12
 8004dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd6:	e009      	b.n	8004dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004dd8:	4b08      	ldr	r3, [pc, #32]	@ (8004dfc <_sbrk+0x64>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004dde:	4b07      	ldr	r3, [pc, #28]	@ (8004dfc <_sbrk+0x64>)
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4413      	add	r3, r2
 8004de6:	4a05      	ldr	r2, [pc, #20]	@ (8004dfc <_sbrk+0x64>)
 8004de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004dea:	68fb      	ldr	r3, [r7, #12]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	20020000 	.word	0x20020000
 8004df8:	00000400 	.word	0x00000400
 8004dfc:	200009d0 	.word	0x200009d0
 8004e00:	20009108 	.word	0x20009108

08004e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e08:	4b06      	ldr	r3, [pc, #24]	@ (8004e24 <SystemInit+0x20>)
 8004e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e0e:	4a05      	ldr	r2, [pc, #20]	@ (8004e24 <SystemInit+0x20>)
 8004e10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e18:	bf00      	nop
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	e000ed00 	.word	0xe000ed00

08004e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004e28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004e60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004e2c:	f7ff ffea 	bl	8004e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e30:	480c      	ldr	r0, [pc, #48]	@ (8004e64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004e32:	490d      	ldr	r1, [pc, #52]	@ (8004e68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004e34:	4a0d      	ldr	r2, [pc, #52]	@ (8004e6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e38:	e002      	b.n	8004e40 <LoopCopyDataInit>

08004e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e3e:	3304      	adds	r3, #4

08004e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e44:	d3f9      	bcc.n	8004e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e46:	4a0a      	ldr	r2, [pc, #40]	@ (8004e70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004e48:	4c0a      	ldr	r4, [pc, #40]	@ (8004e74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e4c:	e001      	b.n	8004e52 <LoopFillZerobss>

08004e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e50:	3204      	adds	r2, #4

08004e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e54:	d3fb      	bcc.n	8004e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e56:	f008 fe73 	bl	800db40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e5a:	f7fe fccd 	bl	80037f8 <main>
  bx  lr    
 8004e5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e68:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8004e6c:	080106a8 	.word	0x080106a8
  ldr r2, =_sbss
 8004e70:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8004e74:	20009108 	.word	0x20009108

08004e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e78:	e7fe      	b.n	8004e78 <ADC_IRQHandler>
	...

08004e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e80:	4b0e      	ldr	r3, [pc, #56]	@ (8004ebc <HAL_Init+0x40>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a0d      	ldr	r2, [pc, #52]	@ (8004ebc <HAL_Init+0x40>)
 8004e86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ebc <HAL_Init+0x40>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a0a      	ldr	r2, [pc, #40]	@ (8004ebc <HAL_Init+0x40>)
 8004e92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e98:	4b08      	ldr	r3, [pc, #32]	@ (8004ebc <HAL_Init+0x40>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a07      	ldr	r2, [pc, #28]	@ (8004ebc <HAL_Init+0x40>)
 8004e9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ea4:	2003      	movs	r0, #3
 8004ea6:	f000 f8c4 	bl	8005032 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004eaa:	200f      	movs	r0, #15
 8004eac:	f7ff fe04 	bl	8004ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004eb0:	f7ff fbf2 	bl	8004698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40023c00 	.word	0x40023c00

08004ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ec4:	4b03      	ldr	r3, [pc, #12]	@ (8004ed4 <HAL_GetTick+0x14>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	200009d4 	.word	0x200009d4

08004ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f1c <__NVIC_SetPriorityGrouping+0x44>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f0a:	4a04      	ldr	r2, [pc, #16]	@ (8004f1c <__NVIC_SetPriorityGrouping+0x44>)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	60d3      	str	r3, [r2, #12]
}
 8004f10:	bf00      	nop
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	e000ed00 	.word	0xe000ed00

08004f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f24:	4b04      	ldr	r3, [pc, #16]	@ (8004f38 <__NVIC_GetPriorityGrouping+0x18>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	0a1b      	lsrs	r3, r3, #8
 8004f2a:	f003 0307 	and.w	r3, r3, #7
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	e000ed00 	.word	0xe000ed00

08004f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	4603      	mov	r3, r0
 8004f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	db0b      	blt.n	8004f66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	f003 021f 	and.w	r2, r3, #31
 8004f54:	4907      	ldr	r1, [pc, #28]	@ (8004f74 <__NVIC_EnableIRQ+0x38>)
 8004f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	e000e100 	.word	0xe000e100

08004f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	6039      	str	r1, [r7, #0]
 8004f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	db0a      	blt.n	8004fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	490c      	ldr	r1, [pc, #48]	@ (8004fc4 <__NVIC_SetPriority+0x4c>)
 8004f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f96:	0112      	lsls	r2, r2, #4
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fa0:	e00a      	b.n	8004fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	4908      	ldr	r1, [pc, #32]	@ (8004fc8 <__NVIC_SetPriority+0x50>)
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	3b04      	subs	r3, #4
 8004fb0:	0112      	lsls	r2, r2, #4
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	761a      	strb	r2, [r3, #24]
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	e000e100 	.word	0xe000e100
 8004fc8:	e000ed00 	.word	0xe000ed00

08004fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b089      	sub	sp, #36	@ 0x24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f1c3 0307 	rsb	r3, r3, #7
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	bf28      	it	cs
 8004fea:	2304      	movcs	r3, #4
 8004fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	2b06      	cmp	r3, #6
 8004ff4:	d902      	bls.n	8004ffc <NVIC_EncodePriority+0x30>
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	3b03      	subs	r3, #3
 8004ffa:	e000      	b.n	8004ffe <NVIC_EncodePriority+0x32>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005000:	f04f 32ff 	mov.w	r2, #4294967295
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	fa02 f303 	lsl.w	r3, r2, r3
 800500a:	43da      	mvns	r2, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	401a      	ands	r2, r3
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005014:	f04f 31ff 	mov.w	r1, #4294967295
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	fa01 f303 	lsl.w	r3, r1, r3
 800501e:	43d9      	mvns	r1, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005024:	4313      	orrs	r3, r2
         );
}
 8005026:	4618      	mov	r0, r3
 8005028:	3724      	adds	r7, #36	@ 0x24
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b082      	sub	sp, #8
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff ff4c 	bl	8004ed8 <__NVIC_SetPriorityGrouping>
}
 8005040:	bf00      	nop
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	4603      	mov	r3, r0
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005056:	2300      	movs	r3, #0
 8005058:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800505a:	f7ff ff61 	bl	8004f20 <__NVIC_GetPriorityGrouping>
 800505e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	6978      	ldr	r0, [r7, #20]
 8005066:	f7ff ffb1 	bl	8004fcc <NVIC_EncodePriority>
 800506a:	4602      	mov	r2, r0
 800506c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005070:	4611      	mov	r1, r2
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff ff80 	bl	8004f78 <__NVIC_SetPriority>
}
 8005078:	bf00      	nop
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	4603      	mov	r3, r0
 8005088:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800508a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff ff54 	bl	8004f3c <__NVIC_EnableIRQ>
}
 8005094:	bf00      	nop
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80050a8:	f7ff ff0a 	bl	8004ec0 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e099      	b.n	80051ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0201 	bic.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050d8:	e00f      	b.n	80050fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050da:	f7ff fef1 	bl	8004ec0 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b05      	cmp	r3, #5
 80050e6:	d908      	bls.n	80050fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2203      	movs	r2, #3
 80050f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e078      	b.n	80051ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1e8      	bne.n	80050da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	4b38      	ldr	r3, [pc, #224]	@ (80051f4 <HAL_DMA_Init+0x158>)
 8005114:	4013      	ands	r3, r2
 8005116:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005126:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005132:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800513e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005150:	2b04      	cmp	r3, #4
 8005152:	d107      	bne.n	8005164 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515c:	4313      	orrs	r3, r2
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f023 0307 	bic.w	r3, r3, #7
 800517a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518a:	2b04      	cmp	r3, #4
 800518c:	d117      	bne.n	80051be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	4313      	orrs	r3, r2
 8005196:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00e      	beq.n	80051be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fb01 	bl	80057a8 <DMA_CheckFifoParam>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d008      	beq.n	80051be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2240      	movs	r2, #64	@ 0x40
 80051b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80051ba:	2301      	movs	r3, #1
 80051bc:	e016      	b.n	80051ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fab8 	bl	800573c <DMA_CalcBaseAndBitshift>
 80051cc:	4603      	mov	r3, r0
 80051ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d4:	223f      	movs	r2, #63	@ 0x3f
 80051d6:	409a      	lsls	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	f010803f 	.word	0xf010803f

080051f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005216:	2b01      	cmp	r3, #1
 8005218:	d101      	bne.n	800521e <HAL_DMA_Start_IT+0x26>
 800521a:	2302      	movs	r3, #2
 800521c:	e040      	b.n	80052a0 <HAL_DMA_Start_IT+0xa8>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b01      	cmp	r3, #1
 8005230:	d12f      	bne.n	8005292 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2202      	movs	r2, #2
 8005236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	68b9      	ldr	r1, [r7, #8]
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 fa4a 	bl	80056e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005250:	223f      	movs	r2, #63	@ 0x3f
 8005252:	409a      	lsls	r2, r3
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0216 	orr.w	r2, r2, #22
 8005266:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526c:	2b00      	cmp	r3, #0
 800526e:	d007      	beq.n	8005280 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0208 	orr.w	r2, r2, #8
 800527e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0201 	orr.w	r2, r2, #1
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	e005      	b.n	800529e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800529a:	2302      	movs	r3, #2
 800529c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800529e:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80052b6:	f7ff fe03 	bl	8004ec0 <HAL_GetTick>
 80052ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d008      	beq.n	80052da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2280      	movs	r2, #128	@ 0x80
 80052cc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e052      	b.n	8005380 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0216 	bic.w	r2, r2, #22
 80052e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	695a      	ldr	r2, [r3, #20]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d103      	bne.n	800530a <HAL_DMA_Abort+0x62>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005306:	2b00      	cmp	r3, #0
 8005308:	d007      	beq.n	800531a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0208 	bic.w	r2, r2, #8
 8005318:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0201 	bic.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800532a:	e013      	b.n	8005354 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800532c:	f7ff fdc8 	bl	8004ec0 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b05      	cmp	r3, #5
 8005338:	d90c      	bls.n	8005354 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2203      	movs	r2, #3
 8005344:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e015      	b.n	8005380 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e4      	bne.n	800532c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005366:	223f      	movs	r2, #63	@ 0x3f
 8005368:	409a      	lsls	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d004      	beq.n	80053a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2280      	movs	r2, #128	@ 0x80
 80053a0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e00c      	b.n	80053c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2205      	movs	r2, #5
 80053aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0201 	bic.w	r2, r2, #1
 80053bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053d8:	4b8e      	ldr	r3, [pc, #568]	@ (8005614 <HAL_DMA_IRQHandler+0x248>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a8e      	ldr	r2, [pc, #568]	@ (8005618 <HAL_DMA_IRQHandler+0x24c>)
 80053de:	fba2 2303 	umull	r2, r3, r2, r3
 80053e2:	0a9b      	lsrs	r3, r3, #10
 80053e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f6:	2208      	movs	r2, #8
 80053f8:	409a      	lsls	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4013      	ands	r3, r2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d01a      	beq.n	8005438 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b00      	cmp	r3, #0
 800540e:	d013      	beq.n	8005438 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0204 	bic.w	r2, r2, #4
 800541e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005424:	2208      	movs	r2, #8
 8005426:	409a      	lsls	r2, r3
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005430:	f043 0201 	orr.w	r2, r3, #1
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800543c:	2201      	movs	r2, #1
 800543e:	409a      	lsls	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4013      	ands	r3, r2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d012      	beq.n	800546e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00b      	beq.n	800546e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800545a:	2201      	movs	r2, #1
 800545c:	409a      	lsls	r2, r3
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005466:	f043 0202 	orr.w	r2, r3, #2
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005472:	2204      	movs	r2, #4
 8005474:	409a      	lsls	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4013      	ands	r3, r2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d012      	beq.n	80054a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00b      	beq.n	80054a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005490:	2204      	movs	r2, #4
 8005492:	409a      	lsls	r2, r3
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800549c:	f043 0204 	orr.w	r2, r3, #4
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a8:	2210      	movs	r2, #16
 80054aa:	409a      	lsls	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4013      	ands	r3, r2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d043      	beq.n	800553c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d03c      	beq.n	800553c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054c6:	2210      	movs	r2, #16
 80054c8:	409a      	lsls	r2, r3
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d018      	beq.n	800550e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d108      	bne.n	80054fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d024      	beq.n	800553c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	4798      	blx	r3
 80054fa:	e01f      	b.n	800553c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005500:	2b00      	cmp	r3, #0
 8005502:	d01b      	beq.n	800553c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	4798      	blx	r3
 800550c:	e016      	b.n	800553c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005518:	2b00      	cmp	r3, #0
 800551a:	d107      	bne.n	800552c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0208 	bic.w	r2, r2, #8
 800552a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005540:	2220      	movs	r2, #32
 8005542:	409a      	lsls	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4013      	ands	r3, r2
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 808f 	beq.w	800566c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 8087 	beq.w	800566c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005562:	2220      	movs	r2, #32
 8005564:	409a      	lsls	r2, r3
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b05      	cmp	r3, #5
 8005574:	d136      	bne.n	80055e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0216 	bic.w	r2, r2, #22
 8005584:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695a      	ldr	r2, [r3, #20]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005594:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d103      	bne.n	80055a6 <HAL_DMA_IRQHandler+0x1da>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d007      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0208 	bic.w	r2, r2, #8
 80055b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ba:	223f      	movs	r2, #63	@ 0x3f
 80055bc:	409a      	lsls	r2, r3
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d07e      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	4798      	blx	r3
        }
        return;
 80055e2:	e079      	b.n	80056d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d01d      	beq.n	800562e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10d      	bne.n	800561c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005604:	2b00      	cmp	r3, #0
 8005606:	d031      	beq.n	800566c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	4798      	blx	r3
 8005610:	e02c      	b.n	800566c <HAL_DMA_IRQHandler+0x2a0>
 8005612:	bf00      	nop
 8005614:	20000024 	.word	0x20000024
 8005618:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005620:	2b00      	cmp	r3, #0
 8005622:	d023      	beq.n	800566c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	4798      	blx	r3
 800562c:	e01e      	b.n	800566c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10f      	bne.n	800565c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0210 	bic.w	r2, r2, #16
 800564a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005670:	2b00      	cmp	r3, #0
 8005672:	d032      	beq.n	80056da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d022      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2205      	movs	r2, #5
 8005684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0201 	bic.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	3301      	adds	r3, #1
 800569c:	60bb      	str	r3, [r7, #8]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d307      	bcc.n	80056b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f2      	bne.n	8005698 <HAL_DMA_IRQHandler+0x2cc>
 80056b2:	e000      	b.n	80056b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80056b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d005      	beq.n	80056da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	4798      	blx	r3
 80056d6:	e000      	b.n	80056da <HAL_DMA_IRQHandler+0x30e>
        return;
 80056d8:	bf00      	nop
    }
  }
}
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80056fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	2b40      	cmp	r3, #64	@ 0x40
 800570c:	d108      	bne.n	8005720 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800571e:	e007      	b.n	8005730 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	60da      	str	r2, [r3, #12]
}
 8005730:	bf00      	nop
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	3b10      	subs	r3, #16
 800574c:	4a14      	ldr	r2, [pc, #80]	@ (80057a0 <DMA_CalcBaseAndBitshift+0x64>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	091b      	lsrs	r3, r3, #4
 8005754:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005756:	4a13      	ldr	r2, [pc, #76]	@ (80057a4 <DMA_CalcBaseAndBitshift+0x68>)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4413      	add	r3, r2
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b03      	cmp	r3, #3
 8005768:	d909      	bls.n	800577e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005772:	f023 0303 	bic.w	r3, r3, #3
 8005776:	1d1a      	adds	r2, r3, #4
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	659a      	str	r2, [r3, #88]	@ 0x58
 800577c:	e007      	b.n	800578e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005786:	f023 0303 	bic.w	r3, r3, #3
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005792:	4618      	mov	r0, r3
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	aaaaaaab 	.word	0xaaaaaaab
 80057a4:	080102d8 	.word	0x080102d8

080057a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d11f      	bne.n	8005802 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d856      	bhi.n	8005876 <DMA_CheckFifoParam+0xce>
 80057c8:	a201      	add	r2, pc, #4	@ (adr r2, 80057d0 <DMA_CheckFifoParam+0x28>)
 80057ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ce:	bf00      	nop
 80057d0:	080057e1 	.word	0x080057e1
 80057d4:	080057f3 	.word	0x080057f3
 80057d8:	080057e1 	.word	0x080057e1
 80057dc:	08005877 	.word	0x08005877
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d046      	beq.n	800587a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057f0:	e043      	b.n	800587a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057fa:	d140      	bne.n	800587e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005800:	e03d      	b.n	800587e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800580a:	d121      	bne.n	8005850 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b03      	cmp	r3, #3
 8005810:	d837      	bhi.n	8005882 <DMA_CheckFifoParam+0xda>
 8005812:	a201      	add	r2, pc, #4	@ (adr r2, 8005818 <DMA_CheckFifoParam+0x70>)
 8005814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005818:	08005829 	.word	0x08005829
 800581c:	0800582f 	.word	0x0800582f
 8005820:	08005829 	.word	0x08005829
 8005824:	08005841 	.word	0x08005841
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	73fb      	strb	r3, [r7, #15]
      break;
 800582c:	e030      	b.n	8005890 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005832:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d025      	beq.n	8005886 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800583e:	e022      	b.n	8005886 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005844:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005848:	d11f      	bne.n	800588a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800584e:	e01c      	b.n	800588a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b02      	cmp	r3, #2
 8005854:	d903      	bls.n	800585e <DMA_CheckFifoParam+0xb6>
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	2b03      	cmp	r3, #3
 800585a:	d003      	beq.n	8005864 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800585c:	e018      	b.n	8005890 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	73fb      	strb	r3, [r7, #15]
      break;
 8005862:	e015      	b.n	8005890 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005868:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00e      	beq.n	800588e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	73fb      	strb	r3, [r7, #15]
      break;
 8005874:	e00b      	b.n	800588e <DMA_CheckFifoParam+0xe6>
      break;
 8005876:	bf00      	nop
 8005878:	e00a      	b.n	8005890 <DMA_CheckFifoParam+0xe8>
      break;
 800587a:	bf00      	nop
 800587c:	e008      	b.n	8005890 <DMA_CheckFifoParam+0xe8>
      break;
 800587e:	bf00      	nop
 8005880:	e006      	b.n	8005890 <DMA_CheckFifoParam+0xe8>
      break;
 8005882:	bf00      	nop
 8005884:	e004      	b.n	8005890 <DMA_CheckFifoParam+0xe8>
      break;
 8005886:	bf00      	nop
 8005888:	e002      	b.n	8005890 <DMA_CheckFifoParam+0xe8>
      break;   
 800588a:	bf00      	nop
 800588c:	e000      	b.n	8005890 <DMA_CheckFifoParam+0xe8>
      break;
 800588e:	bf00      	nop
    }
  } 
  
  return status; 
 8005890:	7bfb      	ldrb	r3, [r7, #15]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop

080058a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b089      	sub	sp, #36	@ 0x24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80058aa:	2300      	movs	r3, #0
 80058ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058b6:	2300      	movs	r3, #0
 80058b8:	61fb      	str	r3, [r7, #28]
 80058ba:	e16b      	b.n	8005b94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80058bc:	2201      	movs	r2, #1
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	fa02 f303 	lsl.w	r3, r2, r3
 80058c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	4013      	ands	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	f040 815a 	bne.w	8005b8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f003 0303 	and.w	r3, r3, #3
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d005      	beq.n	80058f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d130      	bne.n	8005954 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	2203      	movs	r2, #3
 80058fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005902:	43db      	mvns	r3, r3
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	4013      	ands	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	fa02 f303 	lsl.w	r3, r2, r3
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	4313      	orrs	r3, r2
 800591a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005928:	2201      	movs	r2, #1
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	43db      	mvns	r3, r3
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	4013      	ands	r3, r2
 8005936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	091b      	lsrs	r3, r3, #4
 800593e:	f003 0201 	and.w	r2, r3, #1
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	fa02 f303 	lsl.w	r3, r2, r3
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	4313      	orrs	r3, r2
 800594c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f003 0303 	and.w	r3, r3, #3
 800595c:	2b03      	cmp	r3, #3
 800595e:	d017      	beq.n	8005990 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	2203      	movs	r2, #3
 800596c:	fa02 f303 	lsl.w	r3, r2, r3
 8005970:	43db      	mvns	r3, r3
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	4013      	ands	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	4313      	orrs	r3, r2
 8005988:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f003 0303 	and.w	r3, r3, #3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d123      	bne.n	80059e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	08da      	lsrs	r2, r3, #3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	3208      	adds	r2, #8
 80059a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	220f      	movs	r2, #15
 80059b4:	fa02 f303 	lsl.w	r3, r2, r3
 80059b8:	43db      	mvns	r3, r3
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	4013      	ands	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	08da      	lsrs	r2, r3, #3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	3208      	adds	r2, #8
 80059de:	69b9      	ldr	r1, [r7, #24]
 80059e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	2203      	movs	r2, #3
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
 80059f4:	43db      	mvns	r3, r3
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	4013      	ands	r3, r2
 80059fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f003 0203 	and.w	r2, r3, #3
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 80b4 	beq.w	8005b8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a26:	2300      	movs	r3, #0
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	4b60      	ldr	r3, [pc, #384]	@ (8005bac <HAL_GPIO_Init+0x30c>)
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a2e:	4a5f      	ldr	r2, [pc, #380]	@ (8005bac <HAL_GPIO_Init+0x30c>)
 8005a30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a34:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a36:	4b5d      	ldr	r3, [pc, #372]	@ (8005bac <HAL_GPIO_Init+0x30c>)
 8005a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a42:	4a5b      	ldr	r2, [pc, #364]	@ (8005bb0 <HAL_GPIO_Init+0x310>)
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	089b      	lsrs	r3, r3, #2
 8005a48:	3302      	adds	r3, #2
 8005a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	220f      	movs	r2, #15
 8005a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5e:	43db      	mvns	r3, r3
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	4013      	ands	r3, r2
 8005a64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a52      	ldr	r2, [pc, #328]	@ (8005bb4 <HAL_GPIO_Init+0x314>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d02b      	beq.n	8005ac6 <HAL_GPIO_Init+0x226>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a51      	ldr	r2, [pc, #324]	@ (8005bb8 <HAL_GPIO_Init+0x318>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d025      	beq.n	8005ac2 <HAL_GPIO_Init+0x222>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a50      	ldr	r2, [pc, #320]	@ (8005bbc <HAL_GPIO_Init+0x31c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d01f      	beq.n	8005abe <HAL_GPIO_Init+0x21e>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a4f      	ldr	r2, [pc, #316]	@ (8005bc0 <HAL_GPIO_Init+0x320>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d019      	beq.n	8005aba <HAL_GPIO_Init+0x21a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a4e      	ldr	r2, [pc, #312]	@ (8005bc4 <HAL_GPIO_Init+0x324>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d013      	beq.n	8005ab6 <HAL_GPIO_Init+0x216>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a4d      	ldr	r2, [pc, #308]	@ (8005bc8 <HAL_GPIO_Init+0x328>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d00d      	beq.n	8005ab2 <HAL_GPIO_Init+0x212>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a4c      	ldr	r2, [pc, #304]	@ (8005bcc <HAL_GPIO_Init+0x32c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d007      	beq.n	8005aae <HAL_GPIO_Init+0x20e>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a4b      	ldr	r2, [pc, #300]	@ (8005bd0 <HAL_GPIO_Init+0x330>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d101      	bne.n	8005aaa <HAL_GPIO_Init+0x20a>
 8005aa6:	2307      	movs	r3, #7
 8005aa8:	e00e      	b.n	8005ac8 <HAL_GPIO_Init+0x228>
 8005aaa:	2308      	movs	r3, #8
 8005aac:	e00c      	b.n	8005ac8 <HAL_GPIO_Init+0x228>
 8005aae:	2306      	movs	r3, #6
 8005ab0:	e00a      	b.n	8005ac8 <HAL_GPIO_Init+0x228>
 8005ab2:	2305      	movs	r3, #5
 8005ab4:	e008      	b.n	8005ac8 <HAL_GPIO_Init+0x228>
 8005ab6:	2304      	movs	r3, #4
 8005ab8:	e006      	b.n	8005ac8 <HAL_GPIO_Init+0x228>
 8005aba:	2303      	movs	r3, #3
 8005abc:	e004      	b.n	8005ac8 <HAL_GPIO_Init+0x228>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e002      	b.n	8005ac8 <HAL_GPIO_Init+0x228>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e000      	b.n	8005ac8 <HAL_GPIO_Init+0x228>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	69fa      	ldr	r2, [r7, #28]
 8005aca:	f002 0203 	and.w	r2, r2, #3
 8005ace:	0092      	lsls	r2, r2, #2
 8005ad0:	4093      	lsls	r3, r2
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ad8:	4935      	ldr	r1, [pc, #212]	@ (8005bb0 <HAL_GPIO_Init+0x310>)
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	089b      	lsrs	r3, r3, #2
 8005ade:	3302      	adds	r3, #2
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8005bd4 <HAL_GPIO_Init+0x334>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	43db      	mvns	r3, r3
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	4013      	ands	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b0a:	4a32      	ldr	r2, [pc, #200]	@ (8005bd4 <HAL_GPIO_Init+0x334>)
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b10:	4b30      	ldr	r3, [pc, #192]	@ (8005bd4 <HAL_GPIO_Init+0x334>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	43db      	mvns	r3, r3
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b34:	4a27      	ldr	r2, [pc, #156]	@ (8005bd4 <HAL_GPIO_Init+0x334>)
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b3a:	4b26      	ldr	r3, [pc, #152]	@ (8005bd4 <HAL_GPIO_Init+0x334>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	43db      	mvns	r3, r3
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	4013      	ands	r3, r2
 8005b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8005bd4 <HAL_GPIO_Init+0x334>)
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b64:	4b1b      	ldr	r3, [pc, #108]	@ (8005bd4 <HAL_GPIO_Init+0x334>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	43db      	mvns	r3, r3
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	4013      	ands	r3, r2
 8005b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b88:	4a12      	ldr	r2, [pc, #72]	@ (8005bd4 <HAL_GPIO_Init+0x334>)
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	3301      	adds	r3, #1
 8005b92:	61fb      	str	r3, [r7, #28]
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	2b0f      	cmp	r3, #15
 8005b98:	f67f ae90 	bls.w	80058bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	3724      	adds	r7, #36	@ 0x24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40023800 	.word	0x40023800
 8005bb0:	40013800 	.word	0x40013800
 8005bb4:	40020000 	.word	0x40020000
 8005bb8:	40020400 	.word	0x40020400
 8005bbc:	40020800 	.word	0x40020800
 8005bc0:	40020c00 	.word	0x40020c00
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	40021400 	.word	0x40021400
 8005bcc:	40021800 	.word	0x40021800
 8005bd0:	40021c00 	.word	0x40021c00
 8005bd4:	40013c00 	.word	0x40013c00

08005bd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	887b      	ldrh	r3, [r7, #2]
 8005bea:	4013      	ands	r3, r2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	73fb      	strb	r3, [r7, #15]
 8005bf4:	e001      	b.n	8005bfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	807b      	strh	r3, [r7, #2]
 8005c14:	4613      	mov	r3, r2
 8005c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c18:	787b      	ldrb	r3, [r7, #1]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c1e:	887a      	ldrh	r2, [r7, #2]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c24:	e003      	b.n	8005c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c26:	887b      	ldrh	r3, [r7, #2]
 8005c28:	041a      	lsls	r2, r3, #16
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	619a      	str	r2, [r3, #24]
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e12b      	b.n	8005ea6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d106      	bne.n	8005c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fe fd40 	bl	80046e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2224      	movs	r2, #36	@ 0x24
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0201 	bic.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ca0:	f001 ff60 	bl	8007b64 <HAL_RCC_GetPCLK1Freq>
 8005ca4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	4a81      	ldr	r2, [pc, #516]	@ (8005eb0 <HAL_I2C_Init+0x274>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d807      	bhi.n	8005cc0 <HAL_I2C_Init+0x84>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4a80      	ldr	r2, [pc, #512]	@ (8005eb4 <HAL_I2C_Init+0x278>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	bf94      	ite	ls
 8005cb8:	2301      	movls	r3, #1
 8005cba:	2300      	movhi	r3, #0
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	e006      	b.n	8005cce <HAL_I2C_Init+0x92>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4a7d      	ldr	r2, [pc, #500]	@ (8005eb8 <HAL_I2C_Init+0x27c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	bf94      	ite	ls
 8005cc8:	2301      	movls	r3, #1
 8005cca:	2300      	movhi	r3, #0
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e0e7      	b.n	8005ea6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4a78      	ldr	r2, [pc, #480]	@ (8005ebc <HAL_I2C_Init+0x280>)
 8005cda:	fba2 2303 	umull	r2, r3, r2, r3
 8005cde:	0c9b      	lsrs	r3, r3, #18
 8005ce0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	4a6a      	ldr	r2, [pc, #424]	@ (8005eb0 <HAL_I2C_Init+0x274>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d802      	bhi.n	8005d10 <HAL_I2C_Init+0xd4>
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	e009      	b.n	8005d24 <HAL_I2C_Init+0xe8>
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005d16:	fb02 f303 	mul.w	r3, r2, r3
 8005d1a:	4a69      	ldr	r2, [pc, #420]	@ (8005ec0 <HAL_I2C_Init+0x284>)
 8005d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d20:	099b      	lsrs	r3, r3, #6
 8005d22:	3301      	adds	r3, #1
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005d36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	495c      	ldr	r1, [pc, #368]	@ (8005eb0 <HAL_I2C_Init+0x274>)
 8005d40:	428b      	cmp	r3, r1
 8005d42:	d819      	bhi.n	8005d78 <HAL_I2C_Init+0x13c>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	1e59      	subs	r1, r3, #1
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d52:	1c59      	adds	r1, r3, #1
 8005d54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005d58:	400b      	ands	r3, r1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00a      	beq.n	8005d74 <HAL_I2C_Init+0x138>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	1e59      	subs	r1, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d72:	e051      	b.n	8005e18 <HAL_I2C_Init+0x1dc>
 8005d74:	2304      	movs	r3, #4
 8005d76:	e04f      	b.n	8005e18 <HAL_I2C_Init+0x1dc>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d111      	bne.n	8005da4 <HAL_I2C_Init+0x168>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	1e58      	subs	r0, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6859      	ldr	r1, [r3, #4]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	440b      	add	r3, r1
 8005d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d92:	3301      	adds	r3, #1
 8005d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	bf0c      	ite	eq
 8005d9c:	2301      	moveq	r3, #1
 8005d9e:	2300      	movne	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	e012      	b.n	8005dca <HAL_I2C_Init+0x18e>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	1e58      	subs	r0, r3, #1
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6859      	ldr	r1, [r3, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	440b      	add	r3, r1
 8005db2:	0099      	lsls	r1, r3, #2
 8005db4:	440b      	add	r3, r1
 8005db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dba:	3301      	adds	r3, #1
 8005dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	bf0c      	ite	eq
 8005dc4:	2301      	moveq	r3, #1
 8005dc6:	2300      	movne	r3, #0
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <HAL_I2C_Init+0x196>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e022      	b.n	8005e18 <HAL_I2C_Init+0x1dc>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10e      	bne.n	8005df8 <HAL_I2C_Init+0x1bc>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	1e58      	subs	r0, r3, #1
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6859      	ldr	r1, [r3, #4]
 8005de2:	460b      	mov	r3, r1
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	440b      	add	r3, r1
 8005de8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dec:	3301      	adds	r3, #1
 8005dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005df2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005df6:	e00f      	b.n	8005e18 <HAL_I2C_Init+0x1dc>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	1e58      	subs	r0, r3, #1
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6859      	ldr	r1, [r3, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	440b      	add	r3, r1
 8005e06:	0099      	lsls	r1, r3, #2
 8005e08:	440b      	add	r3, r1
 8005e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e0e:	3301      	adds	r3, #1
 8005e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e18:	6879      	ldr	r1, [r7, #4]
 8005e1a:	6809      	ldr	r1, [r1, #0]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69da      	ldr	r2, [r3, #28]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005e46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6911      	ldr	r1, [r2, #16]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	68d2      	ldr	r2, [r2, #12]
 8005e52:	4311      	orrs	r1, r2
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6812      	ldr	r2, [r2, #0]
 8005e58:	430b      	orrs	r3, r1
 8005e5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	695a      	ldr	r2, [r3, #20]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0201 	orr.w	r2, r2, #1
 8005e86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	000186a0 	.word	0x000186a0
 8005eb4:	001e847f 	.word	0x001e847f
 8005eb8:	003d08ff 	.word	0x003d08ff
 8005ebc:	431bde83 	.word	0x431bde83
 8005ec0:	10624dd3 	.word	0x10624dd3

08005ec4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b088      	sub	sp, #32
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	607a      	str	r2, [r7, #4]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	817b      	strh	r3, [r7, #10]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ed8:	f7fe fff2 	bl	8004ec0 <HAL_GetTick>
 8005edc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b20      	cmp	r3, #32
 8005ee8:	f040 80e0 	bne.w	80060ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	2319      	movs	r3, #25
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	4970      	ldr	r1, [pc, #448]	@ (80060b8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 ff3c 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005f02:	2302      	movs	r3, #2
 8005f04:	e0d3      	b.n	80060ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_I2C_Master_Transmit+0x50>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e0cc      	b.n	80060ae <HAL_I2C_Master_Transmit+0x1ea>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d007      	beq.n	8005f3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f042 0201 	orr.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2221      	movs	r2, #33	@ 0x21
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2210      	movs	r2, #16
 8005f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	893a      	ldrh	r2, [r7, #8]
 8005f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4a50      	ldr	r2, [pc, #320]	@ (80060bc <HAL_I2C_Master_Transmit+0x1f8>)
 8005f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005f7c:	8979      	ldrh	r1, [r7, #10]
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	6a3a      	ldr	r2, [r7, #32]
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 fcf6 	bl	8006974 <I2C_MasterRequestWrite>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e08d      	b.n	80060ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f92:	2300      	movs	r3, #0
 8005f94:	613b      	str	r3, [r7, #16]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	613b      	str	r3, [r7, #16]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	613b      	str	r3, [r7, #16]
 8005fa6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005fa8:	e066      	b.n	8006078 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	6a39      	ldr	r1, [r7, #32]
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 fffa 	bl	8006fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00d      	beq.n	8005fd6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d107      	bne.n	8005fd2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e06b      	b.n	80060ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fda:	781a      	ldrb	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ffe:	3b01      	subs	r3, #1
 8006000:	b29a      	uxth	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b04      	cmp	r3, #4
 8006012:	d11b      	bne.n	800604c <HAL_I2C_Master_Transmit+0x188>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006018:	2b00      	cmp	r3, #0
 800601a:	d017      	beq.n	800604c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006020:	781a      	ldrb	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006036:	b29b      	uxth	r3, r3
 8006038:	3b01      	subs	r3, #1
 800603a:	b29a      	uxth	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	6a39      	ldr	r1, [r7, #32]
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 fff1 	bl	8007038 <I2C_WaitOnBTFFlagUntilTimeout>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00d      	beq.n	8006078 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006060:	2b04      	cmp	r3, #4
 8006062:	d107      	bne.n	8006074 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006072:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e01a      	b.n	80060ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800607c:	2b00      	cmp	r3, #0
 800607e:	d194      	bne.n	8005faa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800608e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2220      	movs	r2, #32
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80060a8:	2300      	movs	r3, #0
 80060aa:	e000      	b.n	80060ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80060ac:	2302      	movs	r3, #2
  }
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	00100002 	.word	0x00100002
 80060bc:	ffff0000 	.word	0xffff0000

080060c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b088      	sub	sp, #32
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	4608      	mov	r0, r1
 80060ca:	4611      	mov	r1, r2
 80060cc:	461a      	mov	r2, r3
 80060ce:	4603      	mov	r3, r0
 80060d0:	817b      	strh	r3, [r7, #10]
 80060d2:	460b      	mov	r3, r1
 80060d4:	813b      	strh	r3, [r7, #8]
 80060d6:	4613      	mov	r3, r2
 80060d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80060da:	f7fe fef1 	bl	8004ec0 <HAL_GetTick>
 80060de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	f040 80d9 	bne.w	80062a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	2319      	movs	r3, #25
 80060f4:	2201      	movs	r2, #1
 80060f6:	496d      	ldr	r1, [pc, #436]	@ (80062ac <HAL_I2C_Mem_Write+0x1ec>)
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 fe3b 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006104:	2302      	movs	r3, #2
 8006106:	e0cc      	b.n	80062a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <HAL_I2C_Mem_Write+0x56>
 8006112:	2302      	movs	r3, #2
 8006114:	e0c5      	b.n	80062a2 <HAL_I2C_Mem_Write+0x1e2>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b01      	cmp	r3, #1
 800612a:	d007      	beq.n	800613c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0201 	orr.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800614a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2221      	movs	r2, #33	@ 0x21
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2240      	movs	r2, #64	@ 0x40
 8006158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a3a      	ldr	r2, [r7, #32]
 8006166:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800616c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006172:	b29a      	uxth	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4a4d      	ldr	r2, [pc, #308]	@ (80062b0 <HAL_I2C_Mem_Write+0x1f0>)
 800617c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800617e:	88f8      	ldrh	r0, [r7, #6]
 8006180:	893a      	ldrh	r2, [r7, #8]
 8006182:	8979      	ldrh	r1, [r7, #10]
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	9301      	str	r3, [sp, #4]
 8006188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	4603      	mov	r3, r0
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 fc72 	bl	8006a78 <I2C_RequestMemoryWrite>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d052      	beq.n	8006240 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e081      	b.n	80062a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 ff00 	bl	8006fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00d      	beq.n	80061ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d107      	bne.n	80061c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e06b      	b.n	80062a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ce:	781a      	ldrb	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b04      	cmp	r3, #4
 8006206:	d11b      	bne.n	8006240 <HAL_I2C_Mem_Write+0x180>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800620c:	2b00      	cmp	r3, #0
 800620e:	d017      	beq.n	8006240 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006214:	781a      	ldrb	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1aa      	bne.n	800619e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 fef3 	bl	8007038 <I2C_WaitOnBTFFlagUntilTimeout>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00d      	beq.n	8006274 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625c:	2b04      	cmp	r3, #4
 800625e:	d107      	bne.n	8006270 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800626e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e016      	b.n	80062a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006282:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2220      	movs	r2, #32
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	e000      	b.n	80062a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80062a0:	2302      	movs	r3, #2
  }
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	00100002 	.word	0x00100002
 80062b0:	ffff0000 	.word	0xffff0000

080062b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b08c      	sub	sp, #48	@ 0x30
 80062b8:	af02      	add	r7, sp, #8
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	4608      	mov	r0, r1
 80062be:	4611      	mov	r1, r2
 80062c0:	461a      	mov	r2, r3
 80062c2:	4603      	mov	r3, r0
 80062c4:	817b      	strh	r3, [r7, #10]
 80062c6:	460b      	mov	r3, r1
 80062c8:	813b      	strh	r3, [r7, #8]
 80062ca:	4613      	mov	r3, r2
 80062cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062ce:	f7fe fdf7 	bl	8004ec0 <HAL_GetTick>
 80062d2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b20      	cmp	r3, #32
 80062de:	f040 8214 	bne.w	800670a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	2319      	movs	r3, #25
 80062e8:	2201      	movs	r2, #1
 80062ea:	497b      	ldr	r1, [pc, #492]	@ (80064d8 <HAL_I2C_Mem_Read+0x224>)
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 fd41 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80062f8:	2302      	movs	r3, #2
 80062fa:	e207      	b.n	800670c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006302:	2b01      	cmp	r3, #1
 8006304:	d101      	bne.n	800630a <HAL_I2C_Mem_Read+0x56>
 8006306:	2302      	movs	r3, #2
 8006308:	e200      	b.n	800670c <HAL_I2C_Mem_Read+0x458>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b01      	cmp	r3, #1
 800631e:	d007      	beq.n	8006330 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0201 	orr.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800633e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2222      	movs	r2, #34	@ 0x22
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2240      	movs	r2, #64	@ 0x40
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800635a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006360:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006366:	b29a      	uxth	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4a5b      	ldr	r2, [pc, #364]	@ (80064dc <HAL_I2C_Mem_Read+0x228>)
 8006370:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006372:	88f8      	ldrh	r0, [r7, #6]
 8006374:	893a      	ldrh	r2, [r7, #8]
 8006376:	8979      	ldrh	r1, [r7, #10]
 8006378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637a:	9301      	str	r3, [sp, #4]
 800637c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	4603      	mov	r3, r0
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 fc0e 	bl	8006ba4 <I2C_RequestMemoryRead>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e1bc      	b.n	800670c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006396:	2b00      	cmp	r3, #0
 8006398:	d113      	bne.n	80063c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800639a:	2300      	movs	r3, #0
 800639c:	623b      	str	r3, [r7, #32]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	623b      	str	r3, [r7, #32]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	623b      	str	r3, [r7, #32]
 80063ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	e190      	b.n	80066e4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d11b      	bne.n	8006402 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063da:	2300      	movs	r3, #0
 80063dc:	61fb      	str	r3, [r7, #28]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	61fb      	str	r3, [r7, #28]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	61fb      	str	r3, [r7, #28]
 80063ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	e170      	b.n	80066e4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006406:	2b02      	cmp	r3, #2
 8006408:	d11b      	bne.n	8006442 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006418:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006428:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800642a:	2300      	movs	r3, #0
 800642c:	61bb      	str	r3, [r7, #24]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	e150      	b.n	80066e4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006442:	2300      	movs	r3, #0
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006458:	e144      	b.n	80066e4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800645e:	2b03      	cmp	r3, #3
 8006460:	f200 80f1 	bhi.w	8006646 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006468:	2b01      	cmp	r3, #1
 800646a:	d123      	bne.n	80064b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800646c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800646e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 fe29 	bl	80070c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e145      	b.n	800670c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691a      	ldr	r2, [r3, #16]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800649c:	3b01      	subs	r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80064b2:	e117      	b.n	80066e4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d14e      	bne.n	800655a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c2:	2200      	movs	r2, #0
 80064c4:	4906      	ldr	r1, [pc, #24]	@ (80064e0 <HAL_I2C_Mem_Read+0x22c>)
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 fc54 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d008      	beq.n	80064e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e11a      	b.n	800670c <HAL_I2C_Mem_Read+0x458>
 80064d6:	bf00      	nop
 80064d8:	00100002 	.word	0x00100002
 80064dc:	ffff0000 	.word	0xffff0000
 80064e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	691a      	ldr	r2, [r3, #16]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006510:	3b01      	subs	r3, #1
 8006512:	b29a      	uxth	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800651c:	b29b      	uxth	r3, r3
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	691a      	ldr	r2, [r3, #16]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006530:	b2d2      	uxtb	r2, r2
 8006532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006538:	1c5a      	adds	r2, r3, #1
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006542:	3b01      	subs	r3, #1
 8006544:	b29a      	uxth	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800654e:	b29b      	uxth	r3, r3
 8006550:	3b01      	subs	r3, #1
 8006552:	b29a      	uxth	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006558:	e0c4      	b.n	80066e4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006560:	2200      	movs	r2, #0
 8006562:	496c      	ldr	r1, [pc, #432]	@ (8006714 <HAL_I2C_Mem_Read+0x460>)
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 fc05 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e0cb      	b.n	800670c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006582:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	691a      	ldr	r2, [r3, #16]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658e:	b2d2      	uxtb	r2, r2
 8006590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	3b01      	subs	r3, #1
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065bc:	2200      	movs	r2, #0
 80065be:	4955      	ldr	r1, [pc, #340]	@ (8006714 <HAL_I2C_Mem_Read+0x460>)
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 fbd7 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e09d      	b.n	800670c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691a      	ldr	r2, [r3, #16]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ea:	b2d2      	uxtb	r2, r2
 80065ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065fc:	3b01      	subs	r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006608:	b29b      	uxth	r3, r3
 800660a:	3b01      	subs	r3, #1
 800660c:	b29a      	uxth	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	691a      	ldr	r2, [r3, #16]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006624:	1c5a      	adds	r2, r3, #1
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800662e:	3b01      	subs	r3, #1
 8006630:	b29a      	uxth	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006644:	e04e      	b.n	80066e4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006648:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 fd3c 	bl	80070c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e058      	b.n	800670c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006676:	3b01      	subs	r3, #1
 8006678:	b29a      	uxth	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006682:	b29b      	uxth	r3, r3
 8006684:	3b01      	subs	r3, #1
 8006686:	b29a      	uxth	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b04      	cmp	r3, #4
 8006698:	d124      	bne.n	80066e4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d107      	bne.n	80066b2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066b0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	691a      	ldr	r2, [r3, #16]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066bc:	b2d2      	uxtb	r2, r2
 80066be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066ce:	3b01      	subs	r3, #1
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066da:	b29b      	uxth	r3, r3
 80066dc:	3b01      	subs	r3, #1
 80066de:	b29a      	uxth	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f47f aeb6 	bne.w	800645a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	e000      	b.n	800670c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800670a:	2302      	movs	r3, #2
  }
}
 800670c:	4618      	mov	r0, r3
 800670e:	3728      	adds	r7, #40	@ 0x28
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	00010004 	.word	0x00010004

08006718 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08a      	sub	sp, #40	@ 0x28
 800671c:	af02      	add	r7, sp, #8
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	607a      	str	r2, [r7, #4]
 8006722:	603b      	str	r3, [r7, #0]
 8006724:	460b      	mov	r3, r1
 8006726:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006728:	f7fe fbca 	bl	8004ec0 <HAL_GetTick>
 800672c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b20      	cmp	r3, #32
 800673c:	f040 8111 	bne.w	8006962 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	2319      	movs	r3, #25
 8006746:	2201      	movs	r2, #1
 8006748:	4988      	ldr	r1, [pc, #544]	@ (800696c <HAL_I2C_IsDeviceReady+0x254>)
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 fb12 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006756:	2302      	movs	r3, #2
 8006758:	e104      	b.n	8006964 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <HAL_I2C_IsDeviceReady+0x50>
 8006764:	2302      	movs	r3, #2
 8006766:	e0fd      	b.n	8006964 <HAL_I2C_IsDeviceReady+0x24c>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b01      	cmp	r3, #1
 800677c:	d007      	beq.n	800678e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f042 0201 	orr.w	r2, r2, #1
 800678c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800679c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2224      	movs	r2, #36	@ 0x24
 80067a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4a70      	ldr	r2, [pc, #448]	@ (8006970 <HAL_I2C_IsDeviceReady+0x258>)
 80067b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067c0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 fad0 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00d      	beq.n	80067f6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067e8:	d103      	bne.n	80067f2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067f0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e0b6      	b.n	8006964 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067f6:	897b      	ldrh	r3, [r7, #10]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	461a      	mov	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006804:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006806:	f7fe fb5b 	bl	8004ec0 <HAL_GetTick>
 800680a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b02      	cmp	r3, #2
 8006818:	bf0c      	ite	eq
 800681a:	2301      	moveq	r3, #1
 800681c:	2300      	movne	r3, #0
 800681e:	b2db      	uxtb	r3, r3
 8006820:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800682c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006830:	bf0c      	ite	eq
 8006832:	2301      	moveq	r3, #1
 8006834:	2300      	movne	r3, #0
 8006836:	b2db      	uxtb	r3, r3
 8006838:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800683a:	e025      	b.n	8006888 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800683c:	f7fe fb40 	bl	8004ec0 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	429a      	cmp	r2, r3
 800684a:	d302      	bcc.n	8006852 <HAL_I2C_IsDeviceReady+0x13a>
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d103      	bne.n	800685a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	22a0      	movs	r2, #160	@ 0xa0
 8006856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b02      	cmp	r3, #2
 8006866:	bf0c      	ite	eq
 8006868:	2301      	moveq	r3, #1
 800686a:	2300      	movne	r3, #0
 800686c:	b2db      	uxtb	r3, r3
 800686e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800687a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800687e:	bf0c      	ite	eq
 8006880:	2301      	moveq	r3, #1
 8006882:	2300      	movne	r3, #0
 8006884:	b2db      	uxtb	r3, r3
 8006886:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2ba0      	cmp	r3, #160	@ 0xa0
 8006892:	d005      	beq.n	80068a0 <HAL_I2C_IsDeviceReady+0x188>
 8006894:	7dfb      	ldrb	r3, [r7, #23]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d102      	bne.n	80068a0 <HAL_I2C_IsDeviceReady+0x188>
 800689a:	7dbb      	ldrb	r3, [r7, #22]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d0cd      	beq.n	800683c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d129      	bne.n	800690a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068c4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068c6:	2300      	movs	r3, #0
 80068c8:	613b      	str	r3, [r7, #16]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	613b      	str	r3, [r7, #16]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	613b      	str	r3, [r7, #16]
 80068da:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	2319      	movs	r3, #25
 80068e2:	2201      	movs	r2, #1
 80068e4:	4921      	ldr	r1, [pc, #132]	@ (800696c <HAL_I2C_IsDeviceReady+0x254>)
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 fa44 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e036      	b.n	8006964 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	e02c      	b.n	8006964 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006918:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006922:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	2319      	movs	r3, #25
 800692a:	2201      	movs	r2, #1
 800692c:	490f      	ldr	r1, [pc, #60]	@ (800696c <HAL_I2C_IsDeviceReady+0x254>)
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 fa20 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e012      	b.n	8006964 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	3301      	adds	r3, #1
 8006942:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006944:	69ba      	ldr	r2, [r7, #24]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	429a      	cmp	r2, r3
 800694a:	f4ff af32 	bcc.w	80067b2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2220      	movs	r2, #32
 8006952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e000      	b.n	8006964 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006962:	2302      	movs	r3, #2
  }
}
 8006964:	4618      	mov	r0, r3
 8006966:	3720      	adds	r7, #32
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	00100002 	.word	0x00100002
 8006970:	ffff0000 	.word	0xffff0000

08006974 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af02      	add	r7, sp, #8
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	607a      	str	r2, [r7, #4]
 800697e:	603b      	str	r3, [r7, #0]
 8006980:	460b      	mov	r3, r1
 8006982:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006988:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2b08      	cmp	r3, #8
 800698e:	d006      	beq.n	800699e <I2C_MasterRequestWrite+0x2a>
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d003      	beq.n	800699e <I2C_MasterRequestWrite+0x2a>
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800699c:	d108      	bne.n	80069b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	e00b      	b.n	80069c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b4:	2b12      	cmp	r3, #18
 80069b6:	d107      	bne.n	80069c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 f9cd 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00d      	beq.n	80069fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ee:	d103      	bne.n	80069f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e035      	b.n	8006a68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a04:	d108      	bne.n	8006a18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a06:	897b      	ldrh	r3, [r7, #10]
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006a14:	611a      	str	r2, [r3, #16]
 8006a16:	e01b      	b.n	8006a50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006a18:	897b      	ldrh	r3, [r7, #10]
 8006a1a:	11db      	asrs	r3, r3, #7
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	f003 0306 	and.w	r3, r3, #6
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	f063 030f 	orn	r3, r3, #15
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	490e      	ldr	r1, [pc, #56]	@ (8006a70 <I2C_MasterRequestWrite+0xfc>)
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 fa16 	bl	8006e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e010      	b.n	8006a68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006a46:	897b      	ldrh	r3, [r7, #10]
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	4907      	ldr	r1, [pc, #28]	@ (8006a74 <I2C_MasterRequestWrite+0x100>)
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 fa06 	bl	8006e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e000      	b.n	8006a68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	00010008 	.word	0x00010008
 8006a74:	00010002 	.word	0x00010002

08006a78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	4608      	mov	r0, r1
 8006a82:	4611      	mov	r1, r2
 8006a84:	461a      	mov	r2, r3
 8006a86:	4603      	mov	r3, r0
 8006a88:	817b      	strh	r3, [r7, #10]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	813b      	strh	r3, [r7, #8]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006aa0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 f960 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00d      	beq.n	8006ad6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ac8:	d103      	bne.n	8006ad2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ad0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e05f      	b.n	8006b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ad6:	897b      	ldrh	r3, [r7, #10]
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	461a      	mov	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ae4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	6a3a      	ldr	r2, [r7, #32]
 8006aea:	492d      	ldr	r1, [pc, #180]	@ (8006ba0 <I2C_RequestMemoryWrite+0x128>)
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 f9bb 	bl	8006e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e04c      	b.n	8006b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006afc:	2300      	movs	r3, #0
 8006afe:	617b      	str	r3, [r7, #20]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	617b      	str	r3, [r7, #20]
 8006b10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b14:	6a39      	ldr	r1, [r7, #32]
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f000 fa46 	bl	8006fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00d      	beq.n	8006b3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d107      	bne.n	8006b3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e02b      	b.n	8006b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b3e:	88fb      	ldrh	r3, [r7, #6]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d105      	bne.n	8006b50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b44:	893b      	ldrh	r3, [r7, #8]
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	611a      	str	r2, [r3, #16]
 8006b4e:	e021      	b.n	8006b94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b50:	893b      	ldrh	r3, [r7, #8]
 8006b52:	0a1b      	lsrs	r3, r3, #8
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b60:	6a39      	ldr	r1, [r7, #32]
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 fa20 	bl	8006fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00d      	beq.n	8006b8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	d107      	bne.n	8006b86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e005      	b.n	8006b96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b8a:	893b      	ldrh	r3, [r7, #8]
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	00010002 	.word	0x00010002

08006ba4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b088      	sub	sp, #32
 8006ba8:	af02      	add	r7, sp, #8
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	4608      	mov	r0, r1
 8006bae:	4611      	mov	r1, r2
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	817b      	strh	r3, [r7, #10]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	813b      	strh	r3, [r7, #8]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006bcc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 f8c2 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00d      	beq.n	8006c12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c04:	d103      	bne.n	8006c0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e0aa      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c12:	897b      	ldrh	r3, [r7, #10]
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	461a      	mov	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006c20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c24:	6a3a      	ldr	r2, [r7, #32]
 8006c26:	4952      	ldr	r1, [pc, #328]	@ (8006d70 <I2C_RequestMemoryRead+0x1cc>)
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 f91d 	bl	8006e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e097      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c38:	2300      	movs	r3, #0
 8006c3a:	617b      	str	r3, [r7, #20]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	617b      	str	r3, [r7, #20]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	617b      	str	r3, [r7, #20]
 8006c4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c50:	6a39      	ldr	r1, [r7, #32]
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f9a8 	bl	8006fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00d      	beq.n	8006c7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d107      	bne.n	8006c76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e076      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c7a:	88fb      	ldrh	r3, [r7, #6]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d105      	bne.n	8006c8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c80:	893b      	ldrh	r3, [r7, #8]
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	611a      	str	r2, [r3, #16]
 8006c8a:	e021      	b.n	8006cd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c8c:	893b      	ldrh	r3, [r7, #8]
 8006c8e:	0a1b      	lsrs	r3, r3, #8
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c9c:	6a39      	ldr	r1, [r7, #32]
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 f982 	bl	8006fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00d      	beq.n	8006cc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	d107      	bne.n	8006cc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e050      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cc6:	893b      	ldrh	r3, [r7, #8]
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cd2:	6a39      	ldr	r1, [r7, #32]
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 f967 	bl	8006fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00d      	beq.n	8006cfc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce4:	2b04      	cmp	r3, #4
 8006ce6:	d107      	bne.n	8006cf8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cf6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e035      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 f82b 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00d      	beq.n	8006d40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d32:	d103      	bne.n	8006d3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e013      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d40:	897b      	ldrh	r3, [r7, #10]
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	f043 0301 	orr.w	r3, r3, #1
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d52:	6a3a      	ldr	r2, [r7, #32]
 8006d54:	4906      	ldr	r1, [pc, #24]	@ (8006d70 <I2C_RequestMemoryRead+0x1cc>)
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 f886 	bl	8006e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e000      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3718      	adds	r7, #24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	00010002 	.word	0x00010002

08006d74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	4613      	mov	r3, r2
 8006d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d84:	e048      	b.n	8006e18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8c:	d044      	beq.n	8006e18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d8e:	f7fe f897 	bl	8004ec0 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d302      	bcc.n	8006da4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d139      	bne.n	8006e18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	0c1b      	lsrs	r3, r3, #16
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d10d      	bne.n	8006dca <I2C_WaitOnFlagUntilTimeout+0x56>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	43da      	mvns	r2, r3
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	4013      	ands	r3, r2
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bf0c      	ite	eq
 8006dc0:	2301      	moveq	r3, #1
 8006dc2:	2300      	movne	r3, #0
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	e00c      	b.n	8006de4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	43da      	mvns	r2, r3
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	bf0c      	ite	eq
 8006ddc:	2301      	moveq	r3, #1
 8006dde:	2300      	movne	r3, #0
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	461a      	mov	r2, r3
 8006de4:	79fb      	ldrb	r3, [r7, #7]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d116      	bne.n	8006e18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e04:	f043 0220 	orr.w	r2, r3, #32
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e023      	b.n	8006e60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	0c1b      	lsrs	r3, r3, #16
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d10d      	bne.n	8006e3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	43da      	mvns	r2, r3
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	bf0c      	ite	eq
 8006e34:	2301      	moveq	r3, #1
 8006e36:	2300      	movne	r3, #0
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	e00c      	b.n	8006e58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	43da      	mvns	r2, r3
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	4013      	ands	r3, r2
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	bf0c      	ite	eq
 8006e50:	2301      	moveq	r3, #1
 8006e52:	2300      	movne	r3, #0
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	461a      	mov	r2, r3
 8006e58:	79fb      	ldrb	r3, [r7, #7]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d093      	beq.n	8006d86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e76:	e071      	b.n	8006f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e86:	d123      	bne.n	8006ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006ea0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ebc:	f043 0204 	orr.w	r2, r3, #4
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e067      	b.n	8006fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed6:	d041      	beq.n	8006f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ed8:	f7fd fff2 	bl	8004ec0 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d302      	bcc.n	8006eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d136      	bne.n	8006f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	0c1b      	lsrs	r3, r3, #16
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d10c      	bne.n	8006f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	43da      	mvns	r2, r3
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	4013      	ands	r3, r2
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	bf14      	ite	ne
 8006f0a:	2301      	movne	r3, #1
 8006f0c:	2300      	moveq	r3, #0
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	e00b      	b.n	8006f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	43da      	mvns	r2, r3
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	bf14      	ite	ne
 8006f24:	2301      	movne	r3, #1
 8006f26:	2300      	moveq	r3, #0
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d016      	beq.n	8006f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f48:	f043 0220 	orr.w	r2, r3, #32
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e021      	b.n	8006fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	0c1b      	lsrs	r3, r3, #16
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d10c      	bne.n	8006f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	43da      	mvns	r2, r3
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	4013      	ands	r3, r2
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	bf14      	ite	ne
 8006f78:	2301      	movne	r3, #1
 8006f7a:	2300      	moveq	r3, #0
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	e00b      	b.n	8006f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	43da      	mvns	r2, r3
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	bf14      	ite	ne
 8006f92:	2301      	movne	r3, #1
 8006f94:	2300      	moveq	r3, #0
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f47f af6d 	bne.w	8006e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fb4:	e034      	b.n	8007020 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 f8e3 	bl	8007182 <I2C_IsAcknowledgeFailed>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e034      	b.n	8007030 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fcc:	d028      	beq.n	8007020 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fce:	f7fd ff77 	bl	8004ec0 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d302      	bcc.n	8006fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d11d      	bne.n	8007020 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fee:	2b80      	cmp	r3, #128	@ 0x80
 8006ff0:	d016      	beq.n	8007020 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800700c:	f043 0220 	orr.w	r2, r3, #32
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e007      	b.n	8007030 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800702a:	2b80      	cmp	r3, #128	@ 0x80
 800702c:	d1c3      	bne.n	8006fb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007044:	e034      	b.n	80070b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 f89b 	bl	8007182 <I2C_IsAcknowledgeFailed>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e034      	b.n	80070c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705c:	d028      	beq.n	80070b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800705e:	f7fd ff2f 	bl	8004ec0 <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	429a      	cmp	r2, r3
 800706c:	d302      	bcc.n	8007074 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d11d      	bne.n	80070b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	f003 0304 	and.w	r3, r3, #4
 800707e:	2b04      	cmp	r3, #4
 8007080:	d016      	beq.n	80070b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2220      	movs	r2, #32
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709c:	f043 0220 	orr.w	r2, r3, #32
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e007      	b.n	80070c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	f003 0304 	and.w	r3, r3, #4
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	d1c3      	bne.n	8007046 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80070d4:	e049      	b.n	800716a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	f003 0310 	and.w	r3, r3, #16
 80070e0:	2b10      	cmp	r3, #16
 80070e2:	d119      	bne.n	8007118 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f06f 0210 	mvn.w	r2, #16
 80070ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2220      	movs	r2, #32
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e030      	b.n	800717a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007118:	f7fd fed2 	bl	8004ec0 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	429a      	cmp	r2, r3
 8007126:	d302      	bcc.n	800712e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d11d      	bne.n	800716a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007138:	2b40      	cmp	r3, #64	@ 0x40
 800713a:	d016      	beq.n	800716a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2220      	movs	r2, #32
 8007146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007156:	f043 0220 	orr.w	r2, r3, #32
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e007      	b.n	800717a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007174:	2b40      	cmp	r3, #64	@ 0x40
 8007176:	d1ae      	bne.n	80070d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007198:	d11b      	bne.n	80071d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80071a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2220      	movs	r2, #32
 80071ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071be:	f043 0204 	orr.w	r2, r3, #4
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e000      	b.n	80071d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e034      	b.n	800725c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80071fa:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f245 5255 	movw	r2, #21845	@ 0x5555
 8007204:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6852      	ldr	r2, [r2, #4]
 800720e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	6892      	ldr	r2, [r2, #8]
 8007218:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800721a:	f7fd fe51 	bl	8004ec0 <HAL_GetTick>
 800721e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007220:	e00f      	b.n	8007242 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007222:	f7fd fe4d 	bl	8004ec0 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b31      	cmp	r3, #49	@ 0x31
 800722e:	d908      	bls.n	8007242 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e00c      	b.n	800725c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f003 0303 	and.w	r3, r3, #3
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1e8      	bne.n	8007222 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8007258:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8007274:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e267      	b.n	8007766 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d075      	beq.n	800738e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80072a2:	4b88      	ldr	r3, [pc, #544]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 030c 	and.w	r3, r3, #12
 80072aa:	2b04      	cmp	r3, #4
 80072ac:	d00c      	beq.n	80072c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072ae:	4b85      	ldr	r3, [pc, #532]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80072b6:	2b08      	cmp	r3, #8
 80072b8:	d112      	bne.n	80072e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072ba:	4b82      	ldr	r3, [pc, #520]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072c6:	d10b      	bne.n	80072e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072c8:	4b7e      	ldr	r3, [pc, #504]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d05b      	beq.n	800738c <HAL_RCC_OscConfig+0x108>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d157      	bne.n	800738c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e242      	b.n	8007766 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072e8:	d106      	bne.n	80072f8 <HAL_RCC_OscConfig+0x74>
 80072ea:	4b76      	ldr	r3, [pc, #472]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a75      	ldr	r2, [pc, #468]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 80072f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	e01d      	b.n	8007334 <HAL_RCC_OscConfig+0xb0>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007300:	d10c      	bne.n	800731c <HAL_RCC_OscConfig+0x98>
 8007302:	4b70      	ldr	r3, [pc, #448]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a6f      	ldr	r2, [pc, #444]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 8007308:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	4b6d      	ldr	r3, [pc, #436]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a6c      	ldr	r2, [pc, #432]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 8007314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007318:	6013      	str	r3, [r2, #0]
 800731a:	e00b      	b.n	8007334 <HAL_RCC_OscConfig+0xb0>
 800731c:	4b69      	ldr	r3, [pc, #420]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a68      	ldr	r2, [pc, #416]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 8007322:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007326:	6013      	str	r3, [r2, #0]
 8007328:	4b66      	ldr	r3, [pc, #408]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a65      	ldr	r2, [pc, #404]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 800732e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d013      	beq.n	8007364 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800733c:	f7fd fdc0 	bl	8004ec0 <HAL_GetTick>
 8007340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007342:	e008      	b.n	8007356 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007344:	f7fd fdbc 	bl	8004ec0 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b64      	cmp	r3, #100	@ 0x64
 8007350:	d901      	bls.n	8007356 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e207      	b.n	8007766 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007356:	4b5b      	ldr	r3, [pc, #364]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0f0      	beq.n	8007344 <HAL_RCC_OscConfig+0xc0>
 8007362:	e014      	b.n	800738e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007364:	f7fd fdac 	bl	8004ec0 <HAL_GetTick>
 8007368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800736a:	e008      	b.n	800737e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800736c:	f7fd fda8 	bl	8004ec0 <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	2b64      	cmp	r3, #100	@ 0x64
 8007378:	d901      	bls.n	800737e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e1f3      	b.n	8007766 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800737e:	4b51      	ldr	r3, [pc, #324]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1f0      	bne.n	800736c <HAL_RCC_OscConfig+0xe8>
 800738a:	e000      	b.n	800738e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800738c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d063      	beq.n	8007462 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800739a:	4b4a      	ldr	r3, [pc, #296]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f003 030c 	and.w	r3, r3, #12
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00b      	beq.n	80073be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073a6:	4b47      	ldr	r3, [pc, #284]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80073ae:	2b08      	cmp	r3, #8
 80073b0:	d11c      	bne.n	80073ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073b2:	4b44      	ldr	r3, [pc, #272]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d116      	bne.n	80073ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073be:	4b41      	ldr	r3, [pc, #260]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0302 	and.w	r3, r3, #2
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d005      	beq.n	80073d6 <HAL_RCC_OscConfig+0x152>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d001      	beq.n	80073d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e1c7      	b.n	8007766 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073d6:	4b3b      	ldr	r3, [pc, #236]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	4937      	ldr	r1, [pc, #220]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073ea:	e03a      	b.n	8007462 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d020      	beq.n	8007436 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073f4:	4b34      	ldr	r3, [pc, #208]	@ (80074c8 <HAL_RCC_OscConfig+0x244>)
 80073f6:	2201      	movs	r2, #1
 80073f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073fa:	f7fd fd61 	bl	8004ec0 <HAL_GetTick>
 80073fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007400:	e008      	b.n	8007414 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007402:	f7fd fd5d 	bl	8004ec0 <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	2b02      	cmp	r3, #2
 800740e:	d901      	bls.n	8007414 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e1a8      	b.n	8007766 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007414:	4b2b      	ldr	r3, [pc, #172]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d0f0      	beq.n	8007402 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007420:	4b28      	ldr	r3, [pc, #160]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	00db      	lsls	r3, r3, #3
 800742e:	4925      	ldr	r1, [pc, #148]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 8007430:	4313      	orrs	r3, r2
 8007432:	600b      	str	r3, [r1, #0]
 8007434:	e015      	b.n	8007462 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007436:	4b24      	ldr	r3, [pc, #144]	@ (80074c8 <HAL_RCC_OscConfig+0x244>)
 8007438:	2200      	movs	r2, #0
 800743a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800743c:	f7fd fd40 	bl	8004ec0 <HAL_GetTick>
 8007440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007442:	e008      	b.n	8007456 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007444:	f7fd fd3c 	bl	8004ec0 <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b02      	cmp	r3, #2
 8007450:	d901      	bls.n	8007456 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e187      	b.n	8007766 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007456:	4b1b      	ldr	r3, [pc, #108]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1f0      	bne.n	8007444 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0308 	and.w	r3, r3, #8
 800746a:	2b00      	cmp	r3, #0
 800746c:	d036      	beq.n	80074dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d016      	beq.n	80074a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007476:	4b15      	ldr	r3, [pc, #84]	@ (80074cc <HAL_RCC_OscConfig+0x248>)
 8007478:	2201      	movs	r2, #1
 800747a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800747c:	f7fd fd20 	bl	8004ec0 <HAL_GetTick>
 8007480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007482:	e008      	b.n	8007496 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007484:	f7fd fd1c 	bl	8004ec0 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	2b02      	cmp	r3, #2
 8007490:	d901      	bls.n	8007496 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e167      	b.n	8007766 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007496:	4b0b      	ldr	r3, [pc, #44]	@ (80074c4 <HAL_RCC_OscConfig+0x240>)
 8007498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0f0      	beq.n	8007484 <HAL_RCC_OscConfig+0x200>
 80074a2:	e01b      	b.n	80074dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074a4:	4b09      	ldr	r3, [pc, #36]	@ (80074cc <HAL_RCC_OscConfig+0x248>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074aa:	f7fd fd09 	bl	8004ec0 <HAL_GetTick>
 80074ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074b0:	e00e      	b.n	80074d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074b2:	f7fd fd05 	bl	8004ec0 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d907      	bls.n	80074d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e150      	b.n	8007766 <HAL_RCC_OscConfig+0x4e2>
 80074c4:	40023800 	.word	0x40023800
 80074c8:	42470000 	.word	0x42470000
 80074cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074d0:	4b88      	ldr	r3, [pc, #544]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 80074d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074d4:	f003 0302 	and.w	r3, r3, #2
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1ea      	bne.n	80074b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0304 	and.w	r3, r3, #4
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 8097 	beq.w	8007618 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074ea:	2300      	movs	r3, #0
 80074ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074ee:	4b81      	ldr	r3, [pc, #516]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 80074f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10f      	bne.n	800751a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074fa:	2300      	movs	r3, #0
 80074fc:	60bb      	str	r3, [r7, #8]
 80074fe:	4b7d      	ldr	r3, [pc, #500]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 8007500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007502:	4a7c      	ldr	r2, [pc, #496]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 8007504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007508:	6413      	str	r3, [r2, #64]	@ 0x40
 800750a:	4b7a      	ldr	r3, [pc, #488]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 800750c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007512:	60bb      	str	r3, [r7, #8]
 8007514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007516:	2301      	movs	r3, #1
 8007518:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800751a:	4b77      	ldr	r3, [pc, #476]	@ (80076f8 <HAL_RCC_OscConfig+0x474>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007522:	2b00      	cmp	r3, #0
 8007524:	d118      	bne.n	8007558 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007526:	4b74      	ldr	r3, [pc, #464]	@ (80076f8 <HAL_RCC_OscConfig+0x474>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a73      	ldr	r2, [pc, #460]	@ (80076f8 <HAL_RCC_OscConfig+0x474>)
 800752c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007532:	f7fd fcc5 	bl	8004ec0 <HAL_GetTick>
 8007536:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007538:	e008      	b.n	800754c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800753a:	f7fd fcc1 	bl	8004ec0 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d901      	bls.n	800754c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e10c      	b.n	8007766 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800754c:	4b6a      	ldr	r3, [pc, #424]	@ (80076f8 <HAL_RCC_OscConfig+0x474>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007554:	2b00      	cmp	r3, #0
 8007556:	d0f0      	beq.n	800753a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d106      	bne.n	800756e <HAL_RCC_OscConfig+0x2ea>
 8007560:	4b64      	ldr	r3, [pc, #400]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 8007562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007564:	4a63      	ldr	r2, [pc, #396]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 8007566:	f043 0301 	orr.w	r3, r3, #1
 800756a:	6713      	str	r3, [r2, #112]	@ 0x70
 800756c:	e01c      	b.n	80075a8 <HAL_RCC_OscConfig+0x324>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	2b05      	cmp	r3, #5
 8007574:	d10c      	bne.n	8007590 <HAL_RCC_OscConfig+0x30c>
 8007576:	4b5f      	ldr	r3, [pc, #380]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 8007578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800757a:	4a5e      	ldr	r2, [pc, #376]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 800757c:	f043 0304 	orr.w	r3, r3, #4
 8007580:	6713      	str	r3, [r2, #112]	@ 0x70
 8007582:	4b5c      	ldr	r3, [pc, #368]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 8007584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007586:	4a5b      	ldr	r2, [pc, #364]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 8007588:	f043 0301 	orr.w	r3, r3, #1
 800758c:	6713      	str	r3, [r2, #112]	@ 0x70
 800758e:	e00b      	b.n	80075a8 <HAL_RCC_OscConfig+0x324>
 8007590:	4b58      	ldr	r3, [pc, #352]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 8007592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007594:	4a57      	ldr	r2, [pc, #348]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 8007596:	f023 0301 	bic.w	r3, r3, #1
 800759a:	6713      	str	r3, [r2, #112]	@ 0x70
 800759c:	4b55      	ldr	r3, [pc, #340]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 800759e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a0:	4a54      	ldr	r2, [pc, #336]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 80075a2:	f023 0304 	bic.w	r3, r3, #4
 80075a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d015      	beq.n	80075dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075b0:	f7fd fc86 	bl	8004ec0 <HAL_GetTick>
 80075b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075b6:	e00a      	b.n	80075ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075b8:	f7fd fc82 	bl	8004ec0 <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d901      	bls.n	80075ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e0cb      	b.n	8007766 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075ce:	4b49      	ldr	r3, [pc, #292]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 80075d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075d2:	f003 0302 	and.w	r3, r3, #2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d0ee      	beq.n	80075b8 <HAL_RCC_OscConfig+0x334>
 80075da:	e014      	b.n	8007606 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075dc:	f7fd fc70 	bl	8004ec0 <HAL_GetTick>
 80075e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075e2:	e00a      	b.n	80075fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075e4:	f7fd fc6c 	bl	8004ec0 <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d901      	bls.n	80075fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e0b5      	b.n	8007766 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075fa:	4b3e      	ldr	r3, [pc, #248]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 80075fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1ee      	bne.n	80075e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007606:	7dfb      	ldrb	r3, [r7, #23]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d105      	bne.n	8007618 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800760c:	4b39      	ldr	r3, [pc, #228]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 800760e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007610:	4a38      	ldr	r2, [pc, #224]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 8007612:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007616:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 80a1 	beq.w	8007764 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007622:	4b34      	ldr	r3, [pc, #208]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f003 030c 	and.w	r3, r3, #12
 800762a:	2b08      	cmp	r3, #8
 800762c:	d05c      	beq.n	80076e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	2b02      	cmp	r3, #2
 8007634:	d141      	bne.n	80076ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007636:	4b31      	ldr	r3, [pc, #196]	@ (80076fc <HAL_RCC_OscConfig+0x478>)
 8007638:	2200      	movs	r2, #0
 800763a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800763c:	f7fd fc40 	bl	8004ec0 <HAL_GetTick>
 8007640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007642:	e008      	b.n	8007656 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007644:	f7fd fc3c 	bl	8004ec0 <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b02      	cmp	r3, #2
 8007650:	d901      	bls.n	8007656 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e087      	b.n	8007766 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007656:	4b27      	ldr	r3, [pc, #156]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1f0      	bne.n	8007644 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	69da      	ldr	r2, [r3, #28]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	431a      	orrs	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007670:	019b      	lsls	r3, r3, #6
 8007672:	431a      	orrs	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007678:	085b      	lsrs	r3, r3, #1
 800767a:	3b01      	subs	r3, #1
 800767c:	041b      	lsls	r3, r3, #16
 800767e:	431a      	orrs	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007684:	061b      	lsls	r3, r3, #24
 8007686:	491b      	ldr	r1, [pc, #108]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 8007688:	4313      	orrs	r3, r2
 800768a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800768c:	4b1b      	ldr	r3, [pc, #108]	@ (80076fc <HAL_RCC_OscConfig+0x478>)
 800768e:	2201      	movs	r2, #1
 8007690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007692:	f7fd fc15 	bl	8004ec0 <HAL_GetTick>
 8007696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007698:	e008      	b.n	80076ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800769a:	f7fd fc11 	bl	8004ec0 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d901      	bls.n	80076ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e05c      	b.n	8007766 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076ac:	4b11      	ldr	r3, [pc, #68]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d0f0      	beq.n	800769a <HAL_RCC_OscConfig+0x416>
 80076b8:	e054      	b.n	8007764 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076ba:	4b10      	ldr	r3, [pc, #64]	@ (80076fc <HAL_RCC_OscConfig+0x478>)
 80076bc:	2200      	movs	r2, #0
 80076be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076c0:	f7fd fbfe 	bl	8004ec0 <HAL_GetTick>
 80076c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076c6:	e008      	b.n	80076da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076c8:	f7fd fbfa 	bl	8004ec0 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d901      	bls.n	80076da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e045      	b.n	8007766 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076da:	4b06      	ldr	r3, [pc, #24]	@ (80076f4 <HAL_RCC_OscConfig+0x470>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1f0      	bne.n	80076c8 <HAL_RCC_OscConfig+0x444>
 80076e6:	e03d      	b.n	8007764 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d107      	bne.n	8007700 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e038      	b.n	8007766 <HAL_RCC_OscConfig+0x4e2>
 80076f4:	40023800 	.word	0x40023800
 80076f8:	40007000 	.word	0x40007000
 80076fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007700:	4b1b      	ldr	r3, [pc, #108]	@ (8007770 <HAL_RCC_OscConfig+0x4ec>)
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d028      	beq.n	8007760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007718:	429a      	cmp	r2, r3
 800771a:	d121      	bne.n	8007760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007726:	429a      	cmp	r2, r3
 8007728:	d11a      	bne.n	8007760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007730:	4013      	ands	r3, r2
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007736:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007738:	4293      	cmp	r3, r2
 800773a:	d111      	bne.n	8007760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007746:	085b      	lsrs	r3, r3, #1
 8007748:	3b01      	subs	r3, #1
 800774a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800774c:	429a      	cmp	r2, r3
 800774e:	d107      	bne.n	8007760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800775c:	429a      	cmp	r2, r3
 800775e:	d001      	beq.n	8007764 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e000      	b.n	8007766 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3718      	adds	r7, #24
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	40023800 	.word	0x40023800

08007774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d101      	bne.n	8007788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e0cc      	b.n	8007922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007788:	4b68      	ldr	r3, [pc, #416]	@ (800792c <HAL_RCC_ClockConfig+0x1b8>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0307 	and.w	r3, r3, #7
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	429a      	cmp	r2, r3
 8007794:	d90c      	bls.n	80077b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007796:	4b65      	ldr	r3, [pc, #404]	@ (800792c <HAL_RCC_ClockConfig+0x1b8>)
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	b2d2      	uxtb	r2, r2
 800779c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800779e:	4b63      	ldr	r3, [pc, #396]	@ (800792c <HAL_RCC_ClockConfig+0x1b8>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0307 	and.w	r3, r3, #7
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d001      	beq.n	80077b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e0b8      	b.n	8007922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d020      	beq.n	80077fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d005      	beq.n	80077d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077c8:	4b59      	ldr	r3, [pc, #356]	@ (8007930 <HAL_RCC_ClockConfig+0x1bc>)
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	4a58      	ldr	r2, [pc, #352]	@ (8007930 <HAL_RCC_ClockConfig+0x1bc>)
 80077ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80077d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0308 	and.w	r3, r3, #8
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d005      	beq.n	80077ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80077e0:	4b53      	ldr	r3, [pc, #332]	@ (8007930 <HAL_RCC_ClockConfig+0x1bc>)
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	4a52      	ldr	r2, [pc, #328]	@ (8007930 <HAL_RCC_ClockConfig+0x1bc>)
 80077e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80077ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077ec:	4b50      	ldr	r3, [pc, #320]	@ (8007930 <HAL_RCC_ClockConfig+0x1bc>)
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	494d      	ldr	r1, [pc, #308]	@ (8007930 <HAL_RCC_ClockConfig+0x1bc>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d044      	beq.n	8007894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d107      	bne.n	8007822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007812:	4b47      	ldr	r3, [pc, #284]	@ (8007930 <HAL_RCC_ClockConfig+0x1bc>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d119      	bne.n	8007852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e07f      	b.n	8007922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	2b02      	cmp	r3, #2
 8007828:	d003      	beq.n	8007832 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800782e:	2b03      	cmp	r3, #3
 8007830:	d107      	bne.n	8007842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007832:	4b3f      	ldr	r3, [pc, #252]	@ (8007930 <HAL_RCC_ClockConfig+0x1bc>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d109      	bne.n	8007852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e06f      	b.n	8007922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007842:	4b3b      	ldr	r3, [pc, #236]	@ (8007930 <HAL_RCC_ClockConfig+0x1bc>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e067      	b.n	8007922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007852:	4b37      	ldr	r3, [pc, #220]	@ (8007930 <HAL_RCC_ClockConfig+0x1bc>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f023 0203 	bic.w	r2, r3, #3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	4934      	ldr	r1, [pc, #208]	@ (8007930 <HAL_RCC_ClockConfig+0x1bc>)
 8007860:	4313      	orrs	r3, r2
 8007862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007864:	f7fd fb2c 	bl	8004ec0 <HAL_GetTick>
 8007868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800786a:	e00a      	b.n	8007882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800786c:	f7fd fb28 	bl	8004ec0 <HAL_GetTick>
 8007870:	4602      	mov	r2, r0
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800787a:	4293      	cmp	r3, r2
 800787c:	d901      	bls.n	8007882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e04f      	b.n	8007922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007882:	4b2b      	ldr	r3, [pc, #172]	@ (8007930 <HAL_RCC_ClockConfig+0x1bc>)
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f003 020c 	and.w	r2, r3, #12
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	429a      	cmp	r2, r3
 8007892:	d1eb      	bne.n	800786c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007894:	4b25      	ldr	r3, [pc, #148]	@ (800792c <HAL_RCC_ClockConfig+0x1b8>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0307 	and.w	r3, r3, #7
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d20c      	bcs.n	80078bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078a2:	4b22      	ldr	r3, [pc, #136]	@ (800792c <HAL_RCC_ClockConfig+0x1b8>)
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	b2d2      	uxtb	r2, r2
 80078a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078aa:	4b20      	ldr	r3, [pc, #128]	@ (800792c <HAL_RCC_ClockConfig+0x1b8>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0307 	and.w	r3, r3, #7
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d001      	beq.n	80078bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e032      	b.n	8007922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d008      	beq.n	80078da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078c8:	4b19      	ldr	r3, [pc, #100]	@ (8007930 <HAL_RCC_ClockConfig+0x1bc>)
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	4916      	ldr	r1, [pc, #88]	@ (8007930 <HAL_RCC_ClockConfig+0x1bc>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0308 	and.w	r3, r3, #8
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d009      	beq.n	80078fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078e6:	4b12      	ldr	r3, [pc, #72]	@ (8007930 <HAL_RCC_ClockConfig+0x1bc>)
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	00db      	lsls	r3, r3, #3
 80078f4:	490e      	ldr	r1, [pc, #56]	@ (8007930 <HAL_RCC_ClockConfig+0x1bc>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80078fa:	f000 f821 	bl	8007940 <HAL_RCC_GetSysClockFreq>
 80078fe:	4602      	mov	r2, r0
 8007900:	4b0b      	ldr	r3, [pc, #44]	@ (8007930 <HAL_RCC_ClockConfig+0x1bc>)
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	091b      	lsrs	r3, r3, #4
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	490a      	ldr	r1, [pc, #40]	@ (8007934 <HAL_RCC_ClockConfig+0x1c0>)
 800790c:	5ccb      	ldrb	r3, [r1, r3]
 800790e:	fa22 f303 	lsr.w	r3, r2, r3
 8007912:	4a09      	ldr	r2, [pc, #36]	@ (8007938 <HAL_RCC_ClockConfig+0x1c4>)
 8007914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007916:	4b09      	ldr	r3, [pc, #36]	@ (800793c <HAL_RCC_ClockConfig+0x1c8>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4618      	mov	r0, r3
 800791c:	f7fd f8cc 	bl	8004ab8 <HAL_InitTick>

  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	40023c00 	.word	0x40023c00
 8007930:	40023800 	.word	0x40023800
 8007934:	080102c0 	.word	0x080102c0
 8007938:	20000024 	.word	0x20000024
 800793c:	20000028 	.word	0x20000028

08007940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007944:	b094      	sub	sp, #80	@ 0x50
 8007946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007948:	2300      	movs	r3, #0
 800794a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007950:	2300      	movs	r3, #0
 8007952:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007958:	4b79      	ldr	r3, [pc, #484]	@ (8007b40 <HAL_RCC_GetSysClockFreq+0x200>)
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f003 030c 	and.w	r3, r3, #12
 8007960:	2b08      	cmp	r3, #8
 8007962:	d00d      	beq.n	8007980 <HAL_RCC_GetSysClockFreq+0x40>
 8007964:	2b08      	cmp	r3, #8
 8007966:	f200 80e1 	bhi.w	8007b2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d002      	beq.n	8007974 <HAL_RCC_GetSysClockFreq+0x34>
 800796e:	2b04      	cmp	r3, #4
 8007970:	d003      	beq.n	800797a <HAL_RCC_GetSysClockFreq+0x3a>
 8007972:	e0db      	b.n	8007b2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007974:	4b73      	ldr	r3, [pc, #460]	@ (8007b44 <HAL_RCC_GetSysClockFreq+0x204>)
 8007976:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007978:	e0db      	b.n	8007b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800797a:	4b73      	ldr	r3, [pc, #460]	@ (8007b48 <HAL_RCC_GetSysClockFreq+0x208>)
 800797c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800797e:	e0d8      	b.n	8007b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007980:	4b6f      	ldr	r3, [pc, #444]	@ (8007b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007988:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800798a:	4b6d      	ldr	r3, [pc, #436]	@ (8007b40 <HAL_RCC_GetSysClockFreq+0x200>)
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d063      	beq.n	8007a5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007996:	4b6a      	ldr	r3, [pc, #424]	@ (8007b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	099b      	lsrs	r3, r3, #6
 800799c:	2200      	movs	r2, #0
 800799e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80079a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80079aa:	2300      	movs	r3, #0
 80079ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80079b2:	4622      	mov	r2, r4
 80079b4:	462b      	mov	r3, r5
 80079b6:	f04f 0000 	mov.w	r0, #0
 80079ba:	f04f 0100 	mov.w	r1, #0
 80079be:	0159      	lsls	r1, r3, #5
 80079c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079c4:	0150      	lsls	r0, r2, #5
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4621      	mov	r1, r4
 80079cc:	1a51      	subs	r1, r2, r1
 80079ce:	6139      	str	r1, [r7, #16]
 80079d0:	4629      	mov	r1, r5
 80079d2:	eb63 0301 	sbc.w	r3, r3, r1
 80079d6:	617b      	str	r3, [r7, #20]
 80079d8:	f04f 0200 	mov.w	r2, #0
 80079dc:	f04f 0300 	mov.w	r3, #0
 80079e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079e4:	4659      	mov	r1, fp
 80079e6:	018b      	lsls	r3, r1, #6
 80079e8:	4651      	mov	r1, sl
 80079ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80079ee:	4651      	mov	r1, sl
 80079f0:	018a      	lsls	r2, r1, #6
 80079f2:	4651      	mov	r1, sl
 80079f4:	ebb2 0801 	subs.w	r8, r2, r1
 80079f8:	4659      	mov	r1, fp
 80079fa:	eb63 0901 	sbc.w	r9, r3, r1
 80079fe:	f04f 0200 	mov.w	r2, #0
 8007a02:	f04f 0300 	mov.w	r3, #0
 8007a06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a12:	4690      	mov	r8, r2
 8007a14:	4699      	mov	r9, r3
 8007a16:	4623      	mov	r3, r4
 8007a18:	eb18 0303 	adds.w	r3, r8, r3
 8007a1c:	60bb      	str	r3, [r7, #8]
 8007a1e:	462b      	mov	r3, r5
 8007a20:	eb49 0303 	adc.w	r3, r9, r3
 8007a24:	60fb      	str	r3, [r7, #12]
 8007a26:	f04f 0200 	mov.w	r2, #0
 8007a2a:	f04f 0300 	mov.w	r3, #0
 8007a2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007a32:	4629      	mov	r1, r5
 8007a34:	024b      	lsls	r3, r1, #9
 8007a36:	4621      	mov	r1, r4
 8007a38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007a3c:	4621      	mov	r1, r4
 8007a3e:	024a      	lsls	r2, r1, #9
 8007a40:	4610      	mov	r0, r2
 8007a42:	4619      	mov	r1, r3
 8007a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a46:	2200      	movs	r2, #0
 8007a48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007a50:	f7f9 f8dc 	bl	8000c0c <__aeabi_uldivmod>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	4613      	mov	r3, r2
 8007a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a5c:	e058      	b.n	8007b10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a5e:	4b38      	ldr	r3, [pc, #224]	@ (8007b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	099b      	lsrs	r3, r3, #6
 8007a64:	2200      	movs	r2, #0
 8007a66:	4618      	mov	r0, r3
 8007a68:	4611      	mov	r1, r2
 8007a6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007a6e:	623b      	str	r3, [r7, #32]
 8007a70:	2300      	movs	r3, #0
 8007a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007a78:	4642      	mov	r2, r8
 8007a7a:	464b      	mov	r3, r9
 8007a7c:	f04f 0000 	mov.w	r0, #0
 8007a80:	f04f 0100 	mov.w	r1, #0
 8007a84:	0159      	lsls	r1, r3, #5
 8007a86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a8a:	0150      	lsls	r0, r2, #5
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4641      	mov	r1, r8
 8007a92:	ebb2 0a01 	subs.w	sl, r2, r1
 8007a96:	4649      	mov	r1, r9
 8007a98:	eb63 0b01 	sbc.w	fp, r3, r1
 8007a9c:	f04f 0200 	mov.w	r2, #0
 8007aa0:	f04f 0300 	mov.w	r3, #0
 8007aa4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007aa8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007aac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007ab0:	ebb2 040a 	subs.w	r4, r2, sl
 8007ab4:	eb63 050b 	sbc.w	r5, r3, fp
 8007ab8:	f04f 0200 	mov.w	r2, #0
 8007abc:	f04f 0300 	mov.w	r3, #0
 8007ac0:	00eb      	lsls	r3, r5, #3
 8007ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ac6:	00e2      	lsls	r2, r4, #3
 8007ac8:	4614      	mov	r4, r2
 8007aca:	461d      	mov	r5, r3
 8007acc:	4643      	mov	r3, r8
 8007ace:	18e3      	adds	r3, r4, r3
 8007ad0:	603b      	str	r3, [r7, #0]
 8007ad2:	464b      	mov	r3, r9
 8007ad4:	eb45 0303 	adc.w	r3, r5, r3
 8007ad8:	607b      	str	r3, [r7, #4]
 8007ada:	f04f 0200 	mov.w	r2, #0
 8007ade:	f04f 0300 	mov.w	r3, #0
 8007ae2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	028b      	lsls	r3, r1, #10
 8007aea:	4621      	mov	r1, r4
 8007aec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007af0:	4621      	mov	r1, r4
 8007af2:	028a      	lsls	r2, r1, #10
 8007af4:	4610      	mov	r0, r2
 8007af6:	4619      	mov	r1, r3
 8007af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007afa:	2200      	movs	r2, #0
 8007afc:	61bb      	str	r3, [r7, #24]
 8007afe:	61fa      	str	r2, [r7, #28]
 8007b00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b04:	f7f9 f882 	bl	8000c0c <__aeabi_uldivmod>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007b10:	4b0b      	ldr	r3, [pc, #44]	@ (8007b40 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	0c1b      	lsrs	r3, r3, #16
 8007b16:	f003 0303 	and.w	r3, r3, #3
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	005b      	lsls	r3, r3, #1
 8007b1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007b20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b2a:	e002      	b.n	8007b32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b2c:	4b05      	ldr	r3, [pc, #20]	@ (8007b44 <HAL_RCC_GetSysClockFreq+0x204>)
 8007b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3750      	adds	r7, #80	@ 0x50
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b3e:	bf00      	nop
 8007b40:	40023800 	.word	0x40023800
 8007b44:	00f42400 	.word	0x00f42400
 8007b48:	007a1200 	.word	0x007a1200

08007b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b50:	4b03      	ldr	r3, [pc, #12]	@ (8007b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b52:	681b      	ldr	r3, [r3, #0]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	20000024 	.word	0x20000024

08007b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b68:	f7ff fff0 	bl	8007b4c <HAL_RCC_GetHCLKFreq>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	4b05      	ldr	r3, [pc, #20]	@ (8007b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	0a9b      	lsrs	r3, r3, #10
 8007b74:	f003 0307 	and.w	r3, r3, #7
 8007b78:	4903      	ldr	r1, [pc, #12]	@ (8007b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b7a:	5ccb      	ldrb	r3, [r1, r3]
 8007b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	40023800 	.word	0x40023800
 8007b88:	080102d0 	.word	0x080102d0

08007b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b90:	f7ff ffdc 	bl	8007b4c <HAL_RCC_GetHCLKFreq>
 8007b94:	4602      	mov	r2, r0
 8007b96:	4b05      	ldr	r3, [pc, #20]	@ (8007bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	0b5b      	lsrs	r3, r3, #13
 8007b9c:	f003 0307 	and.w	r3, r3, #7
 8007ba0:	4903      	ldr	r1, [pc, #12]	@ (8007bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ba2:	5ccb      	ldrb	r3, [r1, r3]
 8007ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	40023800 	.word	0x40023800
 8007bb0:	080102d0 	.word	0x080102d0

08007bb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	220f      	movs	r2, #15
 8007bc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007bc4:	4b12      	ldr	r3, [pc, #72]	@ (8007c10 <HAL_RCC_GetClockConfig+0x5c>)
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f003 0203 	and.w	r2, r3, #3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8007c10 <HAL_RCC_GetClockConfig+0x5c>)
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8007c10 <HAL_RCC_GetClockConfig+0x5c>)
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007be8:	4b09      	ldr	r3, [pc, #36]	@ (8007c10 <HAL_RCC_GetClockConfig+0x5c>)
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	08db      	lsrs	r3, r3, #3
 8007bee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007bf6:	4b07      	ldr	r3, [pc, #28]	@ (8007c14 <HAL_RCC_GetClockConfig+0x60>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0207 	and.w	r2, r3, #7
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	601a      	str	r2, [r3, #0]
}
 8007c02:	bf00      	nop
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	40023800 	.word	0x40023800
 8007c14:	40023c00 	.word	0x40023c00

08007c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d101      	bne.n	8007c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e041      	b.n	8007cae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d106      	bne.n	8007c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f839 	bl	8007cb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2202      	movs	r2, #2
 8007c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	3304      	adds	r3, #4
 8007c54:	4619      	mov	r1, r3
 8007c56:	4610      	mov	r0, r2
 8007c58:	f000 fa88 	bl	800816c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
	...

08007ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d001      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e04e      	b.n	8007d82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68da      	ldr	r2, [r3, #12]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f042 0201 	orr.w	r2, r2, #1
 8007cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a23      	ldr	r2, [pc, #140]	@ (8007d90 <HAL_TIM_Base_Start_IT+0xc4>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d022      	beq.n	8007d4c <HAL_TIM_Base_Start_IT+0x80>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d0e:	d01d      	beq.n	8007d4c <HAL_TIM_Base_Start_IT+0x80>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a1f      	ldr	r2, [pc, #124]	@ (8007d94 <HAL_TIM_Base_Start_IT+0xc8>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d018      	beq.n	8007d4c <HAL_TIM_Base_Start_IT+0x80>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8007d98 <HAL_TIM_Base_Start_IT+0xcc>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d013      	beq.n	8007d4c <HAL_TIM_Base_Start_IT+0x80>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a1c      	ldr	r2, [pc, #112]	@ (8007d9c <HAL_TIM_Base_Start_IT+0xd0>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d00e      	beq.n	8007d4c <HAL_TIM_Base_Start_IT+0x80>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a1b      	ldr	r2, [pc, #108]	@ (8007da0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d009      	beq.n	8007d4c <HAL_TIM_Base_Start_IT+0x80>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a19      	ldr	r2, [pc, #100]	@ (8007da4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d004      	beq.n	8007d4c <HAL_TIM_Base_Start_IT+0x80>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a18      	ldr	r2, [pc, #96]	@ (8007da8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d111      	bne.n	8007d70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2b06      	cmp	r3, #6
 8007d5c:	d010      	beq.n	8007d80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f042 0201 	orr.w	r2, r2, #1
 8007d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d6e:	e007      	b.n	8007d80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f042 0201 	orr.w	r2, r2, #1
 8007d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	40010000 	.word	0x40010000
 8007d94:	40000400 	.word	0x40000400
 8007d98:	40000800 	.word	0x40000800
 8007d9c:	40000c00 	.word	0x40000c00
 8007da0:	40010400 	.word	0x40010400
 8007da4:	40014000 	.word	0x40014000
 8007da8:	40001800 	.word	0x40001800

08007dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	f003 0302 	and.w	r3, r3, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d020      	beq.n	8007e10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f003 0302 	and.w	r3, r3, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d01b      	beq.n	8007e10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f06f 0202 	mvn.w	r2, #2
 8007de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	f003 0303 	and.w	r3, r3, #3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d003      	beq.n	8007dfe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f999 	bl	800812e <HAL_TIM_IC_CaptureCallback>
 8007dfc:	e005      	b.n	8007e0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f98b 	bl	800811a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f99c 	bl	8008142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	f003 0304 	and.w	r3, r3, #4
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d020      	beq.n	8007e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f003 0304 	and.w	r3, r3, #4
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d01b      	beq.n	8007e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f06f 0204 	mvn.w	r2, #4
 8007e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2202      	movs	r2, #2
 8007e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d003      	beq.n	8007e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f973 	bl	800812e <HAL_TIM_IC_CaptureCallback>
 8007e48:	e005      	b.n	8007e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f965 	bl	800811a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f976 	bl	8008142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f003 0308 	and.w	r3, r3, #8
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d020      	beq.n	8007ea8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f003 0308 	and.w	r3, r3, #8
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01b      	beq.n	8007ea8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f06f 0208 	mvn.w	r2, #8
 8007e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2204      	movs	r2, #4
 8007e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f94d 	bl	800812e <HAL_TIM_IC_CaptureCallback>
 8007e94:	e005      	b.n	8007ea2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f93f 	bl	800811a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f950 	bl	8008142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f003 0310 	and.w	r3, r3, #16
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d020      	beq.n	8007ef4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f003 0310 	and.w	r3, r3, #16
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d01b      	beq.n	8007ef4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f06f 0210 	mvn.w	r2, #16
 8007ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2208      	movs	r2, #8
 8007eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	69db      	ldr	r3, [r3, #28]
 8007ed2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d003      	beq.n	8007ee2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f927 	bl	800812e <HAL_TIM_IC_CaptureCallback>
 8007ee0:	e005      	b.n	8007eee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f919 	bl	800811a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f92a 	bl	8008142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00c      	beq.n	8007f18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d007      	beq.n	8007f18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f06f 0201 	mvn.w	r2, #1
 8007f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7fb fdc8 	bl	8003aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00c      	beq.n	8007f3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d007      	beq.n	8007f3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fae4 	bl	8008504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00c      	beq.n	8007f60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d007      	beq.n	8007f60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f8fb 	bl	8008156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f003 0320 	and.w	r3, r3, #32
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00c      	beq.n	8007f84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f003 0320 	and.w	r3, r3, #32
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d007      	beq.n	8007f84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f06f 0220 	mvn.w	r2, #32
 8007f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fab6 	bl	80084f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f84:	bf00      	nop
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d101      	bne.n	8007fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	e0b4      	b.n	8008112 <HAL_TIM_ConfigClockSource+0x186>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fe0:	d03e      	beq.n	8008060 <HAL_TIM_ConfigClockSource+0xd4>
 8007fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fe6:	f200 8087 	bhi.w	80080f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fee:	f000 8086 	beq.w	80080fe <HAL_TIM_ConfigClockSource+0x172>
 8007ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ff6:	d87f      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff8:	2b70      	cmp	r3, #112	@ 0x70
 8007ffa:	d01a      	beq.n	8008032 <HAL_TIM_ConfigClockSource+0xa6>
 8007ffc:	2b70      	cmp	r3, #112	@ 0x70
 8007ffe:	d87b      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008000:	2b60      	cmp	r3, #96	@ 0x60
 8008002:	d050      	beq.n	80080a6 <HAL_TIM_ConfigClockSource+0x11a>
 8008004:	2b60      	cmp	r3, #96	@ 0x60
 8008006:	d877      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008008:	2b50      	cmp	r3, #80	@ 0x50
 800800a:	d03c      	beq.n	8008086 <HAL_TIM_ConfigClockSource+0xfa>
 800800c:	2b50      	cmp	r3, #80	@ 0x50
 800800e:	d873      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008010:	2b40      	cmp	r3, #64	@ 0x40
 8008012:	d058      	beq.n	80080c6 <HAL_TIM_ConfigClockSource+0x13a>
 8008014:	2b40      	cmp	r3, #64	@ 0x40
 8008016:	d86f      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008018:	2b30      	cmp	r3, #48	@ 0x30
 800801a:	d064      	beq.n	80080e6 <HAL_TIM_ConfigClockSource+0x15a>
 800801c:	2b30      	cmp	r3, #48	@ 0x30
 800801e:	d86b      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008020:	2b20      	cmp	r3, #32
 8008022:	d060      	beq.n	80080e6 <HAL_TIM_ConfigClockSource+0x15a>
 8008024:	2b20      	cmp	r3, #32
 8008026:	d867      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008028:	2b00      	cmp	r3, #0
 800802a:	d05c      	beq.n	80080e6 <HAL_TIM_ConfigClockSource+0x15a>
 800802c:	2b10      	cmp	r3, #16
 800802e:	d05a      	beq.n	80080e6 <HAL_TIM_ConfigClockSource+0x15a>
 8008030:	e062      	b.n	80080f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008042:	f000 f9b9 	bl	80083b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008054:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	609a      	str	r2, [r3, #8]
      break;
 800805e:	e04f      	b.n	8008100 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008070:	f000 f9a2 	bl	80083b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689a      	ldr	r2, [r3, #8]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008082:	609a      	str	r2, [r3, #8]
      break;
 8008084:	e03c      	b.n	8008100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008092:	461a      	mov	r2, r3
 8008094:	f000 f916 	bl	80082c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2150      	movs	r1, #80	@ 0x50
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 f96f 	bl	8008382 <TIM_ITRx_SetConfig>
      break;
 80080a4:	e02c      	b.n	8008100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080b2:	461a      	mov	r2, r3
 80080b4:	f000 f935 	bl	8008322 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2160      	movs	r1, #96	@ 0x60
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 f95f 	bl	8008382 <TIM_ITRx_SetConfig>
      break;
 80080c4:	e01c      	b.n	8008100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080d2:	461a      	mov	r2, r3
 80080d4:	f000 f8f6 	bl	80082c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2140      	movs	r1, #64	@ 0x40
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 f94f 	bl	8008382 <TIM_ITRx_SetConfig>
      break;
 80080e4:	e00c      	b.n	8008100 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4619      	mov	r1, r3
 80080f0:	4610      	mov	r0, r2
 80080f2:	f000 f946 	bl	8008382 <TIM_ITRx_SetConfig>
      break;
 80080f6:	e003      	b.n	8008100 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	73fb      	strb	r3, [r7, #15]
      break;
 80080fc:	e000      	b.n	8008100 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008110:	7bfb      	ldrb	r3, [r7, #15]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800811a:	b480      	push	{r7}
 800811c:	b083      	sub	sp, #12
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008122:	bf00      	nop
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800812e:	b480      	push	{r7}
 8008130:	b083      	sub	sp, #12
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008136:	bf00      	nop
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008142:	b480      	push	{r7}
 8008144:	b083      	sub	sp, #12
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800814a:	bf00      	nop
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008156:	b480      	push	{r7}
 8008158:	b083      	sub	sp, #12
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800815e:	bf00      	nop
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
	...

0800816c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a46      	ldr	r2, [pc, #280]	@ (8008298 <TIM_Base_SetConfig+0x12c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d013      	beq.n	80081ac <TIM_Base_SetConfig+0x40>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800818a:	d00f      	beq.n	80081ac <TIM_Base_SetConfig+0x40>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a43      	ldr	r2, [pc, #268]	@ (800829c <TIM_Base_SetConfig+0x130>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d00b      	beq.n	80081ac <TIM_Base_SetConfig+0x40>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a42      	ldr	r2, [pc, #264]	@ (80082a0 <TIM_Base_SetConfig+0x134>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d007      	beq.n	80081ac <TIM_Base_SetConfig+0x40>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a41      	ldr	r2, [pc, #260]	@ (80082a4 <TIM_Base_SetConfig+0x138>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d003      	beq.n	80081ac <TIM_Base_SetConfig+0x40>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a40      	ldr	r2, [pc, #256]	@ (80082a8 <TIM_Base_SetConfig+0x13c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d108      	bne.n	80081be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a35      	ldr	r2, [pc, #212]	@ (8008298 <TIM_Base_SetConfig+0x12c>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d02b      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081cc:	d027      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a32      	ldr	r2, [pc, #200]	@ (800829c <TIM_Base_SetConfig+0x130>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d023      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a31      	ldr	r2, [pc, #196]	@ (80082a0 <TIM_Base_SetConfig+0x134>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d01f      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a30      	ldr	r2, [pc, #192]	@ (80082a4 <TIM_Base_SetConfig+0x138>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d01b      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a2f      	ldr	r2, [pc, #188]	@ (80082a8 <TIM_Base_SetConfig+0x13c>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d017      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a2e      	ldr	r2, [pc, #184]	@ (80082ac <TIM_Base_SetConfig+0x140>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d013      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a2d      	ldr	r2, [pc, #180]	@ (80082b0 <TIM_Base_SetConfig+0x144>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d00f      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a2c      	ldr	r2, [pc, #176]	@ (80082b4 <TIM_Base_SetConfig+0x148>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d00b      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a2b      	ldr	r2, [pc, #172]	@ (80082b8 <TIM_Base_SetConfig+0x14c>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d007      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a2a      	ldr	r2, [pc, #168]	@ (80082bc <TIM_Base_SetConfig+0x150>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d003      	beq.n	800821e <TIM_Base_SetConfig+0xb2>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a29      	ldr	r2, [pc, #164]	@ (80082c0 <TIM_Base_SetConfig+0x154>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d108      	bne.n	8008230 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	4313      	orrs	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	689a      	ldr	r2, [r3, #8]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a10      	ldr	r2, [pc, #64]	@ (8008298 <TIM_Base_SetConfig+0x12c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d003      	beq.n	8008264 <TIM_Base_SetConfig+0xf8>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a12      	ldr	r2, [pc, #72]	@ (80082a8 <TIM_Base_SetConfig+0x13c>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d103      	bne.n	800826c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	691a      	ldr	r2, [r3, #16]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	2b01      	cmp	r3, #1
 800827c:	d105      	bne.n	800828a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	f023 0201 	bic.w	r2, r3, #1
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	611a      	str	r2, [r3, #16]
  }
}
 800828a:	bf00      	nop
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	40010000 	.word	0x40010000
 800829c:	40000400 	.word	0x40000400
 80082a0:	40000800 	.word	0x40000800
 80082a4:	40000c00 	.word	0x40000c00
 80082a8:	40010400 	.word	0x40010400
 80082ac:	40014000 	.word	0x40014000
 80082b0:	40014400 	.word	0x40014400
 80082b4:	40014800 	.word	0x40014800
 80082b8:	40001800 	.word	0x40001800
 80082bc:	40001c00 	.word	0x40001c00
 80082c0:	40002000 	.word	0x40002000

080082c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b087      	sub	sp, #28
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6a1b      	ldr	r3, [r3, #32]
 80082d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6a1b      	ldr	r3, [r3, #32]
 80082da:	f023 0201 	bic.w	r2, r3, #1
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80082ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	011b      	lsls	r3, r3, #4
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f023 030a 	bic.w	r3, r3, #10
 8008300:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	4313      	orrs	r3, r2
 8008308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	697a      	ldr	r2, [r7, #20]
 8008314:	621a      	str	r2, [r3, #32]
}
 8008316:	bf00      	nop
 8008318:	371c      	adds	r7, #28
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008322:	b480      	push	{r7}
 8008324:	b087      	sub	sp, #28
 8008326:	af00      	add	r7, sp, #0
 8008328:	60f8      	str	r0, [r7, #12]
 800832a:	60b9      	str	r1, [r7, #8]
 800832c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6a1b      	ldr	r3, [r3, #32]
 8008332:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6a1b      	ldr	r3, [r3, #32]
 8008338:	f023 0210 	bic.w	r2, r3, #16
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800834c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	031b      	lsls	r3, r3, #12
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	4313      	orrs	r3, r2
 8008356:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800835e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	011b      	lsls	r3, r3, #4
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	4313      	orrs	r3, r2
 8008368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	621a      	str	r2, [r3, #32]
}
 8008376:	bf00      	nop
 8008378:	371c      	adds	r7, #28
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008382:	b480      	push	{r7}
 8008384:	b085      	sub	sp, #20
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008398:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4313      	orrs	r3, r2
 80083a0:	f043 0307 	orr.w	r3, r3, #7
 80083a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	609a      	str	r2, [r3, #8]
}
 80083ac:	bf00      	nop
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	021a      	lsls	r2, r3, #8
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	431a      	orrs	r2, r3
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	4313      	orrs	r3, r2
 80083e0:	697a      	ldr	r2, [r7, #20]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	697a      	ldr	r2, [r7, #20]
 80083ea:	609a      	str	r2, [r3, #8]
}
 80083ec:	bf00      	nop
 80083ee:	371c      	adds	r7, #28
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008408:	2b01      	cmp	r3, #1
 800840a:	d101      	bne.n	8008410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800840c:	2302      	movs	r3, #2
 800840e:	e05a      	b.n	80084c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	4313      	orrs	r3, r2
 8008440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a21      	ldr	r2, [pc, #132]	@ (80084d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d022      	beq.n	800849a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800845c:	d01d      	beq.n	800849a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a1d      	ldr	r2, [pc, #116]	@ (80084d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d018      	beq.n	800849a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a1b      	ldr	r2, [pc, #108]	@ (80084dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d013      	beq.n	800849a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a1a      	ldr	r2, [pc, #104]	@ (80084e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d00e      	beq.n	800849a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a18      	ldr	r2, [pc, #96]	@ (80084e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d009      	beq.n	800849a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a17      	ldr	r2, [pc, #92]	@ (80084e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d004      	beq.n	800849a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a15      	ldr	r2, [pc, #84]	@ (80084ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d10c      	bne.n	80084b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	68ba      	ldr	r2, [r7, #8]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3714      	adds	r7, #20
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	40010000 	.word	0x40010000
 80084d8:	40000400 	.word	0x40000400
 80084dc:	40000800 	.word	0x40000800
 80084e0:	40000c00 	.word	0x40000c00
 80084e4:	40010400 	.word	0x40010400
 80084e8:	40014000 	.word	0x40014000
 80084ec:	40001800 	.word	0x40001800

080084f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084f8:	bf00      	nop
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e042      	b.n	80085b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d106      	bne.n	8008544 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7fc f91a 	bl	8004778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2224      	movs	r2, #36	@ 0x24
 8008548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68da      	ldr	r2, [r3, #12]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800855a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f001 f825 	bl	80095ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	691a      	ldr	r2, [r3, #16]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008570:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	695a      	ldr	r2, [r3, #20]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008580:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68da      	ldr	r2, [r3, #12]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008590:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2220      	movs	r2, #32
 800859c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2220      	movs	r2, #32
 80085a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b08a      	sub	sp, #40	@ 0x28
 80085bc:	af02      	add	r7, sp, #8
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	603b      	str	r3, [r7, #0]
 80085c4:	4613      	mov	r3, r2
 80085c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b20      	cmp	r3, #32
 80085d6:	d175      	bne.n	80086c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d002      	beq.n	80085e4 <HAL_UART_Transmit+0x2c>
 80085de:	88fb      	ldrh	r3, [r7, #6]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e06e      	b.n	80086c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2221      	movs	r2, #33	@ 0x21
 80085f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085f6:	f7fc fc63 	bl	8004ec0 <HAL_GetTick>
 80085fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	88fa      	ldrh	r2, [r7, #6]
 8008600:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	88fa      	ldrh	r2, [r7, #6]
 8008606:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008610:	d108      	bne.n	8008624 <HAL_UART_Transmit+0x6c>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d104      	bne.n	8008624 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800861a:	2300      	movs	r3, #0
 800861c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	61bb      	str	r3, [r7, #24]
 8008622:	e003      	b.n	800862c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008628:	2300      	movs	r3, #0
 800862a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800862c:	e02e      	b.n	800868c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	2200      	movs	r2, #0
 8008636:	2180      	movs	r1, #128	@ 0x80
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 fcfe 	bl	800903a <UART_WaitOnFlagUntilTimeout>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d005      	beq.n	8008650 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2220      	movs	r2, #32
 8008648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e03a      	b.n	80086c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10b      	bne.n	800866e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	881b      	ldrh	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008664:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	3302      	adds	r3, #2
 800866a:	61bb      	str	r3, [r7, #24]
 800866c:	e007      	b.n	800867e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	781a      	ldrb	r2, [r3, #0]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	3301      	adds	r3, #1
 800867c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008682:	b29b      	uxth	r3, r3
 8008684:	3b01      	subs	r3, #1
 8008686:	b29a      	uxth	r2, r3
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008690:	b29b      	uxth	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1cb      	bne.n	800862e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2200      	movs	r2, #0
 800869e:	2140      	movs	r1, #64	@ 0x40
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 fcca 	bl	800903a <UART_WaitOnFlagUntilTimeout>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d005      	beq.n	80086b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2220      	movs	r2, #32
 80086b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e006      	b.n	80086c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2220      	movs	r2, #32
 80086bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	e000      	b.n	80086c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80086c4:	2302      	movs	r3, #2
  }
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3720      	adds	r7, #32
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
	...

080086d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08c      	sub	sp, #48	@ 0x30
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	4613      	mov	r3, r2
 80086dc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	d156      	bne.n	8008798 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <HAL_UART_Transmit_DMA+0x26>
 80086f0:	88fb      	ldrh	r3, [r7, #6]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e04f      	b.n	800879a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	88fa      	ldrh	r2, [r7, #6]
 8008704:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	88fa      	ldrh	r2, [r7, #6]
 800870a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2221      	movs	r2, #33	@ 0x21
 8008716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800871e:	4a21      	ldr	r2, [pc, #132]	@ (80087a4 <HAL_UART_Transmit_DMA+0xd4>)
 8008720:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008726:	4a20      	ldr	r2, [pc, #128]	@ (80087a8 <HAL_UART_Transmit_DMA+0xd8>)
 8008728:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800872e:	4a1f      	ldr	r2, [pc, #124]	@ (80087ac <HAL_UART_Transmit_DMA+0xdc>)
 8008730:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008736:	2200      	movs	r2, #0
 8008738:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800873a:	f107 0308 	add.w	r3, r7, #8
 800873e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008746:	6819      	ldr	r1, [r3, #0]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3304      	adds	r3, #4
 800874e:	461a      	mov	r2, r3
 8008750:	88fb      	ldrh	r3, [r7, #6]
 8008752:	f7fc fd51 	bl	80051f8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800875e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3314      	adds	r3, #20
 8008766:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	e853 3f00 	ldrex	r3, [r3]
 800876e:	617b      	str	r3, [r7, #20]
   return(result);
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008776:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3314      	adds	r3, #20
 800877e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008780:	627a      	str	r2, [r7, #36]	@ 0x24
 8008782:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008784:	6a39      	ldr	r1, [r7, #32]
 8008786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008788:	e841 2300 	strex	r3, r2, [r1]
 800878c:	61fb      	str	r3, [r7, #28]
   return(result);
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e5      	bne.n	8008760 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	e000      	b.n	800879a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008798:	2302      	movs	r3, #2
  }
}
 800879a:	4618      	mov	r0, r3
 800879c:	3730      	adds	r7, #48	@ 0x30
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	08008d89 	.word	0x08008d89
 80087a8:	08008e23 	.word	0x08008e23
 80087ac:	08008fa7 	.word	0x08008fa7

080087b0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	4613      	mov	r3, r2
 80087bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b20      	cmp	r3, #32
 80087c8:	d112      	bne.n	80087f0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d002      	beq.n	80087d6 <HAL_UART_Receive_DMA+0x26>
 80087d0:	88fb      	ldrh	r3, [r7, #6]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d101      	bne.n	80087da <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e00b      	b.n	80087f2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80087e0:	88fb      	ldrh	r3, [r7, #6]
 80087e2:	461a      	mov	r2, r3
 80087e4:	68b9      	ldr	r1, [r7, #8]
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f000 fc80 	bl	80090ec <UART_Start_Receive_DMA>
 80087ec:	4603      	mov	r3, r0
 80087ee:	e000      	b.n	80087f2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80087f0:	2302      	movs	r3, #2
  }
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b0ba      	sub	sp, #232	@ 0xe8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008822:	2300      	movs	r3, #0
 8008824:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008828:	2300      	movs	r3, #0
 800882a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800882e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008832:	f003 030f 	and.w	r3, r3, #15
 8008836:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800883a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10f      	bne.n	8008862 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008846:	f003 0320 	and.w	r3, r3, #32
 800884a:	2b00      	cmp	r3, #0
 800884c:	d009      	beq.n	8008862 <HAL_UART_IRQHandler+0x66>
 800884e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008852:	f003 0320 	and.w	r3, r3, #32
 8008856:	2b00      	cmp	r3, #0
 8008858:	d003      	beq.n	8008862 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fde7 	bl	800942e <UART_Receive_IT>
      return;
 8008860:	e25b      	b.n	8008d1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008866:	2b00      	cmp	r3, #0
 8008868:	f000 80de 	beq.w	8008a28 <HAL_UART_IRQHandler+0x22c>
 800886c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008870:	f003 0301 	and.w	r3, r3, #1
 8008874:	2b00      	cmp	r3, #0
 8008876:	d106      	bne.n	8008886 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800887c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 80d1 	beq.w	8008a28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00b      	beq.n	80088aa <HAL_UART_IRQHandler+0xae>
 8008892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800889a:	2b00      	cmp	r3, #0
 800889c:	d005      	beq.n	80088aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088a2:	f043 0201 	orr.w	r2, r3, #1
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088ae:	f003 0304 	and.w	r3, r3, #4
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00b      	beq.n	80088ce <HAL_UART_IRQHandler+0xd2>
 80088b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d005      	beq.n	80088ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088c6:	f043 0202 	orr.w	r2, r3, #2
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088d2:	f003 0302 	and.w	r3, r3, #2
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00b      	beq.n	80088f2 <HAL_UART_IRQHandler+0xf6>
 80088da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d005      	beq.n	80088f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ea:	f043 0204 	orr.w	r2, r3, #4
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80088f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088f6:	f003 0308 	and.w	r3, r3, #8
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d011      	beq.n	8008922 <HAL_UART_IRQHandler+0x126>
 80088fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008902:	f003 0320 	and.w	r3, r3, #32
 8008906:	2b00      	cmp	r3, #0
 8008908:	d105      	bne.n	8008916 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800890a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d005      	beq.n	8008922 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800891a:	f043 0208 	orr.w	r2, r3, #8
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008926:	2b00      	cmp	r3, #0
 8008928:	f000 81f2 	beq.w	8008d10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800892c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008930:	f003 0320 	and.w	r3, r3, #32
 8008934:	2b00      	cmp	r3, #0
 8008936:	d008      	beq.n	800894a <HAL_UART_IRQHandler+0x14e>
 8008938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800893c:	f003 0320 	and.w	r3, r3, #32
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fd72 	bl	800942e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	695b      	ldr	r3, [r3, #20]
 8008950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008954:	2b40      	cmp	r3, #64	@ 0x40
 8008956:	bf0c      	ite	eq
 8008958:	2301      	moveq	r3, #1
 800895a:	2300      	movne	r3, #0
 800895c:	b2db      	uxtb	r3, r3
 800895e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008966:	f003 0308 	and.w	r3, r3, #8
 800896a:	2b00      	cmp	r3, #0
 800896c:	d103      	bne.n	8008976 <HAL_UART_IRQHandler+0x17a>
 800896e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008972:	2b00      	cmp	r3, #0
 8008974:	d04f      	beq.n	8008a16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fc7a 	bl	8009270 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008986:	2b40      	cmp	r3, #64	@ 0x40
 8008988:	d141      	bne.n	8008a0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3314      	adds	r3, #20
 8008990:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008994:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008998:	e853 3f00 	ldrex	r3, [r3]
 800899c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80089a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3314      	adds	r3, #20
 80089b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80089b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80089ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80089c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80089c6:	e841 2300 	strex	r3, r2, [r1]
 80089ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80089ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1d9      	bne.n	800898a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d013      	beq.n	8008a06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e2:	4a7e      	ldr	r2, [pc, #504]	@ (8008bdc <HAL_UART_IRQHandler+0x3e0>)
 80089e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fc fccc 	bl	8005388 <HAL_DMA_Abort_IT>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d016      	beq.n	8008a24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008a00:	4610      	mov	r0, r2
 8008a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a04:	e00e      	b.n	8008a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f9a8 	bl	8008d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a0c:	e00a      	b.n	8008a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f9a4 	bl	8008d5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a14:	e006      	b.n	8008a24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f9a0 	bl	8008d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008a22:	e175      	b.n	8008d10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a24:	bf00      	nop
    return;
 8008a26:	e173      	b.n	8008d10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	f040 814f 	bne.w	8008cd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a36:	f003 0310 	and.w	r3, r3, #16
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f000 8148 	beq.w	8008cd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a44:	f003 0310 	and.w	r3, r3, #16
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f000 8141 	beq.w	8008cd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60bb      	str	r3, [r7, #8]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	60bb      	str	r3, [r7, #8]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	60bb      	str	r3, [r7, #8]
 8008a62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	695b      	ldr	r3, [r3, #20]
 8008a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a6e:	2b40      	cmp	r3, #64	@ 0x40
 8008a70:	f040 80b6 	bne.w	8008be0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 8145 	beq.w	8008d14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a92:	429a      	cmp	r2, r3
 8008a94:	f080 813e 	bcs.w	8008d14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa4:	69db      	ldr	r3, [r3, #28]
 8008aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008aaa:	f000 8088 	beq.w	8008bbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	330c      	adds	r3, #12
 8008ab4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008acc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	330c      	adds	r3, #12
 8008ad6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008ada:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008ade:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008ae6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008aea:	e841 2300 	strex	r3, r2, [r1]
 8008aee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1d9      	bne.n	8008aae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3314      	adds	r3, #20
 8008b00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b04:	e853 3f00 	ldrex	r3, [r3]
 8008b08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008b0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b0c:	f023 0301 	bic.w	r3, r3, #1
 8008b10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3314      	adds	r3, #20
 8008b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008b1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008b22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008b26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008b30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e1      	bne.n	8008afa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3314      	adds	r3, #20
 8008b3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b40:	e853 3f00 	ldrex	r3, [r3]
 8008b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008b46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3314      	adds	r3, #20
 8008b56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008b5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b62:	e841 2300 	strex	r3, r2, [r1]
 8008b66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1e3      	bne.n	8008b36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2220      	movs	r2, #32
 8008b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	330c      	adds	r3, #12
 8008b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b86:	e853 3f00 	ldrex	r3, [r3]
 8008b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b8e:	f023 0310 	bic.w	r3, r3, #16
 8008b92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	330c      	adds	r3, #12
 8008b9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008ba0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008ba2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ba6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ba8:	e841 2300 	strex	r3, r2, [r1]
 8008bac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008bae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1e3      	bne.n	8008b7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7fc fb75 	bl	80052a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2202      	movs	r2, #2
 8008bc2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f8cb 	bl	8008d70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008bda:	e09b      	b.n	8008d14 <HAL_UART_IRQHandler+0x518>
 8008bdc:	08009337 	.word	0x08009337
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 808e 	beq.w	8008d18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 8089 	beq.w	8008d18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	330c      	adds	r3, #12
 8008c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c10:	e853 3f00 	ldrex	r3, [r3]
 8008c14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	330c      	adds	r3, #12
 8008c26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008c2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008c2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c32:	e841 2300 	strex	r3, r2, [r1]
 8008c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1e3      	bne.n	8008c06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	3314      	adds	r3, #20
 8008c44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c48:	e853 3f00 	ldrex	r3, [r3]
 8008c4c:	623b      	str	r3, [r7, #32]
   return(result);
 8008c4e:	6a3b      	ldr	r3, [r7, #32]
 8008c50:	f023 0301 	bic.w	r3, r3, #1
 8008c54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3314      	adds	r3, #20
 8008c5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008c62:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c6a:	e841 2300 	strex	r3, r2, [r1]
 8008c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1e3      	bne.n	8008c3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2220      	movs	r2, #32
 8008c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	330c      	adds	r3, #12
 8008c8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	e853 3f00 	ldrex	r3, [r3]
 8008c92:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f023 0310 	bic.w	r3, r3, #16
 8008c9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	330c      	adds	r3, #12
 8008ca4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008ca8:	61fa      	str	r2, [r7, #28]
 8008caa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cac:	69b9      	ldr	r1, [r7, #24]
 8008cae:	69fa      	ldr	r2, [r7, #28]
 8008cb0:	e841 2300 	strex	r3, r2, [r1]
 8008cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1e3      	bne.n	8008c84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008cc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f851 	bl	8008d70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008cce:	e023      	b.n	8008d18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d009      	beq.n	8008cf0 <HAL_UART_IRQHandler+0x4f4>
 8008cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d003      	beq.n	8008cf0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fb38 	bl	800935e <UART_Transmit_IT>
    return;
 8008cee:	e014      	b.n	8008d1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00e      	beq.n	8008d1a <HAL_UART_IRQHandler+0x51e>
 8008cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d008      	beq.n	8008d1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fb78 	bl	80093fe <UART_EndTransmit_IT>
    return;
 8008d0e:	e004      	b.n	8008d1a <HAL_UART_IRQHandler+0x51e>
    return;
 8008d10:	bf00      	nop
 8008d12:	e002      	b.n	8008d1a <HAL_UART_IRQHandler+0x51e>
      return;
 8008d14:	bf00      	nop
 8008d16:	e000      	b.n	8008d1a <HAL_UART_IRQHandler+0x51e>
      return;
 8008d18:	bf00      	nop
  }
}
 8008d1a:	37e8      	adds	r7, #232	@ 0xe8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008d28:	bf00      	nop
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b090      	sub	sp, #64	@ 0x40
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d137      	bne.n	8008e14 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008da6:	2200      	movs	r2, #0
 8008da8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3314      	adds	r3, #20
 8008db0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db4:	e853 3f00 	ldrex	r3, [r3]
 8008db8:	623b      	str	r3, [r7, #32]
   return(result);
 8008dba:	6a3b      	ldr	r3, [r7, #32]
 8008dbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3314      	adds	r3, #20
 8008dc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008dca:	633a      	str	r2, [r7, #48]	@ 0x30
 8008dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008dd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dd2:	e841 2300 	strex	r3, r2, [r1]
 8008dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1e5      	bne.n	8008daa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	330c      	adds	r3, #12
 8008de4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	e853 3f00 	ldrex	r3, [r3]
 8008dec:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	330c      	adds	r3, #12
 8008dfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008dfe:	61fa      	str	r2, [r7, #28]
 8008e00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e02:	69b9      	ldr	r1, [r7, #24]
 8008e04:	69fa      	ldr	r2, [r7, #28]
 8008e06:	e841 2300 	strex	r3, r2, [r1]
 8008e0a:	617b      	str	r3, [r7, #20]
   return(result);
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1e5      	bne.n	8008dde <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e12:	e002      	b.n	8008e1a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008e14:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008e16:	f7ff ff83 	bl	8008d20 <HAL_UART_TxCpltCallback>
}
 8008e1a:	bf00      	nop
 8008e1c:	3740      	adds	r7, #64	@ 0x40
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b084      	sub	sp, #16
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e2e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f7ff ff7f 	bl	8008d34 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e36:	bf00      	nop
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b09c      	sub	sp, #112	@ 0x70
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d172      	bne.n	8008f40 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008e5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	330c      	adds	r3, #12
 8008e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e6a:	e853 3f00 	ldrex	r3, [r3]
 8008e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e76:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	330c      	adds	r3, #12
 8008e7e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008e80:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008e82:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e88:	e841 2300 	strex	r3, r2, [r1]
 8008e8c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1e5      	bne.n	8008e60 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3314      	adds	r3, #20
 8008e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e9e:	e853 3f00 	ldrex	r3, [r3]
 8008ea2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ea6:	f023 0301 	bic.w	r3, r3, #1
 8008eaa:	667b      	str	r3, [r7, #100]	@ 0x64
 8008eac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	3314      	adds	r3, #20
 8008eb2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008eb4:	647a      	str	r2, [r7, #68]	@ 0x44
 8008eb6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008eba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ebc:	e841 2300 	strex	r3, r2, [r1]
 8008ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1e5      	bne.n	8008e94 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	3314      	adds	r3, #20
 8008ece:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed2:	e853 3f00 	ldrex	r3, [r3]
 8008ed6:	623b      	str	r3, [r7, #32]
   return(result);
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ede:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ee0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3314      	adds	r3, #20
 8008ee6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008ee8:	633a      	str	r2, [r7, #48]	@ 0x30
 8008eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ef0:	e841 2300 	strex	r3, r2, [r1]
 8008ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1e5      	bne.n	8008ec8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008efc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008efe:	2220      	movs	r2, #32
 8008f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d119      	bne.n	8008f40 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	330c      	adds	r3, #12
 8008f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	e853 3f00 	ldrex	r3, [r3]
 8008f1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f023 0310 	bic.w	r3, r3, #16
 8008f22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	330c      	adds	r3, #12
 8008f2a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008f2c:	61fa      	str	r2, [r7, #28]
 8008f2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f30:	69b9      	ldr	r1, [r7, #24]
 8008f32:	69fa      	ldr	r2, [r7, #28]
 8008f34:	e841 2300 	strex	r3, r2, [r1]
 8008f38:	617b      	str	r3, [r7, #20]
   return(result);
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1e5      	bne.n	8008f0c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f42:	2200      	movs	r2, #0
 8008f44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d106      	bne.n	8008f5c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008f52:	4619      	mov	r1, r3
 8008f54:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008f56:	f7ff ff0b 	bl	8008d70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f5a:	e002      	b.n	8008f62 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008f5c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008f5e:	f7fb fb6d 	bl	800463c <HAL_UART_RxCpltCallback>
}
 8008f62:	bf00      	nop
 8008f64:	3770      	adds	r7, #112	@ 0x70
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b084      	sub	sp, #16
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f76:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d108      	bne.n	8008f98 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008f8a:	085b      	lsrs	r3, r3, #1
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	4619      	mov	r1, r3
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f7ff feed 	bl	8008d70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f96:	e002      	b.n	8008f9e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f7ff fed5 	bl	8008d48 <HAL_UART_RxHalfCpltCallback>
}
 8008f9e:	bf00      	nop
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b084      	sub	sp, #16
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fc2:	2b80      	cmp	r3, #128	@ 0x80
 8008fc4:	bf0c      	ite	eq
 8008fc6:	2301      	moveq	r3, #1
 8008fc8:	2300      	movne	r3, #0
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b21      	cmp	r3, #33	@ 0x21
 8008fd8:	d108      	bne.n	8008fec <UART_DMAError+0x46>
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d005      	beq.n	8008fec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008fe6:	68b8      	ldr	r0, [r7, #8]
 8008fe8:	f000 f91a 	bl	8009220 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ff6:	2b40      	cmp	r3, #64	@ 0x40
 8008ff8:	bf0c      	ite	eq
 8008ffa:	2301      	moveq	r3, #1
 8008ffc:	2300      	movne	r3, #0
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009008:	b2db      	uxtb	r3, r3
 800900a:	2b22      	cmp	r3, #34	@ 0x22
 800900c:	d108      	bne.n	8009020 <UART_DMAError+0x7a>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d005      	beq.n	8009020 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2200      	movs	r2, #0
 8009018:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800901a:	68b8      	ldr	r0, [r7, #8]
 800901c:	f000 f928 	bl	8009270 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009024:	f043 0210 	orr.w	r2, r3, #16
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800902c:	68b8      	ldr	r0, [r7, #8]
 800902e:	f7ff fe95 	bl	8008d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009032:	bf00      	nop
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b086      	sub	sp, #24
 800903e:	af00      	add	r7, sp, #0
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	603b      	str	r3, [r7, #0]
 8009046:	4613      	mov	r3, r2
 8009048:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800904a:	e03b      	b.n	80090c4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800904c:	6a3b      	ldr	r3, [r7, #32]
 800904e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009052:	d037      	beq.n	80090c4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009054:	f7fb ff34 	bl	8004ec0 <HAL_GetTick>
 8009058:	4602      	mov	r2, r0
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	6a3a      	ldr	r2, [r7, #32]
 8009060:	429a      	cmp	r2, r3
 8009062:	d302      	bcc.n	800906a <UART_WaitOnFlagUntilTimeout+0x30>
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d101      	bne.n	800906e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e03a      	b.n	80090e4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f003 0304 	and.w	r3, r3, #4
 8009078:	2b00      	cmp	r3, #0
 800907a:	d023      	beq.n	80090c4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	2b80      	cmp	r3, #128	@ 0x80
 8009080:	d020      	beq.n	80090c4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	2b40      	cmp	r3, #64	@ 0x40
 8009086:	d01d      	beq.n	80090c4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 0308 	and.w	r3, r3, #8
 8009092:	2b08      	cmp	r3, #8
 8009094:	d116      	bne.n	80090c4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009096:	2300      	movs	r3, #0
 8009098:	617b      	str	r3, [r7, #20]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	617b      	str	r3, [r7, #20]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	617b      	str	r3, [r7, #20]
 80090aa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 f8df 	bl	8009270 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2208      	movs	r2, #8
 80090b6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e00f      	b.n	80090e4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	4013      	ands	r3, r2
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	bf0c      	ite	eq
 80090d4:	2301      	moveq	r3, #1
 80090d6:	2300      	movne	r3, #0
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	461a      	mov	r2, r3
 80090dc:	79fb      	ldrb	r3, [r7, #7]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d0b4      	beq.n	800904c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3718      	adds	r7, #24
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b098      	sub	sp, #96	@ 0x60
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	4613      	mov	r3, r2
 80090f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	88fa      	ldrh	r2, [r7, #6]
 8009104:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2222      	movs	r2, #34	@ 0x22
 8009110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009118:	4a3e      	ldr	r2, [pc, #248]	@ (8009214 <UART_Start_Receive_DMA+0x128>)
 800911a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009120:	4a3d      	ldr	r2, [pc, #244]	@ (8009218 <UART_Start_Receive_DMA+0x12c>)
 8009122:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009128:	4a3c      	ldr	r2, [pc, #240]	@ (800921c <UART_Start_Receive_DMA+0x130>)
 800912a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009130:	2200      	movs	r2, #0
 8009132:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009134:	f107 0308 	add.w	r3, r7, #8
 8009138:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3304      	adds	r3, #4
 8009144:	4619      	mov	r1, r3
 8009146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	88fb      	ldrh	r3, [r7, #6]
 800914c:	f7fc f854 	bl	80051f8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009150:	2300      	movs	r3, #0
 8009152:	613b      	str	r3, [r7, #16]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	613b      	str	r3, [r7, #16]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	613b      	str	r3, [r7, #16]
 8009164:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d019      	beq.n	80091a2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	330c      	adds	r3, #12
 8009174:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009178:	e853 3f00 	ldrex	r3, [r3]
 800917c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800917e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009184:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	330c      	adds	r3, #12
 800918c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800918e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009190:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009192:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009194:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009196:	e841 2300 	strex	r3, r2, [r1]
 800919a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800919c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1e5      	bne.n	800916e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3314      	adds	r3, #20
 80091a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ac:	e853 3f00 	ldrex	r3, [r3]
 80091b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b4:	f043 0301 	orr.w	r3, r3, #1
 80091b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3314      	adds	r3, #20
 80091c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80091c2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80091c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80091c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091ca:	e841 2300 	strex	r3, r2, [r1]
 80091ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1e5      	bne.n	80091a2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	3314      	adds	r3, #20
 80091dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	e853 3f00 	ldrex	r3, [r3]
 80091e4:	617b      	str	r3, [r7, #20]
   return(result);
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3314      	adds	r3, #20
 80091f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80091f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80091f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fa:	6a39      	ldr	r1, [r7, #32]
 80091fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091fe:	e841 2300 	strex	r3, r2, [r1]
 8009202:	61fb      	str	r3, [r7, #28]
   return(result);
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1e5      	bne.n	80091d6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3760      	adds	r7, #96	@ 0x60
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	08008e3f 	.word	0x08008e3f
 8009218:	08008f6b 	.word	0x08008f6b
 800921c:	08008fa7 	.word	0x08008fa7

08009220 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009220:	b480      	push	{r7}
 8009222:	b089      	sub	sp, #36	@ 0x24
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	330c      	adds	r3, #12
 800922e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	e853 3f00 	ldrex	r3, [r3]
 8009236:	60bb      	str	r3, [r7, #8]
   return(result);
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800923e:	61fb      	str	r3, [r7, #28]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	330c      	adds	r3, #12
 8009246:	69fa      	ldr	r2, [r7, #28]
 8009248:	61ba      	str	r2, [r7, #24]
 800924a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924c:	6979      	ldr	r1, [r7, #20]
 800924e:	69ba      	ldr	r2, [r7, #24]
 8009250:	e841 2300 	strex	r3, r2, [r1]
 8009254:	613b      	str	r3, [r7, #16]
   return(result);
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1e5      	bne.n	8009228 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2220      	movs	r2, #32
 8009260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8009264:	bf00      	nop
 8009266:	3724      	adds	r7, #36	@ 0x24
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009270:	b480      	push	{r7}
 8009272:	b095      	sub	sp, #84	@ 0x54
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	330c      	adds	r3, #12
 800927e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009282:	e853 3f00 	ldrex	r3, [r3]
 8009286:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800928e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	330c      	adds	r3, #12
 8009296:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009298:	643a      	str	r2, [r7, #64]	@ 0x40
 800929a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800929e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092a0:	e841 2300 	strex	r3, r2, [r1]
 80092a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1e5      	bne.n	8009278 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3314      	adds	r3, #20
 80092b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b4:	6a3b      	ldr	r3, [r7, #32]
 80092b6:	e853 3f00 	ldrex	r3, [r3]
 80092ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	f023 0301 	bic.w	r3, r3, #1
 80092c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	3314      	adds	r3, #20
 80092ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092d4:	e841 2300 	strex	r3, r2, [r1]
 80092d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1e5      	bne.n	80092ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d119      	bne.n	800931c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	330c      	adds	r3, #12
 80092ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	e853 3f00 	ldrex	r3, [r3]
 80092f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	f023 0310 	bic.w	r3, r3, #16
 80092fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	330c      	adds	r3, #12
 8009306:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009308:	61ba      	str	r2, [r7, #24]
 800930a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930c:	6979      	ldr	r1, [r7, #20]
 800930e:	69ba      	ldr	r2, [r7, #24]
 8009310:	e841 2300 	strex	r3, r2, [r1]
 8009314:	613b      	str	r3, [r7, #16]
   return(result);
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1e5      	bne.n	80092e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2220      	movs	r2, #32
 8009320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800932a:	bf00      	nop
 800932c:	3754      	adds	r7, #84	@ 0x54
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr

08009336 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b084      	sub	sp, #16
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009342:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f7ff fd03 	bl	8008d5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009356:	bf00      	nop
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800935e:	b480      	push	{r7}
 8009360:	b085      	sub	sp, #20
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b21      	cmp	r3, #33	@ 0x21
 8009370:	d13e      	bne.n	80093f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800937a:	d114      	bne.n	80093a6 <UART_Transmit_IT+0x48>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d110      	bne.n	80093a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a1b      	ldr	r3, [r3, #32]
 8009388:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	881b      	ldrh	r3, [r3, #0]
 800938e:	461a      	mov	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009398:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	1c9a      	adds	r2, r3, #2
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	621a      	str	r2, [r3, #32]
 80093a4:	e008      	b.n	80093b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	1c59      	adds	r1, r3, #1
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	6211      	str	r1, [r2, #32]
 80093b0:	781a      	ldrb	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80093bc:	b29b      	uxth	r3, r3
 80093be:	3b01      	subs	r3, #1
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	4619      	mov	r1, r3
 80093c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10f      	bne.n	80093ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68da      	ldr	r2, [r3, #12]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80093da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68da      	ldr	r2, [r3, #12]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	e000      	b.n	80093f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80093f0:	2302      	movs	r3, #2
  }
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3714      	adds	r7, #20
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b082      	sub	sp, #8
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68da      	ldr	r2, [r3, #12]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009414:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2220      	movs	r2, #32
 800941a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7ff fc7e 	bl	8008d20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b08c      	sub	sp, #48	@ 0x30
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800943c:	b2db      	uxtb	r3, r3
 800943e:	2b22      	cmp	r3, #34	@ 0x22
 8009440:	f040 80ae 	bne.w	80095a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800944c:	d117      	bne.n	800947e <UART_Receive_IT+0x50>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d113      	bne.n	800947e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009456:	2300      	movs	r3, #0
 8009458:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800945e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	b29b      	uxth	r3, r3
 8009468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800946c:	b29a      	uxth	r2, r3
 800946e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009470:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009476:	1c9a      	adds	r2, r3, #2
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	629a      	str	r2, [r3, #40]	@ 0x28
 800947c:	e026      	b.n	80094cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009482:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009484:	2300      	movs	r3, #0
 8009486:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009490:	d007      	beq.n	80094a2 <UART_Receive_IT+0x74>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10a      	bne.n	80094b0 <UART_Receive_IT+0x82>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d106      	bne.n	80094b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ac:	701a      	strb	r2, [r3, #0]
 80094ae:	e008      	b.n	80094c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	3b01      	subs	r3, #1
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	4619      	mov	r1, r3
 80094da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d15d      	bne.n	800959c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68da      	ldr	r2, [r3, #12]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f022 0220 	bic.w	r2, r2, #32
 80094ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68da      	ldr	r2, [r3, #12]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80094fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	695a      	ldr	r2, [r3, #20]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f022 0201 	bic.w	r2, r2, #1
 800950e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2220      	movs	r2, #32
 8009514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009522:	2b01      	cmp	r3, #1
 8009524:	d135      	bne.n	8009592 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	330c      	adds	r3, #12
 8009532:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	613b      	str	r3, [r7, #16]
   return(result);
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	f023 0310 	bic.w	r3, r3, #16
 8009542:	627b      	str	r3, [r7, #36]	@ 0x24
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	330c      	adds	r3, #12
 800954a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800954c:	623a      	str	r2, [r7, #32]
 800954e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	69f9      	ldr	r1, [r7, #28]
 8009552:	6a3a      	ldr	r2, [r7, #32]
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	61bb      	str	r3, [r7, #24]
   return(result);
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e5      	bne.n	800952c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 0310 	and.w	r3, r3, #16
 800956a:	2b10      	cmp	r3, #16
 800956c:	d10a      	bne.n	8009584 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800956e:	2300      	movs	r3, #0
 8009570:	60fb      	str	r3, [r7, #12]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	60fb      	str	r3, [r7, #12]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	60fb      	str	r3, [r7, #12]
 8009582:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7ff fbf0 	bl	8008d70 <HAL_UARTEx_RxEventCallback>
 8009590:	e002      	b.n	8009598 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7fb f852 	bl	800463c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009598:	2300      	movs	r3, #0
 800959a:	e002      	b.n	80095a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	e000      	b.n	80095a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80095a0:	2302      	movs	r3, #2
  }
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3730      	adds	r7, #48	@ 0x30
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
	...

080095ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095b0:	b0c0      	sub	sp, #256	@ 0x100
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80095c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095c8:	68d9      	ldr	r1, [r3, #12]
 80095ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	ea40 0301 	orr.w	r3, r0, r1
 80095d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80095d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095da:	689a      	ldr	r2, [r3, #8]
 80095dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	431a      	orrs	r2, r3
 80095e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095e8:	695b      	ldr	r3, [r3, #20]
 80095ea:	431a      	orrs	r2, r3
 80095ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095f0:	69db      	ldr	r3, [r3, #28]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80095f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009604:	f021 010c 	bic.w	r1, r1, #12
 8009608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009612:	430b      	orrs	r3, r1
 8009614:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	695b      	ldr	r3, [r3, #20]
 800961e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009626:	6999      	ldr	r1, [r3, #24]
 8009628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	ea40 0301 	orr.w	r3, r0, r1
 8009632:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	4b8f      	ldr	r3, [pc, #572]	@ (8009878 <UART_SetConfig+0x2cc>)
 800963c:	429a      	cmp	r2, r3
 800963e:	d005      	beq.n	800964c <UART_SetConfig+0xa0>
 8009640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	4b8d      	ldr	r3, [pc, #564]	@ (800987c <UART_SetConfig+0x2d0>)
 8009648:	429a      	cmp	r2, r3
 800964a:	d104      	bne.n	8009656 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800964c:	f7fe fa9e 	bl	8007b8c <HAL_RCC_GetPCLK2Freq>
 8009650:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009654:	e003      	b.n	800965e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009656:	f7fe fa85 	bl	8007b64 <HAL_RCC_GetPCLK1Freq>
 800965a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800965e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009662:	69db      	ldr	r3, [r3, #28]
 8009664:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009668:	f040 810c 	bne.w	8009884 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800966c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009670:	2200      	movs	r2, #0
 8009672:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009676:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800967a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800967e:	4622      	mov	r2, r4
 8009680:	462b      	mov	r3, r5
 8009682:	1891      	adds	r1, r2, r2
 8009684:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009686:	415b      	adcs	r3, r3
 8009688:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800968a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800968e:	4621      	mov	r1, r4
 8009690:	eb12 0801 	adds.w	r8, r2, r1
 8009694:	4629      	mov	r1, r5
 8009696:	eb43 0901 	adc.w	r9, r3, r1
 800969a:	f04f 0200 	mov.w	r2, #0
 800969e:	f04f 0300 	mov.w	r3, #0
 80096a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80096a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80096aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80096ae:	4690      	mov	r8, r2
 80096b0:	4699      	mov	r9, r3
 80096b2:	4623      	mov	r3, r4
 80096b4:	eb18 0303 	adds.w	r3, r8, r3
 80096b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80096bc:	462b      	mov	r3, r5
 80096be:	eb49 0303 	adc.w	r3, r9, r3
 80096c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80096c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80096d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80096d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80096da:	460b      	mov	r3, r1
 80096dc:	18db      	adds	r3, r3, r3
 80096de:	653b      	str	r3, [r7, #80]	@ 0x50
 80096e0:	4613      	mov	r3, r2
 80096e2:	eb42 0303 	adc.w	r3, r2, r3
 80096e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80096e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80096ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80096f0:	f7f7 fa8c 	bl	8000c0c <__aeabi_uldivmod>
 80096f4:	4602      	mov	r2, r0
 80096f6:	460b      	mov	r3, r1
 80096f8:	4b61      	ldr	r3, [pc, #388]	@ (8009880 <UART_SetConfig+0x2d4>)
 80096fa:	fba3 2302 	umull	r2, r3, r3, r2
 80096fe:	095b      	lsrs	r3, r3, #5
 8009700:	011c      	lsls	r4, r3, #4
 8009702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009706:	2200      	movs	r2, #0
 8009708:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800970c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009710:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009714:	4642      	mov	r2, r8
 8009716:	464b      	mov	r3, r9
 8009718:	1891      	adds	r1, r2, r2
 800971a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800971c:	415b      	adcs	r3, r3
 800971e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009720:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009724:	4641      	mov	r1, r8
 8009726:	eb12 0a01 	adds.w	sl, r2, r1
 800972a:	4649      	mov	r1, r9
 800972c:	eb43 0b01 	adc.w	fp, r3, r1
 8009730:	f04f 0200 	mov.w	r2, #0
 8009734:	f04f 0300 	mov.w	r3, #0
 8009738:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800973c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009744:	4692      	mov	sl, r2
 8009746:	469b      	mov	fp, r3
 8009748:	4643      	mov	r3, r8
 800974a:	eb1a 0303 	adds.w	r3, sl, r3
 800974e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009752:	464b      	mov	r3, r9
 8009754:	eb4b 0303 	adc.w	r3, fp, r3
 8009758:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800975c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009768:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800976c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009770:	460b      	mov	r3, r1
 8009772:	18db      	adds	r3, r3, r3
 8009774:	643b      	str	r3, [r7, #64]	@ 0x40
 8009776:	4613      	mov	r3, r2
 8009778:	eb42 0303 	adc.w	r3, r2, r3
 800977c:	647b      	str	r3, [r7, #68]	@ 0x44
 800977e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009782:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009786:	f7f7 fa41 	bl	8000c0c <__aeabi_uldivmod>
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	4611      	mov	r1, r2
 8009790:	4b3b      	ldr	r3, [pc, #236]	@ (8009880 <UART_SetConfig+0x2d4>)
 8009792:	fba3 2301 	umull	r2, r3, r3, r1
 8009796:	095b      	lsrs	r3, r3, #5
 8009798:	2264      	movs	r2, #100	@ 0x64
 800979a:	fb02 f303 	mul.w	r3, r2, r3
 800979e:	1acb      	subs	r3, r1, r3
 80097a0:	00db      	lsls	r3, r3, #3
 80097a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80097a6:	4b36      	ldr	r3, [pc, #216]	@ (8009880 <UART_SetConfig+0x2d4>)
 80097a8:	fba3 2302 	umull	r2, r3, r3, r2
 80097ac:	095b      	lsrs	r3, r3, #5
 80097ae:	005b      	lsls	r3, r3, #1
 80097b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80097b4:	441c      	add	r4, r3
 80097b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097ba:	2200      	movs	r2, #0
 80097bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80097c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80097c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80097c8:	4642      	mov	r2, r8
 80097ca:	464b      	mov	r3, r9
 80097cc:	1891      	adds	r1, r2, r2
 80097ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80097d0:	415b      	adcs	r3, r3
 80097d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80097d8:	4641      	mov	r1, r8
 80097da:	1851      	adds	r1, r2, r1
 80097dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80097de:	4649      	mov	r1, r9
 80097e0:	414b      	adcs	r3, r1
 80097e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80097e4:	f04f 0200 	mov.w	r2, #0
 80097e8:	f04f 0300 	mov.w	r3, #0
 80097ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80097f0:	4659      	mov	r1, fp
 80097f2:	00cb      	lsls	r3, r1, #3
 80097f4:	4651      	mov	r1, sl
 80097f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097fa:	4651      	mov	r1, sl
 80097fc:	00ca      	lsls	r2, r1, #3
 80097fe:	4610      	mov	r0, r2
 8009800:	4619      	mov	r1, r3
 8009802:	4603      	mov	r3, r0
 8009804:	4642      	mov	r2, r8
 8009806:	189b      	adds	r3, r3, r2
 8009808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800980c:	464b      	mov	r3, r9
 800980e:	460a      	mov	r2, r1
 8009810:	eb42 0303 	adc.w	r3, r2, r3
 8009814:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009824:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009828:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800982c:	460b      	mov	r3, r1
 800982e:	18db      	adds	r3, r3, r3
 8009830:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009832:	4613      	mov	r3, r2
 8009834:	eb42 0303 	adc.w	r3, r2, r3
 8009838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800983a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800983e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009842:	f7f7 f9e3 	bl	8000c0c <__aeabi_uldivmod>
 8009846:	4602      	mov	r2, r0
 8009848:	460b      	mov	r3, r1
 800984a:	4b0d      	ldr	r3, [pc, #52]	@ (8009880 <UART_SetConfig+0x2d4>)
 800984c:	fba3 1302 	umull	r1, r3, r3, r2
 8009850:	095b      	lsrs	r3, r3, #5
 8009852:	2164      	movs	r1, #100	@ 0x64
 8009854:	fb01 f303 	mul.w	r3, r1, r3
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	00db      	lsls	r3, r3, #3
 800985c:	3332      	adds	r3, #50	@ 0x32
 800985e:	4a08      	ldr	r2, [pc, #32]	@ (8009880 <UART_SetConfig+0x2d4>)
 8009860:	fba2 2303 	umull	r2, r3, r2, r3
 8009864:	095b      	lsrs	r3, r3, #5
 8009866:	f003 0207 	and.w	r2, r3, #7
 800986a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4422      	add	r2, r4
 8009872:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009874:	e106      	b.n	8009a84 <UART_SetConfig+0x4d8>
 8009876:	bf00      	nop
 8009878:	40011000 	.word	0x40011000
 800987c:	40011400 	.word	0x40011400
 8009880:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009888:	2200      	movs	r2, #0
 800988a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800988e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009892:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009896:	4642      	mov	r2, r8
 8009898:	464b      	mov	r3, r9
 800989a:	1891      	adds	r1, r2, r2
 800989c:	6239      	str	r1, [r7, #32]
 800989e:	415b      	adcs	r3, r3
 80098a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80098a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80098a6:	4641      	mov	r1, r8
 80098a8:	1854      	adds	r4, r2, r1
 80098aa:	4649      	mov	r1, r9
 80098ac:	eb43 0501 	adc.w	r5, r3, r1
 80098b0:	f04f 0200 	mov.w	r2, #0
 80098b4:	f04f 0300 	mov.w	r3, #0
 80098b8:	00eb      	lsls	r3, r5, #3
 80098ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80098be:	00e2      	lsls	r2, r4, #3
 80098c0:	4614      	mov	r4, r2
 80098c2:	461d      	mov	r5, r3
 80098c4:	4643      	mov	r3, r8
 80098c6:	18e3      	adds	r3, r4, r3
 80098c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80098cc:	464b      	mov	r3, r9
 80098ce:	eb45 0303 	adc.w	r3, r5, r3
 80098d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80098d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80098e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80098e6:	f04f 0200 	mov.w	r2, #0
 80098ea:	f04f 0300 	mov.w	r3, #0
 80098ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80098f2:	4629      	mov	r1, r5
 80098f4:	008b      	lsls	r3, r1, #2
 80098f6:	4621      	mov	r1, r4
 80098f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098fc:	4621      	mov	r1, r4
 80098fe:	008a      	lsls	r2, r1, #2
 8009900:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009904:	f7f7 f982 	bl	8000c0c <__aeabi_uldivmod>
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	4b60      	ldr	r3, [pc, #384]	@ (8009a90 <UART_SetConfig+0x4e4>)
 800990e:	fba3 2302 	umull	r2, r3, r3, r2
 8009912:	095b      	lsrs	r3, r3, #5
 8009914:	011c      	lsls	r4, r3, #4
 8009916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800991a:	2200      	movs	r2, #0
 800991c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009920:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009924:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009928:	4642      	mov	r2, r8
 800992a:	464b      	mov	r3, r9
 800992c:	1891      	adds	r1, r2, r2
 800992e:	61b9      	str	r1, [r7, #24]
 8009930:	415b      	adcs	r3, r3
 8009932:	61fb      	str	r3, [r7, #28]
 8009934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009938:	4641      	mov	r1, r8
 800993a:	1851      	adds	r1, r2, r1
 800993c:	6139      	str	r1, [r7, #16]
 800993e:	4649      	mov	r1, r9
 8009940:	414b      	adcs	r3, r1
 8009942:	617b      	str	r3, [r7, #20]
 8009944:	f04f 0200 	mov.w	r2, #0
 8009948:	f04f 0300 	mov.w	r3, #0
 800994c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009950:	4659      	mov	r1, fp
 8009952:	00cb      	lsls	r3, r1, #3
 8009954:	4651      	mov	r1, sl
 8009956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800995a:	4651      	mov	r1, sl
 800995c:	00ca      	lsls	r2, r1, #3
 800995e:	4610      	mov	r0, r2
 8009960:	4619      	mov	r1, r3
 8009962:	4603      	mov	r3, r0
 8009964:	4642      	mov	r2, r8
 8009966:	189b      	adds	r3, r3, r2
 8009968:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800996c:	464b      	mov	r3, r9
 800996e:	460a      	mov	r2, r1
 8009970:	eb42 0303 	adc.w	r3, r2, r3
 8009974:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009982:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009984:	f04f 0200 	mov.w	r2, #0
 8009988:	f04f 0300 	mov.w	r3, #0
 800998c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009990:	4649      	mov	r1, r9
 8009992:	008b      	lsls	r3, r1, #2
 8009994:	4641      	mov	r1, r8
 8009996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800999a:	4641      	mov	r1, r8
 800999c:	008a      	lsls	r2, r1, #2
 800999e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80099a2:	f7f7 f933 	bl	8000c0c <__aeabi_uldivmod>
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	4611      	mov	r1, r2
 80099ac:	4b38      	ldr	r3, [pc, #224]	@ (8009a90 <UART_SetConfig+0x4e4>)
 80099ae:	fba3 2301 	umull	r2, r3, r3, r1
 80099b2:	095b      	lsrs	r3, r3, #5
 80099b4:	2264      	movs	r2, #100	@ 0x64
 80099b6:	fb02 f303 	mul.w	r3, r2, r3
 80099ba:	1acb      	subs	r3, r1, r3
 80099bc:	011b      	lsls	r3, r3, #4
 80099be:	3332      	adds	r3, #50	@ 0x32
 80099c0:	4a33      	ldr	r2, [pc, #204]	@ (8009a90 <UART_SetConfig+0x4e4>)
 80099c2:	fba2 2303 	umull	r2, r3, r2, r3
 80099c6:	095b      	lsrs	r3, r3, #5
 80099c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80099cc:	441c      	add	r4, r3
 80099ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099d2:	2200      	movs	r2, #0
 80099d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80099d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80099d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80099dc:	4642      	mov	r2, r8
 80099de:	464b      	mov	r3, r9
 80099e0:	1891      	adds	r1, r2, r2
 80099e2:	60b9      	str	r1, [r7, #8]
 80099e4:	415b      	adcs	r3, r3
 80099e6:	60fb      	str	r3, [r7, #12]
 80099e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80099ec:	4641      	mov	r1, r8
 80099ee:	1851      	adds	r1, r2, r1
 80099f0:	6039      	str	r1, [r7, #0]
 80099f2:	4649      	mov	r1, r9
 80099f4:	414b      	adcs	r3, r1
 80099f6:	607b      	str	r3, [r7, #4]
 80099f8:	f04f 0200 	mov.w	r2, #0
 80099fc:	f04f 0300 	mov.w	r3, #0
 8009a00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009a04:	4659      	mov	r1, fp
 8009a06:	00cb      	lsls	r3, r1, #3
 8009a08:	4651      	mov	r1, sl
 8009a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a0e:	4651      	mov	r1, sl
 8009a10:	00ca      	lsls	r2, r1, #3
 8009a12:	4610      	mov	r0, r2
 8009a14:	4619      	mov	r1, r3
 8009a16:	4603      	mov	r3, r0
 8009a18:	4642      	mov	r2, r8
 8009a1a:	189b      	adds	r3, r3, r2
 8009a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a1e:	464b      	mov	r3, r9
 8009a20:	460a      	mov	r2, r1
 8009a22:	eb42 0303 	adc.w	r3, r2, r3
 8009a26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a32:	667a      	str	r2, [r7, #100]	@ 0x64
 8009a34:	f04f 0200 	mov.w	r2, #0
 8009a38:	f04f 0300 	mov.w	r3, #0
 8009a3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009a40:	4649      	mov	r1, r9
 8009a42:	008b      	lsls	r3, r1, #2
 8009a44:	4641      	mov	r1, r8
 8009a46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a4a:	4641      	mov	r1, r8
 8009a4c:	008a      	lsls	r2, r1, #2
 8009a4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009a52:	f7f7 f8db 	bl	8000c0c <__aeabi_uldivmod>
 8009a56:	4602      	mov	r2, r0
 8009a58:	460b      	mov	r3, r1
 8009a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a90 <UART_SetConfig+0x4e4>)
 8009a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8009a60:	095b      	lsrs	r3, r3, #5
 8009a62:	2164      	movs	r1, #100	@ 0x64
 8009a64:	fb01 f303 	mul.w	r3, r1, r3
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	011b      	lsls	r3, r3, #4
 8009a6c:	3332      	adds	r3, #50	@ 0x32
 8009a6e:	4a08      	ldr	r2, [pc, #32]	@ (8009a90 <UART_SetConfig+0x4e4>)
 8009a70:	fba2 2303 	umull	r2, r3, r2, r3
 8009a74:	095b      	lsrs	r3, r3, #5
 8009a76:	f003 020f 	and.w	r2, r3, #15
 8009a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4422      	add	r2, r4
 8009a82:	609a      	str	r2, [r3, #8]
}
 8009a84:	bf00      	nop
 8009a86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a90:	51eb851f 	.word	0x51eb851f

08009a94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009a94:	b580      	push	{r7, lr}
 8009a96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009a98:	4b05      	ldr	r3, [pc, #20]	@ (8009ab0 <SysTick_Handler+0x1c>)
 8009a9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009a9c:	f001 fe16 	bl	800b6cc <xTaskGetSchedulerState>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d001      	beq.n	8009aaa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009aa6:	f002 fd0f 	bl	800c4c8 <xPortSysTickHandler>
  }
}
 8009aaa:	bf00      	nop
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	e000e010 	.word	0xe000e010

08009ab4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009abc:	f3ef 8305 	mrs	r3, IPSR
 8009ac0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ac2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d003      	beq.n	8009ad0 <osDelay+0x1c>
    stat = osErrorISR;
 8009ac8:	f06f 0305 	mvn.w	r3, #5
 8009acc:	60fb      	str	r3, [r7, #12]
 8009ace:	e007      	b.n	8009ae0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d002      	beq.n	8009ae0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f001 f95c 	bl	800ad98 <vTaskDelay>
    }
  }

  return (stat);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
	...

08009aec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	4a07      	ldr	r2, [pc, #28]	@ (8009b18 <vApplicationGetIdleTaskMemory+0x2c>)
 8009afc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	4a06      	ldr	r2, [pc, #24]	@ (8009b1c <vApplicationGetIdleTaskMemory+0x30>)
 8009b02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2280      	movs	r2, #128	@ 0x80
 8009b08:	601a      	str	r2, [r3, #0]
}
 8009b0a:	bf00      	nop
 8009b0c:	3714      	adds	r7, #20
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	200009d8 	.word	0x200009d8
 8009b1c:	20000a80 	.word	0x20000a80

08009b20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	4a07      	ldr	r2, [pc, #28]	@ (8009b4c <vApplicationGetTimerTaskMemory+0x2c>)
 8009b30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	4a06      	ldr	r2, [pc, #24]	@ (8009b50 <vApplicationGetTimerTaskMemory+0x30>)
 8009b36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b3e:	601a      	str	r2, [r3, #0]
}
 8009b40:	bf00      	nop
 8009b42:	3714      	adds	r7, #20
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr
 8009b4c:	20000c80 	.word	0x20000c80
 8009b50:	20000d28 	.word	0x20000d28

08009b54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f103 0208 	add.w	r2, r3, #8
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f103 0208 	add.w	r2, r3, #8
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f103 0208 	add.w	r2, r3, #8
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ba2:	bf00      	nop
 8009ba4:	370c      	adds	r7, #12
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr

08009bae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bae:	b480      	push	{r7}
 8009bb0:	b085      	sub	sp, #20
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	689a      	ldr	r2, [r3, #8]
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	683a      	ldr	r2, [r7, #0]
 8009bd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	1c5a      	adds	r2, r3, #1
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	601a      	str	r2, [r3, #0]
}
 8009bea:	bf00      	nop
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr

08009bf6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bf6:	b480      	push	{r7}
 8009bf8:	b085      	sub	sp, #20
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c0c:	d103      	bne.n	8009c16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	60fb      	str	r3, [r7, #12]
 8009c14:	e00c      	b.n	8009c30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	3308      	adds	r3, #8
 8009c1a:	60fb      	str	r3, [r7, #12]
 8009c1c:	e002      	b.n	8009c24 <vListInsert+0x2e>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d2f6      	bcs.n	8009c1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	683a      	ldr	r2, [r7, #0]
 8009c3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	683a      	ldr	r2, [r7, #0]
 8009c4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	1c5a      	adds	r2, r3, #1
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	601a      	str	r2, [r3, #0]
}
 8009c5c:	bf00      	nop
 8009c5e:	3714      	adds	r7, #20
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	6892      	ldr	r2, [r2, #8]
 8009c7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	6852      	ldr	r2, [r2, #4]
 8009c88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d103      	bne.n	8009c9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	689a      	ldr	r2, [r3, #8]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	1e5a      	subs	r2, r3, #1
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10b      	bne.n	8009ce8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009ce2:	bf00      	nop
 8009ce4:	bf00      	nop
 8009ce6:	e7fd      	b.n	8009ce4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009ce8:	f002 fb5e 	bl	800c3a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cf4:	68f9      	ldr	r1, [r7, #12]
 8009cf6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009cf8:	fb01 f303 	mul.w	r3, r1, r3
 8009cfc:	441a      	add	r2, r3
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	68f9      	ldr	r1, [r7, #12]
 8009d1c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009d1e:	fb01 f303 	mul.w	r3, r1, r3
 8009d22:	441a      	add	r2, r3
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	22ff      	movs	r2, #255	@ 0xff
 8009d2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	22ff      	movs	r2, #255	@ 0xff
 8009d34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d114      	bne.n	8009d68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d01a      	beq.n	8009d7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	3310      	adds	r3, #16
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f001 faf8 	bl	800b340 <xTaskRemoveFromEventList>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d012      	beq.n	8009d7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d56:	4b0d      	ldr	r3, [pc, #52]	@ (8009d8c <xQueueGenericReset+0xd0>)
 8009d58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d5c:	601a      	str	r2, [r3, #0]
 8009d5e:	f3bf 8f4f 	dsb	sy
 8009d62:	f3bf 8f6f 	isb	sy
 8009d66:	e009      	b.n	8009d7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	3310      	adds	r3, #16
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7ff fef1 	bl	8009b54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	3324      	adds	r3, #36	@ 0x24
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7ff feec 	bl	8009b54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d7c:	f002 fb46 	bl	800c40c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d80:	2301      	movs	r3, #1
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	e000ed04 	.word	0xe000ed04

08009d90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b08e      	sub	sp, #56	@ 0x38
 8009d94:	af02      	add	r7, sp, #8
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	607a      	str	r2, [r7, #4]
 8009d9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10b      	bne.n	8009dbc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009db6:	bf00      	nop
 8009db8:	bf00      	nop
 8009dba:	e7fd      	b.n	8009db8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d10b      	bne.n	8009dda <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop
 8009dd8:	e7fd      	b.n	8009dd6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d002      	beq.n	8009de6 <xQueueGenericCreateStatic+0x56>
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <xQueueGenericCreateStatic+0x5a>
 8009de6:	2301      	movs	r3, #1
 8009de8:	e000      	b.n	8009dec <xQueueGenericCreateStatic+0x5c>
 8009dea:	2300      	movs	r3, #0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10b      	bne.n	8009e08 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df4:	f383 8811 	msr	BASEPRI, r3
 8009df8:	f3bf 8f6f 	isb	sy
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	623b      	str	r3, [r7, #32]
}
 8009e02:	bf00      	nop
 8009e04:	bf00      	nop
 8009e06:	e7fd      	b.n	8009e04 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d102      	bne.n	8009e14 <xQueueGenericCreateStatic+0x84>
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <xQueueGenericCreateStatic+0x88>
 8009e14:	2301      	movs	r3, #1
 8009e16:	e000      	b.n	8009e1a <xQueueGenericCreateStatic+0x8a>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d10b      	bne.n	8009e36 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	61fb      	str	r3, [r7, #28]
}
 8009e30:	bf00      	nop
 8009e32:	bf00      	nop
 8009e34:	e7fd      	b.n	8009e32 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e36:	2350      	movs	r3, #80	@ 0x50
 8009e38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	2b50      	cmp	r3, #80	@ 0x50
 8009e3e:	d00b      	beq.n	8009e58 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	61bb      	str	r3, [r7, #24]
}
 8009e52:	bf00      	nop
 8009e54:	bf00      	nop
 8009e56:	e7fd      	b.n	8009e54 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009e58:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00d      	beq.n	8009e80 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e6c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	4613      	mov	r3, r2
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	68b9      	ldr	r1, [r7, #8]
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f000 f840 	bl	8009f00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3730      	adds	r7, #48	@ 0x30
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b08a      	sub	sp, #40	@ 0x28
 8009e8e:	af02      	add	r7, sp, #8
 8009e90:	60f8      	str	r0, [r7, #12]
 8009e92:	60b9      	str	r1, [r7, #8]
 8009e94:	4613      	mov	r3, r2
 8009e96:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10b      	bne.n	8009eb6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	613b      	str	r3, [r7, #16]
}
 8009eb0:	bf00      	nop
 8009eb2:	bf00      	nop
 8009eb4:	e7fd      	b.n	8009eb2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	68ba      	ldr	r2, [r7, #8]
 8009eba:	fb02 f303 	mul.w	r3, r2, r3
 8009ebe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	3350      	adds	r3, #80	@ 0x50
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f002 fb91 	bl	800c5ec <pvPortMalloc>
 8009eca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d011      	beq.n	8009ef6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	3350      	adds	r3, #80	@ 0x50
 8009eda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ee4:	79fa      	ldrb	r2, [r7, #7]
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	4613      	mov	r3, r2
 8009eec:	697a      	ldr	r2, [r7, #20]
 8009eee:	68b9      	ldr	r1, [r7, #8]
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f000 f805 	bl	8009f00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ef6:	69bb      	ldr	r3, [r7, #24]
	}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3720      	adds	r7, #32
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
 8009f0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d103      	bne.n	8009f1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	69ba      	ldr	r2, [r7, #24]
 8009f18:	601a      	str	r2, [r3, #0]
 8009f1a:	e002      	b.n	8009f22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	68ba      	ldr	r2, [r7, #8]
 8009f2c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f2e:	2101      	movs	r1, #1
 8009f30:	69b8      	ldr	r0, [r7, #24]
 8009f32:	f7ff fec3 	bl	8009cbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	78fa      	ldrb	r2, [r7, #3]
 8009f3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f3e:	bf00      	nop
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b082      	sub	sp, #8
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d00e      	beq.n	8009f72 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009f66:	2300      	movs	r3, #0
 8009f68:	2200      	movs	r2, #0
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 f81d 	bl	8009fac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009f72:	bf00      	nop
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b086      	sub	sp, #24
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	4603      	mov	r3, r0
 8009f82:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009f84:	2301      	movs	r3, #1
 8009f86:	617b      	str	r3, [r7, #20]
 8009f88:	2300      	movs	r3, #0
 8009f8a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009f8c:	79fb      	ldrb	r3, [r7, #7]
 8009f8e:	461a      	mov	r2, r3
 8009f90:	6939      	ldr	r1, [r7, #16]
 8009f92:	6978      	ldr	r0, [r7, #20]
 8009f94:	f7ff ff79 	bl	8009e8a <xQueueGenericCreate>
 8009f98:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f7ff ffd3 	bl	8009f46 <prvInitialiseMutex>

		return xNewQueue;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
	}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3718      	adds	r7, #24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
	...

08009fac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b08e      	sub	sp, #56	@ 0x38
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
 8009fb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10b      	bne.n	8009fe0 <xQueueGenericSend+0x34>
	__asm volatile
 8009fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009fda:	bf00      	nop
 8009fdc:	bf00      	nop
 8009fde:	e7fd      	b.n	8009fdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d103      	bne.n	8009fee <xQueueGenericSend+0x42>
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d101      	bne.n	8009ff2 <xQueueGenericSend+0x46>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e000      	b.n	8009ff4 <xQueueGenericSend+0x48>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10b      	bne.n	800a010 <xQueueGenericSend+0x64>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a00a:	bf00      	nop
 800a00c:	bf00      	nop
 800a00e:	e7fd      	b.n	800a00c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	2b02      	cmp	r3, #2
 800a014:	d103      	bne.n	800a01e <xQueueGenericSend+0x72>
 800a016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d101      	bne.n	800a022 <xQueueGenericSend+0x76>
 800a01e:	2301      	movs	r3, #1
 800a020:	e000      	b.n	800a024 <xQueueGenericSend+0x78>
 800a022:	2300      	movs	r3, #0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10b      	bne.n	800a040 <xQueueGenericSend+0x94>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	623b      	str	r3, [r7, #32]
}
 800a03a:	bf00      	nop
 800a03c:	bf00      	nop
 800a03e:	e7fd      	b.n	800a03c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a040:	f001 fb44 	bl	800b6cc <xTaskGetSchedulerState>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d102      	bne.n	800a050 <xQueueGenericSend+0xa4>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d101      	bne.n	800a054 <xQueueGenericSend+0xa8>
 800a050:	2301      	movs	r3, #1
 800a052:	e000      	b.n	800a056 <xQueueGenericSend+0xaa>
 800a054:	2300      	movs	r3, #0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10b      	bne.n	800a072 <xQueueGenericSend+0xc6>
	__asm volatile
 800a05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a05e:	f383 8811 	msr	BASEPRI, r3
 800a062:	f3bf 8f6f 	isb	sy
 800a066:	f3bf 8f4f 	dsb	sy
 800a06a:	61fb      	str	r3, [r7, #28]
}
 800a06c:	bf00      	nop
 800a06e:	bf00      	nop
 800a070:	e7fd      	b.n	800a06e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a072:	f002 f999 	bl	800c3a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a078:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a07e:	429a      	cmp	r2, r3
 800a080:	d302      	bcc.n	800a088 <xQueueGenericSend+0xdc>
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	2b02      	cmp	r3, #2
 800a086:	d129      	bne.n	800a0dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a088:	683a      	ldr	r2, [r7, #0]
 800a08a:	68b9      	ldr	r1, [r7, #8]
 800a08c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a08e:	f000 fb56 	bl	800a73e <prvCopyDataToQueue>
 800a092:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d010      	beq.n	800a0be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09e:	3324      	adds	r3, #36	@ 0x24
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f001 f94d 	bl	800b340 <xTaskRemoveFromEventList>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d013      	beq.n	800a0d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a0ac:	4b3f      	ldr	r3, [pc, #252]	@ (800a1ac <xQueueGenericSend+0x200>)
 800a0ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0b2:	601a      	str	r2, [r3, #0]
 800a0b4:	f3bf 8f4f 	dsb	sy
 800a0b8:	f3bf 8f6f 	isb	sy
 800a0bc:	e00a      	b.n	800a0d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d007      	beq.n	800a0d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a0c4:	4b39      	ldr	r3, [pc, #228]	@ (800a1ac <xQueueGenericSend+0x200>)
 800a0c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0ca:	601a      	str	r2, [r3, #0]
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a0d4:	f002 f99a 	bl	800c40c <vPortExitCritical>
				return pdPASS;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e063      	b.n	800a1a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d103      	bne.n	800a0ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0e2:	f002 f993 	bl	800c40c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	e05c      	b.n	800a1a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d106      	bne.n	800a0fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0f0:	f107 0314 	add.w	r3, r7, #20
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f001 f987 	bl	800b408 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0fe:	f002 f985 	bl	800c40c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a102:	f000 feef 	bl	800aee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a106:	f002 f94f 	bl	800c3a8 <vPortEnterCritical>
 800a10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a110:	b25b      	sxtb	r3, r3
 800a112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a116:	d103      	bne.n	800a120 <xQueueGenericSend+0x174>
 800a118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a122:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a126:	b25b      	sxtb	r3, r3
 800a128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12c:	d103      	bne.n	800a136 <xQueueGenericSend+0x18a>
 800a12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a130:	2200      	movs	r2, #0
 800a132:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a136:	f002 f969 	bl	800c40c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a13a:	1d3a      	adds	r2, r7, #4
 800a13c:	f107 0314 	add.w	r3, r7, #20
 800a140:	4611      	mov	r1, r2
 800a142:	4618      	mov	r0, r3
 800a144:	f001 f976 	bl	800b434 <xTaskCheckForTimeOut>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d124      	bne.n	800a198 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a14e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a150:	f000 fbed 	bl	800a92e <prvIsQueueFull>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d018      	beq.n	800a18c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15c:	3310      	adds	r3, #16
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	4611      	mov	r1, r2
 800a162:	4618      	mov	r0, r3
 800a164:	f001 f89a 	bl	800b29c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a16a:	f000 fb78 	bl	800a85e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a16e:	f000 fec7 	bl	800af00 <xTaskResumeAll>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	f47f af7c 	bne.w	800a072 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a17a:	4b0c      	ldr	r3, [pc, #48]	@ (800a1ac <xQueueGenericSend+0x200>)
 800a17c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a180:	601a      	str	r2, [r3, #0]
 800a182:	f3bf 8f4f 	dsb	sy
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	e772      	b.n	800a072 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a18c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a18e:	f000 fb66 	bl	800a85e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a192:	f000 feb5 	bl	800af00 <xTaskResumeAll>
 800a196:	e76c      	b.n	800a072 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a198:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a19a:	f000 fb60 	bl	800a85e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a19e:	f000 feaf 	bl	800af00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a1a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3738      	adds	r7, #56	@ 0x38
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	e000ed04 	.word	0xe000ed04

0800a1b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b090      	sub	sp, #64	@ 0x40
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
 800a1bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d10b      	bne.n	800a1e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a1c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1cc:	f383 8811 	msr	BASEPRI, r3
 800a1d0:	f3bf 8f6f 	isb	sy
 800a1d4:	f3bf 8f4f 	dsb	sy
 800a1d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a1da:	bf00      	nop
 800a1dc:	bf00      	nop
 800a1de:	e7fd      	b.n	800a1dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d103      	bne.n	800a1ee <xQueueGenericSendFromISR+0x3e>
 800a1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d101      	bne.n	800a1f2 <xQueueGenericSendFromISR+0x42>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e000      	b.n	800a1f4 <xQueueGenericSendFromISR+0x44>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d10b      	bne.n	800a210 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fc:	f383 8811 	msr	BASEPRI, r3
 800a200:	f3bf 8f6f 	isb	sy
 800a204:	f3bf 8f4f 	dsb	sy
 800a208:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a20a:	bf00      	nop
 800a20c:	bf00      	nop
 800a20e:	e7fd      	b.n	800a20c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	2b02      	cmp	r3, #2
 800a214:	d103      	bne.n	800a21e <xQueueGenericSendFromISR+0x6e>
 800a216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d101      	bne.n	800a222 <xQueueGenericSendFromISR+0x72>
 800a21e:	2301      	movs	r3, #1
 800a220:	e000      	b.n	800a224 <xQueueGenericSendFromISR+0x74>
 800a222:	2300      	movs	r3, #0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10b      	bne.n	800a240 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22c:	f383 8811 	msr	BASEPRI, r3
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	623b      	str	r3, [r7, #32]
}
 800a23a:	bf00      	nop
 800a23c:	bf00      	nop
 800a23e:	e7fd      	b.n	800a23c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a240:	f002 f992 	bl	800c568 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a244:	f3ef 8211 	mrs	r2, BASEPRI
 800a248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a24c:	f383 8811 	msr	BASEPRI, r3
 800a250:	f3bf 8f6f 	isb	sy
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	61fa      	str	r2, [r7, #28]
 800a25a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a25c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a25e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a262:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a268:	429a      	cmp	r2, r3
 800a26a:	d302      	bcc.n	800a272 <xQueueGenericSendFromISR+0xc2>
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2b02      	cmp	r3, #2
 800a270:	d12f      	bne.n	800a2d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a274:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a278:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a27e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a280:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a282:	683a      	ldr	r2, [r7, #0]
 800a284:	68b9      	ldr	r1, [r7, #8]
 800a286:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a288:	f000 fa59 	bl	800a73e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a28c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a294:	d112      	bne.n	800a2bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d016      	beq.n	800a2cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a0:	3324      	adds	r3, #36	@ 0x24
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f001 f84c 	bl	800b340 <xTaskRemoveFromEventList>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00e      	beq.n	800a2cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00b      	beq.n	800a2cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	601a      	str	r2, [r3, #0]
 800a2ba:	e007      	b.n	800a2cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	b25a      	sxtb	r2, r3
 800a2c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a2d0:	e001      	b.n	800a2d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a2e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3740      	adds	r7, #64	@ 0x40
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b08c      	sub	sp, #48	@ 0x30
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10b      	bne.n	800a31e <xQueueReceive+0x32>
	__asm volatile
 800a306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	623b      	str	r3, [r7, #32]
}
 800a318:	bf00      	nop
 800a31a:	bf00      	nop
 800a31c:	e7fd      	b.n	800a31a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d103      	bne.n	800a32c <xQueueReceive+0x40>
 800a324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d101      	bne.n	800a330 <xQueueReceive+0x44>
 800a32c:	2301      	movs	r3, #1
 800a32e:	e000      	b.n	800a332 <xQueueReceive+0x46>
 800a330:	2300      	movs	r3, #0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10b      	bne.n	800a34e <xQueueReceive+0x62>
	__asm volatile
 800a336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a33a:	f383 8811 	msr	BASEPRI, r3
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	f3bf 8f4f 	dsb	sy
 800a346:	61fb      	str	r3, [r7, #28]
}
 800a348:	bf00      	nop
 800a34a:	bf00      	nop
 800a34c:	e7fd      	b.n	800a34a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a34e:	f001 f9bd 	bl	800b6cc <xTaskGetSchedulerState>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d102      	bne.n	800a35e <xQueueReceive+0x72>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d101      	bne.n	800a362 <xQueueReceive+0x76>
 800a35e:	2301      	movs	r3, #1
 800a360:	e000      	b.n	800a364 <xQueueReceive+0x78>
 800a362:	2300      	movs	r3, #0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10b      	bne.n	800a380 <xQueueReceive+0x94>
	__asm volatile
 800a368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36c:	f383 8811 	msr	BASEPRI, r3
 800a370:	f3bf 8f6f 	isb	sy
 800a374:	f3bf 8f4f 	dsb	sy
 800a378:	61bb      	str	r3, [r7, #24]
}
 800a37a:	bf00      	nop
 800a37c:	bf00      	nop
 800a37e:	e7fd      	b.n	800a37c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a380:	f002 f812 	bl	800c3a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a388:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d01f      	beq.n	800a3d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a390:	68b9      	ldr	r1, [r7, #8]
 800a392:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a394:	f000 fa3d 	bl	800a812 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a39a:	1e5a      	subs	r2, r3, #1
 800a39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00f      	beq.n	800a3c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3aa:	3310      	adds	r3, #16
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f000 ffc7 	bl	800b340 <xTaskRemoveFromEventList>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d007      	beq.n	800a3c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a3b8:	4b3c      	ldr	r3, [pc, #240]	@ (800a4ac <xQueueReceive+0x1c0>)
 800a3ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3be:	601a      	str	r2, [r3, #0]
 800a3c0:	f3bf 8f4f 	dsb	sy
 800a3c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a3c8:	f002 f820 	bl	800c40c <vPortExitCritical>
				return pdPASS;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e069      	b.n	800a4a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d103      	bne.n	800a3de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3d6:	f002 f819 	bl	800c40c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	e062      	b.n	800a4a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d106      	bne.n	800a3f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3e4:	f107 0310 	add.w	r3, r7, #16
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f001 f80d 	bl	800b408 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3f2:	f002 f80b 	bl	800c40c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3f6:	f000 fd75 	bl	800aee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3fa:	f001 ffd5 	bl	800c3a8 <vPortEnterCritical>
 800a3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a400:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a404:	b25b      	sxtb	r3, r3
 800a406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a40a:	d103      	bne.n	800a414 <xQueueReceive+0x128>
 800a40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a416:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a41a:	b25b      	sxtb	r3, r3
 800a41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a420:	d103      	bne.n	800a42a <xQueueReceive+0x13e>
 800a422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a424:	2200      	movs	r2, #0
 800a426:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a42a:	f001 ffef 	bl	800c40c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a42e:	1d3a      	adds	r2, r7, #4
 800a430:	f107 0310 	add.w	r3, r7, #16
 800a434:	4611      	mov	r1, r2
 800a436:	4618      	mov	r0, r3
 800a438:	f000 fffc 	bl	800b434 <xTaskCheckForTimeOut>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d123      	bne.n	800a48a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a444:	f000 fa5d 	bl	800a902 <prvIsQueueEmpty>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d017      	beq.n	800a47e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a450:	3324      	adds	r3, #36	@ 0x24
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	4611      	mov	r1, r2
 800a456:	4618      	mov	r0, r3
 800a458:	f000 ff20 	bl	800b29c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a45c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a45e:	f000 f9fe 	bl	800a85e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a462:	f000 fd4d 	bl	800af00 <xTaskResumeAll>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d189      	bne.n	800a380 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a46c:	4b0f      	ldr	r3, [pc, #60]	@ (800a4ac <xQueueReceive+0x1c0>)
 800a46e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a472:	601a      	str	r2, [r3, #0]
 800a474:	f3bf 8f4f 	dsb	sy
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	e780      	b.n	800a380 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a47e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a480:	f000 f9ed 	bl	800a85e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a484:	f000 fd3c 	bl	800af00 <xTaskResumeAll>
 800a488:	e77a      	b.n	800a380 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a48a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a48c:	f000 f9e7 	bl	800a85e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a490:	f000 fd36 	bl	800af00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a494:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a496:	f000 fa34 	bl	800a902 <prvIsQueueEmpty>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f43f af6f 	beq.w	800a380 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a4a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3730      	adds	r7, #48	@ 0x30
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	e000ed04 	.word	0xe000ed04

0800a4b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b08e      	sub	sp, #56	@ 0x38
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10b      	bne.n	800a4e4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	623b      	str	r3, [r7, #32]
}
 800a4de:	bf00      	nop
 800a4e0:	bf00      	nop
 800a4e2:	e7fd      	b.n	800a4e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00b      	beq.n	800a504 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	61fb      	str	r3, [r7, #28]
}
 800a4fe:	bf00      	nop
 800a500:	bf00      	nop
 800a502:	e7fd      	b.n	800a500 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a504:	f001 f8e2 	bl	800b6cc <xTaskGetSchedulerState>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d102      	bne.n	800a514 <xQueueSemaphoreTake+0x64>
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d101      	bne.n	800a518 <xQueueSemaphoreTake+0x68>
 800a514:	2301      	movs	r3, #1
 800a516:	e000      	b.n	800a51a <xQueueSemaphoreTake+0x6a>
 800a518:	2300      	movs	r3, #0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10b      	bne.n	800a536 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	61bb      	str	r3, [r7, #24]
}
 800a530:	bf00      	nop
 800a532:	bf00      	nop
 800a534:	e7fd      	b.n	800a532 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a536:	f001 ff37 	bl	800c3a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a53c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a53e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a542:	2b00      	cmp	r3, #0
 800a544:	d024      	beq.n	800a590 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a548:	1e5a      	subs	r2, r3, #1
 800a54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a54c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a54e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d104      	bne.n	800a560 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a556:	f001 fa33 	bl	800b9c0 <pvTaskIncrementMutexHeldCount>
 800a55a:	4602      	mov	r2, r0
 800a55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a55e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d00f      	beq.n	800a588 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56a:	3310      	adds	r3, #16
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 fee7 	bl	800b340 <xTaskRemoveFromEventList>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d007      	beq.n	800a588 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a578:	4b54      	ldr	r3, [pc, #336]	@ (800a6cc <xQueueSemaphoreTake+0x21c>)
 800a57a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a57e:	601a      	str	r2, [r3, #0]
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a588:	f001 ff40 	bl	800c40c <vPortExitCritical>
				return pdPASS;
 800a58c:	2301      	movs	r3, #1
 800a58e:	e098      	b.n	800a6c2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d112      	bne.n	800a5bc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00b      	beq.n	800a5b4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a59c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	617b      	str	r3, [r7, #20]
}
 800a5ae:	bf00      	nop
 800a5b0:	bf00      	nop
 800a5b2:	e7fd      	b.n	800a5b0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a5b4:	f001 ff2a 	bl	800c40c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	e082      	b.n	800a6c2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d106      	bne.n	800a5d0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5c2:	f107 030c 	add.w	r3, r7, #12
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f000 ff1e 	bl	800b408 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5d0:	f001 ff1c 	bl	800c40c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5d4:	f000 fc86 	bl	800aee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5d8:	f001 fee6 	bl	800c3a8 <vPortEnterCritical>
 800a5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a5e2:	b25b      	sxtb	r3, r3
 800a5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e8:	d103      	bne.n	800a5f2 <xQueueSemaphoreTake+0x142>
 800a5ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a5f8:	b25b      	sxtb	r3, r3
 800a5fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5fe:	d103      	bne.n	800a608 <xQueueSemaphoreTake+0x158>
 800a600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a602:	2200      	movs	r2, #0
 800a604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a608:	f001 ff00 	bl	800c40c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a60c:	463a      	mov	r2, r7
 800a60e:	f107 030c 	add.w	r3, r7, #12
 800a612:	4611      	mov	r1, r2
 800a614:	4618      	mov	r0, r3
 800a616:	f000 ff0d 	bl	800b434 <xTaskCheckForTimeOut>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d132      	bne.n	800a686 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a620:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a622:	f000 f96e 	bl	800a902 <prvIsQueueEmpty>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d026      	beq.n	800a67a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d109      	bne.n	800a648 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a634:	f001 feb8 	bl	800c3a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f001 f863 	bl	800b708 <xTaskPriorityInherit>
 800a642:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a644:	f001 fee2 	bl	800c40c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a64a:	3324      	adds	r3, #36	@ 0x24
 800a64c:	683a      	ldr	r2, [r7, #0]
 800a64e:	4611      	mov	r1, r2
 800a650:	4618      	mov	r0, r3
 800a652:	f000 fe23 	bl	800b29c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a656:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a658:	f000 f901 	bl	800a85e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a65c:	f000 fc50 	bl	800af00 <xTaskResumeAll>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	f47f af67 	bne.w	800a536 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a668:	4b18      	ldr	r3, [pc, #96]	@ (800a6cc <xQueueSemaphoreTake+0x21c>)
 800a66a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a66e:	601a      	str	r2, [r3, #0]
 800a670:	f3bf 8f4f 	dsb	sy
 800a674:	f3bf 8f6f 	isb	sy
 800a678:	e75d      	b.n	800a536 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a67a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a67c:	f000 f8ef 	bl	800a85e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a680:	f000 fc3e 	bl	800af00 <xTaskResumeAll>
 800a684:	e757      	b.n	800a536 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a686:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a688:	f000 f8e9 	bl	800a85e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a68c:	f000 fc38 	bl	800af00 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a690:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a692:	f000 f936 	bl	800a902 <prvIsQueueEmpty>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f43f af4c 	beq.w	800a536 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00d      	beq.n	800a6c0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a6a4:	f001 fe80 	bl	800c3a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a6a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a6aa:	f000 f830 	bl	800a70e <prvGetDisinheritPriorityAfterTimeout>
 800a6ae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a6b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f001 f8fe 	bl	800b8b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a6bc:	f001 fea6 	bl	800c40c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3738      	adds	r7, #56	@ 0x38
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	e000ed04 	.word	0xe000ed04

0800a6d0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10b      	bne.n	800a6f6 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800a6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e2:	f383 8811 	msr	BASEPRI, r3
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	60bb      	str	r3, [r7, #8]
}
 800a6f0:	bf00      	nop
 800a6f2:	bf00      	nop
 800a6f4:	e7fd      	b.n	800a6f2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a6f6:	f001 fe57 	bl	800c3a8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6fe:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a700:	f001 fe84 	bl	800c40c <vPortExitCritical>

	return uxReturn;
 800a704:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a706:	4618      	mov	r0, r3
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a70e:	b480      	push	{r7}
 800a710:	b085      	sub	sp, #20
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d006      	beq.n	800a72c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a728:	60fb      	str	r3, [r7, #12]
 800a72a:	e001      	b.n	800a730 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a72c:	2300      	movs	r3, #0
 800a72e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a730:	68fb      	ldr	r3, [r7, #12]
	}
 800a732:	4618      	mov	r0, r3
 800a734:	3714      	adds	r7, #20
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b086      	sub	sp, #24
 800a742:	af00      	add	r7, sp, #0
 800a744:	60f8      	str	r0, [r7, #12]
 800a746:	60b9      	str	r1, [r7, #8]
 800a748:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a74a:	2300      	movs	r3, #0
 800a74c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a752:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d10d      	bne.n	800a778 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d14d      	bne.n	800a800 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	4618      	mov	r0, r3
 800a76a:	f001 f835 	bl	800b7d8 <xTaskPriorityDisinherit>
 800a76e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2200      	movs	r2, #0
 800a774:	609a      	str	r2, [r3, #8]
 800a776:	e043      	b.n	800a800 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d119      	bne.n	800a7b2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	6858      	ldr	r0, [r3, #4]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a786:	461a      	mov	r2, r3
 800a788:	68b9      	ldr	r1, [r7, #8]
 800a78a:	f003 fa00 	bl	800db8e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a796:	441a      	add	r2, r3
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	685a      	ldr	r2, [r3, #4]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d32b      	bcc.n	800a800 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	605a      	str	r2, [r3, #4]
 800a7b0:	e026      	b.n	800a800 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	68d8      	ldr	r0, [r3, #12]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	68b9      	ldr	r1, [r7, #8]
 800a7be:	f003 f9e6 	bl	800db8e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	68da      	ldr	r2, [r3, #12]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ca:	425b      	negs	r3, r3
 800a7cc:	441a      	add	r2, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	68da      	ldr	r2, [r3, #12]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d207      	bcs.n	800a7ee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	689a      	ldr	r2, [r3, #8]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7e6:	425b      	negs	r3, r3
 800a7e8:	441a      	add	r2, r3
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d105      	bne.n	800a800 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d002      	beq.n	800a800 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	3b01      	subs	r3, #1
 800a7fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	1c5a      	adds	r2, r3, #1
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a808:	697b      	ldr	r3, [r7, #20]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b082      	sub	sp, #8
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a820:	2b00      	cmp	r3, #0
 800a822:	d018      	beq.n	800a856 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	68da      	ldr	r2, [r3, #12]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a82c:	441a      	add	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	68da      	ldr	r2, [r3, #12]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d303      	bcc.n	800a846 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	68d9      	ldr	r1, [r3, #12]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a84e:	461a      	mov	r2, r3
 800a850:	6838      	ldr	r0, [r7, #0]
 800a852:	f003 f99c 	bl	800db8e <memcpy>
	}
}
 800a856:	bf00      	nop
 800a858:	3708      	adds	r7, #8
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b084      	sub	sp, #16
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a866:	f001 fd9f 	bl	800c3a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a870:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a872:	e011      	b.n	800a898 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d012      	beq.n	800a8a2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	3324      	adds	r3, #36	@ 0x24
 800a880:	4618      	mov	r0, r3
 800a882:	f000 fd5d 	bl	800b340 <xTaskRemoveFromEventList>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d001      	beq.n	800a890 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a88c:	f000 fe36 	bl	800b4fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a890:	7bfb      	ldrb	r3, [r7, #15]
 800a892:	3b01      	subs	r3, #1
 800a894:	b2db      	uxtb	r3, r3
 800a896:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	dce9      	bgt.n	800a874 <prvUnlockQueue+0x16>
 800a8a0:	e000      	b.n	800a8a4 <prvUnlockQueue+0x46>
					break;
 800a8a2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	22ff      	movs	r2, #255	@ 0xff
 800a8a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a8ac:	f001 fdae 	bl	800c40c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a8b0:	f001 fd7a 	bl	800c3a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8ba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8bc:	e011      	b.n	800a8e2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d012      	beq.n	800a8ec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	3310      	adds	r3, #16
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f000 fd38 	bl	800b340 <xTaskRemoveFromEventList>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a8d6:	f000 fe11 	bl	800b4fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a8da:	7bbb      	ldrb	r3, [r7, #14]
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	dce9      	bgt.n	800a8be <prvUnlockQueue+0x60>
 800a8ea:	e000      	b.n	800a8ee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a8ec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	22ff      	movs	r2, #255	@ 0xff
 800a8f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a8f6:	f001 fd89 	bl	800c40c <vPortExitCritical>
}
 800a8fa:	bf00      	nop
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b084      	sub	sp, #16
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a90a:	f001 fd4d 	bl	800c3a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a912:	2b00      	cmp	r3, #0
 800a914:	d102      	bne.n	800a91c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a916:	2301      	movs	r3, #1
 800a918:	60fb      	str	r3, [r7, #12]
 800a91a:	e001      	b.n	800a920 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a91c:	2300      	movs	r3, #0
 800a91e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a920:	f001 fd74 	bl	800c40c <vPortExitCritical>

	return xReturn;
 800a924:	68fb      	ldr	r3, [r7, #12]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b084      	sub	sp, #16
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a936:	f001 fd37 	bl	800c3a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a942:	429a      	cmp	r2, r3
 800a944:	d102      	bne.n	800a94c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a946:	2301      	movs	r3, #1
 800a948:	60fb      	str	r3, [r7, #12]
 800a94a:	e001      	b.n	800a950 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a94c:	2300      	movs	r3, #0
 800a94e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a950:	f001 fd5c 	bl	800c40c <vPortExitCritical>

	return xReturn;
 800a954:	68fb      	ldr	r3, [r7, #12]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
	...

0800a960 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a96a:	2300      	movs	r3, #0
 800a96c:	60fb      	str	r3, [r7, #12]
 800a96e:	e014      	b.n	800a99a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a970:	4a0f      	ldr	r2, [pc, #60]	@ (800a9b0 <vQueueAddToRegistry+0x50>)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d10b      	bne.n	800a994 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a97c:	490c      	ldr	r1, [pc, #48]	@ (800a9b0 <vQueueAddToRegistry+0x50>)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	683a      	ldr	r2, [r7, #0]
 800a982:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a986:	4a0a      	ldr	r2, [pc, #40]	@ (800a9b0 <vQueueAddToRegistry+0x50>)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	00db      	lsls	r3, r3, #3
 800a98c:	4413      	add	r3, r2
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a992:	e006      	b.n	800a9a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	3301      	adds	r3, #1
 800a998:	60fb      	str	r3, [r7, #12]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2b07      	cmp	r3, #7
 800a99e:	d9e7      	bls.n	800a970 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a9a0:	bf00      	nop
 800a9a2:	bf00      	nop
 800a9a4:	3714      	adds	r7, #20
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop
 800a9b0:	20001128 	.word	0x20001128

0800a9b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b086      	sub	sp, #24
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a9c4:	f001 fcf0 	bl	800c3a8 <vPortEnterCritical>
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9ce:	b25b      	sxtb	r3, r3
 800a9d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d4:	d103      	bne.n	800a9de <vQueueWaitForMessageRestricted+0x2a>
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9e4:	b25b      	sxtb	r3, r3
 800a9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ea:	d103      	bne.n	800a9f4 <vQueueWaitForMessageRestricted+0x40>
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a9f4:	f001 fd0a 	bl	800c40c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d106      	bne.n	800aa0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	3324      	adds	r3, #36	@ 0x24
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	68b9      	ldr	r1, [r7, #8]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f000 fc6d 	bl	800b2e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aa0e:	6978      	ldr	r0, [r7, #20]
 800aa10:	f7ff ff25 	bl	800a85e <prvUnlockQueue>
	}
 800aa14:	bf00      	nop
 800aa16:	3718      	adds	r7, #24
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b08e      	sub	sp, #56	@ 0x38
 800aa20:	af04      	add	r7, sp, #16
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
 800aa28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aa2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10b      	bne.n	800aa48 <xTaskCreateStatic+0x2c>
	__asm volatile
 800aa30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	623b      	str	r3, [r7, #32]
}
 800aa42:	bf00      	nop
 800aa44:	bf00      	nop
 800aa46:	e7fd      	b.n	800aa44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aa48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d10b      	bne.n	800aa66 <xTaskCreateStatic+0x4a>
	__asm volatile
 800aa4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa52:	f383 8811 	msr	BASEPRI, r3
 800aa56:	f3bf 8f6f 	isb	sy
 800aa5a:	f3bf 8f4f 	dsb	sy
 800aa5e:	61fb      	str	r3, [r7, #28]
}
 800aa60:	bf00      	nop
 800aa62:	bf00      	nop
 800aa64:	e7fd      	b.n	800aa62 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa66:	23a8      	movs	r3, #168	@ 0xa8
 800aa68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	2ba8      	cmp	r3, #168	@ 0xa8
 800aa6e:	d00b      	beq.n	800aa88 <xTaskCreateStatic+0x6c>
	__asm volatile
 800aa70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa74:	f383 8811 	msr	BASEPRI, r3
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	61bb      	str	r3, [r7, #24]
}
 800aa82:	bf00      	nop
 800aa84:	bf00      	nop
 800aa86:	e7fd      	b.n	800aa84 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aa88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aa8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d01e      	beq.n	800aace <xTaskCreateStatic+0xb2>
 800aa90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d01b      	beq.n	800aace <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa98:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa9e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	9303      	str	r3, [sp, #12]
 800aaac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaae:	9302      	str	r3, [sp, #8]
 800aab0:	f107 0314 	add.w	r3, r7, #20
 800aab4:	9301      	str	r3, [sp, #4]
 800aab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab8:	9300      	str	r3, [sp, #0]
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	68b9      	ldr	r1, [r7, #8]
 800aac0:	68f8      	ldr	r0, [r7, #12]
 800aac2:	f000 f851 	bl	800ab68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aac6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aac8:	f000 f8f6 	bl	800acb8 <prvAddNewTaskToReadyList>
 800aacc:	e001      	b.n	800aad2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aace:	2300      	movs	r3, #0
 800aad0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aad2:	697b      	ldr	r3, [r7, #20]
	}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3728      	adds	r7, #40	@ 0x28
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b08c      	sub	sp, #48	@ 0x30
 800aae0:	af04      	add	r7, sp, #16
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	603b      	str	r3, [r7, #0]
 800aae8:	4613      	mov	r3, r2
 800aaea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aaec:	88fb      	ldrh	r3, [r7, #6]
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f001 fd7b 	bl	800c5ec <pvPortMalloc>
 800aaf6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00e      	beq.n	800ab1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aafe:	20a8      	movs	r0, #168	@ 0xa8
 800ab00:	f001 fd74 	bl	800c5ec <pvPortMalloc>
 800ab04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d003      	beq.n	800ab14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	697a      	ldr	r2, [r7, #20]
 800ab10:	631a      	str	r2, [r3, #48]	@ 0x30
 800ab12:	e005      	b.n	800ab20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ab14:	6978      	ldr	r0, [r7, #20]
 800ab16:	f001 fe37 	bl	800c788 <vPortFree>
 800ab1a:	e001      	b.n	800ab20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d017      	beq.n	800ab56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ab2e:	88fa      	ldrh	r2, [r7, #6]
 800ab30:	2300      	movs	r3, #0
 800ab32:	9303      	str	r3, [sp, #12]
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	9302      	str	r3, [sp, #8]
 800ab38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab3a:	9301      	str	r3, [sp, #4]
 800ab3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3e:	9300      	str	r3, [sp, #0]
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	68b9      	ldr	r1, [r7, #8]
 800ab44:	68f8      	ldr	r0, [r7, #12]
 800ab46:	f000 f80f 	bl	800ab68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab4a:	69f8      	ldr	r0, [r7, #28]
 800ab4c:	f000 f8b4 	bl	800acb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab50:	2301      	movs	r3, #1
 800ab52:	61bb      	str	r3, [r7, #24]
 800ab54:	e002      	b.n	800ab5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab56:	f04f 33ff 	mov.w	r3, #4294967295
 800ab5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab5c:	69bb      	ldr	r3, [r7, #24]
	}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3720      	adds	r7, #32
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
	...

0800ab68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b088      	sub	sp, #32
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	607a      	str	r2, [r7, #4]
 800ab74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ab76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab78:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	461a      	mov	r2, r3
 800ab80:	21a5      	movs	r1, #165	@ 0xa5
 800ab82:	f002 fef8 	bl	800d976 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ab86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ab90:	3b01      	subs	r3, #1
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	4413      	add	r3, r2
 800ab96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	f023 0307 	bic.w	r3, r3, #7
 800ab9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	f003 0307 	and.w	r3, r3, #7
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00b      	beq.n	800abc2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800abaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abae:	f383 8811 	msr	BASEPRI, r3
 800abb2:	f3bf 8f6f 	isb	sy
 800abb6:	f3bf 8f4f 	dsb	sy
 800abba:	617b      	str	r3, [r7, #20]
}
 800abbc:	bf00      	nop
 800abbe:	bf00      	nop
 800abc0:	e7fd      	b.n	800abbe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d01f      	beq.n	800ac08 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abc8:	2300      	movs	r3, #0
 800abca:	61fb      	str	r3, [r7, #28]
 800abcc:	e012      	b.n	800abf4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	4413      	add	r3, r2
 800abd4:	7819      	ldrb	r1, [r3, #0]
 800abd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	4413      	add	r3, r2
 800abdc:	3334      	adds	r3, #52	@ 0x34
 800abde:	460a      	mov	r2, r1
 800abe0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	4413      	add	r3, r2
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d006      	beq.n	800abfc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	3301      	adds	r3, #1
 800abf2:	61fb      	str	r3, [r7, #28]
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	2b0f      	cmp	r3, #15
 800abf8:	d9e9      	bls.n	800abce <prvInitialiseNewTask+0x66>
 800abfa:	e000      	b.n	800abfe <prvInitialiseNewTask+0x96>
			{
				break;
 800abfc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800abfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ac06:	e003      	b.n	800ac10 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ac08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ac10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac12:	2b37      	cmp	r3, #55	@ 0x37
 800ac14:	d901      	bls.n	800ac1a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ac16:	2337      	movs	r3, #55	@ 0x37
 800ac18:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac1e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ac20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac24:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ac26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac28:	2200      	movs	r2, #0
 800ac2a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac2e:	3304      	adds	r3, #4
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7fe ffaf 	bl	8009b94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac38:	3318      	adds	r3, #24
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fe ffaa 	bl	8009b94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ac40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac44:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ac4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ac50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac54:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ac56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac60:	2200      	movs	r2, #0
 800ac62:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ac66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac68:	3354      	adds	r3, #84	@ 0x54
 800ac6a:	224c      	movs	r2, #76	@ 0x4c
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f002 fe81 	bl	800d976 <memset>
 800ac74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac76:	4a0d      	ldr	r2, [pc, #52]	@ (800acac <prvInitialiseNewTask+0x144>)
 800ac78:	659a      	str	r2, [r3, #88]	@ 0x58
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7c:	4a0c      	ldr	r2, [pc, #48]	@ (800acb0 <prvInitialiseNewTask+0x148>)
 800ac7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ac80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac82:	4a0c      	ldr	r2, [pc, #48]	@ (800acb4 <prvInitialiseNewTask+0x14c>)
 800ac84:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	68f9      	ldr	r1, [r7, #12]
 800ac8a:	69b8      	ldr	r0, [r7, #24]
 800ac8c:	f001 fa5a 	bl	800c144 <pxPortInitialiseStack>
 800ac90:	4602      	mov	r2, r0
 800ac92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ac96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d002      	beq.n	800aca2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aca0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aca2:	bf00      	nop
 800aca4:	3720      	adds	r7, #32
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	20008fbc 	.word	0x20008fbc
 800acb0:	20009024 	.word	0x20009024
 800acb4:	2000908c 	.word	0x2000908c

0800acb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800acc0:	f001 fb72 	bl	800c3a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800acc4:	4b2d      	ldr	r3, [pc, #180]	@ (800ad7c <prvAddNewTaskToReadyList+0xc4>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	3301      	adds	r3, #1
 800acca:	4a2c      	ldr	r2, [pc, #176]	@ (800ad7c <prvAddNewTaskToReadyList+0xc4>)
 800accc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800acce:	4b2c      	ldr	r3, [pc, #176]	@ (800ad80 <prvAddNewTaskToReadyList+0xc8>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d109      	bne.n	800acea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800acd6:	4a2a      	ldr	r2, [pc, #168]	@ (800ad80 <prvAddNewTaskToReadyList+0xc8>)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800acdc:	4b27      	ldr	r3, [pc, #156]	@ (800ad7c <prvAddNewTaskToReadyList+0xc4>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d110      	bne.n	800ad06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ace4:	f000 fc2e 	bl	800b544 <prvInitialiseTaskLists>
 800ace8:	e00d      	b.n	800ad06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800acea:	4b26      	ldr	r3, [pc, #152]	@ (800ad84 <prvAddNewTaskToReadyList+0xcc>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d109      	bne.n	800ad06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800acf2:	4b23      	ldr	r3, [pc, #140]	@ (800ad80 <prvAddNewTaskToReadyList+0xc8>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d802      	bhi.n	800ad06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad00:	4a1f      	ldr	r2, [pc, #124]	@ (800ad80 <prvAddNewTaskToReadyList+0xc8>)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad06:	4b20      	ldr	r3, [pc, #128]	@ (800ad88 <prvAddNewTaskToReadyList+0xd0>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	4a1e      	ldr	r2, [pc, #120]	@ (800ad88 <prvAddNewTaskToReadyList+0xd0>)
 800ad0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ad10:	4b1d      	ldr	r3, [pc, #116]	@ (800ad88 <prvAddNewTaskToReadyList+0xd0>)
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad1c:	4b1b      	ldr	r3, [pc, #108]	@ (800ad8c <prvAddNewTaskToReadyList+0xd4>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d903      	bls.n	800ad2c <prvAddNewTaskToReadyList+0x74>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad28:	4a18      	ldr	r2, [pc, #96]	@ (800ad8c <prvAddNewTaskToReadyList+0xd4>)
 800ad2a:	6013      	str	r3, [r2, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad30:	4613      	mov	r3, r2
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	4413      	add	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4a15      	ldr	r2, [pc, #84]	@ (800ad90 <prvAddNewTaskToReadyList+0xd8>)
 800ad3a:	441a      	add	r2, r3
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	3304      	adds	r3, #4
 800ad40:	4619      	mov	r1, r3
 800ad42:	4610      	mov	r0, r2
 800ad44:	f7fe ff33 	bl	8009bae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ad48:	f001 fb60 	bl	800c40c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad4c:	4b0d      	ldr	r3, [pc, #52]	@ (800ad84 <prvAddNewTaskToReadyList+0xcc>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d00e      	beq.n	800ad72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad54:	4b0a      	ldr	r3, [pc, #40]	@ (800ad80 <prvAddNewTaskToReadyList+0xc8>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d207      	bcs.n	800ad72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad62:	4b0c      	ldr	r3, [pc, #48]	@ (800ad94 <prvAddNewTaskToReadyList+0xdc>)
 800ad64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad68:	601a      	str	r2, [r3, #0]
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad72:	bf00      	nop
 800ad74:	3708      	adds	r7, #8
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	2000163c 	.word	0x2000163c
 800ad80:	20001168 	.word	0x20001168
 800ad84:	20001648 	.word	0x20001648
 800ad88:	20001658 	.word	0x20001658
 800ad8c:	20001644 	.word	0x20001644
 800ad90:	2000116c 	.word	0x2000116c
 800ad94:	e000ed04 	.word	0xe000ed04

0800ad98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ada0:	2300      	movs	r3, #0
 800ada2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d018      	beq.n	800addc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800adaa:	4b14      	ldr	r3, [pc, #80]	@ (800adfc <vTaskDelay+0x64>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00b      	beq.n	800adca <vTaskDelay+0x32>
	__asm volatile
 800adb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb6:	f383 8811 	msr	BASEPRI, r3
 800adba:	f3bf 8f6f 	isb	sy
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	60bb      	str	r3, [r7, #8]
}
 800adc4:	bf00      	nop
 800adc6:	bf00      	nop
 800adc8:	e7fd      	b.n	800adc6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800adca:	f000 f88b 	bl	800aee4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800adce:	2100      	movs	r1, #0
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 fe09 	bl	800b9e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800add6:	f000 f893 	bl	800af00 <xTaskResumeAll>
 800adda:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d107      	bne.n	800adf2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ade2:	4b07      	ldr	r3, [pc, #28]	@ (800ae00 <vTaskDelay+0x68>)
 800ade4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ade8:	601a      	str	r2, [r3, #0]
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800adf2:	bf00      	nop
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	20001664 	.word	0x20001664
 800ae00:	e000ed04 	.word	0xe000ed04

0800ae04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b08a      	sub	sp, #40	@ 0x28
 800ae08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae12:	463a      	mov	r2, r7
 800ae14:	1d39      	adds	r1, r7, #4
 800ae16:	f107 0308 	add.w	r3, r7, #8
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7fe fe66 	bl	8009aec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae20:	6839      	ldr	r1, [r7, #0]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	9202      	str	r2, [sp, #8]
 800ae28:	9301      	str	r3, [sp, #4]
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	9300      	str	r3, [sp, #0]
 800ae2e:	2300      	movs	r3, #0
 800ae30:	460a      	mov	r2, r1
 800ae32:	4924      	ldr	r1, [pc, #144]	@ (800aec4 <vTaskStartScheduler+0xc0>)
 800ae34:	4824      	ldr	r0, [pc, #144]	@ (800aec8 <vTaskStartScheduler+0xc4>)
 800ae36:	f7ff fdf1 	bl	800aa1c <xTaskCreateStatic>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	4a23      	ldr	r2, [pc, #140]	@ (800aecc <vTaskStartScheduler+0xc8>)
 800ae3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae40:	4b22      	ldr	r3, [pc, #136]	@ (800aecc <vTaskStartScheduler+0xc8>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d002      	beq.n	800ae4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	617b      	str	r3, [r7, #20]
 800ae4c:	e001      	b.n	800ae52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d102      	bne.n	800ae5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ae58:	f000 fe1a 	bl	800ba90 <xTimerCreateTimerTask>
 800ae5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d11b      	bne.n	800ae9c <vTaskStartScheduler+0x98>
	__asm volatile
 800ae64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	613b      	str	r3, [r7, #16]
}
 800ae76:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae78:	4b15      	ldr	r3, [pc, #84]	@ (800aed0 <vTaskStartScheduler+0xcc>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	3354      	adds	r3, #84	@ 0x54
 800ae7e:	4a15      	ldr	r2, [pc, #84]	@ (800aed4 <vTaskStartScheduler+0xd0>)
 800ae80:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae82:	4b15      	ldr	r3, [pc, #84]	@ (800aed8 <vTaskStartScheduler+0xd4>)
 800ae84:	f04f 32ff 	mov.w	r2, #4294967295
 800ae88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae8a:	4b14      	ldr	r3, [pc, #80]	@ (800aedc <vTaskStartScheduler+0xd8>)
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ae90:	4b13      	ldr	r3, [pc, #76]	@ (800aee0 <vTaskStartScheduler+0xdc>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae96:	f001 f9e3 	bl	800c260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae9a:	e00f      	b.n	800aebc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aea2:	d10b      	bne.n	800aebc <vTaskStartScheduler+0xb8>
	__asm volatile
 800aea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea8:	f383 8811 	msr	BASEPRI, r3
 800aeac:	f3bf 8f6f 	isb	sy
 800aeb0:	f3bf 8f4f 	dsb	sy
 800aeb4:	60fb      	str	r3, [r7, #12]
}
 800aeb6:	bf00      	nop
 800aeb8:	bf00      	nop
 800aeba:	e7fd      	b.n	800aeb8 <vTaskStartScheduler+0xb4>
}
 800aebc:	bf00      	nop
 800aebe:	3718      	adds	r7, #24
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	0801023c 	.word	0x0801023c
 800aec8:	0800b515 	.word	0x0800b515
 800aecc:	20001660 	.word	0x20001660
 800aed0:	20001168 	.word	0x20001168
 800aed4:	200001a8 	.word	0x200001a8
 800aed8:	2000165c 	.word	0x2000165c
 800aedc:	20001648 	.word	0x20001648
 800aee0:	20001640 	.word	0x20001640

0800aee4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aee4:	b480      	push	{r7}
 800aee6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aee8:	4b04      	ldr	r3, [pc, #16]	@ (800aefc <vTaskSuspendAll+0x18>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	3301      	adds	r3, #1
 800aeee:	4a03      	ldr	r2, [pc, #12]	@ (800aefc <vTaskSuspendAll+0x18>)
 800aef0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aef2:	bf00      	nop
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr
 800aefc:	20001664 	.word	0x20001664

0800af00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af06:	2300      	movs	r3, #0
 800af08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af0a:	2300      	movs	r3, #0
 800af0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af0e:	4b42      	ldr	r3, [pc, #264]	@ (800b018 <xTaskResumeAll+0x118>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d10b      	bne.n	800af2e <xTaskResumeAll+0x2e>
	__asm volatile
 800af16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af1a:	f383 8811 	msr	BASEPRI, r3
 800af1e:	f3bf 8f6f 	isb	sy
 800af22:	f3bf 8f4f 	dsb	sy
 800af26:	603b      	str	r3, [r7, #0]
}
 800af28:	bf00      	nop
 800af2a:	bf00      	nop
 800af2c:	e7fd      	b.n	800af2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af2e:	f001 fa3b 	bl	800c3a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af32:	4b39      	ldr	r3, [pc, #228]	@ (800b018 <xTaskResumeAll+0x118>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	3b01      	subs	r3, #1
 800af38:	4a37      	ldr	r2, [pc, #220]	@ (800b018 <xTaskResumeAll+0x118>)
 800af3a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af3c:	4b36      	ldr	r3, [pc, #216]	@ (800b018 <xTaskResumeAll+0x118>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d162      	bne.n	800b00a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af44:	4b35      	ldr	r3, [pc, #212]	@ (800b01c <xTaskResumeAll+0x11c>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d05e      	beq.n	800b00a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af4c:	e02f      	b.n	800afae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af4e:	4b34      	ldr	r3, [pc, #208]	@ (800b020 <xTaskResumeAll+0x120>)
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	3318      	adds	r3, #24
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7fe fe84 	bl	8009c68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	3304      	adds	r3, #4
 800af64:	4618      	mov	r0, r3
 800af66:	f7fe fe7f 	bl	8009c68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af6e:	4b2d      	ldr	r3, [pc, #180]	@ (800b024 <xTaskResumeAll+0x124>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	429a      	cmp	r2, r3
 800af74:	d903      	bls.n	800af7e <xTaskResumeAll+0x7e>
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af7a:	4a2a      	ldr	r2, [pc, #168]	@ (800b024 <xTaskResumeAll+0x124>)
 800af7c:	6013      	str	r3, [r2, #0]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af82:	4613      	mov	r3, r2
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	4413      	add	r3, r2
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	4a27      	ldr	r2, [pc, #156]	@ (800b028 <xTaskResumeAll+0x128>)
 800af8c:	441a      	add	r2, r3
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	3304      	adds	r3, #4
 800af92:	4619      	mov	r1, r3
 800af94:	4610      	mov	r0, r2
 800af96:	f7fe fe0a 	bl	8009bae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af9e:	4b23      	ldr	r3, [pc, #140]	@ (800b02c <xTaskResumeAll+0x12c>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d302      	bcc.n	800afae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800afa8:	4b21      	ldr	r3, [pc, #132]	@ (800b030 <xTaskResumeAll+0x130>)
 800afaa:	2201      	movs	r2, #1
 800afac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afae:	4b1c      	ldr	r3, [pc, #112]	@ (800b020 <xTaskResumeAll+0x120>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d1cb      	bne.n	800af4e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d001      	beq.n	800afc0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800afbc:	f000 fb66 	bl	800b68c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800afc0:	4b1c      	ldr	r3, [pc, #112]	@ (800b034 <xTaskResumeAll+0x134>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d010      	beq.n	800afee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800afcc:	f000 f846 	bl	800b05c <xTaskIncrementTick>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d002      	beq.n	800afdc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800afd6:	4b16      	ldr	r3, [pc, #88]	@ (800b030 <xTaskResumeAll+0x130>)
 800afd8:	2201      	movs	r2, #1
 800afda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3b01      	subs	r3, #1
 800afe0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1f1      	bne.n	800afcc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800afe8:	4b12      	ldr	r3, [pc, #72]	@ (800b034 <xTaskResumeAll+0x134>)
 800afea:	2200      	movs	r2, #0
 800afec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800afee:	4b10      	ldr	r3, [pc, #64]	@ (800b030 <xTaskResumeAll+0x130>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d009      	beq.n	800b00a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aff6:	2301      	movs	r3, #1
 800aff8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800affa:	4b0f      	ldr	r3, [pc, #60]	@ (800b038 <xTaskResumeAll+0x138>)
 800affc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b000:	601a      	str	r2, [r3, #0]
 800b002:	f3bf 8f4f 	dsb	sy
 800b006:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b00a:	f001 f9ff 	bl	800c40c <vPortExitCritical>

	return xAlreadyYielded;
 800b00e:	68bb      	ldr	r3, [r7, #8]
}
 800b010:	4618      	mov	r0, r3
 800b012:	3710      	adds	r7, #16
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	20001664 	.word	0x20001664
 800b01c:	2000163c 	.word	0x2000163c
 800b020:	200015fc 	.word	0x200015fc
 800b024:	20001644 	.word	0x20001644
 800b028:	2000116c 	.word	0x2000116c
 800b02c:	20001168 	.word	0x20001168
 800b030:	20001650 	.word	0x20001650
 800b034:	2000164c 	.word	0x2000164c
 800b038:	e000ed04 	.word	0xe000ed04

0800b03c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b042:	4b05      	ldr	r3, [pc, #20]	@ (800b058 <xTaskGetTickCount+0x1c>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b048:	687b      	ldr	r3, [r7, #4]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	370c      	adds	r7, #12
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr
 800b056:	bf00      	nop
 800b058:	20001640 	.word	0x20001640

0800b05c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b062:	2300      	movs	r3, #0
 800b064:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b066:	4b4f      	ldr	r3, [pc, #316]	@ (800b1a4 <xTaskIncrementTick+0x148>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f040 8090 	bne.w	800b190 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b070:	4b4d      	ldr	r3, [pc, #308]	@ (800b1a8 <xTaskIncrementTick+0x14c>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	3301      	adds	r3, #1
 800b076:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b078:	4a4b      	ldr	r2, [pc, #300]	@ (800b1a8 <xTaskIncrementTick+0x14c>)
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d121      	bne.n	800b0c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b084:	4b49      	ldr	r3, [pc, #292]	@ (800b1ac <xTaskIncrementTick+0x150>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00b      	beq.n	800b0a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b092:	f383 8811 	msr	BASEPRI, r3
 800b096:	f3bf 8f6f 	isb	sy
 800b09a:	f3bf 8f4f 	dsb	sy
 800b09e:	603b      	str	r3, [r7, #0]
}
 800b0a0:	bf00      	nop
 800b0a2:	bf00      	nop
 800b0a4:	e7fd      	b.n	800b0a2 <xTaskIncrementTick+0x46>
 800b0a6:	4b41      	ldr	r3, [pc, #260]	@ (800b1ac <xTaskIncrementTick+0x150>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	60fb      	str	r3, [r7, #12]
 800b0ac:	4b40      	ldr	r3, [pc, #256]	@ (800b1b0 <xTaskIncrementTick+0x154>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a3e      	ldr	r2, [pc, #248]	@ (800b1ac <xTaskIncrementTick+0x150>)
 800b0b2:	6013      	str	r3, [r2, #0]
 800b0b4:	4a3e      	ldr	r2, [pc, #248]	@ (800b1b0 <xTaskIncrementTick+0x154>)
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6013      	str	r3, [r2, #0]
 800b0ba:	4b3e      	ldr	r3, [pc, #248]	@ (800b1b4 <xTaskIncrementTick+0x158>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	4a3c      	ldr	r2, [pc, #240]	@ (800b1b4 <xTaskIncrementTick+0x158>)
 800b0c2:	6013      	str	r3, [r2, #0]
 800b0c4:	f000 fae2 	bl	800b68c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b0c8:	4b3b      	ldr	r3, [pc, #236]	@ (800b1b8 <xTaskIncrementTick+0x15c>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	693a      	ldr	r2, [r7, #16]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d349      	bcc.n	800b166 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0d2:	4b36      	ldr	r3, [pc, #216]	@ (800b1ac <xTaskIncrementTick+0x150>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d104      	bne.n	800b0e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0dc:	4b36      	ldr	r3, [pc, #216]	@ (800b1b8 <xTaskIncrementTick+0x15c>)
 800b0de:	f04f 32ff 	mov.w	r2, #4294967295
 800b0e2:	601a      	str	r2, [r3, #0]
					break;
 800b0e4:	e03f      	b.n	800b166 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0e6:	4b31      	ldr	r3, [pc, #196]	@ (800b1ac <xTaskIncrementTick+0x150>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	68db      	ldr	r3, [r3, #12]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b0f6:	693a      	ldr	r2, [r7, #16]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d203      	bcs.n	800b106 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b0fe:	4a2e      	ldr	r2, [pc, #184]	@ (800b1b8 <xTaskIncrementTick+0x15c>)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b104:	e02f      	b.n	800b166 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	3304      	adds	r3, #4
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7fe fdac 	bl	8009c68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b114:	2b00      	cmp	r3, #0
 800b116:	d004      	beq.n	800b122 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	3318      	adds	r3, #24
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7fe fda3 	bl	8009c68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b126:	4b25      	ldr	r3, [pc, #148]	@ (800b1bc <xTaskIncrementTick+0x160>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d903      	bls.n	800b136 <xTaskIncrementTick+0xda>
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b132:	4a22      	ldr	r2, [pc, #136]	@ (800b1bc <xTaskIncrementTick+0x160>)
 800b134:	6013      	str	r3, [r2, #0]
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b13a:	4613      	mov	r3, r2
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	4413      	add	r3, r2
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	4a1f      	ldr	r2, [pc, #124]	@ (800b1c0 <xTaskIncrementTick+0x164>)
 800b144:	441a      	add	r2, r3
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	3304      	adds	r3, #4
 800b14a:	4619      	mov	r1, r3
 800b14c:	4610      	mov	r0, r2
 800b14e:	f7fe fd2e 	bl	8009bae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b156:	4b1b      	ldr	r3, [pc, #108]	@ (800b1c4 <xTaskIncrementTick+0x168>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d3b8      	bcc.n	800b0d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b160:	2301      	movs	r3, #1
 800b162:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b164:	e7b5      	b.n	800b0d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b166:	4b17      	ldr	r3, [pc, #92]	@ (800b1c4 <xTaskIncrementTick+0x168>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b16c:	4914      	ldr	r1, [pc, #80]	@ (800b1c0 <xTaskIncrementTick+0x164>)
 800b16e:	4613      	mov	r3, r2
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	4413      	add	r3, r2
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	440b      	add	r3, r1
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d901      	bls.n	800b182 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b17e:	2301      	movs	r3, #1
 800b180:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b182:	4b11      	ldr	r3, [pc, #68]	@ (800b1c8 <xTaskIncrementTick+0x16c>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d007      	beq.n	800b19a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b18a:	2301      	movs	r3, #1
 800b18c:	617b      	str	r3, [r7, #20]
 800b18e:	e004      	b.n	800b19a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b190:	4b0e      	ldr	r3, [pc, #56]	@ (800b1cc <xTaskIncrementTick+0x170>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	3301      	adds	r3, #1
 800b196:	4a0d      	ldr	r2, [pc, #52]	@ (800b1cc <xTaskIncrementTick+0x170>)
 800b198:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b19a:	697b      	ldr	r3, [r7, #20]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3718      	adds	r7, #24
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	20001664 	.word	0x20001664
 800b1a8:	20001640 	.word	0x20001640
 800b1ac:	200015f4 	.word	0x200015f4
 800b1b0:	200015f8 	.word	0x200015f8
 800b1b4:	20001654 	.word	0x20001654
 800b1b8:	2000165c 	.word	0x2000165c
 800b1bc:	20001644 	.word	0x20001644
 800b1c0:	2000116c 	.word	0x2000116c
 800b1c4:	20001168 	.word	0x20001168
 800b1c8:	20001650 	.word	0x20001650
 800b1cc:	2000164c 	.word	0x2000164c

0800b1d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b085      	sub	sp, #20
 800b1d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b1d6:	4b2b      	ldr	r3, [pc, #172]	@ (800b284 <vTaskSwitchContext+0xb4>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d003      	beq.n	800b1e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b1de:	4b2a      	ldr	r3, [pc, #168]	@ (800b288 <vTaskSwitchContext+0xb8>)
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b1e4:	e047      	b.n	800b276 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b1e6:	4b28      	ldr	r3, [pc, #160]	@ (800b288 <vTaskSwitchContext+0xb8>)
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1ec:	4b27      	ldr	r3, [pc, #156]	@ (800b28c <vTaskSwitchContext+0xbc>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	60fb      	str	r3, [r7, #12]
 800b1f2:	e011      	b.n	800b218 <vTaskSwitchContext+0x48>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d10b      	bne.n	800b212 <vTaskSwitchContext+0x42>
	__asm volatile
 800b1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1fe:	f383 8811 	msr	BASEPRI, r3
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	f3bf 8f4f 	dsb	sy
 800b20a:	607b      	str	r3, [r7, #4]
}
 800b20c:	bf00      	nop
 800b20e:	bf00      	nop
 800b210:	e7fd      	b.n	800b20e <vTaskSwitchContext+0x3e>
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	3b01      	subs	r3, #1
 800b216:	60fb      	str	r3, [r7, #12]
 800b218:	491d      	ldr	r1, [pc, #116]	@ (800b290 <vTaskSwitchContext+0xc0>)
 800b21a:	68fa      	ldr	r2, [r7, #12]
 800b21c:	4613      	mov	r3, r2
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	4413      	add	r3, r2
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	440b      	add	r3, r1
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d0e3      	beq.n	800b1f4 <vTaskSwitchContext+0x24>
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	4613      	mov	r3, r2
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	4413      	add	r3, r2
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	4a16      	ldr	r2, [pc, #88]	@ (800b290 <vTaskSwitchContext+0xc0>)
 800b238:	4413      	add	r3, r2
 800b23a:	60bb      	str	r3, [r7, #8]
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	685a      	ldr	r2, [r3, #4]
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	605a      	str	r2, [r3, #4]
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	685a      	ldr	r2, [r3, #4]
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	3308      	adds	r3, #8
 800b24e:	429a      	cmp	r2, r3
 800b250:	d104      	bne.n	800b25c <vTaskSwitchContext+0x8c>
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	685a      	ldr	r2, [r3, #4]
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	605a      	str	r2, [r3, #4]
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	4a0c      	ldr	r2, [pc, #48]	@ (800b294 <vTaskSwitchContext+0xc4>)
 800b264:	6013      	str	r3, [r2, #0]
 800b266:	4a09      	ldr	r2, [pc, #36]	@ (800b28c <vTaskSwitchContext+0xbc>)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b26c:	4b09      	ldr	r3, [pc, #36]	@ (800b294 <vTaskSwitchContext+0xc4>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	3354      	adds	r3, #84	@ 0x54
 800b272:	4a09      	ldr	r2, [pc, #36]	@ (800b298 <vTaskSwitchContext+0xc8>)
 800b274:	6013      	str	r3, [r2, #0]
}
 800b276:	bf00      	nop
 800b278:	3714      	adds	r7, #20
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	20001664 	.word	0x20001664
 800b288:	20001650 	.word	0x20001650
 800b28c:	20001644 	.word	0x20001644
 800b290:	2000116c 	.word	0x2000116c
 800b294:	20001168 	.word	0x20001168
 800b298:	200001a8 	.word	0x200001a8

0800b29c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d10b      	bne.n	800b2c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b0:	f383 8811 	msr	BASEPRI, r3
 800b2b4:	f3bf 8f6f 	isb	sy
 800b2b8:	f3bf 8f4f 	dsb	sy
 800b2bc:	60fb      	str	r3, [r7, #12]
}
 800b2be:	bf00      	nop
 800b2c0:	bf00      	nop
 800b2c2:	e7fd      	b.n	800b2c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2c4:	4b07      	ldr	r3, [pc, #28]	@ (800b2e4 <vTaskPlaceOnEventList+0x48>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	3318      	adds	r3, #24
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f7fe fc92 	bl	8009bf6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b2d2:	2101      	movs	r1, #1
 800b2d4:	6838      	ldr	r0, [r7, #0]
 800b2d6:	f000 fb87 	bl	800b9e8 <prvAddCurrentTaskToDelayedList>
}
 800b2da:	bf00      	nop
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	20001168 	.word	0x20001168

0800b2e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b086      	sub	sp, #24
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d10b      	bne.n	800b312 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b2fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2fe:	f383 8811 	msr	BASEPRI, r3
 800b302:	f3bf 8f6f 	isb	sy
 800b306:	f3bf 8f4f 	dsb	sy
 800b30a:	617b      	str	r3, [r7, #20]
}
 800b30c:	bf00      	nop
 800b30e:	bf00      	nop
 800b310:	e7fd      	b.n	800b30e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b312:	4b0a      	ldr	r3, [pc, #40]	@ (800b33c <vTaskPlaceOnEventListRestricted+0x54>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	3318      	adds	r3, #24
 800b318:	4619      	mov	r1, r3
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f7fe fc47 	bl	8009bae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d002      	beq.n	800b32c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b326:	f04f 33ff 	mov.w	r3, #4294967295
 800b32a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b32c:	6879      	ldr	r1, [r7, #4]
 800b32e:	68b8      	ldr	r0, [r7, #8]
 800b330:	f000 fb5a 	bl	800b9e8 <prvAddCurrentTaskToDelayedList>
	}
 800b334:	bf00      	nop
 800b336:	3718      	adds	r7, #24
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	20001168 	.word	0x20001168

0800b340 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d10b      	bne.n	800b36e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b35a:	f383 8811 	msr	BASEPRI, r3
 800b35e:	f3bf 8f6f 	isb	sy
 800b362:	f3bf 8f4f 	dsb	sy
 800b366:	60fb      	str	r3, [r7, #12]
}
 800b368:	bf00      	nop
 800b36a:	bf00      	nop
 800b36c:	e7fd      	b.n	800b36a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	3318      	adds	r3, #24
 800b372:	4618      	mov	r0, r3
 800b374:	f7fe fc78 	bl	8009c68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b378:	4b1d      	ldr	r3, [pc, #116]	@ (800b3f0 <xTaskRemoveFromEventList+0xb0>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d11d      	bne.n	800b3bc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	3304      	adds	r3, #4
 800b384:	4618      	mov	r0, r3
 800b386:	f7fe fc6f 	bl	8009c68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b38e:	4b19      	ldr	r3, [pc, #100]	@ (800b3f4 <xTaskRemoveFromEventList+0xb4>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	429a      	cmp	r2, r3
 800b394:	d903      	bls.n	800b39e <xTaskRemoveFromEventList+0x5e>
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b39a:	4a16      	ldr	r2, [pc, #88]	@ (800b3f4 <xTaskRemoveFromEventList+0xb4>)
 800b39c:	6013      	str	r3, [r2, #0]
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4413      	add	r3, r2
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4a13      	ldr	r2, [pc, #76]	@ (800b3f8 <xTaskRemoveFromEventList+0xb8>)
 800b3ac:	441a      	add	r2, r3
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	3304      	adds	r3, #4
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	f7fe fbfa 	bl	8009bae <vListInsertEnd>
 800b3ba:	e005      	b.n	800b3c8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	3318      	adds	r3, #24
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	480e      	ldr	r0, [pc, #56]	@ (800b3fc <xTaskRemoveFromEventList+0xbc>)
 800b3c4:	f7fe fbf3 	bl	8009bae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3cc:	4b0c      	ldr	r3, [pc, #48]	@ (800b400 <xTaskRemoveFromEventList+0xc0>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d905      	bls.n	800b3e2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b3da:	4b0a      	ldr	r3, [pc, #40]	@ (800b404 <xTaskRemoveFromEventList+0xc4>)
 800b3dc:	2201      	movs	r2, #1
 800b3de:	601a      	str	r2, [r3, #0]
 800b3e0:	e001      	b.n	800b3e6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b3e6:	697b      	ldr	r3, [r7, #20]
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3718      	adds	r7, #24
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	20001664 	.word	0x20001664
 800b3f4:	20001644 	.word	0x20001644
 800b3f8:	2000116c 	.word	0x2000116c
 800b3fc:	200015fc 	.word	0x200015fc
 800b400:	20001168 	.word	0x20001168
 800b404:	20001650 	.word	0x20001650

0800b408 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b410:	4b06      	ldr	r3, [pc, #24]	@ (800b42c <vTaskInternalSetTimeOutState+0x24>)
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b418:	4b05      	ldr	r3, [pc, #20]	@ (800b430 <vTaskInternalSetTimeOutState+0x28>)
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	605a      	str	r2, [r3, #4]
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr
 800b42c:	20001654 	.word	0x20001654
 800b430:	20001640 	.word	0x20001640

0800b434 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b088      	sub	sp, #32
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10b      	bne.n	800b45c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b448:	f383 8811 	msr	BASEPRI, r3
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	613b      	str	r3, [r7, #16]
}
 800b456:	bf00      	nop
 800b458:	bf00      	nop
 800b45a:	e7fd      	b.n	800b458 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d10b      	bne.n	800b47a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b466:	f383 8811 	msr	BASEPRI, r3
 800b46a:	f3bf 8f6f 	isb	sy
 800b46e:	f3bf 8f4f 	dsb	sy
 800b472:	60fb      	str	r3, [r7, #12]
}
 800b474:	bf00      	nop
 800b476:	bf00      	nop
 800b478:	e7fd      	b.n	800b476 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b47a:	f000 ff95 	bl	800c3a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b47e:	4b1d      	ldr	r3, [pc, #116]	@ (800b4f4 <xTaskCheckForTimeOut+0xc0>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	69ba      	ldr	r2, [r7, #24]
 800b48a:	1ad3      	subs	r3, r2, r3
 800b48c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b496:	d102      	bne.n	800b49e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b498:	2300      	movs	r3, #0
 800b49a:	61fb      	str	r3, [r7, #28]
 800b49c:	e023      	b.n	800b4e6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	4b15      	ldr	r3, [pc, #84]	@ (800b4f8 <xTaskCheckForTimeOut+0xc4>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d007      	beq.n	800b4ba <xTaskCheckForTimeOut+0x86>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	69ba      	ldr	r2, [r7, #24]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d302      	bcc.n	800b4ba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	61fb      	str	r3, [r7, #28]
 800b4b8:	e015      	b.n	800b4e6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	697a      	ldr	r2, [r7, #20]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d20b      	bcs.n	800b4dc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	1ad2      	subs	r2, r2, r3
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f7ff ff99 	bl	800b408 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	61fb      	str	r3, [r7, #28]
 800b4da:	e004      	b.n	800b4e6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b4e6:	f000 ff91 	bl	800c40c <vPortExitCritical>

	return xReturn;
 800b4ea:	69fb      	ldr	r3, [r7, #28]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3720      	adds	r7, #32
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	20001640 	.word	0x20001640
 800b4f8:	20001654 	.word	0x20001654

0800b4fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b500:	4b03      	ldr	r3, [pc, #12]	@ (800b510 <vTaskMissedYield+0x14>)
 800b502:	2201      	movs	r2, #1
 800b504:	601a      	str	r2, [r3, #0]
}
 800b506:	bf00      	nop
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr
 800b510:	20001650 	.word	0x20001650

0800b514 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b51c:	f000 f852 	bl	800b5c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b520:	4b06      	ldr	r3, [pc, #24]	@ (800b53c <prvIdleTask+0x28>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2b01      	cmp	r3, #1
 800b526:	d9f9      	bls.n	800b51c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b528:	4b05      	ldr	r3, [pc, #20]	@ (800b540 <prvIdleTask+0x2c>)
 800b52a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b52e:	601a      	str	r2, [r3, #0]
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b538:	e7f0      	b.n	800b51c <prvIdleTask+0x8>
 800b53a:	bf00      	nop
 800b53c:	2000116c 	.word	0x2000116c
 800b540:	e000ed04 	.word	0xe000ed04

0800b544 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b54a:	2300      	movs	r3, #0
 800b54c:	607b      	str	r3, [r7, #4]
 800b54e:	e00c      	b.n	800b56a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	4613      	mov	r3, r2
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	4413      	add	r3, r2
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	4a12      	ldr	r2, [pc, #72]	@ (800b5a4 <prvInitialiseTaskLists+0x60>)
 800b55c:	4413      	add	r3, r2
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fe faf8 	bl	8009b54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	3301      	adds	r3, #1
 800b568:	607b      	str	r3, [r7, #4]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b37      	cmp	r3, #55	@ 0x37
 800b56e:	d9ef      	bls.n	800b550 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b570:	480d      	ldr	r0, [pc, #52]	@ (800b5a8 <prvInitialiseTaskLists+0x64>)
 800b572:	f7fe faef 	bl	8009b54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b576:	480d      	ldr	r0, [pc, #52]	@ (800b5ac <prvInitialiseTaskLists+0x68>)
 800b578:	f7fe faec 	bl	8009b54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b57c:	480c      	ldr	r0, [pc, #48]	@ (800b5b0 <prvInitialiseTaskLists+0x6c>)
 800b57e:	f7fe fae9 	bl	8009b54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b582:	480c      	ldr	r0, [pc, #48]	@ (800b5b4 <prvInitialiseTaskLists+0x70>)
 800b584:	f7fe fae6 	bl	8009b54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b588:	480b      	ldr	r0, [pc, #44]	@ (800b5b8 <prvInitialiseTaskLists+0x74>)
 800b58a:	f7fe fae3 	bl	8009b54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b58e:	4b0b      	ldr	r3, [pc, #44]	@ (800b5bc <prvInitialiseTaskLists+0x78>)
 800b590:	4a05      	ldr	r2, [pc, #20]	@ (800b5a8 <prvInitialiseTaskLists+0x64>)
 800b592:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b594:	4b0a      	ldr	r3, [pc, #40]	@ (800b5c0 <prvInitialiseTaskLists+0x7c>)
 800b596:	4a05      	ldr	r2, [pc, #20]	@ (800b5ac <prvInitialiseTaskLists+0x68>)
 800b598:	601a      	str	r2, [r3, #0]
}
 800b59a:	bf00      	nop
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	2000116c 	.word	0x2000116c
 800b5a8:	200015cc 	.word	0x200015cc
 800b5ac:	200015e0 	.word	0x200015e0
 800b5b0:	200015fc 	.word	0x200015fc
 800b5b4:	20001610 	.word	0x20001610
 800b5b8:	20001628 	.word	0x20001628
 800b5bc:	200015f4 	.word	0x200015f4
 800b5c0:	200015f8 	.word	0x200015f8

0800b5c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5ca:	e019      	b.n	800b600 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b5cc:	f000 feec 	bl	800c3a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5d0:	4b10      	ldr	r3, [pc, #64]	@ (800b614 <prvCheckTasksWaitingTermination+0x50>)
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	3304      	adds	r3, #4
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7fe fb43 	bl	8009c68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b5e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b618 <prvCheckTasksWaitingTermination+0x54>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	4a0b      	ldr	r2, [pc, #44]	@ (800b618 <prvCheckTasksWaitingTermination+0x54>)
 800b5ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b5ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b61c <prvCheckTasksWaitingTermination+0x58>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	3b01      	subs	r3, #1
 800b5f2:	4a0a      	ldr	r2, [pc, #40]	@ (800b61c <prvCheckTasksWaitingTermination+0x58>)
 800b5f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b5f6:	f000 ff09 	bl	800c40c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 f810 	bl	800b620 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b600:	4b06      	ldr	r3, [pc, #24]	@ (800b61c <prvCheckTasksWaitingTermination+0x58>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d1e1      	bne.n	800b5cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b608:	bf00      	nop
 800b60a:	bf00      	nop
 800b60c:	3708      	adds	r7, #8
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	20001610 	.word	0x20001610
 800b618:	2000163c 	.word	0x2000163c
 800b61c:	20001624 	.word	0x20001624

0800b620 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	3354      	adds	r3, #84	@ 0x54
 800b62c:	4618      	mov	r0, r3
 800b62e:	f002 f9ed 	bl	800da0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d108      	bne.n	800b64e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b640:	4618      	mov	r0, r3
 800b642:	f001 f8a1 	bl	800c788 <vPortFree>
				vPortFree( pxTCB );
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f001 f89e 	bl	800c788 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b64c:	e019      	b.n	800b682 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b654:	2b01      	cmp	r3, #1
 800b656:	d103      	bne.n	800b660 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f001 f895 	bl	800c788 <vPortFree>
	}
 800b65e:	e010      	b.n	800b682 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b666:	2b02      	cmp	r3, #2
 800b668:	d00b      	beq.n	800b682 <prvDeleteTCB+0x62>
	__asm volatile
 800b66a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b66e:	f383 8811 	msr	BASEPRI, r3
 800b672:	f3bf 8f6f 	isb	sy
 800b676:	f3bf 8f4f 	dsb	sy
 800b67a:	60fb      	str	r3, [r7, #12]
}
 800b67c:	bf00      	nop
 800b67e:	bf00      	nop
 800b680:	e7fd      	b.n	800b67e <prvDeleteTCB+0x5e>
	}
 800b682:	bf00      	nop
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
	...

0800b68c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b692:	4b0c      	ldr	r3, [pc, #48]	@ (800b6c4 <prvResetNextTaskUnblockTime+0x38>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d104      	bne.n	800b6a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b69c:	4b0a      	ldr	r3, [pc, #40]	@ (800b6c8 <prvResetNextTaskUnblockTime+0x3c>)
 800b69e:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b6a4:	e008      	b.n	800b6b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6a6:	4b07      	ldr	r3, [pc, #28]	@ (800b6c4 <prvResetNextTaskUnblockTime+0x38>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	4a04      	ldr	r2, [pc, #16]	@ (800b6c8 <prvResetNextTaskUnblockTime+0x3c>)
 800b6b6:	6013      	str	r3, [r2, #0]
}
 800b6b8:	bf00      	nop
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr
 800b6c4:	200015f4 	.word	0x200015f4
 800b6c8:	2000165c 	.word	0x2000165c

0800b6cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b6d2:	4b0b      	ldr	r3, [pc, #44]	@ (800b700 <xTaskGetSchedulerState+0x34>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d102      	bne.n	800b6e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	607b      	str	r3, [r7, #4]
 800b6de:	e008      	b.n	800b6f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6e0:	4b08      	ldr	r3, [pc, #32]	@ (800b704 <xTaskGetSchedulerState+0x38>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d102      	bne.n	800b6ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	607b      	str	r3, [r7, #4]
 800b6ec:	e001      	b.n	800b6f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b6f2:	687b      	ldr	r3, [r7, #4]
	}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr
 800b700:	20001648 	.word	0x20001648
 800b704:	20001664 	.word	0x20001664

0800b708 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b714:	2300      	movs	r3, #0
 800b716:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d051      	beq.n	800b7c2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b722:	4b2a      	ldr	r3, [pc, #168]	@ (800b7cc <xTaskPriorityInherit+0xc4>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b728:	429a      	cmp	r2, r3
 800b72a:	d241      	bcs.n	800b7b0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	699b      	ldr	r3, [r3, #24]
 800b730:	2b00      	cmp	r3, #0
 800b732:	db06      	blt.n	800b742 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b734:	4b25      	ldr	r3, [pc, #148]	@ (800b7cc <xTaskPriorityInherit+0xc4>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b73a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	6959      	ldr	r1, [r3, #20]
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b74a:	4613      	mov	r3, r2
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	4413      	add	r3, r2
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	4a1f      	ldr	r2, [pc, #124]	@ (800b7d0 <xTaskPriorityInherit+0xc8>)
 800b754:	4413      	add	r3, r2
 800b756:	4299      	cmp	r1, r3
 800b758:	d122      	bne.n	800b7a0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	3304      	adds	r3, #4
 800b75e:	4618      	mov	r0, r3
 800b760:	f7fe fa82 	bl	8009c68 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b764:	4b19      	ldr	r3, [pc, #100]	@ (800b7cc <xTaskPriorityInherit+0xc4>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b772:	4b18      	ldr	r3, [pc, #96]	@ (800b7d4 <xTaskPriorityInherit+0xcc>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	429a      	cmp	r2, r3
 800b778:	d903      	bls.n	800b782 <xTaskPriorityInherit+0x7a>
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b77e:	4a15      	ldr	r2, [pc, #84]	@ (800b7d4 <xTaskPriorityInherit+0xcc>)
 800b780:	6013      	str	r3, [r2, #0]
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b786:	4613      	mov	r3, r2
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	4413      	add	r3, r2
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	4a10      	ldr	r2, [pc, #64]	@ (800b7d0 <xTaskPriorityInherit+0xc8>)
 800b790:	441a      	add	r2, r3
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	3304      	adds	r3, #4
 800b796:	4619      	mov	r1, r3
 800b798:	4610      	mov	r0, r2
 800b79a:	f7fe fa08 	bl	8009bae <vListInsertEnd>
 800b79e:	e004      	b.n	800b7aa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b7a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b7cc <xTaskPriorityInherit+0xc4>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	60fb      	str	r3, [r7, #12]
 800b7ae:	e008      	b.n	800b7c2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b7b4:	4b05      	ldr	r3, [pc, #20]	@ (800b7cc <xTaskPriorityInherit+0xc4>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d201      	bcs.n	800b7c2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
	}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3710      	adds	r7, #16
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	20001168 	.word	0x20001168
 800b7d0:	2000116c 	.word	0x2000116c
 800b7d4:	20001644 	.word	0x20001644

0800b7d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b086      	sub	sp, #24
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d058      	beq.n	800b8a0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b7ee:	4b2f      	ldr	r3, [pc, #188]	@ (800b8ac <xTaskPriorityDisinherit+0xd4>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	693a      	ldr	r2, [r7, #16]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d00b      	beq.n	800b810 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7fc:	f383 8811 	msr	BASEPRI, r3
 800b800:	f3bf 8f6f 	isb	sy
 800b804:	f3bf 8f4f 	dsb	sy
 800b808:	60fb      	str	r3, [r7, #12]
}
 800b80a:	bf00      	nop
 800b80c:	bf00      	nop
 800b80e:	e7fd      	b.n	800b80c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b814:	2b00      	cmp	r3, #0
 800b816:	d10b      	bne.n	800b830 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b81c:	f383 8811 	msr	BASEPRI, r3
 800b820:	f3bf 8f6f 	isb	sy
 800b824:	f3bf 8f4f 	dsb	sy
 800b828:	60bb      	str	r3, [r7, #8]
}
 800b82a:	bf00      	nop
 800b82c:	bf00      	nop
 800b82e:	e7fd      	b.n	800b82c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b834:	1e5a      	subs	r2, r3, #1
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b842:	429a      	cmp	r2, r3
 800b844:	d02c      	beq.n	800b8a0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d128      	bne.n	800b8a0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	3304      	adds	r3, #4
 800b852:	4618      	mov	r0, r3
 800b854:	f7fe fa08 	bl	8009c68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b864:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b870:	4b0f      	ldr	r3, [pc, #60]	@ (800b8b0 <xTaskPriorityDisinherit+0xd8>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	429a      	cmp	r2, r3
 800b876:	d903      	bls.n	800b880 <xTaskPriorityDisinherit+0xa8>
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b87c:	4a0c      	ldr	r2, [pc, #48]	@ (800b8b0 <xTaskPriorityDisinherit+0xd8>)
 800b87e:	6013      	str	r3, [r2, #0]
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b884:	4613      	mov	r3, r2
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	4413      	add	r3, r2
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	4a09      	ldr	r2, [pc, #36]	@ (800b8b4 <xTaskPriorityDisinherit+0xdc>)
 800b88e:	441a      	add	r2, r3
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	3304      	adds	r3, #4
 800b894:	4619      	mov	r1, r3
 800b896:	4610      	mov	r0, r2
 800b898:	f7fe f989 	bl	8009bae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b89c:	2301      	movs	r3, #1
 800b89e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b8a0:	697b      	ldr	r3, [r7, #20]
	}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3718      	adds	r7, #24
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	20001168 	.word	0x20001168
 800b8b0:	20001644 	.word	0x20001644
 800b8b4:	2000116c 	.word	0x2000116c

0800b8b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b088      	sub	sp, #32
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d06c      	beq.n	800b9aa <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d10b      	bne.n	800b8f0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b8d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8dc:	f383 8811 	msr	BASEPRI, r3
 800b8e0:	f3bf 8f6f 	isb	sy
 800b8e4:	f3bf 8f4f 	dsb	sy
 800b8e8:	60fb      	str	r3, [r7, #12]
}
 800b8ea:	bf00      	nop
 800b8ec:	bf00      	nop
 800b8ee:	e7fd      	b.n	800b8ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8f4:	683a      	ldr	r2, [r7, #0]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d902      	bls.n	800b900 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	61fb      	str	r3, [r7, #28]
 800b8fe:	e002      	b.n	800b906 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b904:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b90a:	69fa      	ldr	r2, [r7, #28]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d04c      	beq.n	800b9aa <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b910:	69bb      	ldr	r3, [r7, #24]
 800b912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b914:	697a      	ldr	r2, [r7, #20]
 800b916:	429a      	cmp	r2, r3
 800b918:	d147      	bne.n	800b9aa <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b91a:	4b26      	ldr	r3, [pc, #152]	@ (800b9b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	69ba      	ldr	r2, [r7, #24]
 800b920:	429a      	cmp	r2, r3
 800b922:	d10b      	bne.n	800b93c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b928:	f383 8811 	msr	BASEPRI, r3
 800b92c:	f3bf 8f6f 	isb	sy
 800b930:	f3bf 8f4f 	dsb	sy
 800b934:	60bb      	str	r3, [r7, #8]
}
 800b936:	bf00      	nop
 800b938:	bf00      	nop
 800b93a:	e7fd      	b.n	800b938 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b93c:	69bb      	ldr	r3, [r7, #24]
 800b93e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b940:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b942:	69bb      	ldr	r3, [r7, #24]
 800b944:	69fa      	ldr	r2, [r7, #28]
 800b946:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	699b      	ldr	r3, [r3, #24]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	db04      	blt.n	800b95a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	6959      	ldr	r1, [r3, #20]
 800b95e:	693a      	ldr	r2, [r7, #16]
 800b960:	4613      	mov	r3, r2
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	4413      	add	r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	4a13      	ldr	r2, [pc, #76]	@ (800b9b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b96a:	4413      	add	r3, r2
 800b96c:	4299      	cmp	r1, r3
 800b96e:	d11c      	bne.n	800b9aa <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	3304      	adds	r3, #4
 800b974:	4618      	mov	r0, r3
 800b976:	f7fe f977 	bl	8009c68 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b97e:	4b0f      	ldr	r3, [pc, #60]	@ (800b9bc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	429a      	cmp	r2, r3
 800b984:	d903      	bls.n	800b98e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b98a:	4a0c      	ldr	r2, [pc, #48]	@ (800b9bc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b98c:	6013      	str	r3, [r2, #0]
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b992:	4613      	mov	r3, r2
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	4413      	add	r3, r2
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4a07      	ldr	r2, [pc, #28]	@ (800b9b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b99c:	441a      	add	r2, r3
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	3304      	adds	r3, #4
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	4610      	mov	r0, r2
 800b9a6:	f7fe f902 	bl	8009bae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9aa:	bf00      	nop
 800b9ac:	3720      	adds	r7, #32
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	20001168 	.word	0x20001168
 800b9b8:	2000116c 	.word	0x2000116c
 800b9bc:	20001644 	.word	0x20001644

0800b9c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b9c0:	b480      	push	{r7}
 800b9c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b9c4:	4b07      	ldr	r3, [pc, #28]	@ (800b9e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d004      	beq.n	800b9d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b9cc:	4b05      	ldr	r3, [pc, #20]	@ (800b9e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b9d2:	3201      	adds	r2, #1
 800b9d4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b9d6:	4b03      	ldr	r3, [pc, #12]	@ (800b9e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
	}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr
 800b9e4:	20001168 	.word	0x20001168

0800b9e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b9f2:	4b21      	ldr	r3, [pc, #132]	@ (800ba78 <prvAddCurrentTaskToDelayedList+0x90>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9f8:	4b20      	ldr	r3, [pc, #128]	@ (800ba7c <prvAddCurrentTaskToDelayedList+0x94>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	3304      	adds	r3, #4
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7fe f932 	bl	8009c68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba0a:	d10a      	bne.n	800ba22 <prvAddCurrentTaskToDelayedList+0x3a>
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d007      	beq.n	800ba22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba12:	4b1a      	ldr	r3, [pc, #104]	@ (800ba7c <prvAddCurrentTaskToDelayedList+0x94>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	3304      	adds	r3, #4
 800ba18:	4619      	mov	r1, r3
 800ba1a:	4819      	ldr	r0, [pc, #100]	@ (800ba80 <prvAddCurrentTaskToDelayedList+0x98>)
 800ba1c:	f7fe f8c7 	bl	8009bae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba20:	e026      	b.n	800ba70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	4413      	add	r3, r2
 800ba28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba2a:	4b14      	ldr	r3, [pc, #80]	@ (800ba7c <prvAddCurrentTaskToDelayedList+0x94>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	68ba      	ldr	r2, [r7, #8]
 800ba30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba32:	68ba      	ldr	r2, [r7, #8]
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d209      	bcs.n	800ba4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba3a:	4b12      	ldr	r3, [pc, #72]	@ (800ba84 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	4b0f      	ldr	r3, [pc, #60]	@ (800ba7c <prvAddCurrentTaskToDelayedList+0x94>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	3304      	adds	r3, #4
 800ba44:	4619      	mov	r1, r3
 800ba46:	4610      	mov	r0, r2
 800ba48:	f7fe f8d5 	bl	8009bf6 <vListInsert>
}
 800ba4c:	e010      	b.n	800ba70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ba88 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	4b0a      	ldr	r3, [pc, #40]	@ (800ba7c <prvAddCurrentTaskToDelayedList+0x94>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	3304      	adds	r3, #4
 800ba58:	4619      	mov	r1, r3
 800ba5a:	4610      	mov	r0, r2
 800ba5c:	f7fe f8cb 	bl	8009bf6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ba60:	4b0a      	ldr	r3, [pc, #40]	@ (800ba8c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	68ba      	ldr	r2, [r7, #8]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d202      	bcs.n	800ba70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ba6a:	4a08      	ldr	r2, [pc, #32]	@ (800ba8c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	6013      	str	r3, [r2, #0]
}
 800ba70:	bf00      	nop
 800ba72:	3710      	adds	r7, #16
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	20001640 	.word	0x20001640
 800ba7c:	20001168 	.word	0x20001168
 800ba80:	20001628 	.word	0x20001628
 800ba84:	200015f8 	.word	0x200015f8
 800ba88:	200015f4 	.word	0x200015f4
 800ba8c:	2000165c 	.word	0x2000165c

0800ba90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b08a      	sub	sp, #40	@ 0x28
 800ba94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ba96:	2300      	movs	r3, #0
 800ba98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ba9a:	f000 fb13 	bl	800c0c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ba9e:	4b1d      	ldr	r3, [pc, #116]	@ (800bb14 <xTimerCreateTimerTask+0x84>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d021      	beq.n	800baea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800baa6:	2300      	movs	r3, #0
 800baa8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800baaa:	2300      	movs	r3, #0
 800baac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800baae:	1d3a      	adds	r2, r7, #4
 800bab0:	f107 0108 	add.w	r1, r7, #8
 800bab4:	f107 030c 	add.w	r3, r7, #12
 800bab8:	4618      	mov	r0, r3
 800baba:	f7fe f831 	bl	8009b20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800babe:	6879      	ldr	r1, [r7, #4]
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	68fa      	ldr	r2, [r7, #12]
 800bac4:	9202      	str	r2, [sp, #8]
 800bac6:	9301      	str	r3, [sp, #4]
 800bac8:	2302      	movs	r3, #2
 800baca:	9300      	str	r3, [sp, #0]
 800bacc:	2300      	movs	r3, #0
 800bace:	460a      	mov	r2, r1
 800bad0:	4911      	ldr	r1, [pc, #68]	@ (800bb18 <xTimerCreateTimerTask+0x88>)
 800bad2:	4812      	ldr	r0, [pc, #72]	@ (800bb1c <xTimerCreateTimerTask+0x8c>)
 800bad4:	f7fe ffa2 	bl	800aa1c <xTaskCreateStatic>
 800bad8:	4603      	mov	r3, r0
 800bada:	4a11      	ldr	r2, [pc, #68]	@ (800bb20 <xTimerCreateTimerTask+0x90>)
 800badc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bade:	4b10      	ldr	r3, [pc, #64]	@ (800bb20 <xTimerCreateTimerTask+0x90>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d001      	beq.n	800baea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bae6:	2301      	movs	r3, #1
 800bae8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d10b      	bne.n	800bb08 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800baf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf4:	f383 8811 	msr	BASEPRI, r3
 800baf8:	f3bf 8f6f 	isb	sy
 800bafc:	f3bf 8f4f 	dsb	sy
 800bb00:	613b      	str	r3, [r7, #16]
}
 800bb02:	bf00      	nop
 800bb04:	bf00      	nop
 800bb06:	e7fd      	b.n	800bb04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bb08:	697b      	ldr	r3, [r7, #20]
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3718      	adds	r7, #24
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	20001698 	.word	0x20001698
 800bb18:	08010244 	.word	0x08010244
 800bb1c:	0800bc5d 	.word	0x0800bc5d
 800bb20:	2000169c 	.word	0x2000169c

0800bb24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b08a      	sub	sp, #40	@ 0x28
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	607a      	str	r2, [r7, #4]
 800bb30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bb32:	2300      	movs	r3, #0
 800bb34:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d10b      	bne.n	800bb54 <xTimerGenericCommand+0x30>
	__asm volatile
 800bb3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb40:	f383 8811 	msr	BASEPRI, r3
 800bb44:	f3bf 8f6f 	isb	sy
 800bb48:	f3bf 8f4f 	dsb	sy
 800bb4c:	623b      	str	r3, [r7, #32]
}
 800bb4e:	bf00      	nop
 800bb50:	bf00      	nop
 800bb52:	e7fd      	b.n	800bb50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bb54:	4b19      	ldr	r3, [pc, #100]	@ (800bbbc <xTimerGenericCommand+0x98>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d02a      	beq.n	800bbb2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	2b05      	cmp	r3, #5
 800bb6c:	dc18      	bgt.n	800bba0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bb6e:	f7ff fdad 	bl	800b6cc <xTaskGetSchedulerState>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b02      	cmp	r3, #2
 800bb76:	d109      	bne.n	800bb8c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bb78:	4b10      	ldr	r3, [pc, #64]	@ (800bbbc <xTimerGenericCommand+0x98>)
 800bb7a:	6818      	ldr	r0, [r3, #0]
 800bb7c:	f107 0110 	add.w	r1, r7, #16
 800bb80:	2300      	movs	r3, #0
 800bb82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb84:	f7fe fa12 	bl	8009fac <xQueueGenericSend>
 800bb88:	6278      	str	r0, [r7, #36]	@ 0x24
 800bb8a:	e012      	b.n	800bbb2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bb8c:	4b0b      	ldr	r3, [pc, #44]	@ (800bbbc <xTimerGenericCommand+0x98>)
 800bb8e:	6818      	ldr	r0, [r3, #0]
 800bb90:	f107 0110 	add.w	r1, r7, #16
 800bb94:	2300      	movs	r3, #0
 800bb96:	2200      	movs	r2, #0
 800bb98:	f7fe fa08 	bl	8009fac <xQueueGenericSend>
 800bb9c:	6278      	str	r0, [r7, #36]	@ 0x24
 800bb9e:	e008      	b.n	800bbb2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bba0:	4b06      	ldr	r3, [pc, #24]	@ (800bbbc <xTimerGenericCommand+0x98>)
 800bba2:	6818      	ldr	r0, [r3, #0]
 800bba4:	f107 0110 	add.w	r1, r7, #16
 800bba8:	2300      	movs	r3, #0
 800bbaa:	683a      	ldr	r2, [r7, #0]
 800bbac:	f7fe fb00 	bl	800a1b0 <xQueueGenericSendFromISR>
 800bbb0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3728      	adds	r7, #40	@ 0x28
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	20001698 	.word	0x20001698

0800bbc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b088      	sub	sp, #32
 800bbc4:	af02      	add	r7, sp, #8
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbca:	4b23      	ldr	r3, [pc, #140]	@ (800bc58 <prvProcessExpiredTimer+0x98>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	3304      	adds	r3, #4
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7fe f845 	bl	8009c68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbe4:	f003 0304 	and.w	r3, r3, #4
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d023      	beq.n	800bc34 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	699a      	ldr	r2, [r3, #24]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	18d1      	adds	r1, r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	683a      	ldr	r2, [r7, #0]
 800bbf8:	6978      	ldr	r0, [r7, #20]
 800bbfa:	f000 f8d5 	bl	800bda8 <prvInsertTimerInActiveList>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d020      	beq.n	800bc46 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc04:	2300      	movs	r3, #0
 800bc06:	9300      	str	r3, [sp, #0]
 800bc08:	2300      	movs	r3, #0
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	6978      	ldr	r0, [r7, #20]
 800bc10:	f7ff ff88 	bl	800bb24 <xTimerGenericCommand>
 800bc14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d114      	bne.n	800bc46 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bc1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc20:	f383 8811 	msr	BASEPRI, r3
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	60fb      	str	r3, [r7, #12]
}
 800bc2e:	bf00      	nop
 800bc30:	bf00      	nop
 800bc32:	e7fd      	b.n	800bc30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc3a:	f023 0301 	bic.w	r3, r3, #1
 800bc3e:	b2da      	uxtb	r2, r3
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	6a1b      	ldr	r3, [r3, #32]
 800bc4a:	6978      	ldr	r0, [r7, #20]
 800bc4c:	4798      	blx	r3
}
 800bc4e:	bf00      	nop
 800bc50:	3718      	adds	r7, #24
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	20001690 	.word	0x20001690

0800bc5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc64:	f107 0308 	add.w	r3, r7, #8
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f000 f859 	bl	800bd20 <prvGetNextExpireTime>
 800bc6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	4619      	mov	r1, r3
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	f000 f805 	bl	800bc84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bc7a:	f000 f8d7 	bl	800be2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc7e:	bf00      	nop
 800bc80:	e7f0      	b.n	800bc64 <prvTimerTask+0x8>
	...

0800bc84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bc8e:	f7ff f929 	bl	800aee4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc92:	f107 0308 	add.w	r3, r7, #8
 800bc96:	4618      	mov	r0, r3
 800bc98:	f000 f866 	bl	800bd68 <prvSampleTimeNow>
 800bc9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d130      	bne.n	800bd06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d10a      	bne.n	800bcc0 <prvProcessTimerOrBlockTask+0x3c>
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d806      	bhi.n	800bcc0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bcb2:	f7ff f925 	bl	800af00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bcb6:	68f9      	ldr	r1, [r7, #12]
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f7ff ff81 	bl	800bbc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bcbe:	e024      	b.n	800bd0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d008      	beq.n	800bcd8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bcc6:	4b13      	ldr	r3, [pc, #76]	@ (800bd14 <prvProcessTimerOrBlockTask+0x90>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d101      	bne.n	800bcd4 <prvProcessTimerOrBlockTask+0x50>
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	e000      	b.n	800bcd6 <prvProcessTimerOrBlockTask+0x52>
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bcd8:	4b0f      	ldr	r3, [pc, #60]	@ (800bd18 <prvProcessTimerOrBlockTask+0x94>)
 800bcda:	6818      	ldr	r0, [r3, #0]
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	1ad3      	subs	r3, r2, r3
 800bce2:	683a      	ldr	r2, [r7, #0]
 800bce4:	4619      	mov	r1, r3
 800bce6:	f7fe fe65 	bl	800a9b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bcea:	f7ff f909 	bl	800af00 <xTaskResumeAll>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d10a      	bne.n	800bd0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bcf4:	4b09      	ldr	r3, [pc, #36]	@ (800bd1c <prvProcessTimerOrBlockTask+0x98>)
 800bcf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcfa:	601a      	str	r2, [r3, #0]
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	f3bf 8f6f 	isb	sy
}
 800bd04:	e001      	b.n	800bd0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bd06:	f7ff f8fb 	bl	800af00 <xTaskResumeAll>
}
 800bd0a:	bf00      	nop
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	20001694 	.word	0x20001694
 800bd18:	20001698 	.word	0x20001698
 800bd1c:	e000ed04 	.word	0xe000ed04

0800bd20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bd20:	b480      	push	{r7}
 800bd22:	b085      	sub	sp, #20
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bd28:	4b0e      	ldr	r3, [pc, #56]	@ (800bd64 <prvGetNextExpireTime+0x44>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d101      	bne.n	800bd36 <prvGetNextExpireTime+0x16>
 800bd32:	2201      	movs	r2, #1
 800bd34:	e000      	b.n	800bd38 <prvGetNextExpireTime+0x18>
 800bd36:	2200      	movs	r2, #0
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d105      	bne.n	800bd50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd44:	4b07      	ldr	r3, [pc, #28]	@ (800bd64 <prvGetNextExpireTime+0x44>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	60fb      	str	r3, [r7, #12]
 800bd4e:	e001      	b.n	800bd54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bd50:	2300      	movs	r3, #0
 800bd52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bd54:	68fb      	ldr	r3, [r7, #12]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3714      	adds	r7, #20
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop
 800bd64:	20001690 	.word	0x20001690

0800bd68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bd70:	f7ff f964 	bl	800b03c <xTaskGetTickCount>
 800bd74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bd76:	4b0b      	ldr	r3, [pc, #44]	@ (800bda4 <prvSampleTimeNow+0x3c>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	68fa      	ldr	r2, [r7, #12]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d205      	bcs.n	800bd8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bd80:	f000 f93a 	bl	800bff8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2201      	movs	r2, #1
 800bd88:	601a      	str	r2, [r3, #0]
 800bd8a:	e002      	b.n	800bd92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bd92:	4a04      	ldr	r2, [pc, #16]	@ (800bda4 <prvSampleTimeNow+0x3c>)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bd98:	68fb      	ldr	r3, [r7, #12]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	200016a0 	.word	0x200016a0

0800bda8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b086      	sub	sp, #24
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
 800bdb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	68ba      	ldr	r2, [r7, #8]
 800bdbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	68fa      	ldr	r2, [r7, #12]
 800bdc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bdc6:	68ba      	ldr	r2, [r7, #8]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d812      	bhi.n	800bdf4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	1ad2      	subs	r2, r2, r3
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	699b      	ldr	r3, [r3, #24]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d302      	bcc.n	800bde2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bddc:	2301      	movs	r3, #1
 800bdde:	617b      	str	r3, [r7, #20]
 800bde0:	e01b      	b.n	800be1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bde2:	4b10      	ldr	r3, [pc, #64]	@ (800be24 <prvInsertTimerInActiveList+0x7c>)
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	3304      	adds	r3, #4
 800bdea:	4619      	mov	r1, r3
 800bdec:	4610      	mov	r0, r2
 800bdee:	f7fd ff02 	bl	8009bf6 <vListInsert>
 800bdf2:	e012      	b.n	800be1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d206      	bcs.n	800be0a <prvInsertTimerInActiveList+0x62>
 800bdfc:	68ba      	ldr	r2, [r7, #8]
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	429a      	cmp	r2, r3
 800be02:	d302      	bcc.n	800be0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800be04:	2301      	movs	r3, #1
 800be06:	617b      	str	r3, [r7, #20]
 800be08:	e007      	b.n	800be1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be0a:	4b07      	ldr	r3, [pc, #28]	@ (800be28 <prvInsertTimerInActiveList+0x80>)
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	3304      	adds	r3, #4
 800be12:	4619      	mov	r1, r3
 800be14:	4610      	mov	r0, r2
 800be16:	f7fd feee 	bl	8009bf6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800be1a:	697b      	ldr	r3, [r7, #20]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3718      	adds	r7, #24
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	20001694 	.word	0x20001694
 800be28:	20001690 	.word	0x20001690

0800be2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b08e      	sub	sp, #56	@ 0x38
 800be30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be32:	e0ce      	b.n	800bfd2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	da19      	bge.n	800be6e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800be3a:	1d3b      	adds	r3, r7, #4
 800be3c:	3304      	adds	r3, #4
 800be3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800be40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10b      	bne.n	800be5e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800be46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be4a:	f383 8811 	msr	BASEPRI, r3
 800be4e:	f3bf 8f6f 	isb	sy
 800be52:	f3bf 8f4f 	dsb	sy
 800be56:	61fb      	str	r3, [r7, #28]
}
 800be58:	bf00      	nop
 800be5a:	bf00      	nop
 800be5c:	e7fd      	b.n	800be5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800be5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be64:	6850      	ldr	r0, [r2, #4]
 800be66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be68:	6892      	ldr	r2, [r2, #8]
 800be6a:	4611      	mov	r1, r2
 800be6c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2b00      	cmp	r3, #0
 800be72:	f2c0 80ae 	blt.w	800bfd2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800be7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be7c:	695b      	ldr	r3, [r3, #20]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d004      	beq.n	800be8c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be84:	3304      	adds	r3, #4
 800be86:	4618      	mov	r0, r3
 800be88:	f7fd feee 	bl	8009c68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be8c:	463b      	mov	r3, r7
 800be8e:	4618      	mov	r0, r3
 800be90:	f7ff ff6a 	bl	800bd68 <prvSampleTimeNow>
 800be94:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2b09      	cmp	r3, #9
 800be9a:	f200 8097 	bhi.w	800bfcc <prvProcessReceivedCommands+0x1a0>
 800be9e:	a201      	add	r2, pc, #4	@ (adr r2, 800bea4 <prvProcessReceivedCommands+0x78>)
 800bea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea4:	0800becd 	.word	0x0800becd
 800bea8:	0800becd 	.word	0x0800becd
 800beac:	0800becd 	.word	0x0800becd
 800beb0:	0800bf43 	.word	0x0800bf43
 800beb4:	0800bf57 	.word	0x0800bf57
 800beb8:	0800bfa3 	.word	0x0800bfa3
 800bebc:	0800becd 	.word	0x0800becd
 800bec0:	0800becd 	.word	0x0800becd
 800bec4:	0800bf43 	.word	0x0800bf43
 800bec8:	0800bf57 	.word	0x0800bf57
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800becc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bece:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bed2:	f043 0301 	orr.w	r3, r3, #1
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bede:	68ba      	ldr	r2, [r7, #8]
 800bee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee2:	699b      	ldr	r3, [r3, #24]
 800bee4:	18d1      	adds	r1, r2, r3
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800beea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800beec:	f7ff ff5c 	bl	800bda8 <prvInsertTimerInActiveList>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d06c      	beq.n	800bfd0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bef8:	6a1b      	ldr	r3, [r3, #32]
 800befa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800befc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800befe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf04:	f003 0304 	and.w	r3, r3, #4
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d061      	beq.n	800bfd0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf0c:	68ba      	ldr	r2, [r7, #8]
 800bf0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf10:	699b      	ldr	r3, [r3, #24]
 800bf12:	441a      	add	r2, r3
 800bf14:	2300      	movs	r3, #0
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	2300      	movs	r3, #0
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf1e:	f7ff fe01 	bl	800bb24 <xTimerGenericCommand>
 800bf22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bf24:	6a3b      	ldr	r3, [r7, #32]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d152      	bne.n	800bfd0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bf2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf2e:	f383 8811 	msr	BASEPRI, r3
 800bf32:	f3bf 8f6f 	isb	sy
 800bf36:	f3bf 8f4f 	dsb	sy
 800bf3a:	61bb      	str	r3, [r7, #24]
}
 800bf3c:	bf00      	nop
 800bf3e:	bf00      	nop
 800bf40:	e7fd      	b.n	800bf3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf48:	f023 0301 	bic.w	r3, r3, #1
 800bf4c:	b2da      	uxtb	r2, r3
 800bf4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bf54:	e03d      	b.n	800bfd2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf5c:	f043 0301 	orr.w	r3, r3, #1
 800bf60:	b2da      	uxtb	r2, r3
 800bf62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bf68:	68ba      	ldr	r2, [r7, #8]
 800bf6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf6c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bf6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf70:	699b      	ldr	r3, [r3, #24]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10b      	bne.n	800bf8e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bf76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf7a:	f383 8811 	msr	BASEPRI, r3
 800bf7e:	f3bf 8f6f 	isb	sy
 800bf82:	f3bf 8f4f 	dsb	sy
 800bf86:	617b      	str	r3, [r7, #20]
}
 800bf88:	bf00      	nop
 800bf8a:	bf00      	nop
 800bf8c:	e7fd      	b.n	800bf8a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bf8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf90:	699a      	ldr	r2, [r3, #24]
 800bf92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf94:	18d1      	adds	r1, r2, r3
 800bf96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf9c:	f7ff ff04 	bl	800bda8 <prvInsertTimerInActiveList>
					break;
 800bfa0:	e017      	b.n	800bfd2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bfa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfa8:	f003 0302 	and.w	r3, r3, #2
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d103      	bne.n	800bfb8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bfb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfb2:	f000 fbe9 	bl	800c788 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bfb6:	e00c      	b.n	800bfd2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfbe:	f023 0301 	bic.w	r3, r3, #1
 800bfc2:	b2da      	uxtb	r2, r3
 800bfc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bfca:	e002      	b.n	800bfd2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bfcc:	bf00      	nop
 800bfce:	e000      	b.n	800bfd2 <prvProcessReceivedCommands+0x1a6>
					break;
 800bfd0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfd2:	4b08      	ldr	r3, [pc, #32]	@ (800bff4 <prvProcessReceivedCommands+0x1c8>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	1d39      	adds	r1, r7, #4
 800bfd8:	2200      	movs	r2, #0
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7fe f986 	bl	800a2ec <xQueueReceive>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	f47f af26 	bne.w	800be34 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bfe8:	bf00      	nop
 800bfea:	bf00      	nop
 800bfec:	3730      	adds	r7, #48	@ 0x30
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	bf00      	nop
 800bff4:	20001698 	.word	0x20001698

0800bff8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b088      	sub	sp, #32
 800bffc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bffe:	e049      	b.n	800c094 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c000:	4b2e      	ldr	r3, [pc, #184]	@ (800c0bc <prvSwitchTimerLists+0xc4>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c00a:	4b2c      	ldr	r3, [pc, #176]	@ (800c0bc <prvSwitchTimerLists+0xc4>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	68db      	ldr	r3, [r3, #12]
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	3304      	adds	r3, #4
 800c018:	4618      	mov	r0, r3
 800c01a:	f7fd fe25 	bl	8009c68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6a1b      	ldr	r3, [r3, #32]
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c02c:	f003 0304 	and.w	r3, r3, #4
 800c030:	2b00      	cmp	r3, #0
 800c032:	d02f      	beq.n	800c094 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	699b      	ldr	r3, [r3, #24]
 800c038:	693a      	ldr	r2, [r7, #16]
 800c03a:	4413      	add	r3, r2
 800c03c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c03e:	68ba      	ldr	r2, [r7, #8]
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	429a      	cmp	r2, r3
 800c044:	d90e      	bls.n	800c064 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	68ba      	ldr	r2, [r7, #8]
 800c04a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c052:	4b1a      	ldr	r3, [pc, #104]	@ (800c0bc <prvSwitchTimerLists+0xc4>)
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	3304      	adds	r3, #4
 800c05a:	4619      	mov	r1, r3
 800c05c:	4610      	mov	r0, r2
 800c05e:	f7fd fdca 	bl	8009bf6 <vListInsert>
 800c062:	e017      	b.n	800c094 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c064:	2300      	movs	r3, #0
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	2300      	movs	r3, #0
 800c06a:	693a      	ldr	r2, [r7, #16]
 800c06c:	2100      	movs	r1, #0
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f7ff fd58 	bl	800bb24 <xTimerGenericCommand>
 800c074:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10b      	bne.n	800c094 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c07c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c080:	f383 8811 	msr	BASEPRI, r3
 800c084:	f3bf 8f6f 	isb	sy
 800c088:	f3bf 8f4f 	dsb	sy
 800c08c:	603b      	str	r3, [r7, #0]
}
 800c08e:	bf00      	nop
 800c090:	bf00      	nop
 800c092:	e7fd      	b.n	800c090 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c094:	4b09      	ldr	r3, [pc, #36]	@ (800c0bc <prvSwitchTimerLists+0xc4>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d1b0      	bne.n	800c000 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c09e:	4b07      	ldr	r3, [pc, #28]	@ (800c0bc <prvSwitchTimerLists+0xc4>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c0a4:	4b06      	ldr	r3, [pc, #24]	@ (800c0c0 <prvSwitchTimerLists+0xc8>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4a04      	ldr	r2, [pc, #16]	@ (800c0bc <prvSwitchTimerLists+0xc4>)
 800c0aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c0ac:	4a04      	ldr	r2, [pc, #16]	@ (800c0c0 <prvSwitchTimerLists+0xc8>)
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	6013      	str	r3, [r2, #0]
}
 800c0b2:	bf00      	nop
 800c0b4:	3718      	adds	r7, #24
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	20001690 	.word	0x20001690
 800c0c0:	20001694 	.word	0x20001694

0800c0c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c0ca:	f000 f96d 	bl	800c3a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c0ce:	4b15      	ldr	r3, [pc, #84]	@ (800c124 <prvCheckForValidListAndQueue+0x60>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d120      	bne.n	800c118 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c0d6:	4814      	ldr	r0, [pc, #80]	@ (800c128 <prvCheckForValidListAndQueue+0x64>)
 800c0d8:	f7fd fd3c 	bl	8009b54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c0dc:	4813      	ldr	r0, [pc, #76]	@ (800c12c <prvCheckForValidListAndQueue+0x68>)
 800c0de:	f7fd fd39 	bl	8009b54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c0e2:	4b13      	ldr	r3, [pc, #76]	@ (800c130 <prvCheckForValidListAndQueue+0x6c>)
 800c0e4:	4a10      	ldr	r2, [pc, #64]	@ (800c128 <prvCheckForValidListAndQueue+0x64>)
 800c0e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c0e8:	4b12      	ldr	r3, [pc, #72]	@ (800c134 <prvCheckForValidListAndQueue+0x70>)
 800c0ea:	4a10      	ldr	r2, [pc, #64]	@ (800c12c <prvCheckForValidListAndQueue+0x68>)
 800c0ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	9300      	str	r3, [sp, #0]
 800c0f2:	4b11      	ldr	r3, [pc, #68]	@ (800c138 <prvCheckForValidListAndQueue+0x74>)
 800c0f4:	4a11      	ldr	r2, [pc, #68]	@ (800c13c <prvCheckForValidListAndQueue+0x78>)
 800c0f6:	2110      	movs	r1, #16
 800c0f8:	200a      	movs	r0, #10
 800c0fa:	f7fd fe49 	bl	8009d90 <xQueueGenericCreateStatic>
 800c0fe:	4603      	mov	r3, r0
 800c100:	4a08      	ldr	r2, [pc, #32]	@ (800c124 <prvCheckForValidListAndQueue+0x60>)
 800c102:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c104:	4b07      	ldr	r3, [pc, #28]	@ (800c124 <prvCheckForValidListAndQueue+0x60>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d005      	beq.n	800c118 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c10c:	4b05      	ldr	r3, [pc, #20]	@ (800c124 <prvCheckForValidListAndQueue+0x60>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	490b      	ldr	r1, [pc, #44]	@ (800c140 <prvCheckForValidListAndQueue+0x7c>)
 800c112:	4618      	mov	r0, r3
 800c114:	f7fe fc24 	bl	800a960 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c118:	f000 f978 	bl	800c40c <vPortExitCritical>
}
 800c11c:	bf00      	nop
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	20001698 	.word	0x20001698
 800c128:	20001668 	.word	0x20001668
 800c12c:	2000167c 	.word	0x2000167c
 800c130:	20001690 	.word	0x20001690
 800c134:	20001694 	.word	0x20001694
 800c138:	20001744 	.word	0x20001744
 800c13c:	200016a4 	.word	0x200016a4
 800c140:	0801024c 	.word	0x0801024c

0800c144 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c144:	b480      	push	{r7}
 800c146:	b085      	sub	sp, #20
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	3b04      	subs	r3, #4
 800c154:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c15c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	3b04      	subs	r3, #4
 800c162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	f023 0201 	bic.w	r2, r3, #1
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	3b04      	subs	r3, #4
 800c172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c174:	4a0c      	ldr	r2, [pc, #48]	@ (800c1a8 <pxPortInitialiseStack+0x64>)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	3b14      	subs	r3, #20
 800c17e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	3b04      	subs	r3, #4
 800c18a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f06f 0202 	mvn.w	r2, #2
 800c192:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	3b20      	subs	r3, #32
 800c198:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c19a:	68fb      	ldr	r3, [r7, #12]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3714      	adds	r7, #20
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr
 800c1a8:	0800c1ad 	.word	0x0800c1ad

0800c1ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b085      	sub	sp, #20
 800c1b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c1b6:	4b13      	ldr	r3, [pc, #76]	@ (800c204 <prvTaskExitError+0x58>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1be:	d00b      	beq.n	800c1d8 <prvTaskExitError+0x2c>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	60fb      	str	r3, [r7, #12]
}
 800c1d2:	bf00      	nop
 800c1d4:	bf00      	nop
 800c1d6:	e7fd      	b.n	800c1d4 <prvTaskExitError+0x28>
	__asm volatile
 800c1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1dc:	f383 8811 	msr	BASEPRI, r3
 800c1e0:	f3bf 8f6f 	isb	sy
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	60bb      	str	r3, [r7, #8]
}
 800c1ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c1ec:	bf00      	nop
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d0fc      	beq.n	800c1ee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c1f4:	bf00      	nop
 800c1f6:	bf00      	nop
 800c1f8:	3714      	adds	r7, #20
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	2000002c 	.word	0x2000002c
	...

0800c210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c210:	4b07      	ldr	r3, [pc, #28]	@ (800c230 <pxCurrentTCBConst2>)
 800c212:	6819      	ldr	r1, [r3, #0]
 800c214:	6808      	ldr	r0, [r1, #0]
 800c216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c21a:	f380 8809 	msr	PSP, r0
 800c21e:	f3bf 8f6f 	isb	sy
 800c222:	f04f 0000 	mov.w	r0, #0
 800c226:	f380 8811 	msr	BASEPRI, r0
 800c22a:	4770      	bx	lr
 800c22c:	f3af 8000 	nop.w

0800c230 <pxCurrentTCBConst2>:
 800c230:	20001168 	.word	0x20001168
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c234:	bf00      	nop
 800c236:	bf00      	nop

0800c238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c238:	4808      	ldr	r0, [pc, #32]	@ (800c25c <prvPortStartFirstTask+0x24>)
 800c23a:	6800      	ldr	r0, [r0, #0]
 800c23c:	6800      	ldr	r0, [r0, #0]
 800c23e:	f380 8808 	msr	MSP, r0
 800c242:	f04f 0000 	mov.w	r0, #0
 800c246:	f380 8814 	msr	CONTROL, r0
 800c24a:	b662      	cpsie	i
 800c24c:	b661      	cpsie	f
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	f3bf 8f6f 	isb	sy
 800c256:	df00      	svc	0
 800c258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c25a:	bf00      	nop
 800c25c:	e000ed08 	.word	0xe000ed08

0800c260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b086      	sub	sp, #24
 800c264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c266:	4b47      	ldr	r3, [pc, #284]	@ (800c384 <xPortStartScheduler+0x124>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a47      	ldr	r2, [pc, #284]	@ (800c388 <xPortStartScheduler+0x128>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d10b      	bne.n	800c288 <xPortStartScheduler+0x28>
	__asm volatile
 800c270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	60fb      	str	r3, [r7, #12]
}
 800c282:	bf00      	nop
 800c284:	bf00      	nop
 800c286:	e7fd      	b.n	800c284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c288:	4b3e      	ldr	r3, [pc, #248]	@ (800c384 <xPortStartScheduler+0x124>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a3f      	ldr	r2, [pc, #252]	@ (800c38c <xPortStartScheduler+0x12c>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d10b      	bne.n	800c2aa <xPortStartScheduler+0x4a>
	__asm volatile
 800c292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c296:	f383 8811 	msr	BASEPRI, r3
 800c29a:	f3bf 8f6f 	isb	sy
 800c29e:	f3bf 8f4f 	dsb	sy
 800c2a2:	613b      	str	r3, [r7, #16]
}
 800c2a4:	bf00      	nop
 800c2a6:	bf00      	nop
 800c2a8:	e7fd      	b.n	800c2a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c2aa:	4b39      	ldr	r3, [pc, #228]	@ (800c390 <xPortStartScheduler+0x130>)
 800c2ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	22ff      	movs	r2, #255	@ 0xff
 800c2ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2c4:	78fb      	ldrb	r3, [r7, #3]
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c2cc:	b2da      	uxtb	r2, r3
 800c2ce:	4b31      	ldr	r3, [pc, #196]	@ (800c394 <xPortStartScheduler+0x134>)
 800c2d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c2d2:	4b31      	ldr	r3, [pc, #196]	@ (800c398 <xPortStartScheduler+0x138>)
 800c2d4:	2207      	movs	r2, #7
 800c2d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2d8:	e009      	b.n	800c2ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c2da:	4b2f      	ldr	r3, [pc, #188]	@ (800c398 <xPortStartScheduler+0x138>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	4a2d      	ldr	r2, [pc, #180]	@ (800c398 <xPortStartScheduler+0x138>)
 800c2e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c2e4:	78fb      	ldrb	r3, [r7, #3]
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	005b      	lsls	r3, r3, #1
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2ee:	78fb      	ldrb	r3, [r7, #3]
 800c2f0:	b2db      	uxtb	r3, r3
 800c2f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2f6:	2b80      	cmp	r3, #128	@ 0x80
 800c2f8:	d0ef      	beq.n	800c2da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c2fa:	4b27      	ldr	r3, [pc, #156]	@ (800c398 <xPortStartScheduler+0x138>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f1c3 0307 	rsb	r3, r3, #7
 800c302:	2b04      	cmp	r3, #4
 800c304:	d00b      	beq.n	800c31e <xPortStartScheduler+0xbe>
	__asm volatile
 800c306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c30a:	f383 8811 	msr	BASEPRI, r3
 800c30e:	f3bf 8f6f 	isb	sy
 800c312:	f3bf 8f4f 	dsb	sy
 800c316:	60bb      	str	r3, [r7, #8]
}
 800c318:	bf00      	nop
 800c31a:	bf00      	nop
 800c31c:	e7fd      	b.n	800c31a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c31e:	4b1e      	ldr	r3, [pc, #120]	@ (800c398 <xPortStartScheduler+0x138>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	021b      	lsls	r3, r3, #8
 800c324:	4a1c      	ldr	r2, [pc, #112]	@ (800c398 <xPortStartScheduler+0x138>)
 800c326:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c328:	4b1b      	ldr	r3, [pc, #108]	@ (800c398 <xPortStartScheduler+0x138>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c330:	4a19      	ldr	r2, [pc, #100]	@ (800c398 <xPortStartScheduler+0x138>)
 800c332:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	b2da      	uxtb	r2, r3
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c33c:	4b17      	ldr	r3, [pc, #92]	@ (800c39c <xPortStartScheduler+0x13c>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a16      	ldr	r2, [pc, #88]	@ (800c39c <xPortStartScheduler+0x13c>)
 800c342:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c346:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c348:	4b14      	ldr	r3, [pc, #80]	@ (800c39c <xPortStartScheduler+0x13c>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4a13      	ldr	r2, [pc, #76]	@ (800c39c <xPortStartScheduler+0x13c>)
 800c34e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c352:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c354:	f000 f8da 	bl	800c50c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c358:	4b11      	ldr	r3, [pc, #68]	@ (800c3a0 <xPortStartScheduler+0x140>)
 800c35a:	2200      	movs	r2, #0
 800c35c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c35e:	f000 f8f9 	bl	800c554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c362:	4b10      	ldr	r3, [pc, #64]	@ (800c3a4 <xPortStartScheduler+0x144>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4a0f      	ldr	r2, [pc, #60]	@ (800c3a4 <xPortStartScheduler+0x144>)
 800c368:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c36c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c36e:	f7ff ff63 	bl	800c238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c372:	f7fe ff2d 	bl	800b1d0 <vTaskSwitchContext>
	prvTaskExitError();
 800c376:	f7ff ff19 	bl	800c1ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c37a:	2300      	movs	r3, #0
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3718      	adds	r7, #24
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}
 800c384:	e000ed00 	.word	0xe000ed00
 800c388:	410fc271 	.word	0x410fc271
 800c38c:	410fc270 	.word	0x410fc270
 800c390:	e000e400 	.word	0xe000e400
 800c394:	20001794 	.word	0x20001794
 800c398:	20001798 	.word	0x20001798
 800c39c:	e000ed20 	.word	0xe000ed20
 800c3a0:	2000002c 	.word	0x2000002c
 800c3a4:	e000ef34 	.word	0xe000ef34

0800c3a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
	__asm volatile
 800c3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b2:	f383 8811 	msr	BASEPRI, r3
 800c3b6:	f3bf 8f6f 	isb	sy
 800c3ba:	f3bf 8f4f 	dsb	sy
 800c3be:	607b      	str	r3, [r7, #4]
}
 800c3c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3c2:	4b10      	ldr	r3, [pc, #64]	@ (800c404 <vPortEnterCritical+0x5c>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	4a0e      	ldr	r2, [pc, #56]	@ (800c404 <vPortEnterCritical+0x5c>)
 800c3ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3cc:	4b0d      	ldr	r3, [pc, #52]	@ (800c404 <vPortEnterCritical+0x5c>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d110      	bne.n	800c3f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c3d4:	4b0c      	ldr	r3, [pc, #48]	@ (800c408 <vPortEnterCritical+0x60>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00b      	beq.n	800c3f6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	603b      	str	r3, [r7, #0]
}
 800c3f0:	bf00      	nop
 800c3f2:	bf00      	nop
 800c3f4:	e7fd      	b.n	800c3f2 <vPortEnterCritical+0x4a>
	}
}
 800c3f6:	bf00      	nop
 800c3f8:	370c      	adds	r7, #12
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop
 800c404:	2000002c 	.word	0x2000002c
 800c408:	e000ed04 	.word	0xe000ed04

0800c40c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c412:	4b12      	ldr	r3, [pc, #72]	@ (800c45c <vPortExitCritical+0x50>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d10b      	bne.n	800c432 <vPortExitCritical+0x26>
	__asm volatile
 800c41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c41e:	f383 8811 	msr	BASEPRI, r3
 800c422:	f3bf 8f6f 	isb	sy
 800c426:	f3bf 8f4f 	dsb	sy
 800c42a:	607b      	str	r3, [r7, #4]
}
 800c42c:	bf00      	nop
 800c42e:	bf00      	nop
 800c430:	e7fd      	b.n	800c42e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c432:	4b0a      	ldr	r3, [pc, #40]	@ (800c45c <vPortExitCritical+0x50>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	3b01      	subs	r3, #1
 800c438:	4a08      	ldr	r2, [pc, #32]	@ (800c45c <vPortExitCritical+0x50>)
 800c43a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c43c:	4b07      	ldr	r3, [pc, #28]	@ (800c45c <vPortExitCritical+0x50>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d105      	bne.n	800c450 <vPortExitCritical+0x44>
 800c444:	2300      	movs	r3, #0
 800c446:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	f383 8811 	msr	BASEPRI, r3
}
 800c44e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c450:	bf00      	nop
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr
 800c45c:	2000002c 	.word	0x2000002c

0800c460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c460:	f3ef 8009 	mrs	r0, PSP
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	4b15      	ldr	r3, [pc, #84]	@ (800c4c0 <pxCurrentTCBConst>)
 800c46a:	681a      	ldr	r2, [r3, #0]
 800c46c:	f01e 0f10 	tst.w	lr, #16
 800c470:	bf08      	it	eq
 800c472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c47a:	6010      	str	r0, [r2, #0]
 800c47c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c480:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c484:	f380 8811 	msr	BASEPRI, r0
 800c488:	f3bf 8f4f 	dsb	sy
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f7fe fe9e 	bl	800b1d0 <vTaskSwitchContext>
 800c494:	f04f 0000 	mov.w	r0, #0
 800c498:	f380 8811 	msr	BASEPRI, r0
 800c49c:	bc09      	pop	{r0, r3}
 800c49e:	6819      	ldr	r1, [r3, #0]
 800c4a0:	6808      	ldr	r0, [r1, #0]
 800c4a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a6:	f01e 0f10 	tst.w	lr, #16
 800c4aa:	bf08      	it	eq
 800c4ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4b0:	f380 8809 	msr	PSP, r0
 800c4b4:	f3bf 8f6f 	isb	sy
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	f3af 8000 	nop.w

0800c4c0 <pxCurrentTCBConst>:
 800c4c0:	20001168 	.word	0x20001168
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c4c4:	bf00      	nop
 800c4c6:	bf00      	nop

0800c4c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d2:	f383 8811 	msr	BASEPRI, r3
 800c4d6:	f3bf 8f6f 	isb	sy
 800c4da:	f3bf 8f4f 	dsb	sy
 800c4de:	607b      	str	r3, [r7, #4]
}
 800c4e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c4e2:	f7fe fdbb 	bl	800b05c <xTaskIncrementTick>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d003      	beq.n	800c4f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c4ec:	4b06      	ldr	r3, [pc, #24]	@ (800c508 <xPortSysTickHandler+0x40>)
 800c4ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4f2:	601a      	str	r2, [r3, #0]
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	f383 8811 	msr	BASEPRI, r3
}
 800c4fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c500:	bf00      	nop
 800c502:	3708      	adds	r7, #8
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	e000ed04 	.word	0xe000ed04

0800c50c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c50c:	b480      	push	{r7}
 800c50e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c510:	4b0b      	ldr	r3, [pc, #44]	@ (800c540 <vPortSetupTimerInterrupt+0x34>)
 800c512:	2200      	movs	r2, #0
 800c514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c516:	4b0b      	ldr	r3, [pc, #44]	@ (800c544 <vPortSetupTimerInterrupt+0x38>)
 800c518:	2200      	movs	r2, #0
 800c51a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c51c:	4b0a      	ldr	r3, [pc, #40]	@ (800c548 <vPortSetupTimerInterrupt+0x3c>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4a0a      	ldr	r2, [pc, #40]	@ (800c54c <vPortSetupTimerInterrupt+0x40>)
 800c522:	fba2 2303 	umull	r2, r3, r2, r3
 800c526:	099b      	lsrs	r3, r3, #6
 800c528:	4a09      	ldr	r2, [pc, #36]	@ (800c550 <vPortSetupTimerInterrupt+0x44>)
 800c52a:	3b01      	subs	r3, #1
 800c52c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c52e:	4b04      	ldr	r3, [pc, #16]	@ (800c540 <vPortSetupTimerInterrupt+0x34>)
 800c530:	2207      	movs	r2, #7
 800c532:	601a      	str	r2, [r3, #0]
}
 800c534:	bf00      	nop
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	e000e010 	.word	0xe000e010
 800c544:	e000e018 	.word	0xe000e018
 800c548:	20000024 	.word	0x20000024
 800c54c:	10624dd3 	.word	0x10624dd3
 800c550:	e000e014 	.word	0xe000e014

0800c554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c554:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c564 <vPortEnableVFP+0x10>
 800c558:	6801      	ldr	r1, [r0, #0]
 800c55a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c55e:	6001      	str	r1, [r0, #0]
 800c560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c562:	bf00      	nop
 800c564:	e000ed88 	.word	0xe000ed88

0800c568 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c56e:	f3ef 8305 	mrs	r3, IPSR
 800c572:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2b0f      	cmp	r3, #15
 800c578:	d915      	bls.n	800c5a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c57a:	4a18      	ldr	r2, [pc, #96]	@ (800c5dc <vPortValidateInterruptPriority+0x74>)
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	4413      	add	r3, r2
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c584:	4b16      	ldr	r3, [pc, #88]	@ (800c5e0 <vPortValidateInterruptPriority+0x78>)
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	7afa      	ldrb	r2, [r7, #11]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d20b      	bcs.n	800c5a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c592:	f383 8811 	msr	BASEPRI, r3
 800c596:	f3bf 8f6f 	isb	sy
 800c59a:	f3bf 8f4f 	dsb	sy
 800c59e:	607b      	str	r3, [r7, #4]
}
 800c5a0:	bf00      	nop
 800c5a2:	bf00      	nop
 800c5a4:	e7fd      	b.n	800c5a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c5a6:	4b0f      	ldr	r3, [pc, #60]	@ (800c5e4 <vPortValidateInterruptPriority+0x7c>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c5ae:	4b0e      	ldr	r3, [pc, #56]	@ (800c5e8 <vPortValidateInterruptPriority+0x80>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d90b      	bls.n	800c5ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ba:	f383 8811 	msr	BASEPRI, r3
 800c5be:	f3bf 8f6f 	isb	sy
 800c5c2:	f3bf 8f4f 	dsb	sy
 800c5c6:	603b      	str	r3, [r7, #0]
}
 800c5c8:	bf00      	nop
 800c5ca:	bf00      	nop
 800c5cc:	e7fd      	b.n	800c5ca <vPortValidateInterruptPriority+0x62>
	}
 800c5ce:	bf00      	nop
 800c5d0:	3714      	adds	r7, #20
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d8:	4770      	bx	lr
 800c5da:	bf00      	nop
 800c5dc:	e000e3f0 	.word	0xe000e3f0
 800c5e0:	20001794 	.word	0x20001794
 800c5e4:	e000ed0c 	.word	0xe000ed0c
 800c5e8:	20001798 	.word	0x20001798

0800c5ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b08a      	sub	sp, #40	@ 0x28
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c5f8:	f7fe fc74 	bl	800aee4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c5fc:	4b5c      	ldr	r3, [pc, #368]	@ (800c770 <pvPortMalloc+0x184>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d101      	bne.n	800c608 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c604:	f000 f924 	bl	800c850 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c608:	4b5a      	ldr	r3, [pc, #360]	@ (800c774 <pvPortMalloc+0x188>)
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	4013      	ands	r3, r2
 800c610:	2b00      	cmp	r3, #0
 800c612:	f040 8095 	bne.w	800c740 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d01e      	beq.n	800c65a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c61c:	2208      	movs	r2, #8
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	4413      	add	r3, r2
 800c622:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f003 0307 	and.w	r3, r3, #7
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d015      	beq.n	800c65a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f023 0307 	bic.w	r3, r3, #7
 800c634:	3308      	adds	r3, #8
 800c636:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f003 0307 	and.w	r3, r3, #7
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d00b      	beq.n	800c65a <pvPortMalloc+0x6e>
	__asm volatile
 800c642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c646:	f383 8811 	msr	BASEPRI, r3
 800c64a:	f3bf 8f6f 	isb	sy
 800c64e:	f3bf 8f4f 	dsb	sy
 800c652:	617b      	str	r3, [r7, #20]
}
 800c654:	bf00      	nop
 800c656:	bf00      	nop
 800c658:	e7fd      	b.n	800c656 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d06f      	beq.n	800c740 <pvPortMalloc+0x154>
 800c660:	4b45      	ldr	r3, [pc, #276]	@ (800c778 <pvPortMalloc+0x18c>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	429a      	cmp	r2, r3
 800c668:	d86a      	bhi.n	800c740 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c66a:	4b44      	ldr	r3, [pc, #272]	@ (800c77c <pvPortMalloc+0x190>)
 800c66c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c66e:	4b43      	ldr	r3, [pc, #268]	@ (800c77c <pvPortMalloc+0x190>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c674:	e004      	b.n	800c680 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c678:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	429a      	cmp	r2, r3
 800c688:	d903      	bls.n	800c692 <pvPortMalloc+0xa6>
 800c68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d1f1      	bne.n	800c676 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c692:	4b37      	ldr	r3, [pc, #220]	@ (800c770 <pvPortMalloc+0x184>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c698:	429a      	cmp	r2, r3
 800c69a:	d051      	beq.n	800c740 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c69c:	6a3b      	ldr	r3, [r7, #32]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2208      	movs	r2, #8
 800c6a2:	4413      	add	r3, r2
 800c6a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	6a3b      	ldr	r3, [r7, #32]
 800c6ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b0:	685a      	ldr	r2, [r3, #4]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	1ad2      	subs	r2, r2, r3
 800c6b6:	2308      	movs	r3, #8
 800c6b8:	005b      	lsls	r3, r3, #1
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d920      	bls.n	800c700 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c6be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	f003 0307 	and.w	r3, r3, #7
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d00b      	beq.n	800c6e8 <pvPortMalloc+0xfc>
	__asm volatile
 800c6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6d4:	f383 8811 	msr	BASEPRI, r3
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	f3bf 8f4f 	dsb	sy
 800c6e0:	613b      	str	r3, [r7, #16]
}
 800c6e2:	bf00      	nop
 800c6e4:	bf00      	nop
 800c6e6:	e7fd      	b.n	800c6e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ea:	685a      	ldr	r2, [r3, #4]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	1ad2      	subs	r2, r2, r3
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c6fa:	69b8      	ldr	r0, [r7, #24]
 800c6fc:	f000 f90a 	bl	800c914 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c700:	4b1d      	ldr	r3, [pc, #116]	@ (800c778 <pvPortMalloc+0x18c>)
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	1ad3      	subs	r3, r2, r3
 800c70a:	4a1b      	ldr	r2, [pc, #108]	@ (800c778 <pvPortMalloc+0x18c>)
 800c70c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c70e:	4b1a      	ldr	r3, [pc, #104]	@ (800c778 <pvPortMalloc+0x18c>)
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	4b1b      	ldr	r3, [pc, #108]	@ (800c780 <pvPortMalloc+0x194>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	429a      	cmp	r2, r3
 800c718:	d203      	bcs.n	800c722 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c71a:	4b17      	ldr	r3, [pc, #92]	@ (800c778 <pvPortMalloc+0x18c>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4a18      	ldr	r2, [pc, #96]	@ (800c780 <pvPortMalloc+0x194>)
 800c720:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c724:	685a      	ldr	r2, [r3, #4]
 800c726:	4b13      	ldr	r3, [pc, #76]	@ (800c774 <pvPortMalloc+0x188>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	431a      	orrs	r2, r3
 800c72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c732:	2200      	movs	r2, #0
 800c734:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c736:	4b13      	ldr	r3, [pc, #76]	@ (800c784 <pvPortMalloc+0x198>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	3301      	adds	r3, #1
 800c73c:	4a11      	ldr	r2, [pc, #68]	@ (800c784 <pvPortMalloc+0x198>)
 800c73e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c740:	f7fe fbde 	bl	800af00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c744:	69fb      	ldr	r3, [r7, #28]
 800c746:	f003 0307 	and.w	r3, r3, #7
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d00b      	beq.n	800c766 <pvPortMalloc+0x17a>
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	60fb      	str	r3, [r7, #12]
}
 800c760:	bf00      	nop
 800c762:	bf00      	nop
 800c764:	e7fd      	b.n	800c762 <pvPortMalloc+0x176>
	return pvReturn;
 800c766:	69fb      	ldr	r3, [r7, #28]
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3728      	adds	r7, #40	@ 0x28
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	20008fa4 	.word	0x20008fa4
 800c774:	20008fb8 	.word	0x20008fb8
 800c778:	20008fa8 	.word	0x20008fa8
 800c77c:	20008f9c 	.word	0x20008f9c
 800c780:	20008fac 	.word	0x20008fac
 800c784:	20008fb0 	.word	0x20008fb0

0800c788 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b086      	sub	sp, #24
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d04f      	beq.n	800c83a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c79a:	2308      	movs	r3, #8
 800c79c:	425b      	negs	r3, r3
 800c79e:	697a      	ldr	r2, [r7, #20]
 800c7a0:	4413      	add	r3, r2
 800c7a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	685a      	ldr	r2, [r3, #4]
 800c7ac:	4b25      	ldr	r3, [pc, #148]	@ (800c844 <vPortFree+0xbc>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4013      	ands	r3, r2
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d10b      	bne.n	800c7ce <vPortFree+0x46>
	__asm volatile
 800c7b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ba:	f383 8811 	msr	BASEPRI, r3
 800c7be:	f3bf 8f6f 	isb	sy
 800c7c2:	f3bf 8f4f 	dsb	sy
 800c7c6:	60fb      	str	r3, [r7, #12]
}
 800c7c8:	bf00      	nop
 800c7ca:	bf00      	nop
 800c7cc:	e7fd      	b.n	800c7ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d00b      	beq.n	800c7ee <vPortFree+0x66>
	__asm volatile
 800c7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7da:	f383 8811 	msr	BASEPRI, r3
 800c7de:	f3bf 8f6f 	isb	sy
 800c7e2:	f3bf 8f4f 	dsb	sy
 800c7e6:	60bb      	str	r3, [r7, #8]
}
 800c7e8:	bf00      	nop
 800c7ea:	bf00      	nop
 800c7ec:	e7fd      	b.n	800c7ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	685a      	ldr	r2, [r3, #4]
 800c7f2:	4b14      	ldr	r3, [pc, #80]	@ (800c844 <vPortFree+0xbc>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4013      	ands	r3, r2
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d01e      	beq.n	800c83a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d11a      	bne.n	800c83a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	685a      	ldr	r2, [r3, #4]
 800c808:	4b0e      	ldr	r3, [pc, #56]	@ (800c844 <vPortFree+0xbc>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	43db      	mvns	r3, r3
 800c80e:	401a      	ands	r2, r3
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c814:	f7fe fb66 	bl	800aee4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	685a      	ldr	r2, [r3, #4]
 800c81c:	4b0a      	ldr	r3, [pc, #40]	@ (800c848 <vPortFree+0xc0>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4413      	add	r3, r2
 800c822:	4a09      	ldr	r2, [pc, #36]	@ (800c848 <vPortFree+0xc0>)
 800c824:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c826:	6938      	ldr	r0, [r7, #16]
 800c828:	f000 f874 	bl	800c914 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c82c:	4b07      	ldr	r3, [pc, #28]	@ (800c84c <vPortFree+0xc4>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	3301      	adds	r3, #1
 800c832:	4a06      	ldr	r2, [pc, #24]	@ (800c84c <vPortFree+0xc4>)
 800c834:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c836:	f7fe fb63 	bl	800af00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c83a:	bf00      	nop
 800c83c:	3718      	adds	r7, #24
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	20008fb8 	.word	0x20008fb8
 800c848:	20008fa8 	.word	0x20008fa8
 800c84c:	20008fb4 	.word	0x20008fb4

0800c850 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c850:	b480      	push	{r7}
 800c852:	b085      	sub	sp, #20
 800c854:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c856:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800c85a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c85c:	4b27      	ldr	r3, [pc, #156]	@ (800c8fc <prvHeapInit+0xac>)
 800c85e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f003 0307 	and.w	r3, r3, #7
 800c866:	2b00      	cmp	r3, #0
 800c868:	d00c      	beq.n	800c884 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	3307      	adds	r3, #7
 800c86e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f023 0307 	bic.w	r3, r3, #7
 800c876:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c878:	68ba      	ldr	r2, [r7, #8]
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	1ad3      	subs	r3, r2, r3
 800c87e:	4a1f      	ldr	r2, [pc, #124]	@ (800c8fc <prvHeapInit+0xac>)
 800c880:	4413      	add	r3, r2
 800c882:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c888:	4a1d      	ldr	r2, [pc, #116]	@ (800c900 <prvHeapInit+0xb0>)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c88e:	4b1c      	ldr	r3, [pc, #112]	@ (800c900 <prvHeapInit+0xb0>)
 800c890:	2200      	movs	r2, #0
 800c892:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	4413      	add	r3, r2
 800c89a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c89c:	2208      	movs	r2, #8
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	1a9b      	subs	r3, r3, r2
 800c8a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f023 0307 	bic.w	r3, r3, #7
 800c8aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	4a15      	ldr	r2, [pc, #84]	@ (800c904 <prvHeapInit+0xb4>)
 800c8b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c8b2:	4b14      	ldr	r3, [pc, #80]	@ (800c904 <prvHeapInit+0xb4>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c8ba:	4b12      	ldr	r3, [pc, #72]	@ (800c904 <prvHeapInit+0xb4>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	68fa      	ldr	r2, [r7, #12]
 800c8ca:	1ad2      	subs	r2, r2, r3
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c8d0:	4b0c      	ldr	r3, [pc, #48]	@ (800c904 <prvHeapInit+0xb4>)
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	4a0a      	ldr	r2, [pc, #40]	@ (800c908 <prvHeapInit+0xb8>)
 800c8de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	4a09      	ldr	r2, [pc, #36]	@ (800c90c <prvHeapInit+0xbc>)
 800c8e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c8e8:	4b09      	ldr	r3, [pc, #36]	@ (800c910 <prvHeapInit+0xc0>)
 800c8ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c8ee:	601a      	str	r2, [r3, #0]
}
 800c8f0:	bf00      	nop
 800c8f2:	3714      	adds	r7, #20
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr
 800c8fc:	2000179c 	.word	0x2000179c
 800c900:	20008f9c 	.word	0x20008f9c
 800c904:	20008fa4 	.word	0x20008fa4
 800c908:	20008fac 	.word	0x20008fac
 800c90c:	20008fa8 	.word	0x20008fa8
 800c910:	20008fb8 	.word	0x20008fb8

0800c914 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c914:	b480      	push	{r7}
 800c916:	b085      	sub	sp, #20
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c91c:	4b28      	ldr	r3, [pc, #160]	@ (800c9c0 <prvInsertBlockIntoFreeList+0xac>)
 800c91e:	60fb      	str	r3, [r7, #12]
 800c920:	e002      	b.n	800c928 <prvInsertBlockIntoFreeList+0x14>
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	60fb      	str	r3, [r7, #12]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	429a      	cmp	r2, r3
 800c930:	d8f7      	bhi.n	800c922 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	68ba      	ldr	r2, [r7, #8]
 800c93c:	4413      	add	r3, r2
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	429a      	cmp	r2, r3
 800c942:	d108      	bne.n	800c956 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	685a      	ldr	r2, [r3, #4]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	441a      	add	r2, r3
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	68ba      	ldr	r2, [r7, #8]
 800c960:	441a      	add	r2, r3
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	429a      	cmp	r2, r3
 800c968:	d118      	bne.n	800c99c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	4b15      	ldr	r3, [pc, #84]	@ (800c9c4 <prvInsertBlockIntoFreeList+0xb0>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	429a      	cmp	r2, r3
 800c974:	d00d      	beq.n	800c992 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	685a      	ldr	r2, [r3, #4]
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	685b      	ldr	r3, [r3, #4]
 800c980:	441a      	add	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	601a      	str	r2, [r3, #0]
 800c990:	e008      	b.n	800c9a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c992:	4b0c      	ldr	r3, [pc, #48]	@ (800c9c4 <prvInsertBlockIntoFreeList+0xb0>)
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	601a      	str	r2, [r3, #0]
 800c99a:	e003      	b.n	800c9a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c9a4:	68fa      	ldr	r2, [r7, #12]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d002      	beq.n	800c9b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9b2:	bf00      	nop
 800c9b4:	3714      	adds	r7, #20
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr
 800c9be:	bf00      	nop
 800c9c0:	20008f9c 	.word	0x20008f9c
 800c9c4:	20008fa4 	.word	0x20008fa4

0800c9c8 <atof>:
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	f000 be09 	b.w	800d5e0 <strtod>

0800c9ce <atol>:
 800c9ce:	220a      	movs	r2, #10
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	f000 be8b 	b.w	800d6ec <strtol>

0800c9d6 <sulp>:
 800c9d6:	b570      	push	{r4, r5, r6, lr}
 800c9d8:	4604      	mov	r4, r0
 800c9da:	460d      	mov	r5, r1
 800c9dc:	ec45 4b10 	vmov	d0, r4, r5
 800c9e0:	4616      	mov	r6, r2
 800c9e2:	f002 f89d 	bl	800eb20 <__ulp>
 800c9e6:	ec51 0b10 	vmov	r0, r1, d0
 800c9ea:	b17e      	cbz	r6, 800ca0c <sulp+0x36>
 800c9ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c9f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	dd09      	ble.n	800ca0c <sulp+0x36>
 800c9f8:	051b      	lsls	r3, r3, #20
 800c9fa:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c9fe:	2400      	movs	r4, #0
 800ca00:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ca04:	4622      	mov	r2, r4
 800ca06:	462b      	mov	r3, r5
 800ca08:	f7f3 fdf6 	bl	80005f8 <__aeabi_dmul>
 800ca0c:	ec41 0b10 	vmov	d0, r0, r1
 800ca10:	bd70      	pop	{r4, r5, r6, pc}
 800ca12:	0000      	movs	r0, r0
 800ca14:	0000      	movs	r0, r0
	...

0800ca18 <_strtod_l>:
 800ca18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca1c:	b09f      	sub	sp, #124	@ 0x7c
 800ca1e:	460c      	mov	r4, r1
 800ca20:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ca22:	2200      	movs	r2, #0
 800ca24:	921a      	str	r2, [sp, #104]	@ 0x68
 800ca26:	9005      	str	r0, [sp, #20]
 800ca28:	f04f 0a00 	mov.w	sl, #0
 800ca2c:	f04f 0b00 	mov.w	fp, #0
 800ca30:	460a      	mov	r2, r1
 800ca32:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca34:	7811      	ldrb	r1, [r2, #0]
 800ca36:	292b      	cmp	r1, #43	@ 0x2b
 800ca38:	d04a      	beq.n	800cad0 <_strtod_l+0xb8>
 800ca3a:	d838      	bhi.n	800caae <_strtod_l+0x96>
 800ca3c:	290d      	cmp	r1, #13
 800ca3e:	d832      	bhi.n	800caa6 <_strtod_l+0x8e>
 800ca40:	2908      	cmp	r1, #8
 800ca42:	d832      	bhi.n	800caaa <_strtod_l+0x92>
 800ca44:	2900      	cmp	r1, #0
 800ca46:	d03b      	beq.n	800cac0 <_strtod_l+0xa8>
 800ca48:	2200      	movs	r2, #0
 800ca4a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ca4e:	782a      	ldrb	r2, [r5, #0]
 800ca50:	2a30      	cmp	r2, #48	@ 0x30
 800ca52:	f040 80b2 	bne.w	800cbba <_strtod_l+0x1a2>
 800ca56:	786a      	ldrb	r2, [r5, #1]
 800ca58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ca5c:	2a58      	cmp	r2, #88	@ 0x58
 800ca5e:	d16e      	bne.n	800cb3e <_strtod_l+0x126>
 800ca60:	9302      	str	r3, [sp, #8]
 800ca62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca64:	9301      	str	r3, [sp, #4]
 800ca66:	ab1a      	add	r3, sp, #104	@ 0x68
 800ca68:	9300      	str	r3, [sp, #0]
 800ca6a:	4a8f      	ldr	r2, [pc, #572]	@ (800cca8 <_strtod_l+0x290>)
 800ca6c:	9805      	ldr	r0, [sp, #20]
 800ca6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ca70:	a919      	add	r1, sp, #100	@ 0x64
 800ca72:	f001 f957 	bl	800dd24 <__gethex>
 800ca76:	f010 060f 	ands.w	r6, r0, #15
 800ca7a:	4604      	mov	r4, r0
 800ca7c:	d005      	beq.n	800ca8a <_strtod_l+0x72>
 800ca7e:	2e06      	cmp	r6, #6
 800ca80:	d128      	bne.n	800cad4 <_strtod_l+0xbc>
 800ca82:	3501      	adds	r5, #1
 800ca84:	2300      	movs	r3, #0
 800ca86:	9519      	str	r5, [sp, #100]	@ 0x64
 800ca88:	930e      	str	r3, [sp, #56]	@ 0x38
 800ca8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	f040 858e 	bne.w	800d5ae <_strtod_l+0xb96>
 800ca92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca94:	b1cb      	cbz	r3, 800caca <_strtod_l+0xb2>
 800ca96:	4652      	mov	r2, sl
 800ca98:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ca9c:	ec43 2b10 	vmov	d0, r2, r3
 800caa0:	b01f      	add	sp, #124	@ 0x7c
 800caa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa6:	2920      	cmp	r1, #32
 800caa8:	d1ce      	bne.n	800ca48 <_strtod_l+0x30>
 800caaa:	3201      	adds	r2, #1
 800caac:	e7c1      	b.n	800ca32 <_strtod_l+0x1a>
 800caae:	292d      	cmp	r1, #45	@ 0x2d
 800cab0:	d1ca      	bne.n	800ca48 <_strtod_l+0x30>
 800cab2:	2101      	movs	r1, #1
 800cab4:	910e      	str	r1, [sp, #56]	@ 0x38
 800cab6:	1c51      	adds	r1, r2, #1
 800cab8:	9119      	str	r1, [sp, #100]	@ 0x64
 800caba:	7852      	ldrb	r2, [r2, #1]
 800cabc:	2a00      	cmp	r2, #0
 800cabe:	d1c5      	bne.n	800ca4c <_strtod_l+0x34>
 800cac0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cac2:	9419      	str	r4, [sp, #100]	@ 0x64
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f040 8570 	bne.w	800d5aa <_strtod_l+0xb92>
 800caca:	4652      	mov	r2, sl
 800cacc:	465b      	mov	r3, fp
 800cace:	e7e5      	b.n	800ca9c <_strtod_l+0x84>
 800cad0:	2100      	movs	r1, #0
 800cad2:	e7ef      	b.n	800cab4 <_strtod_l+0x9c>
 800cad4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cad6:	b13a      	cbz	r2, 800cae8 <_strtod_l+0xd0>
 800cad8:	2135      	movs	r1, #53	@ 0x35
 800cada:	a81c      	add	r0, sp, #112	@ 0x70
 800cadc:	f002 f91a 	bl	800ed14 <__copybits>
 800cae0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cae2:	9805      	ldr	r0, [sp, #20]
 800cae4:	f001 fcf0 	bl	800e4c8 <_Bfree>
 800cae8:	3e01      	subs	r6, #1
 800caea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800caec:	2e04      	cmp	r6, #4
 800caee:	d806      	bhi.n	800cafe <_strtod_l+0xe6>
 800caf0:	e8df f006 	tbb	[pc, r6]
 800caf4:	201d0314 	.word	0x201d0314
 800caf8:	14          	.byte	0x14
 800caf9:	00          	.byte	0x00
 800cafa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cafe:	05e1      	lsls	r1, r4, #23
 800cb00:	bf48      	it	mi
 800cb02:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cb06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb0a:	0d1b      	lsrs	r3, r3, #20
 800cb0c:	051b      	lsls	r3, r3, #20
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d1bb      	bne.n	800ca8a <_strtod_l+0x72>
 800cb12:	f001 f80f 	bl	800db34 <__errno>
 800cb16:	2322      	movs	r3, #34	@ 0x22
 800cb18:	6003      	str	r3, [r0, #0]
 800cb1a:	e7b6      	b.n	800ca8a <_strtod_l+0x72>
 800cb1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cb20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cb24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cb28:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cb2c:	e7e7      	b.n	800cafe <_strtod_l+0xe6>
 800cb2e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ccb0 <_strtod_l+0x298>
 800cb32:	e7e4      	b.n	800cafe <_strtod_l+0xe6>
 800cb34:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cb38:	f04f 3aff 	mov.w	sl, #4294967295
 800cb3c:	e7df      	b.n	800cafe <_strtod_l+0xe6>
 800cb3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb40:	1c5a      	adds	r2, r3, #1
 800cb42:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb44:	785b      	ldrb	r3, [r3, #1]
 800cb46:	2b30      	cmp	r3, #48	@ 0x30
 800cb48:	d0f9      	beq.n	800cb3e <_strtod_l+0x126>
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d09d      	beq.n	800ca8a <_strtod_l+0x72>
 800cb4e:	2301      	movs	r3, #1
 800cb50:	2700      	movs	r7, #0
 800cb52:	9308      	str	r3, [sp, #32]
 800cb54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb56:	930c      	str	r3, [sp, #48]	@ 0x30
 800cb58:	970b      	str	r7, [sp, #44]	@ 0x2c
 800cb5a:	46b9      	mov	r9, r7
 800cb5c:	220a      	movs	r2, #10
 800cb5e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cb60:	7805      	ldrb	r5, [r0, #0]
 800cb62:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cb66:	b2d9      	uxtb	r1, r3
 800cb68:	2909      	cmp	r1, #9
 800cb6a:	d928      	bls.n	800cbbe <_strtod_l+0x1a6>
 800cb6c:	494f      	ldr	r1, [pc, #316]	@ (800ccac <_strtod_l+0x294>)
 800cb6e:	2201      	movs	r2, #1
 800cb70:	f000 ff16 	bl	800d9a0 <strncmp>
 800cb74:	2800      	cmp	r0, #0
 800cb76:	d032      	beq.n	800cbde <_strtod_l+0x1c6>
 800cb78:	2000      	movs	r0, #0
 800cb7a:	462a      	mov	r2, r5
 800cb7c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cb7e:	464d      	mov	r5, r9
 800cb80:	4603      	mov	r3, r0
 800cb82:	2a65      	cmp	r2, #101	@ 0x65
 800cb84:	d001      	beq.n	800cb8a <_strtod_l+0x172>
 800cb86:	2a45      	cmp	r2, #69	@ 0x45
 800cb88:	d114      	bne.n	800cbb4 <_strtod_l+0x19c>
 800cb8a:	b91d      	cbnz	r5, 800cb94 <_strtod_l+0x17c>
 800cb8c:	9a08      	ldr	r2, [sp, #32]
 800cb8e:	4302      	orrs	r2, r0
 800cb90:	d096      	beq.n	800cac0 <_strtod_l+0xa8>
 800cb92:	2500      	movs	r5, #0
 800cb94:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cb96:	1c62      	adds	r2, r4, #1
 800cb98:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb9a:	7862      	ldrb	r2, [r4, #1]
 800cb9c:	2a2b      	cmp	r2, #43	@ 0x2b
 800cb9e:	d07a      	beq.n	800cc96 <_strtod_l+0x27e>
 800cba0:	2a2d      	cmp	r2, #45	@ 0x2d
 800cba2:	d07e      	beq.n	800cca2 <_strtod_l+0x28a>
 800cba4:	f04f 0c00 	mov.w	ip, #0
 800cba8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cbac:	2909      	cmp	r1, #9
 800cbae:	f240 8085 	bls.w	800ccbc <_strtod_l+0x2a4>
 800cbb2:	9419      	str	r4, [sp, #100]	@ 0x64
 800cbb4:	f04f 0800 	mov.w	r8, #0
 800cbb8:	e0a5      	b.n	800cd06 <_strtod_l+0x2ee>
 800cbba:	2300      	movs	r3, #0
 800cbbc:	e7c8      	b.n	800cb50 <_strtod_l+0x138>
 800cbbe:	f1b9 0f08 	cmp.w	r9, #8
 800cbc2:	bfd8      	it	le
 800cbc4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800cbc6:	f100 0001 	add.w	r0, r0, #1
 800cbca:	bfda      	itte	le
 800cbcc:	fb02 3301 	mlale	r3, r2, r1, r3
 800cbd0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800cbd2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800cbd6:	f109 0901 	add.w	r9, r9, #1
 800cbda:	9019      	str	r0, [sp, #100]	@ 0x64
 800cbdc:	e7bf      	b.n	800cb5e <_strtod_l+0x146>
 800cbde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbe0:	1c5a      	adds	r2, r3, #1
 800cbe2:	9219      	str	r2, [sp, #100]	@ 0x64
 800cbe4:	785a      	ldrb	r2, [r3, #1]
 800cbe6:	f1b9 0f00 	cmp.w	r9, #0
 800cbea:	d03b      	beq.n	800cc64 <_strtod_l+0x24c>
 800cbec:	900a      	str	r0, [sp, #40]	@ 0x28
 800cbee:	464d      	mov	r5, r9
 800cbf0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cbf4:	2b09      	cmp	r3, #9
 800cbf6:	d912      	bls.n	800cc1e <_strtod_l+0x206>
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e7c2      	b.n	800cb82 <_strtod_l+0x16a>
 800cbfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbfe:	1c5a      	adds	r2, r3, #1
 800cc00:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc02:	785a      	ldrb	r2, [r3, #1]
 800cc04:	3001      	adds	r0, #1
 800cc06:	2a30      	cmp	r2, #48	@ 0x30
 800cc08:	d0f8      	beq.n	800cbfc <_strtod_l+0x1e4>
 800cc0a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cc0e:	2b08      	cmp	r3, #8
 800cc10:	f200 84d2 	bhi.w	800d5b8 <_strtod_l+0xba0>
 800cc14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc16:	900a      	str	r0, [sp, #40]	@ 0x28
 800cc18:	2000      	movs	r0, #0
 800cc1a:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc1c:	4605      	mov	r5, r0
 800cc1e:	3a30      	subs	r2, #48	@ 0x30
 800cc20:	f100 0301 	add.w	r3, r0, #1
 800cc24:	d018      	beq.n	800cc58 <_strtod_l+0x240>
 800cc26:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cc28:	4419      	add	r1, r3
 800cc2a:	910a      	str	r1, [sp, #40]	@ 0x28
 800cc2c:	462e      	mov	r6, r5
 800cc2e:	f04f 0e0a 	mov.w	lr, #10
 800cc32:	1c71      	adds	r1, r6, #1
 800cc34:	eba1 0c05 	sub.w	ip, r1, r5
 800cc38:	4563      	cmp	r3, ip
 800cc3a:	dc15      	bgt.n	800cc68 <_strtod_l+0x250>
 800cc3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800cc40:	182b      	adds	r3, r5, r0
 800cc42:	2b08      	cmp	r3, #8
 800cc44:	f105 0501 	add.w	r5, r5, #1
 800cc48:	4405      	add	r5, r0
 800cc4a:	dc1a      	bgt.n	800cc82 <_strtod_l+0x26a>
 800cc4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cc4e:	230a      	movs	r3, #10
 800cc50:	fb03 2301 	mla	r3, r3, r1, r2
 800cc54:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc56:	2300      	movs	r3, #0
 800cc58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cc5a:	1c51      	adds	r1, r2, #1
 800cc5c:	9119      	str	r1, [sp, #100]	@ 0x64
 800cc5e:	7852      	ldrb	r2, [r2, #1]
 800cc60:	4618      	mov	r0, r3
 800cc62:	e7c5      	b.n	800cbf0 <_strtod_l+0x1d8>
 800cc64:	4648      	mov	r0, r9
 800cc66:	e7ce      	b.n	800cc06 <_strtod_l+0x1ee>
 800cc68:	2e08      	cmp	r6, #8
 800cc6a:	dc05      	bgt.n	800cc78 <_strtod_l+0x260>
 800cc6c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800cc6e:	fb0e f606 	mul.w	r6, lr, r6
 800cc72:	960b      	str	r6, [sp, #44]	@ 0x2c
 800cc74:	460e      	mov	r6, r1
 800cc76:	e7dc      	b.n	800cc32 <_strtod_l+0x21a>
 800cc78:	2910      	cmp	r1, #16
 800cc7a:	bfd8      	it	le
 800cc7c:	fb0e f707 	mulle.w	r7, lr, r7
 800cc80:	e7f8      	b.n	800cc74 <_strtod_l+0x25c>
 800cc82:	2b0f      	cmp	r3, #15
 800cc84:	bfdc      	itt	le
 800cc86:	230a      	movle	r3, #10
 800cc88:	fb03 2707 	mlale	r7, r3, r7, r2
 800cc8c:	e7e3      	b.n	800cc56 <_strtod_l+0x23e>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc92:	2301      	movs	r3, #1
 800cc94:	e77a      	b.n	800cb8c <_strtod_l+0x174>
 800cc96:	f04f 0c00 	mov.w	ip, #0
 800cc9a:	1ca2      	adds	r2, r4, #2
 800cc9c:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc9e:	78a2      	ldrb	r2, [r4, #2]
 800cca0:	e782      	b.n	800cba8 <_strtod_l+0x190>
 800cca2:	f04f 0c01 	mov.w	ip, #1
 800cca6:	e7f8      	b.n	800cc9a <_strtod_l+0x282>
 800cca8:	0801045c 	.word	0x0801045c
 800ccac:	080102e0 	.word	0x080102e0
 800ccb0:	7ff00000 	.word	0x7ff00000
 800ccb4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ccb6:	1c51      	adds	r1, r2, #1
 800ccb8:	9119      	str	r1, [sp, #100]	@ 0x64
 800ccba:	7852      	ldrb	r2, [r2, #1]
 800ccbc:	2a30      	cmp	r2, #48	@ 0x30
 800ccbe:	d0f9      	beq.n	800ccb4 <_strtod_l+0x29c>
 800ccc0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ccc4:	2908      	cmp	r1, #8
 800ccc6:	f63f af75 	bhi.w	800cbb4 <_strtod_l+0x19c>
 800ccca:	3a30      	subs	r2, #48	@ 0x30
 800cccc:	9209      	str	r2, [sp, #36]	@ 0x24
 800ccce:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ccd0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ccd2:	f04f 080a 	mov.w	r8, #10
 800ccd6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ccd8:	1c56      	adds	r6, r2, #1
 800ccda:	9619      	str	r6, [sp, #100]	@ 0x64
 800ccdc:	7852      	ldrb	r2, [r2, #1]
 800ccde:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cce2:	f1be 0f09 	cmp.w	lr, #9
 800cce6:	d939      	bls.n	800cd5c <_strtod_l+0x344>
 800cce8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ccea:	1a76      	subs	r6, r6, r1
 800ccec:	2e08      	cmp	r6, #8
 800ccee:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ccf2:	dc03      	bgt.n	800ccfc <_strtod_l+0x2e4>
 800ccf4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ccf6:	4588      	cmp	r8, r1
 800ccf8:	bfa8      	it	ge
 800ccfa:	4688      	movge	r8, r1
 800ccfc:	f1bc 0f00 	cmp.w	ip, #0
 800cd00:	d001      	beq.n	800cd06 <_strtod_l+0x2ee>
 800cd02:	f1c8 0800 	rsb	r8, r8, #0
 800cd06:	2d00      	cmp	r5, #0
 800cd08:	d14e      	bne.n	800cda8 <_strtod_l+0x390>
 800cd0a:	9908      	ldr	r1, [sp, #32]
 800cd0c:	4308      	orrs	r0, r1
 800cd0e:	f47f aebc 	bne.w	800ca8a <_strtod_l+0x72>
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	f47f aed4 	bne.w	800cac0 <_strtod_l+0xa8>
 800cd18:	2a69      	cmp	r2, #105	@ 0x69
 800cd1a:	d028      	beq.n	800cd6e <_strtod_l+0x356>
 800cd1c:	dc25      	bgt.n	800cd6a <_strtod_l+0x352>
 800cd1e:	2a49      	cmp	r2, #73	@ 0x49
 800cd20:	d025      	beq.n	800cd6e <_strtod_l+0x356>
 800cd22:	2a4e      	cmp	r2, #78	@ 0x4e
 800cd24:	f47f aecc 	bne.w	800cac0 <_strtod_l+0xa8>
 800cd28:	499a      	ldr	r1, [pc, #616]	@ (800cf94 <_strtod_l+0x57c>)
 800cd2a:	a819      	add	r0, sp, #100	@ 0x64
 800cd2c:	f001 fa1c 	bl	800e168 <__match>
 800cd30:	2800      	cmp	r0, #0
 800cd32:	f43f aec5 	beq.w	800cac0 <_strtod_l+0xa8>
 800cd36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	2b28      	cmp	r3, #40	@ 0x28
 800cd3c:	d12e      	bne.n	800cd9c <_strtod_l+0x384>
 800cd3e:	4996      	ldr	r1, [pc, #600]	@ (800cf98 <_strtod_l+0x580>)
 800cd40:	aa1c      	add	r2, sp, #112	@ 0x70
 800cd42:	a819      	add	r0, sp, #100	@ 0x64
 800cd44:	f001 fa24 	bl	800e190 <__hexnan>
 800cd48:	2805      	cmp	r0, #5
 800cd4a:	d127      	bne.n	800cd9c <_strtod_l+0x384>
 800cd4c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cd4e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cd52:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cd56:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cd5a:	e696      	b.n	800ca8a <_strtod_l+0x72>
 800cd5c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd5e:	fb08 2101 	mla	r1, r8, r1, r2
 800cd62:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cd66:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd68:	e7b5      	b.n	800ccd6 <_strtod_l+0x2be>
 800cd6a:	2a6e      	cmp	r2, #110	@ 0x6e
 800cd6c:	e7da      	b.n	800cd24 <_strtod_l+0x30c>
 800cd6e:	498b      	ldr	r1, [pc, #556]	@ (800cf9c <_strtod_l+0x584>)
 800cd70:	a819      	add	r0, sp, #100	@ 0x64
 800cd72:	f001 f9f9 	bl	800e168 <__match>
 800cd76:	2800      	cmp	r0, #0
 800cd78:	f43f aea2 	beq.w	800cac0 <_strtod_l+0xa8>
 800cd7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd7e:	4988      	ldr	r1, [pc, #544]	@ (800cfa0 <_strtod_l+0x588>)
 800cd80:	3b01      	subs	r3, #1
 800cd82:	a819      	add	r0, sp, #100	@ 0x64
 800cd84:	9319      	str	r3, [sp, #100]	@ 0x64
 800cd86:	f001 f9ef 	bl	800e168 <__match>
 800cd8a:	b910      	cbnz	r0, 800cd92 <_strtod_l+0x37a>
 800cd8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd8e:	3301      	adds	r3, #1
 800cd90:	9319      	str	r3, [sp, #100]	@ 0x64
 800cd92:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800cfb0 <_strtod_l+0x598>
 800cd96:	f04f 0a00 	mov.w	sl, #0
 800cd9a:	e676      	b.n	800ca8a <_strtod_l+0x72>
 800cd9c:	4881      	ldr	r0, [pc, #516]	@ (800cfa4 <_strtod_l+0x58c>)
 800cd9e:	f000 ff07 	bl	800dbb0 <nan>
 800cda2:	ec5b ab10 	vmov	sl, fp, d0
 800cda6:	e670      	b.n	800ca8a <_strtod_l+0x72>
 800cda8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdaa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cdac:	eba8 0303 	sub.w	r3, r8, r3
 800cdb0:	f1b9 0f00 	cmp.w	r9, #0
 800cdb4:	bf08      	it	eq
 800cdb6:	46a9      	moveq	r9, r5
 800cdb8:	2d10      	cmp	r5, #16
 800cdba:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdbc:	462c      	mov	r4, r5
 800cdbe:	bfa8      	it	ge
 800cdc0:	2410      	movge	r4, #16
 800cdc2:	f7f3 fb9f 	bl	8000504 <__aeabi_ui2d>
 800cdc6:	2d09      	cmp	r5, #9
 800cdc8:	4682      	mov	sl, r0
 800cdca:	468b      	mov	fp, r1
 800cdcc:	dc13      	bgt.n	800cdf6 <_strtod_l+0x3de>
 800cdce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	f43f ae5a 	beq.w	800ca8a <_strtod_l+0x72>
 800cdd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdd8:	dd78      	ble.n	800cecc <_strtod_l+0x4b4>
 800cdda:	2b16      	cmp	r3, #22
 800cddc:	dc5f      	bgt.n	800ce9e <_strtod_l+0x486>
 800cdde:	4972      	ldr	r1, [pc, #456]	@ (800cfa8 <_strtod_l+0x590>)
 800cde0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cde4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cde8:	4652      	mov	r2, sl
 800cdea:	465b      	mov	r3, fp
 800cdec:	f7f3 fc04 	bl	80005f8 <__aeabi_dmul>
 800cdf0:	4682      	mov	sl, r0
 800cdf2:	468b      	mov	fp, r1
 800cdf4:	e649      	b.n	800ca8a <_strtod_l+0x72>
 800cdf6:	4b6c      	ldr	r3, [pc, #432]	@ (800cfa8 <_strtod_l+0x590>)
 800cdf8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cdfc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ce00:	f7f3 fbfa 	bl	80005f8 <__aeabi_dmul>
 800ce04:	4682      	mov	sl, r0
 800ce06:	4638      	mov	r0, r7
 800ce08:	468b      	mov	fp, r1
 800ce0a:	f7f3 fb7b 	bl	8000504 <__aeabi_ui2d>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	460b      	mov	r3, r1
 800ce12:	4650      	mov	r0, sl
 800ce14:	4659      	mov	r1, fp
 800ce16:	f7f3 fa39 	bl	800028c <__adddf3>
 800ce1a:	2d0f      	cmp	r5, #15
 800ce1c:	4682      	mov	sl, r0
 800ce1e:	468b      	mov	fp, r1
 800ce20:	ddd5      	ble.n	800cdce <_strtod_l+0x3b6>
 800ce22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce24:	1b2c      	subs	r4, r5, r4
 800ce26:	441c      	add	r4, r3
 800ce28:	2c00      	cmp	r4, #0
 800ce2a:	f340 8093 	ble.w	800cf54 <_strtod_l+0x53c>
 800ce2e:	f014 030f 	ands.w	r3, r4, #15
 800ce32:	d00a      	beq.n	800ce4a <_strtod_l+0x432>
 800ce34:	495c      	ldr	r1, [pc, #368]	@ (800cfa8 <_strtod_l+0x590>)
 800ce36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce3a:	4652      	mov	r2, sl
 800ce3c:	465b      	mov	r3, fp
 800ce3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce42:	f7f3 fbd9 	bl	80005f8 <__aeabi_dmul>
 800ce46:	4682      	mov	sl, r0
 800ce48:	468b      	mov	fp, r1
 800ce4a:	f034 040f 	bics.w	r4, r4, #15
 800ce4e:	d073      	beq.n	800cf38 <_strtod_l+0x520>
 800ce50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ce54:	dd49      	ble.n	800ceea <_strtod_l+0x4d2>
 800ce56:	2400      	movs	r4, #0
 800ce58:	46a0      	mov	r8, r4
 800ce5a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ce5c:	46a1      	mov	r9, r4
 800ce5e:	9a05      	ldr	r2, [sp, #20]
 800ce60:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800cfb0 <_strtod_l+0x598>
 800ce64:	2322      	movs	r3, #34	@ 0x22
 800ce66:	6013      	str	r3, [r2, #0]
 800ce68:	f04f 0a00 	mov.w	sl, #0
 800ce6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	f43f ae0b 	beq.w	800ca8a <_strtod_l+0x72>
 800ce74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce76:	9805      	ldr	r0, [sp, #20]
 800ce78:	f001 fb26 	bl	800e4c8 <_Bfree>
 800ce7c:	9805      	ldr	r0, [sp, #20]
 800ce7e:	4649      	mov	r1, r9
 800ce80:	f001 fb22 	bl	800e4c8 <_Bfree>
 800ce84:	9805      	ldr	r0, [sp, #20]
 800ce86:	4641      	mov	r1, r8
 800ce88:	f001 fb1e 	bl	800e4c8 <_Bfree>
 800ce8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce8e:	9805      	ldr	r0, [sp, #20]
 800ce90:	f001 fb1a 	bl	800e4c8 <_Bfree>
 800ce94:	9805      	ldr	r0, [sp, #20]
 800ce96:	4621      	mov	r1, r4
 800ce98:	f001 fb16 	bl	800e4c8 <_Bfree>
 800ce9c:	e5f5      	b.n	800ca8a <_strtod_l+0x72>
 800ce9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cea0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cea4:	4293      	cmp	r3, r2
 800cea6:	dbbc      	blt.n	800ce22 <_strtod_l+0x40a>
 800cea8:	4c3f      	ldr	r4, [pc, #252]	@ (800cfa8 <_strtod_l+0x590>)
 800ceaa:	f1c5 050f 	rsb	r5, r5, #15
 800ceae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ceb2:	4652      	mov	r2, sl
 800ceb4:	465b      	mov	r3, fp
 800ceb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ceba:	f7f3 fb9d 	bl	80005f8 <__aeabi_dmul>
 800cebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cec0:	1b5d      	subs	r5, r3, r5
 800cec2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cec6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ceca:	e78f      	b.n	800cdec <_strtod_l+0x3d4>
 800cecc:	3316      	adds	r3, #22
 800cece:	dba8      	blt.n	800ce22 <_strtod_l+0x40a>
 800ced0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ced2:	eba3 0808 	sub.w	r8, r3, r8
 800ced6:	4b34      	ldr	r3, [pc, #208]	@ (800cfa8 <_strtod_l+0x590>)
 800ced8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cedc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cee0:	4650      	mov	r0, sl
 800cee2:	4659      	mov	r1, fp
 800cee4:	f7f3 fcb2 	bl	800084c <__aeabi_ddiv>
 800cee8:	e782      	b.n	800cdf0 <_strtod_l+0x3d8>
 800ceea:	2300      	movs	r3, #0
 800ceec:	4f2f      	ldr	r7, [pc, #188]	@ (800cfac <_strtod_l+0x594>)
 800ceee:	1124      	asrs	r4, r4, #4
 800cef0:	4650      	mov	r0, sl
 800cef2:	4659      	mov	r1, fp
 800cef4:	461e      	mov	r6, r3
 800cef6:	2c01      	cmp	r4, #1
 800cef8:	dc21      	bgt.n	800cf3e <_strtod_l+0x526>
 800cefa:	b10b      	cbz	r3, 800cf00 <_strtod_l+0x4e8>
 800cefc:	4682      	mov	sl, r0
 800cefe:	468b      	mov	fp, r1
 800cf00:	492a      	ldr	r1, [pc, #168]	@ (800cfac <_strtod_l+0x594>)
 800cf02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cf06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cf0a:	4652      	mov	r2, sl
 800cf0c:	465b      	mov	r3, fp
 800cf0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf12:	f7f3 fb71 	bl	80005f8 <__aeabi_dmul>
 800cf16:	4b26      	ldr	r3, [pc, #152]	@ (800cfb0 <_strtod_l+0x598>)
 800cf18:	460a      	mov	r2, r1
 800cf1a:	400b      	ands	r3, r1
 800cf1c:	4925      	ldr	r1, [pc, #148]	@ (800cfb4 <_strtod_l+0x59c>)
 800cf1e:	428b      	cmp	r3, r1
 800cf20:	4682      	mov	sl, r0
 800cf22:	d898      	bhi.n	800ce56 <_strtod_l+0x43e>
 800cf24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cf28:	428b      	cmp	r3, r1
 800cf2a:	bf86      	itte	hi
 800cf2c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800cfb8 <_strtod_l+0x5a0>
 800cf30:	f04f 3aff 	movhi.w	sl, #4294967295
 800cf34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cf38:	2300      	movs	r3, #0
 800cf3a:	9308      	str	r3, [sp, #32]
 800cf3c:	e076      	b.n	800d02c <_strtod_l+0x614>
 800cf3e:	07e2      	lsls	r2, r4, #31
 800cf40:	d504      	bpl.n	800cf4c <_strtod_l+0x534>
 800cf42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf46:	f7f3 fb57 	bl	80005f8 <__aeabi_dmul>
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	3601      	adds	r6, #1
 800cf4e:	1064      	asrs	r4, r4, #1
 800cf50:	3708      	adds	r7, #8
 800cf52:	e7d0      	b.n	800cef6 <_strtod_l+0x4de>
 800cf54:	d0f0      	beq.n	800cf38 <_strtod_l+0x520>
 800cf56:	4264      	negs	r4, r4
 800cf58:	f014 020f 	ands.w	r2, r4, #15
 800cf5c:	d00a      	beq.n	800cf74 <_strtod_l+0x55c>
 800cf5e:	4b12      	ldr	r3, [pc, #72]	@ (800cfa8 <_strtod_l+0x590>)
 800cf60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf64:	4650      	mov	r0, sl
 800cf66:	4659      	mov	r1, fp
 800cf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6c:	f7f3 fc6e 	bl	800084c <__aeabi_ddiv>
 800cf70:	4682      	mov	sl, r0
 800cf72:	468b      	mov	fp, r1
 800cf74:	1124      	asrs	r4, r4, #4
 800cf76:	d0df      	beq.n	800cf38 <_strtod_l+0x520>
 800cf78:	2c1f      	cmp	r4, #31
 800cf7a:	dd1f      	ble.n	800cfbc <_strtod_l+0x5a4>
 800cf7c:	2400      	movs	r4, #0
 800cf7e:	46a0      	mov	r8, r4
 800cf80:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cf82:	46a1      	mov	r9, r4
 800cf84:	9a05      	ldr	r2, [sp, #20]
 800cf86:	2322      	movs	r3, #34	@ 0x22
 800cf88:	f04f 0a00 	mov.w	sl, #0
 800cf8c:	f04f 0b00 	mov.w	fp, #0
 800cf90:	6013      	str	r3, [r2, #0]
 800cf92:	e76b      	b.n	800ce6c <_strtod_l+0x454>
 800cf94:	080102eb 	.word	0x080102eb
 800cf98:	08010448 	.word	0x08010448
 800cf9c:	080102e2 	.word	0x080102e2
 800cfa0:	080102e5 	.word	0x080102e5
 800cfa4:	08010445 	.word	0x08010445
 800cfa8:	080105d0 	.word	0x080105d0
 800cfac:	080105a8 	.word	0x080105a8
 800cfb0:	7ff00000 	.word	0x7ff00000
 800cfb4:	7ca00000 	.word	0x7ca00000
 800cfb8:	7fefffff 	.word	0x7fefffff
 800cfbc:	f014 0310 	ands.w	r3, r4, #16
 800cfc0:	bf18      	it	ne
 800cfc2:	236a      	movne	r3, #106	@ 0x6a
 800cfc4:	4ea9      	ldr	r6, [pc, #676]	@ (800d26c <_strtod_l+0x854>)
 800cfc6:	9308      	str	r3, [sp, #32]
 800cfc8:	4650      	mov	r0, sl
 800cfca:	4659      	mov	r1, fp
 800cfcc:	2300      	movs	r3, #0
 800cfce:	07e7      	lsls	r7, r4, #31
 800cfd0:	d504      	bpl.n	800cfdc <_strtod_l+0x5c4>
 800cfd2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cfd6:	f7f3 fb0f 	bl	80005f8 <__aeabi_dmul>
 800cfda:	2301      	movs	r3, #1
 800cfdc:	1064      	asrs	r4, r4, #1
 800cfde:	f106 0608 	add.w	r6, r6, #8
 800cfe2:	d1f4      	bne.n	800cfce <_strtod_l+0x5b6>
 800cfe4:	b10b      	cbz	r3, 800cfea <_strtod_l+0x5d2>
 800cfe6:	4682      	mov	sl, r0
 800cfe8:	468b      	mov	fp, r1
 800cfea:	9b08      	ldr	r3, [sp, #32]
 800cfec:	b1b3      	cbz	r3, 800d01c <_strtod_l+0x604>
 800cfee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cff2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	4659      	mov	r1, fp
 800cffa:	dd0f      	ble.n	800d01c <_strtod_l+0x604>
 800cffc:	2b1f      	cmp	r3, #31
 800cffe:	dd56      	ble.n	800d0ae <_strtod_l+0x696>
 800d000:	2b34      	cmp	r3, #52	@ 0x34
 800d002:	bfde      	ittt	le
 800d004:	f04f 33ff 	movle.w	r3, #4294967295
 800d008:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d00c:	4093      	lslle	r3, r2
 800d00e:	f04f 0a00 	mov.w	sl, #0
 800d012:	bfcc      	ite	gt
 800d014:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d018:	ea03 0b01 	andle.w	fp, r3, r1
 800d01c:	2200      	movs	r2, #0
 800d01e:	2300      	movs	r3, #0
 800d020:	4650      	mov	r0, sl
 800d022:	4659      	mov	r1, fp
 800d024:	f7f3 fd50 	bl	8000ac8 <__aeabi_dcmpeq>
 800d028:	2800      	cmp	r0, #0
 800d02a:	d1a7      	bne.n	800cf7c <_strtod_l+0x564>
 800d02c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d02e:	9300      	str	r3, [sp, #0]
 800d030:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d032:	9805      	ldr	r0, [sp, #20]
 800d034:	462b      	mov	r3, r5
 800d036:	464a      	mov	r2, r9
 800d038:	f001 faae 	bl	800e598 <__s2b>
 800d03c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d03e:	2800      	cmp	r0, #0
 800d040:	f43f af09 	beq.w	800ce56 <_strtod_l+0x43e>
 800d044:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d046:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d048:	2a00      	cmp	r2, #0
 800d04a:	eba3 0308 	sub.w	r3, r3, r8
 800d04e:	bfa8      	it	ge
 800d050:	2300      	movge	r3, #0
 800d052:	9312      	str	r3, [sp, #72]	@ 0x48
 800d054:	2400      	movs	r4, #0
 800d056:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d05a:	9316      	str	r3, [sp, #88]	@ 0x58
 800d05c:	46a0      	mov	r8, r4
 800d05e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d060:	9805      	ldr	r0, [sp, #20]
 800d062:	6859      	ldr	r1, [r3, #4]
 800d064:	f001 f9f0 	bl	800e448 <_Balloc>
 800d068:	4681      	mov	r9, r0
 800d06a:	2800      	cmp	r0, #0
 800d06c:	f43f aef7 	beq.w	800ce5e <_strtod_l+0x446>
 800d070:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d072:	691a      	ldr	r2, [r3, #16]
 800d074:	3202      	adds	r2, #2
 800d076:	f103 010c 	add.w	r1, r3, #12
 800d07a:	0092      	lsls	r2, r2, #2
 800d07c:	300c      	adds	r0, #12
 800d07e:	f000 fd86 	bl	800db8e <memcpy>
 800d082:	ec4b ab10 	vmov	d0, sl, fp
 800d086:	9805      	ldr	r0, [sp, #20]
 800d088:	aa1c      	add	r2, sp, #112	@ 0x70
 800d08a:	a91b      	add	r1, sp, #108	@ 0x6c
 800d08c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d090:	f001 fdb6 	bl	800ec00 <__d2b>
 800d094:	901a      	str	r0, [sp, #104]	@ 0x68
 800d096:	2800      	cmp	r0, #0
 800d098:	f43f aee1 	beq.w	800ce5e <_strtod_l+0x446>
 800d09c:	9805      	ldr	r0, [sp, #20]
 800d09e:	2101      	movs	r1, #1
 800d0a0:	f001 fb10 	bl	800e6c4 <__i2b>
 800d0a4:	4680      	mov	r8, r0
 800d0a6:	b948      	cbnz	r0, 800d0bc <_strtod_l+0x6a4>
 800d0a8:	f04f 0800 	mov.w	r8, #0
 800d0ac:	e6d7      	b.n	800ce5e <_strtod_l+0x446>
 800d0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d0b6:	ea03 0a0a 	and.w	sl, r3, sl
 800d0ba:	e7af      	b.n	800d01c <_strtod_l+0x604>
 800d0bc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d0be:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d0c0:	2d00      	cmp	r5, #0
 800d0c2:	bfab      	itete	ge
 800d0c4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d0c6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d0c8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d0ca:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d0cc:	bfac      	ite	ge
 800d0ce:	18ef      	addge	r7, r5, r3
 800d0d0:	1b5e      	sublt	r6, r3, r5
 800d0d2:	9b08      	ldr	r3, [sp, #32]
 800d0d4:	1aed      	subs	r5, r5, r3
 800d0d6:	4415      	add	r5, r2
 800d0d8:	4b65      	ldr	r3, [pc, #404]	@ (800d270 <_strtod_l+0x858>)
 800d0da:	3d01      	subs	r5, #1
 800d0dc:	429d      	cmp	r5, r3
 800d0de:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d0e2:	da50      	bge.n	800d186 <_strtod_l+0x76e>
 800d0e4:	1b5b      	subs	r3, r3, r5
 800d0e6:	2b1f      	cmp	r3, #31
 800d0e8:	eba2 0203 	sub.w	r2, r2, r3
 800d0ec:	f04f 0101 	mov.w	r1, #1
 800d0f0:	dc3d      	bgt.n	800d16e <_strtod_l+0x756>
 800d0f2:	fa01 f303 	lsl.w	r3, r1, r3
 800d0f6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	9310      	str	r3, [sp, #64]	@ 0x40
 800d0fc:	18bd      	adds	r5, r7, r2
 800d0fe:	9b08      	ldr	r3, [sp, #32]
 800d100:	42af      	cmp	r7, r5
 800d102:	4416      	add	r6, r2
 800d104:	441e      	add	r6, r3
 800d106:	463b      	mov	r3, r7
 800d108:	bfa8      	it	ge
 800d10a:	462b      	movge	r3, r5
 800d10c:	42b3      	cmp	r3, r6
 800d10e:	bfa8      	it	ge
 800d110:	4633      	movge	r3, r6
 800d112:	2b00      	cmp	r3, #0
 800d114:	bfc2      	ittt	gt
 800d116:	1aed      	subgt	r5, r5, r3
 800d118:	1af6      	subgt	r6, r6, r3
 800d11a:	1aff      	subgt	r7, r7, r3
 800d11c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d11e:	2b00      	cmp	r3, #0
 800d120:	dd16      	ble.n	800d150 <_strtod_l+0x738>
 800d122:	4641      	mov	r1, r8
 800d124:	9805      	ldr	r0, [sp, #20]
 800d126:	461a      	mov	r2, r3
 800d128:	f001 fb84 	bl	800e834 <__pow5mult>
 800d12c:	4680      	mov	r8, r0
 800d12e:	2800      	cmp	r0, #0
 800d130:	d0ba      	beq.n	800d0a8 <_strtod_l+0x690>
 800d132:	4601      	mov	r1, r0
 800d134:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d136:	9805      	ldr	r0, [sp, #20]
 800d138:	f001 fada 	bl	800e6f0 <__multiply>
 800d13c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d13e:	2800      	cmp	r0, #0
 800d140:	f43f ae8d 	beq.w	800ce5e <_strtod_l+0x446>
 800d144:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d146:	9805      	ldr	r0, [sp, #20]
 800d148:	f001 f9be 	bl	800e4c8 <_Bfree>
 800d14c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d14e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d150:	2d00      	cmp	r5, #0
 800d152:	dc1d      	bgt.n	800d190 <_strtod_l+0x778>
 800d154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d156:	2b00      	cmp	r3, #0
 800d158:	dd23      	ble.n	800d1a2 <_strtod_l+0x78a>
 800d15a:	4649      	mov	r1, r9
 800d15c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d15e:	9805      	ldr	r0, [sp, #20]
 800d160:	f001 fb68 	bl	800e834 <__pow5mult>
 800d164:	4681      	mov	r9, r0
 800d166:	b9e0      	cbnz	r0, 800d1a2 <_strtod_l+0x78a>
 800d168:	f04f 0900 	mov.w	r9, #0
 800d16c:	e677      	b.n	800ce5e <_strtod_l+0x446>
 800d16e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d172:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d176:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d17a:	35e2      	adds	r5, #226	@ 0xe2
 800d17c:	fa01 f305 	lsl.w	r3, r1, r5
 800d180:	9310      	str	r3, [sp, #64]	@ 0x40
 800d182:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d184:	e7ba      	b.n	800d0fc <_strtod_l+0x6e4>
 800d186:	2300      	movs	r3, #0
 800d188:	9310      	str	r3, [sp, #64]	@ 0x40
 800d18a:	2301      	movs	r3, #1
 800d18c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d18e:	e7b5      	b.n	800d0fc <_strtod_l+0x6e4>
 800d190:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d192:	9805      	ldr	r0, [sp, #20]
 800d194:	462a      	mov	r2, r5
 800d196:	f001 fba7 	bl	800e8e8 <__lshift>
 800d19a:	901a      	str	r0, [sp, #104]	@ 0x68
 800d19c:	2800      	cmp	r0, #0
 800d19e:	d1d9      	bne.n	800d154 <_strtod_l+0x73c>
 800d1a0:	e65d      	b.n	800ce5e <_strtod_l+0x446>
 800d1a2:	2e00      	cmp	r6, #0
 800d1a4:	dd07      	ble.n	800d1b6 <_strtod_l+0x79e>
 800d1a6:	4649      	mov	r1, r9
 800d1a8:	9805      	ldr	r0, [sp, #20]
 800d1aa:	4632      	mov	r2, r6
 800d1ac:	f001 fb9c 	bl	800e8e8 <__lshift>
 800d1b0:	4681      	mov	r9, r0
 800d1b2:	2800      	cmp	r0, #0
 800d1b4:	d0d8      	beq.n	800d168 <_strtod_l+0x750>
 800d1b6:	2f00      	cmp	r7, #0
 800d1b8:	dd08      	ble.n	800d1cc <_strtod_l+0x7b4>
 800d1ba:	4641      	mov	r1, r8
 800d1bc:	9805      	ldr	r0, [sp, #20]
 800d1be:	463a      	mov	r2, r7
 800d1c0:	f001 fb92 	bl	800e8e8 <__lshift>
 800d1c4:	4680      	mov	r8, r0
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	f43f ae49 	beq.w	800ce5e <_strtod_l+0x446>
 800d1cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1ce:	9805      	ldr	r0, [sp, #20]
 800d1d0:	464a      	mov	r2, r9
 800d1d2:	f001 fc11 	bl	800e9f8 <__mdiff>
 800d1d6:	4604      	mov	r4, r0
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	f43f ae40 	beq.w	800ce5e <_strtod_l+0x446>
 800d1de:	68c3      	ldr	r3, [r0, #12]
 800d1e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	60c3      	str	r3, [r0, #12]
 800d1e6:	4641      	mov	r1, r8
 800d1e8:	f001 fbea 	bl	800e9c0 <__mcmp>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	da45      	bge.n	800d27c <_strtod_l+0x864>
 800d1f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1f2:	ea53 030a 	orrs.w	r3, r3, sl
 800d1f6:	d16b      	bne.n	800d2d0 <_strtod_l+0x8b8>
 800d1f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d167      	bne.n	800d2d0 <_strtod_l+0x8b8>
 800d200:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d204:	0d1b      	lsrs	r3, r3, #20
 800d206:	051b      	lsls	r3, r3, #20
 800d208:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d20c:	d960      	bls.n	800d2d0 <_strtod_l+0x8b8>
 800d20e:	6963      	ldr	r3, [r4, #20]
 800d210:	b913      	cbnz	r3, 800d218 <_strtod_l+0x800>
 800d212:	6923      	ldr	r3, [r4, #16]
 800d214:	2b01      	cmp	r3, #1
 800d216:	dd5b      	ble.n	800d2d0 <_strtod_l+0x8b8>
 800d218:	4621      	mov	r1, r4
 800d21a:	2201      	movs	r2, #1
 800d21c:	9805      	ldr	r0, [sp, #20]
 800d21e:	f001 fb63 	bl	800e8e8 <__lshift>
 800d222:	4641      	mov	r1, r8
 800d224:	4604      	mov	r4, r0
 800d226:	f001 fbcb 	bl	800e9c0 <__mcmp>
 800d22a:	2800      	cmp	r0, #0
 800d22c:	dd50      	ble.n	800d2d0 <_strtod_l+0x8b8>
 800d22e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d232:	9a08      	ldr	r2, [sp, #32]
 800d234:	0d1b      	lsrs	r3, r3, #20
 800d236:	051b      	lsls	r3, r3, #20
 800d238:	2a00      	cmp	r2, #0
 800d23a:	d06a      	beq.n	800d312 <_strtod_l+0x8fa>
 800d23c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d240:	d867      	bhi.n	800d312 <_strtod_l+0x8fa>
 800d242:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d246:	f67f ae9d 	bls.w	800cf84 <_strtod_l+0x56c>
 800d24a:	4b0a      	ldr	r3, [pc, #40]	@ (800d274 <_strtod_l+0x85c>)
 800d24c:	4650      	mov	r0, sl
 800d24e:	4659      	mov	r1, fp
 800d250:	2200      	movs	r2, #0
 800d252:	f7f3 f9d1 	bl	80005f8 <__aeabi_dmul>
 800d256:	4b08      	ldr	r3, [pc, #32]	@ (800d278 <_strtod_l+0x860>)
 800d258:	400b      	ands	r3, r1
 800d25a:	4682      	mov	sl, r0
 800d25c:	468b      	mov	fp, r1
 800d25e:	2b00      	cmp	r3, #0
 800d260:	f47f ae08 	bne.w	800ce74 <_strtod_l+0x45c>
 800d264:	9a05      	ldr	r2, [sp, #20]
 800d266:	2322      	movs	r3, #34	@ 0x22
 800d268:	6013      	str	r3, [r2, #0]
 800d26a:	e603      	b.n	800ce74 <_strtod_l+0x45c>
 800d26c:	08010470 	.word	0x08010470
 800d270:	fffffc02 	.word	0xfffffc02
 800d274:	39500000 	.word	0x39500000
 800d278:	7ff00000 	.word	0x7ff00000
 800d27c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d280:	d165      	bne.n	800d34e <_strtod_l+0x936>
 800d282:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d284:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d288:	b35a      	cbz	r2, 800d2e2 <_strtod_l+0x8ca>
 800d28a:	4a9f      	ldr	r2, [pc, #636]	@ (800d508 <_strtod_l+0xaf0>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d12b      	bne.n	800d2e8 <_strtod_l+0x8d0>
 800d290:	9b08      	ldr	r3, [sp, #32]
 800d292:	4651      	mov	r1, sl
 800d294:	b303      	cbz	r3, 800d2d8 <_strtod_l+0x8c0>
 800d296:	4b9d      	ldr	r3, [pc, #628]	@ (800d50c <_strtod_l+0xaf4>)
 800d298:	465a      	mov	r2, fp
 800d29a:	4013      	ands	r3, r2
 800d29c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2a4:	d81b      	bhi.n	800d2de <_strtod_l+0x8c6>
 800d2a6:	0d1b      	lsrs	r3, r3, #20
 800d2a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d2ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d2b0:	4299      	cmp	r1, r3
 800d2b2:	d119      	bne.n	800d2e8 <_strtod_l+0x8d0>
 800d2b4:	4b96      	ldr	r3, [pc, #600]	@ (800d510 <_strtod_l+0xaf8>)
 800d2b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d102      	bne.n	800d2c2 <_strtod_l+0x8aa>
 800d2bc:	3101      	adds	r1, #1
 800d2be:	f43f adce 	beq.w	800ce5e <_strtod_l+0x446>
 800d2c2:	4b92      	ldr	r3, [pc, #584]	@ (800d50c <_strtod_l+0xaf4>)
 800d2c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d2c6:	401a      	ands	r2, r3
 800d2c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d2cc:	f04f 0a00 	mov.w	sl, #0
 800d2d0:	9b08      	ldr	r3, [sp, #32]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d1b9      	bne.n	800d24a <_strtod_l+0x832>
 800d2d6:	e5cd      	b.n	800ce74 <_strtod_l+0x45c>
 800d2d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d2dc:	e7e8      	b.n	800d2b0 <_strtod_l+0x898>
 800d2de:	4613      	mov	r3, r2
 800d2e0:	e7e6      	b.n	800d2b0 <_strtod_l+0x898>
 800d2e2:	ea53 030a 	orrs.w	r3, r3, sl
 800d2e6:	d0a2      	beq.n	800d22e <_strtod_l+0x816>
 800d2e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d2ea:	b1db      	cbz	r3, 800d324 <_strtod_l+0x90c>
 800d2ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d2ee:	4213      	tst	r3, r2
 800d2f0:	d0ee      	beq.n	800d2d0 <_strtod_l+0x8b8>
 800d2f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2f4:	9a08      	ldr	r2, [sp, #32]
 800d2f6:	4650      	mov	r0, sl
 800d2f8:	4659      	mov	r1, fp
 800d2fa:	b1bb      	cbz	r3, 800d32c <_strtod_l+0x914>
 800d2fc:	f7ff fb6b 	bl	800c9d6 <sulp>
 800d300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d304:	ec53 2b10 	vmov	r2, r3, d0
 800d308:	f7f2 ffc0 	bl	800028c <__adddf3>
 800d30c:	4682      	mov	sl, r0
 800d30e:	468b      	mov	fp, r1
 800d310:	e7de      	b.n	800d2d0 <_strtod_l+0x8b8>
 800d312:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d316:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d31a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d31e:	f04f 3aff 	mov.w	sl, #4294967295
 800d322:	e7d5      	b.n	800d2d0 <_strtod_l+0x8b8>
 800d324:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d326:	ea13 0f0a 	tst.w	r3, sl
 800d32a:	e7e1      	b.n	800d2f0 <_strtod_l+0x8d8>
 800d32c:	f7ff fb53 	bl	800c9d6 <sulp>
 800d330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d334:	ec53 2b10 	vmov	r2, r3, d0
 800d338:	f7f2 ffa6 	bl	8000288 <__aeabi_dsub>
 800d33c:	2200      	movs	r2, #0
 800d33e:	2300      	movs	r3, #0
 800d340:	4682      	mov	sl, r0
 800d342:	468b      	mov	fp, r1
 800d344:	f7f3 fbc0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d348:	2800      	cmp	r0, #0
 800d34a:	d0c1      	beq.n	800d2d0 <_strtod_l+0x8b8>
 800d34c:	e61a      	b.n	800cf84 <_strtod_l+0x56c>
 800d34e:	4641      	mov	r1, r8
 800d350:	4620      	mov	r0, r4
 800d352:	f001 fcad 	bl	800ecb0 <__ratio>
 800d356:	ec57 6b10 	vmov	r6, r7, d0
 800d35a:	2200      	movs	r2, #0
 800d35c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d360:	4630      	mov	r0, r6
 800d362:	4639      	mov	r1, r7
 800d364:	f7f3 fbc4 	bl	8000af0 <__aeabi_dcmple>
 800d368:	2800      	cmp	r0, #0
 800d36a:	d06f      	beq.n	800d44c <_strtod_l+0xa34>
 800d36c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d17a      	bne.n	800d468 <_strtod_l+0xa50>
 800d372:	f1ba 0f00 	cmp.w	sl, #0
 800d376:	d158      	bne.n	800d42a <_strtod_l+0xa12>
 800d378:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d37a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d15a      	bne.n	800d438 <_strtod_l+0xa20>
 800d382:	4b64      	ldr	r3, [pc, #400]	@ (800d514 <_strtod_l+0xafc>)
 800d384:	2200      	movs	r2, #0
 800d386:	4630      	mov	r0, r6
 800d388:	4639      	mov	r1, r7
 800d38a:	f7f3 fba7 	bl	8000adc <__aeabi_dcmplt>
 800d38e:	2800      	cmp	r0, #0
 800d390:	d159      	bne.n	800d446 <_strtod_l+0xa2e>
 800d392:	4630      	mov	r0, r6
 800d394:	4639      	mov	r1, r7
 800d396:	4b60      	ldr	r3, [pc, #384]	@ (800d518 <_strtod_l+0xb00>)
 800d398:	2200      	movs	r2, #0
 800d39a:	f7f3 f92d 	bl	80005f8 <__aeabi_dmul>
 800d39e:	4606      	mov	r6, r0
 800d3a0:	460f      	mov	r7, r1
 800d3a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d3a6:	9606      	str	r6, [sp, #24]
 800d3a8:	9307      	str	r3, [sp, #28]
 800d3aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3ae:	4d57      	ldr	r5, [pc, #348]	@ (800d50c <_strtod_l+0xaf4>)
 800d3b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d3b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3b6:	401d      	ands	r5, r3
 800d3b8:	4b58      	ldr	r3, [pc, #352]	@ (800d51c <_strtod_l+0xb04>)
 800d3ba:	429d      	cmp	r5, r3
 800d3bc:	f040 80b2 	bne.w	800d524 <_strtod_l+0xb0c>
 800d3c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d3c6:	ec4b ab10 	vmov	d0, sl, fp
 800d3ca:	f001 fba9 	bl	800eb20 <__ulp>
 800d3ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3d2:	ec51 0b10 	vmov	r0, r1, d0
 800d3d6:	f7f3 f90f 	bl	80005f8 <__aeabi_dmul>
 800d3da:	4652      	mov	r2, sl
 800d3dc:	465b      	mov	r3, fp
 800d3de:	f7f2 ff55 	bl	800028c <__adddf3>
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	4949      	ldr	r1, [pc, #292]	@ (800d50c <_strtod_l+0xaf4>)
 800d3e6:	4a4e      	ldr	r2, [pc, #312]	@ (800d520 <_strtod_l+0xb08>)
 800d3e8:	4019      	ands	r1, r3
 800d3ea:	4291      	cmp	r1, r2
 800d3ec:	4682      	mov	sl, r0
 800d3ee:	d942      	bls.n	800d476 <_strtod_l+0xa5e>
 800d3f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d3f2:	4b47      	ldr	r3, [pc, #284]	@ (800d510 <_strtod_l+0xaf8>)
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d103      	bne.n	800d400 <_strtod_l+0x9e8>
 800d3f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	f43f ad2f 	beq.w	800ce5e <_strtod_l+0x446>
 800d400:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d510 <_strtod_l+0xaf8>
 800d404:	f04f 3aff 	mov.w	sl, #4294967295
 800d408:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d40a:	9805      	ldr	r0, [sp, #20]
 800d40c:	f001 f85c 	bl	800e4c8 <_Bfree>
 800d410:	9805      	ldr	r0, [sp, #20]
 800d412:	4649      	mov	r1, r9
 800d414:	f001 f858 	bl	800e4c8 <_Bfree>
 800d418:	9805      	ldr	r0, [sp, #20]
 800d41a:	4641      	mov	r1, r8
 800d41c:	f001 f854 	bl	800e4c8 <_Bfree>
 800d420:	9805      	ldr	r0, [sp, #20]
 800d422:	4621      	mov	r1, r4
 800d424:	f001 f850 	bl	800e4c8 <_Bfree>
 800d428:	e619      	b.n	800d05e <_strtod_l+0x646>
 800d42a:	f1ba 0f01 	cmp.w	sl, #1
 800d42e:	d103      	bne.n	800d438 <_strtod_l+0xa20>
 800d430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d432:	2b00      	cmp	r3, #0
 800d434:	f43f ada6 	beq.w	800cf84 <_strtod_l+0x56c>
 800d438:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d4e8 <_strtod_l+0xad0>
 800d43c:	4f35      	ldr	r7, [pc, #212]	@ (800d514 <_strtod_l+0xafc>)
 800d43e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d442:	2600      	movs	r6, #0
 800d444:	e7b1      	b.n	800d3aa <_strtod_l+0x992>
 800d446:	4f34      	ldr	r7, [pc, #208]	@ (800d518 <_strtod_l+0xb00>)
 800d448:	2600      	movs	r6, #0
 800d44a:	e7aa      	b.n	800d3a2 <_strtod_l+0x98a>
 800d44c:	4b32      	ldr	r3, [pc, #200]	@ (800d518 <_strtod_l+0xb00>)
 800d44e:	4630      	mov	r0, r6
 800d450:	4639      	mov	r1, r7
 800d452:	2200      	movs	r2, #0
 800d454:	f7f3 f8d0 	bl	80005f8 <__aeabi_dmul>
 800d458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d45a:	4606      	mov	r6, r0
 800d45c:	460f      	mov	r7, r1
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d09f      	beq.n	800d3a2 <_strtod_l+0x98a>
 800d462:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d466:	e7a0      	b.n	800d3aa <_strtod_l+0x992>
 800d468:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d4f0 <_strtod_l+0xad8>
 800d46c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d470:	ec57 6b17 	vmov	r6, r7, d7
 800d474:	e799      	b.n	800d3aa <_strtod_l+0x992>
 800d476:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d47a:	9b08      	ldr	r3, [sp, #32]
 800d47c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d480:	2b00      	cmp	r3, #0
 800d482:	d1c1      	bne.n	800d408 <_strtod_l+0x9f0>
 800d484:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d488:	0d1b      	lsrs	r3, r3, #20
 800d48a:	051b      	lsls	r3, r3, #20
 800d48c:	429d      	cmp	r5, r3
 800d48e:	d1bb      	bne.n	800d408 <_strtod_l+0x9f0>
 800d490:	4630      	mov	r0, r6
 800d492:	4639      	mov	r1, r7
 800d494:	f7f3 fbd2 	bl	8000c3c <__aeabi_d2lz>
 800d498:	f7f3 f880 	bl	800059c <__aeabi_l2d>
 800d49c:	4602      	mov	r2, r0
 800d49e:	460b      	mov	r3, r1
 800d4a0:	4630      	mov	r0, r6
 800d4a2:	4639      	mov	r1, r7
 800d4a4:	f7f2 fef0 	bl	8000288 <__aeabi_dsub>
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d4b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d4b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4b6:	ea46 060a 	orr.w	r6, r6, sl
 800d4ba:	431e      	orrs	r6, r3
 800d4bc:	d06f      	beq.n	800d59e <_strtod_l+0xb86>
 800d4be:	a30e      	add	r3, pc, #56	@ (adr r3, 800d4f8 <_strtod_l+0xae0>)
 800d4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c4:	f7f3 fb0a 	bl	8000adc <__aeabi_dcmplt>
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	f47f acd3 	bne.w	800ce74 <_strtod_l+0x45c>
 800d4ce:	a30c      	add	r3, pc, #48	@ (adr r3, 800d500 <_strtod_l+0xae8>)
 800d4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4d8:	f7f3 fb1e 	bl	8000b18 <__aeabi_dcmpgt>
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	d093      	beq.n	800d408 <_strtod_l+0x9f0>
 800d4e0:	e4c8      	b.n	800ce74 <_strtod_l+0x45c>
 800d4e2:	bf00      	nop
 800d4e4:	f3af 8000 	nop.w
 800d4e8:	00000000 	.word	0x00000000
 800d4ec:	bff00000 	.word	0xbff00000
 800d4f0:	00000000 	.word	0x00000000
 800d4f4:	3ff00000 	.word	0x3ff00000
 800d4f8:	94a03595 	.word	0x94a03595
 800d4fc:	3fdfffff 	.word	0x3fdfffff
 800d500:	35afe535 	.word	0x35afe535
 800d504:	3fe00000 	.word	0x3fe00000
 800d508:	000fffff 	.word	0x000fffff
 800d50c:	7ff00000 	.word	0x7ff00000
 800d510:	7fefffff 	.word	0x7fefffff
 800d514:	3ff00000 	.word	0x3ff00000
 800d518:	3fe00000 	.word	0x3fe00000
 800d51c:	7fe00000 	.word	0x7fe00000
 800d520:	7c9fffff 	.word	0x7c9fffff
 800d524:	9b08      	ldr	r3, [sp, #32]
 800d526:	b323      	cbz	r3, 800d572 <_strtod_l+0xb5a>
 800d528:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d52c:	d821      	bhi.n	800d572 <_strtod_l+0xb5a>
 800d52e:	a328      	add	r3, pc, #160	@ (adr r3, 800d5d0 <_strtod_l+0xbb8>)
 800d530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d534:	4630      	mov	r0, r6
 800d536:	4639      	mov	r1, r7
 800d538:	f7f3 fada 	bl	8000af0 <__aeabi_dcmple>
 800d53c:	b1a0      	cbz	r0, 800d568 <_strtod_l+0xb50>
 800d53e:	4639      	mov	r1, r7
 800d540:	4630      	mov	r0, r6
 800d542:	f7f3 faf3 	bl	8000b2c <__aeabi_d2uiz>
 800d546:	2801      	cmp	r0, #1
 800d548:	bf38      	it	cc
 800d54a:	2001      	movcc	r0, #1
 800d54c:	f7f2 ffda 	bl	8000504 <__aeabi_ui2d>
 800d550:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d552:	4606      	mov	r6, r0
 800d554:	460f      	mov	r7, r1
 800d556:	b9fb      	cbnz	r3, 800d598 <_strtod_l+0xb80>
 800d558:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d55c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d55e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d560:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d564:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d568:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d56a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d56e:	1b5b      	subs	r3, r3, r5
 800d570:	9311      	str	r3, [sp, #68]	@ 0x44
 800d572:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d576:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d57a:	f001 fad1 	bl	800eb20 <__ulp>
 800d57e:	4650      	mov	r0, sl
 800d580:	ec53 2b10 	vmov	r2, r3, d0
 800d584:	4659      	mov	r1, fp
 800d586:	f7f3 f837 	bl	80005f8 <__aeabi_dmul>
 800d58a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d58e:	f7f2 fe7d 	bl	800028c <__adddf3>
 800d592:	4682      	mov	sl, r0
 800d594:	468b      	mov	fp, r1
 800d596:	e770      	b.n	800d47a <_strtod_l+0xa62>
 800d598:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d59c:	e7e0      	b.n	800d560 <_strtod_l+0xb48>
 800d59e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d5d8 <_strtod_l+0xbc0>)
 800d5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a4:	f7f3 fa9a 	bl	8000adc <__aeabi_dcmplt>
 800d5a8:	e798      	b.n	800d4dc <_strtod_l+0xac4>
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	930e      	str	r3, [sp, #56]	@ 0x38
 800d5ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d5b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5b2:	6013      	str	r3, [r2, #0]
 800d5b4:	f7ff ba6d 	b.w	800ca92 <_strtod_l+0x7a>
 800d5b8:	2a65      	cmp	r2, #101	@ 0x65
 800d5ba:	f43f ab68 	beq.w	800cc8e <_strtod_l+0x276>
 800d5be:	2a45      	cmp	r2, #69	@ 0x45
 800d5c0:	f43f ab65 	beq.w	800cc8e <_strtod_l+0x276>
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	f7ff bba0 	b.w	800cd0a <_strtod_l+0x2f2>
 800d5ca:	bf00      	nop
 800d5cc:	f3af 8000 	nop.w
 800d5d0:	ffc00000 	.word	0xffc00000
 800d5d4:	41dfffff 	.word	0x41dfffff
 800d5d8:	94a03595 	.word	0x94a03595
 800d5dc:	3fcfffff 	.word	0x3fcfffff

0800d5e0 <strtod>:
 800d5e0:	460a      	mov	r2, r1
 800d5e2:	4601      	mov	r1, r0
 800d5e4:	4802      	ldr	r0, [pc, #8]	@ (800d5f0 <strtod+0x10>)
 800d5e6:	4b03      	ldr	r3, [pc, #12]	@ (800d5f4 <strtod+0x14>)
 800d5e8:	6800      	ldr	r0, [r0, #0]
 800d5ea:	f7ff ba15 	b.w	800ca18 <_strtod_l>
 800d5ee:	bf00      	nop
 800d5f0:	200001a8 	.word	0x200001a8
 800d5f4:	2000003c 	.word	0x2000003c

0800d5f8 <_strtol_l.isra.0>:
 800d5f8:	2b24      	cmp	r3, #36	@ 0x24
 800d5fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5fe:	4686      	mov	lr, r0
 800d600:	4690      	mov	r8, r2
 800d602:	d801      	bhi.n	800d608 <_strtol_l.isra.0+0x10>
 800d604:	2b01      	cmp	r3, #1
 800d606:	d106      	bne.n	800d616 <_strtol_l.isra.0+0x1e>
 800d608:	f000 fa94 	bl	800db34 <__errno>
 800d60c:	2316      	movs	r3, #22
 800d60e:	6003      	str	r3, [r0, #0]
 800d610:	2000      	movs	r0, #0
 800d612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d616:	4834      	ldr	r0, [pc, #208]	@ (800d6e8 <_strtol_l.isra.0+0xf0>)
 800d618:	460d      	mov	r5, r1
 800d61a:	462a      	mov	r2, r5
 800d61c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d620:	5d06      	ldrb	r6, [r0, r4]
 800d622:	f016 0608 	ands.w	r6, r6, #8
 800d626:	d1f8      	bne.n	800d61a <_strtol_l.isra.0+0x22>
 800d628:	2c2d      	cmp	r4, #45	@ 0x2d
 800d62a:	d110      	bne.n	800d64e <_strtol_l.isra.0+0x56>
 800d62c:	782c      	ldrb	r4, [r5, #0]
 800d62e:	2601      	movs	r6, #1
 800d630:	1c95      	adds	r5, r2, #2
 800d632:	f033 0210 	bics.w	r2, r3, #16
 800d636:	d115      	bne.n	800d664 <_strtol_l.isra.0+0x6c>
 800d638:	2c30      	cmp	r4, #48	@ 0x30
 800d63a:	d10d      	bne.n	800d658 <_strtol_l.isra.0+0x60>
 800d63c:	782a      	ldrb	r2, [r5, #0]
 800d63e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d642:	2a58      	cmp	r2, #88	@ 0x58
 800d644:	d108      	bne.n	800d658 <_strtol_l.isra.0+0x60>
 800d646:	786c      	ldrb	r4, [r5, #1]
 800d648:	3502      	adds	r5, #2
 800d64a:	2310      	movs	r3, #16
 800d64c:	e00a      	b.n	800d664 <_strtol_l.isra.0+0x6c>
 800d64e:	2c2b      	cmp	r4, #43	@ 0x2b
 800d650:	bf04      	itt	eq
 800d652:	782c      	ldrbeq	r4, [r5, #0]
 800d654:	1c95      	addeq	r5, r2, #2
 800d656:	e7ec      	b.n	800d632 <_strtol_l.isra.0+0x3a>
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d1f6      	bne.n	800d64a <_strtol_l.isra.0+0x52>
 800d65c:	2c30      	cmp	r4, #48	@ 0x30
 800d65e:	bf14      	ite	ne
 800d660:	230a      	movne	r3, #10
 800d662:	2308      	moveq	r3, #8
 800d664:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d668:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d66c:	2200      	movs	r2, #0
 800d66e:	fbbc f9f3 	udiv	r9, ip, r3
 800d672:	4610      	mov	r0, r2
 800d674:	fb03 ca19 	mls	sl, r3, r9, ip
 800d678:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d67c:	2f09      	cmp	r7, #9
 800d67e:	d80f      	bhi.n	800d6a0 <_strtol_l.isra.0+0xa8>
 800d680:	463c      	mov	r4, r7
 800d682:	42a3      	cmp	r3, r4
 800d684:	dd1b      	ble.n	800d6be <_strtol_l.isra.0+0xc6>
 800d686:	1c57      	adds	r7, r2, #1
 800d688:	d007      	beq.n	800d69a <_strtol_l.isra.0+0xa2>
 800d68a:	4581      	cmp	r9, r0
 800d68c:	d314      	bcc.n	800d6b8 <_strtol_l.isra.0+0xc0>
 800d68e:	d101      	bne.n	800d694 <_strtol_l.isra.0+0x9c>
 800d690:	45a2      	cmp	sl, r4
 800d692:	db11      	blt.n	800d6b8 <_strtol_l.isra.0+0xc0>
 800d694:	fb00 4003 	mla	r0, r0, r3, r4
 800d698:	2201      	movs	r2, #1
 800d69a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d69e:	e7eb      	b.n	800d678 <_strtol_l.isra.0+0x80>
 800d6a0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d6a4:	2f19      	cmp	r7, #25
 800d6a6:	d801      	bhi.n	800d6ac <_strtol_l.isra.0+0xb4>
 800d6a8:	3c37      	subs	r4, #55	@ 0x37
 800d6aa:	e7ea      	b.n	800d682 <_strtol_l.isra.0+0x8a>
 800d6ac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d6b0:	2f19      	cmp	r7, #25
 800d6b2:	d804      	bhi.n	800d6be <_strtol_l.isra.0+0xc6>
 800d6b4:	3c57      	subs	r4, #87	@ 0x57
 800d6b6:	e7e4      	b.n	800d682 <_strtol_l.isra.0+0x8a>
 800d6b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d6bc:	e7ed      	b.n	800d69a <_strtol_l.isra.0+0xa2>
 800d6be:	1c53      	adds	r3, r2, #1
 800d6c0:	d108      	bne.n	800d6d4 <_strtol_l.isra.0+0xdc>
 800d6c2:	2322      	movs	r3, #34	@ 0x22
 800d6c4:	f8ce 3000 	str.w	r3, [lr]
 800d6c8:	4660      	mov	r0, ip
 800d6ca:	f1b8 0f00 	cmp.w	r8, #0
 800d6ce:	d0a0      	beq.n	800d612 <_strtol_l.isra.0+0x1a>
 800d6d0:	1e69      	subs	r1, r5, #1
 800d6d2:	e006      	b.n	800d6e2 <_strtol_l.isra.0+0xea>
 800d6d4:	b106      	cbz	r6, 800d6d8 <_strtol_l.isra.0+0xe0>
 800d6d6:	4240      	negs	r0, r0
 800d6d8:	f1b8 0f00 	cmp.w	r8, #0
 800d6dc:	d099      	beq.n	800d612 <_strtol_l.isra.0+0x1a>
 800d6de:	2a00      	cmp	r2, #0
 800d6e0:	d1f6      	bne.n	800d6d0 <_strtol_l.isra.0+0xd8>
 800d6e2:	f8c8 1000 	str.w	r1, [r8]
 800d6e6:	e794      	b.n	800d612 <_strtol_l.isra.0+0x1a>
 800d6e8:	08010499 	.word	0x08010499

0800d6ec <strtol>:
 800d6ec:	4613      	mov	r3, r2
 800d6ee:	460a      	mov	r2, r1
 800d6f0:	4601      	mov	r1, r0
 800d6f2:	4802      	ldr	r0, [pc, #8]	@ (800d6fc <strtol+0x10>)
 800d6f4:	6800      	ldr	r0, [r0, #0]
 800d6f6:	f7ff bf7f 	b.w	800d5f8 <_strtol_l.isra.0>
 800d6fa:	bf00      	nop
 800d6fc:	200001a8 	.word	0x200001a8

0800d700 <std>:
 800d700:	2300      	movs	r3, #0
 800d702:	b510      	push	{r4, lr}
 800d704:	4604      	mov	r4, r0
 800d706:	e9c0 3300 	strd	r3, r3, [r0]
 800d70a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d70e:	6083      	str	r3, [r0, #8]
 800d710:	8181      	strh	r1, [r0, #12]
 800d712:	6643      	str	r3, [r0, #100]	@ 0x64
 800d714:	81c2      	strh	r2, [r0, #14]
 800d716:	6183      	str	r3, [r0, #24]
 800d718:	4619      	mov	r1, r3
 800d71a:	2208      	movs	r2, #8
 800d71c:	305c      	adds	r0, #92	@ 0x5c
 800d71e:	f000 f92a 	bl	800d976 <memset>
 800d722:	4b0d      	ldr	r3, [pc, #52]	@ (800d758 <std+0x58>)
 800d724:	6263      	str	r3, [r4, #36]	@ 0x24
 800d726:	4b0d      	ldr	r3, [pc, #52]	@ (800d75c <std+0x5c>)
 800d728:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d72a:	4b0d      	ldr	r3, [pc, #52]	@ (800d760 <std+0x60>)
 800d72c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d72e:	4b0d      	ldr	r3, [pc, #52]	@ (800d764 <std+0x64>)
 800d730:	6323      	str	r3, [r4, #48]	@ 0x30
 800d732:	4b0d      	ldr	r3, [pc, #52]	@ (800d768 <std+0x68>)
 800d734:	6224      	str	r4, [r4, #32]
 800d736:	429c      	cmp	r4, r3
 800d738:	d006      	beq.n	800d748 <std+0x48>
 800d73a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d73e:	4294      	cmp	r4, r2
 800d740:	d002      	beq.n	800d748 <std+0x48>
 800d742:	33d0      	adds	r3, #208	@ 0xd0
 800d744:	429c      	cmp	r4, r3
 800d746:	d105      	bne.n	800d754 <std+0x54>
 800d748:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d750:	f000 ba1a 	b.w	800db88 <__retarget_lock_init_recursive>
 800d754:	bd10      	pop	{r4, pc}
 800d756:	bf00      	nop
 800d758:	0800d8f1 	.word	0x0800d8f1
 800d75c:	0800d913 	.word	0x0800d913
 800d760:	0800d94b 	.word	0x0800d94b
 800d764:	0800d96f 	.word	0x0800d96f
 800d768:	20008fbc 	.word	0x20008fbc

0800d76c <stdio_exit_handler>:
 800d76c:	4a02      	ldr	r2, [pc, #8]	@ (800d778 <stdio_exit_handler+0xc>)
 800d76e:	4903      	ldr	r1, [pc, #12]	@ (800d77c <stdio_exit_handler+0x10>)
 800d770:	4803      	ldr	r0, [pc, #12]	@ (800d780 <stdio_exit_handler+0x14>)
 800d772:	f000 b869 	b.w	800d848 <_fwalk_sglue>
 800d776:	bf00      	nop
 800d778:	20000030 	.word	0x20000030
 800d77c:	0800f485 	.word	0x0800f485
 800d780:	200001ac 	.word	0x200001ac

0800d784 <cleanup_stdio>:
 800d784:	6841      	ldr	r1, [r0, #4]
 800d786:	4b0c      	ldr	r3, [pc, #48]	@ (800d7b8 <cleanup_stdio+0x34>)
 800d788:	4299      	cmp	r1, r3
 800d78a:	b510      	push	{r4, lr}
 800d78c:	4604      	mov	r4, r0
 800d78e:	d001      	beq.n	800d794 <cleanup_stdio+0x10>
 800d790:	f001 fe78 	bl	800f484 <_fflush_r>
 800d794:	68a1      	ldr	r1, [r4, #8]
 800d796:	4b09      	ldr	r3, [pc, #36]	@ (800d7bc <cleanup_stdio+0x38>)
 800d798:	4299      	cmp	r1, r3
 800d79a:	d002      	beq.n	800d7a2 <cleanup_stdio+0x1e>
 800d79c:	4620      	mov	r0, r4
 800d79e:	f001 fe71 	bl	800f484 <_fflush_r>
 800d7a2:	68e1      	ldr	r1, [r4, #12]
 800d7a4:	4b06      	ldr	r3, [pc, #24]	@ (800d7c0 <cleanup_stdio+0x3c>)
 800d7a6:	4299      	cmp	r1, r3
 800d7a8:	d004      	beq.n	800d7b4 <cleanup_stdio+0x30>
 800d7aa:	4620      	mov	r0, r4
 800d7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7b0:	f001 be68 	b.w	800f484 <_fflush_r>
 800d7b4:	bd10      	pop	{r4, pc}
 800d7b6:	bf00      	nop
 800d7b8:	20008fbc 	.word	0x20008fbc
 800d7bc:	20009024 	.word	0x20009024
 800d7c0:	2000908c 	.word	0x2000908c

0800d7c4 <global_stdio_init.part.0>:
 800d7c4:	b510      	push	{r4, lr}
 800d7c6:	4b0b      	ldr	r3, [pc, #44]	@ (800d7f4 <global_stdio_init.part.0+0x30>)
 800d7c8:	4c0b      	ldr	r4, [pc, #44]	@ (800d7f8 <global_stdio_init.part.0+0x34>)
 800d7ca:	4a0c      	ldr	r2, [pc, #48]	@ (800d7fc <global_stdio_init.part.0+0x38>)
 800d7cc:	601a      	str	r2, [r3, #0]
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	2104      	movs	r1, #4
 800d7d4:	f7ff ff94 	bl	800d700 <std>
 800d7d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d7dc:	2201      	movs	r2, #1
 800d7de:	2109      	movs	r1, #9
 800d7e0:	f7ff ff8e 	bl	800d700 <std>
 800d7e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d7e8:	2202      	movs	r2, #2
 800d7ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7ee:	2112      	movs	r1, #18
 800d7f0:	f7ff bf86 	b.w	800d700 <std>
 800d7f4:	200090f4 	.word	0x200090f4
 800d7f8:	20008fbc 	.word	0x20008fbc
 800d7fc:	0800d76d 	.word	0x0800d76d

0800d800 <__sfp_lock_acquire>:
 800d800:	4801      	ldr	r0, [pc, #4]	@ (800d808 <__sfp_lock_acquire+0x8>)
 800d802:	f000 b9c2 	b.w	800db8a <__retarget_lock_acquire_recursive>
 800d806:	bf00      	nop
 800d808:	200090fd 	.word	0x200090fd

0800d80c <__sfp_lock_release>:
 800d80c:	4801      	ldr	r0, [pc, #4]	@ (800d814 <__sfp_lock_release+0x8>)
 800d80e:	f000 b9bd 	b.w	800db8c <__retarget_lock_release_recursive>
 800d812:	bf00      	nop
 800d814:	200090fd 	.word	0x200090fd

0800d818 <__sinit>:
 800d818:	b510      	push	{r4, lr}
 800d81a:	4604      	mov	r4, r0
 800d81c:	f7ff fff0 	bl	800d800 <__sfp_lock_acquire>
 800d820:	6a23      	ldr	r3, [r4, #32]
 800d822:	b11b      	cbz	r3, 800d82c <__sinit+0x14>
 800d824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d828:	f7ff bff0 	b.w	800d80c <__sfp_lock_release>
 800d82c:	4b04      	ldr	r3, [pc, #16]	@ (800d840 <__sinit+0x28>)
 800d82e:	6223      	str	r3, [r4, #32]
 800d830:	4b04      	ldr	r3, [pc, #16]	@ (800d844 <__sinit+0x2c>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d1f5      	bne.n	800d824 <__sinit+0xc>
 800d838:	f7ff ffc4 	bl	800d7c4 <global_stdio_init.part.0>
 800d83c:	e7f2      	b.n	800d824 <__sinit+0xc>
 800d83e:	bf00      	nop
 800d840:	0800d785 	.word	0x0800d785
 800d844:	200090f4 	.word	0x200090f4

0800d848 <_fwalk_sglue>:
 800d848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d84c:	4607      	mov	r7, r0
 800d84e:	4688      	mov	r8, r1
 800d850:	4614      	mov	r4, r2
 800d852:	2600      	movs	r6, #0
 800d854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d858:	f1b9 0901 	subs.w	r9, r9, #1
 800d85c:	d505      	bpl.n	800d86a <_fwalk_sglue+0x22>
 800d85e:	6824      	ldr	r4, [r4, #0]
 800d860:	2c00      	cmp	r4, #0
 800d862:	d1f7      	bne.n	800d854 <_fwalk_sglue+0xc>
 800d864:	4630      	mov	r0, r6
 800d866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d86a:	89ab      	ldrh	r3, [r5, #12]
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d907      	bls.n	800d880 <_fwalk_sglue+0x38>
 800d870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d874:	3301      	adds	r3, #1
 800d876:	d003      	beq.n	800d880 <_fwalk_sglue+0x38>
 800d878:	4629      	mov	r1, r5
 800d87a:	4638      	mov	r0, r7
 800d87c:	47c0      	blx	r8
 800d87e:	4306      	orrs	r6, r0
 800d880:	3568      	adds	r5, #104	@ 0x68
 800d882:	e7e9      	b.n	800d858 <_fwalk_sglue+0x10>

0800d884 <sniprintf>:
 800d884:	b40c      	push	{r2, r3}
 800d886:	b530      	push	{r4, r5, lr}
 800d888:	4b18      	ldr	r3, [pc, #96]	@ (800d8ec <sniprintf+0x68>)
 800d88a:	1e0c      	subs	r4, r1, #0
 800d88c:	681d      	ldr	r5, [r3, #0]
 800d88e:	b09d      	sub	sp, #116	@ 0x74
 800d890:	da08      	bge.n	800d8a4 <sniprintf+0x20>
 800d892:	238b      	movs	r3, #139	@ 0x8b
 800d894:	602b      	str	r3, [r5, #0]
 800d896:	f04f 30ff 	mov.w	r0, #4294967295
 800d89a:	b01d      	add	sp, #116	@ 0x74
 800d89c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d8a0:	b002      	add	sp, #8
 800d8a2:	4770      	bx	lr
 800d8a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d8a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d8ac:	f04f 0300 	mov.w	r3, #0
 800d8b0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800d8b2:	bf14      	ite	ne
 800d8b4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d8b8:	4623      	moveq	r3, r4
 800d8ba:	9304      	str	r3, [sp, #16]
 800d8bc:	9307      	str	r3, [sp, #28]
 800d8be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d8c2:	9002      	str	r0, [sp, #8]
 800d8c4:	9006      	str	r0, [sp, #24]
 800d8c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d8ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d8cc:	ab21      	add	r3, sp, #132	@ 0x84
 800d8ce:	a902      	add	r1, sp, #8
 800d8d0:	4628      	mov	r0, r5
 800d8d2:	9301      	str	r3, [sp, #4]
 800d8d4:	f001 faca 	bl	800ee6c <_svfiprintf_r>
 800d8d8:	1c43      	adds	r3, r0, #1
 800d8da:	bfbc      	itt	lt
 800d8dc:	238b      	movlt	r3, #139	@ 0x8b
 800d8de:	602b      	strlt	r3, [r5, #0]
 800d8e0:	2c00      	cmp	r4, #0
 800d8e2:	d0da      	beq.n	800d89a <sniprintf+0x16>
 800d8e4:	9b02      	ldr	r3, [sp, #8]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	701a      	strb	r2, [r3, #0]
 800d8ea:	e7d6      	b.n	800d89a <sniprintf+0x16>
 800d8ec:	200001a8 	.word	0x200001a8

0800d8f0 <__sread>:
 800d8f0:	b510      	push	{r4, lr}
 800d8f2:	460c      	mov	r4, r1
 800d8f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8f8:	f000 f8f8 	bl	800daec <_read_r>
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	bfab      	itete	ge
 800d900:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d902:	89a3      	ldrhlt	r3, [r4, #12]
 800d904:	181b      	addge	r3, r3, r0
 800d906:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d90a:	bfac      	ite	ge
 800d90c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d90e:	81a3      	strhlt	r3, [r4, #12]
 800d910:	bd10      	pop	{r4, pc}

0800d912 <__swrite>:
 800d912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d916:	461f      	mov	r7, r3
 800d918:	898b      	ldrh	r3, [r1, #12]
 800d91a:	05db      	lsls	r3, r3, #23
 800d91c:	4605      	mov	r5, r0
 800d91e:	460c      	mov	r4, r1
 800d920:	4616      	mov	r6, r2
 800d922:	d505      	bpl.n	800d930 <__swrite+0x1e>
 800d924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d928:	2302      	movs	r3, #2
 800d92a:	2200      	movs	r2, #0
 800d92c:	f000 f8cc 	bl	800dac8 <_lseek_r>
 800d930:	89a3      	ldrh	r3, [r4, #12]
 800d932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d936:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d93a:	81a3      	strh	r3, [r4, #12]
 800d93c:	4632      	mov	r2, r6
 800d93e:	463b      	mov	r3, r7
 800d940:	4628      	mov	r0, r5
 800d942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d946:	f000 b8e3 	b.w	800db10 <_write_r>

0800d94a <__sseek>:
 800d94a:	b510      	push	{r4, lr}
 800d94c:	460c      	mov	r4, r1
 800d94e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d952:	f000 f8b9 	bl	800dac8 <_lseek_r>
 800d956:	1c43      	adds	r3, r0, #1
 800d958:	89a3      	ldrh	r3, [r4, #12]
 800d95a:	bf15      	itete	ne
 800d95c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d95e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d962:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d966:	81a3      	strheq	r3, [r4, #12]
 800d968:	bf18      	it	ne
 800d96a:	81a3      	strhne	r3, [r4, #12]
 800d96c:	bd10      	pop	{r4, pc}

0800d96e <__sclose>:
 800d96e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d972:	f000 b83b 	b.w	800d9ec <_close_r>

0800d976 <memset>:
 800d976:	4402      	add	r2, r0
 800d978:	4603      	mov	r3, r0
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d100      	bne.n	800d980 <memset+0xa>
 800d97e:	4770      	bx	lr
 800d980:	f803 1b01 	strb.w	r1, [r3], #1
 800d984:	e7f9      	b.n	800d97a <memset+0x4>

0800d986 <strchr>:
 800d986:	b2c9      	uxtb	r1, r1
 800d988:	4603      	mov	r3, r0
 800d98a:	4618      	mov	r0, r3
 800d98c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d990:	b112      	cbz	r2, 800d998 <strchr+0x12>
 800d992:	428a      	cmp	r2, r1
 800d994:	d1f9      	bne.n	800d98a <strchr+0x4>
 800d996:	4770      	bx	lr
 800d998:	2900      	cmp	r1, #0
 800d99a:	bf18      	it	ne
 800d99c:	2000      	movne	r0, #0
 800d99e:	4770      	bx	lr

0800d9a0 <strncmp>:
 800d9a0:	b510      	push	{r4, lr}
 800d9a2:	b16a      	cbz	r2, 800d9c0 <strncmp+0x20>
 800d9a4:	3901      	subs	r1, #1
 800d9a6:	1884      	adds	r4, r0, r2
 800d9a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d103      	bne.n	800d9bc <strncmp+0x1c>
 800d9b4:	42a0      	cmp	r0, r4
 800d9b6:	d001      	beq.n	800d9bc <strncmp+0x1c>
 800d9b8:	2a00      	cmp	r2, #0
 800d9ba:	d1f5      	bne.n	800d9a8 <strncmp+0x8>
 800d9bc:	1ad0      	subs	r0, r2, r3
 800d9be:	bd10      	pop	{r4, pc}
 800d9c0:	4610      	mov	r0, r2
 800d9c2:	e7fc      	b.n	800d9be <strncmp+0x1e>

0800d9c4 <strncpy>:
 800d9c4:	b510      	push	{r4, lr}
 800d9c6:	3901      	subs	r1, #1
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	b132      	cbz	r2, 800d9da <strncpy+0x16>
 800d9cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d9d0:	f803 4b01 	strb.w	r4, [r3], #1
 800d9d4:	3a01      	subs	r2, #1
 800d9d6:	2c00      	cmp	r4, #0
 800d9d8:	d1f7      	bne.n	800d9ca <strncpy+0x6>
 800d9da:	441a      	add	r2, r3
 800d9dc:	2100      	movs	r1, #0
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d100      	bne.n	800d9e4 <strncpy+0x20>
 800d9e2:	bd10      	pop	{r4, pc}
 800d9e4:	f803 1b01 	strb.w	r1, [r3], #1
 800d9e8:	e7f9      	b.n	800d9de <strncpy+0x1a>
	...

0800d9ec <_close_r>:
 800d9ec:	b538      	push	{r3, r4, r5, lr}
 800d9ee:	4d06      	ldr	r5, [pc, #24]	@ (800da08 <_close_r+0x1c>)
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	4608      	mov	r0, r1
 800d9f6:	602b      	str	r3, [r5, #0]
 800d9f8:	f7f7 f99a 	bl	8004d30 <_close>
 800d9fc:	1c43      	adds	r3, r0, #1
 800d9fe:	d102      	bne.n	800da06 <_close_r+0x1a>
 800da00:	682b      	ldr	r3, [r5, #0]
 800da02:	b103      	cbz	r3, 800da06 <_close_r+0x1a>
 800da04:	6023      	str	r3, [r4, #0]
 800da06:	bd38      	pop	{r3, r4, r5, pc}
 800da08:	200090f8 	.word	0x200090f8

0800da0c <_reclaim_reent>:
 800da0c:	4b2d      	ldr	r3, [pc, #180]	@ (800dac4 <_reclaim_reent+0xb8>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4283      	cmp	r3, r0
 800da12:	b570      	push	{r4, r5, r6, lr}
 800da14:	4604      	mov	r4, r0
 800da16:	d053      	beq.n	800dac0 <_reclaim_reent+0xb4>
 800da18:	69c3      	ldr	r3, [r0, #28]
 800da1a:	b31b      	cbz	r3, 800da64 <_reclaim_reent+0x58>
 800da1c:	68db      	ldr	r3, [r3, #12]
 800da1e:	b163      	cbz	r3, 800da3a <_reclaim_reent+0x2e>
 800da20:	2500      	movs	r5, #0
 800da22:	69e3      	ldr	r3, [r4, #28]
 800da24:	68db      	ldr	r3, [r3, #12]
 800da26:	5959      	ldr	r1, [r3, r5]
 800da28:	b9b1      	cbnz	r1, 800da58 <_reclaim_reent+0x4c>
 800da2a:	3504      	adds	r5, #4
 800da2c:	2d80      	cmp	r5, #128	@ 0x80
 800da2e:	d1f8      	bne.n	800da22 <_reclaim_reent+0x16>
 800da30:	69e3      	ldr	r3, [r4, #28]
 800da32:	4620      	mov	r0, r4
 800da34:	68d9      	ldr	r1, [r3, #12]
 800da36:	f000 f8c3 	bl	800dbc0 <_free_r>
 800da3a:	69e3      	ldr	r3, [r4, #28]
 800da3c:	6819      	ldr	r1, [r3, #0]
 800da3e:	b111      	cbz	r1, 800da46 <_reclaim_reent+0x3a>
 800da40:	4620      	mov	r0, r4
 800da42:	f000 f8bd 	bl	800dbc0 <_free_r>
 800da46:	69e3      	ldr	r3, [r4, #28]
 800da48:	689d      	ldr	r5, [r3, #8]
 800da4a:	b15d      	cbz	r5, 800da64 <_reclaim_reent+0x58>
 800da4c:	4629      	mov	r1, r5
 800da4e:	4620      	mov	r0, r4
 800da50:	682d      	ldr	r5, [r5, #0]
 800da52:	f000 f8b5 	bl	800dbc0 <_free_r>
 800da56:	e7f8      	b.n	800da4a <_reclaim_reent+0x3e>
 800da58:	680e      	ldr	r6, [r1, #0]
 800da5a:	4620      	mov	r0, r4
 800da5c:	f000 f8b0 	bl	800dbc0 <_free_r>
 800da60:	4631      	mov	r1, r6
 800da62:	e7e1      	b.n	800da28 <_reclaim_reent+0x1c>
 800da64:	6961      	ldr	r1, [r4, #20]
 800da66:	b111      	cbz	r1, 800da6e <_reclaim_reent+0x62>
 800da68:	4620      	mov	r0, r4
 800da6a:	f000 f8a9 	bl	800dbc0 <_free_r>
 800da6e:	69e1      	ldr	r1, [r4, #28]
 800da70:	b111      	cbz	r1, 800da78 <_reclaim_reent+0x6c>
 800da72:	4620      	mov	r0, r4
 800da74:	f000 f8a4 	bl	800dbc0 <_free_r>
 800da78:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800da7a:	b111      	cbz	r1, 800da82 <_reclaim_reent+0x76>
 800da7c:	4620      	mov	r0, r4
 800da7e:	f000 f89f 	bl	800dbc0 <_free_r>
 800da82:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da84:	b111      	cbz	r1, 800da8c <_reclaim_reent+0x80>
 800da86:	4620      	mov	r0, r4
 800da88:	f000 f89a 	bl	800dbc0 <_free_r>
 800da8c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800da8e:	b111      	cbz	r1, 800da96 <_reclaim_reent+0x8a>
 800da90:	4620      	mov	r0, r4
 800da92:	f000 f895 	bl	800dbc0 <_free_r>
 800da96:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800da98:	b111      	cbz	r1, 800daa0 <_reclaim_reent+0x94>
 800da9a:	4620      	mov	r0, r4
 800da9c:	f000 f890 	bl	800dbc0 <_free_r>
 800daa0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800daa2:	b111      	cbz	r1, 800daaa <_reclaim_reent+0x9e>
 800daa4:	4620      	mov	r0, r4
 800daa6:	f000 f88b 	bl	800dbc0 <_free_r>
 800daaa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800daac:	b111      	cbz	r1, 800dab4 <_reclaim_reent+0xa8>
 800daae:	4620      	mov	r0, r4
 800dab0:	f000 f886 	bl	800dbc0 <_free_r>
 800dab4:	6a23      	ldr	r3, [r4, #32]
 800dab6:	b11b      	cbz	r3, 800dac0 <_reclaim_reent+0xb4>
 800dab8:	4620      	mov	r0, r4
 800daba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dabe:	4718      	bx	r3
 800dac0:	bd70      	pop	{r4, r5, r6, pc}
 800dac2:	bf00      	nop
 800dac4:	200001a8 	.word	0x200001a8

0800dac8 <_lseek_r>:
 800dac8:	b538      	push	{r3, r4, r5, lr}
 800daca:	4d07      	ldr	r5, [pc, #28]	@ (800dae8 <_lseek_r+0x20>)
 800dacc:	4604      	mov	r4, r0
 800dace:	4608      	mov	r0, r1
 800dad0:	4611      	mov	r1, r2
 800dad2:	2200      	movs	r2, #0
 800dad4:	602a      	str	r2, [r5, #0]
 800dad6:	461a      	mov	r2, r3
 800dad8:	f7f7 f951 	bl	8004d7e <_lseek>
 800dadc:	1c43      	adds	r3, r0, #1
 800dade:	d102      	bne.n	800dae6 <_lseek_r+0x1e>
 800dae0:	682b      	ldr	r3, [r5, #0]
 800dae2:	b103      	cbz	r3, 800dae6 <_lseek_r+0x1e>
 800dae4:	6023      	str	r3, [r4, #0]
 800dae6:	bd38      	pop	{r3, r4, r5, pc}
 800dae8:	200090f8 	.word	0x200090f8

0800daec <_read_r>:
 800daec:	b538      	push	{r3, r4, r5, lr}
 800daee:	4d07      	ldr	r5, [pc, #28]	@ (800db0c <_read_r+0x20>)
 800daf0:	4604      	mov	r4, r0
 800daf2:	4608      	mov	r0, r1
 800daf4:	4611      	mov	r1, r2
 800daf6:	2200      	movs	r2, #0
 800daf8:	602a      	str	r2, [r5, #0]
 800dafa:	461a      	mov	r2, r3
 800dafc:	f7f7 f8df 	bl	8004cbe <_read>
 800db00:	1c43      	adds	r3, r0, #1
 800db02:	d102      	bne.n	800db0a <_read_r+0x1e>
 800db04:	682b      	ldr	r3, [r5, #0]
 800db06:	b103      	cbz	r3, 800db0a <_read_r+0x1e>
 800db08:	6023      	str	r3, [r4, #0]
 800db0a:	bd38      	pop	{r3, r4, r5, pc}
 800db0c:	200090f8 	.word	0x200090f8

0800db10 <_write_r>:
 800db10:	b538      	push	{r3, r4, r5, lr}
 800db12:	4d07      	ldr	r5, [pc, #28]	@ (800db30 <_write_r+0x20>)
 800db14:	4604      	mov	r4, r0
 800db16:	4608      	mov	r0, r1
 800db18:	4611      	mov	r1, r2
 800db1a:	2200      	movs	r2, #0
 800db1c:	602a      	str	r2, [r5, #0]
 800db1e:	461a      	mov	r2, r3
 800db20:	f7f7 f8ea 	bl	8004cf8 <_write>
 800db24:	1c43      	adds	r3, r0, #1
 800db26:	d102      	bne.n	800db2e <_write_r+0x1e>
 800db28:	682b      	ldr	r3, [r5, #0]
 800db2a:	b103      	cbz	r3, 800db2e <_write_r+0x1e>
 800db2c:	6023      	str	r3, [r4, #0]
 800db2e:	bd38      	pop	{r3, r4, r5, pc}
 800db30:	200090f8 	.word	0x200090f8

0800db34 <__errno>:
 800db34:	4b01      	ldr	r3, [pc, #4]	@ (800db3c <__errno+0x8>)
 800db36:	6818      	ldr	r0, [r3, #0]
 800db38:	4770      	bx	lr
 800db3a:	bf00      	nop
 800db3c:	200001a8 	.word	0x200001a8

0800db40 <__libc_init_array>:
 800db40:	b570      	push	{r4, r5, r6, lr}
 800db42:	4d0d      	ldr	r5, [pc, #52]	@ (800db78 <__libc_init_array+0x38>)
 800db44:	4c0d      	ldr	r4, [pc, #52]	@ (800db7c <__libc_init_array+0x3c>)
 800db46:	1b64      	subs	r4, r4, r5
 800db48:	10a4      	asrs	r4, r4, #2
 800db4a:	2600      	movs	r6, #0
 800db4c:	42a6      	cmp	r6, r4
 800db4e:	d109      	bne.n	800db64 <__libc_init_array+0x24>
 800db50:	4d0b      	ldr	r5, [pc, #44]	@ (800db80 <__libc_init_array+0x40>)
 800db52:	4c0c      	ldr	r4, [pc, #48]	@ (800db84 <__libc_init_array+0x44>)
 800db54:	f002 f80e 	bl	800fb74 <_init>
 800db58:	1b64      	subs	r4, r4, r5
 800db5a:	10a4      	asrs	r4, r4, #2
 800db5c:	2600      	movs	r6, #0
 800db5e:	42a6      	cmp	r6, r4
 800db60:	d105      	bne.n	800db6e <__libc_init_array+0x2e>
 800db62:	bd70      	pop	{r4, r5, r6, pc}
 800db64:	f855 3b04 	ldr.w	r3, [r5], #4
 800db68:	4798      	blx	r3
 800db6a:	3601      	adds	r6, #1
 800db6c:	e7ee      	b.n	800db4c <__libc_init_array+0xc>
 800db6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800db72:	4798      	blx	r3
 800db74:	3601      	adds	r6, #1
 800db76:	e7f2      	b.n	800db5e <__libc_init_array+0x1e>
 800db78:	080106a0 	.word	0x080106a0
 800db7c:	080106a0 	.word	0x080106a0
 800db80:	080106a0 	.word	0x080106a0
 800db84:	080106a4 	.word	0x080106a4

0800db88 <__retarget_lock_init_recursive>:
 800db88:	4770      	bx	lr

0800db8a <__retarget_lock_acquire_recursive>:
 800db8a:	4770      	bx	lr

0800db8c <__retarget_lock_release_recursive>:
 800db8c:	4770      	bx	lr

0800db8e <memcpy>:
 800db8e:	440a      	add	r2, r1
 800db90:	4291      	cmp	r1, r2
 800db92:	f100 33ff 	add.w	r3, r0, #4294967295
 800db96:	d100      	bne.n	800db9a <memcpy+0xc>
 800db98:	4770      	bx	lr
 800db9a:	b510      	push	{r4, lr}
 800db9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dba0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dba4:	4291      	cmp	r1, r2
 800dba6:	d1f9      	bne.n	800db9c <memcpy+0xe>
 800dba8:	bd10      	pop	{r4, pc}
 800dbaa:	0000      	movs	r0, r0
 800dbac:	0000      	movs	r0, r0
	...

0800dbb0 <nan>:
 800dbb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dbb8 <nan+0x8>
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop
 800dbb8:	00000000 	.word	0x00000000
 800dbbc:	7ff80000 	.word	0x7ff80000

0800dbc0 <_free_r>:
 800dbc0:	b538      	push	{r3, r4, r5, lr}
 800dbc2:	4605      	mov	r5, r0
 800dbc4:	2900      	cmp	r1, #0
 800dbc6:	d041      	beq.n	800dc4c <_free_r+0x8c>
 800dbc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbcc:	1f0c      	subs	r4, r1, #4
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	bfb8      	it	lt
 800dbd2:	18e4      	addlt	r4, r4, r3
 800dbd4:	f000 fc2c 	bl	800e430 <__malloc_lock>
 800dbd8:	4a1d      	ldr	r2, [pc, #116]	@ (800dc50 <_free_r+0x90>)
 800dbda:	6813      	ldr	r3, [r2, #0]
 800dbdc:	b933      	cbnz	r3, 800dbec <_free_r+0x2c>
 800dbde:	6063      	str	r3, [r4, #4]
 800dbe0:	6014      	str	r4, [r2, #0]
 800dbe2:	4628      	mov	r0, r5
 800dbe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbe8:	f000 bc28 	b.w	800e43c <__malloc_unlock>
 800dbec:	42a3      	cmp	r3, r4
 800dbee:	d908      	bls.n	800dc02 <_free_r+0x42>
 800dbf0:	6820      	ldr	r0, [r4, #0]
 800dbf2:	1821      	adds	r1, r4, r0
 800dbf4:	428b      	cmp	r3, r1
 800dbf6:	bf01      	itttt	eq
 800dbf8:	6819      	ldreq	r1, [r3, #0]
 800dbfa:	685b      	ldreq	r3, [r3, #4]
 800dbfc:	1809      	addeq	r1, r1, r0
 800dbfe:	6021      	streq	r1, [r4, #0]
 800dc00:	e7ed      	b.n	800dbde <_free_r+0x1e>
 800dc02:	461a      	mov	r2, r3
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	b10b      	cbz	r3, 800dc0c <_free_r+0x4c>
 800dc08:	42a3      	cmp	r3, r4
 800dc0a:	d9fa      	bls.n	800dc02 <_free_r+0x42>
 800dc0c:	6811      	ldr	r1, [r2, #0]
 800dc0e:	1850      	adds	r0, r2, r1
 800dc10:	42a0      	cmp	r0, r4
 800dc12:	d10b      	bne.n	800dc2c <_free_r+0x6c>
 800dc14:	6820      	ldr	r0, [r4, #0]
 800dc16:	4401      	add	r1, r0
 800dc18:	1850      	adds	r0, r2, r1
 800dc1a:	4283      	cmp	r3, r0
 800dc1c:	6011      	str	r1, [r2, #0]
 800dc1e:	d1e0      	bne.n	800dbe2 <_free_r+0x22>
 800dc20:	6818      	ldr	r0, [r3, #0]
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	6053      	str	r3, [r2, #4]
 800dc26:	4408      	add	r0, r1
 800dc28:	6010      	str	r0, [r2, #0]
 800dc2a:	e7da      	b.n	800dbe2 <_free_r+0x22>
 800dc2c:	d902      	bls.n	800dc34 <_free_r+0x74>
 800dc2e:	230c      	movs	r3, #12
 800dc30:	602b      	str	r3, [r5, #0]
 800dc32:	e7d6      	b.n	800dbe2 <_free_r+0x22>
 800dc34:	6820      	ldr	r0, [r4, #0]
 800dc36:	1821      	adds	r1, r4, r0
 800dc38:	428b      	cmp	r3, r1
 800dc3a:	bf04      	itt	eq
 800dc3c:	6819      	ldreq	r1, [r3, #0]
 800dc3e:	685b      	ldreq	r3, [r3, #4]
 800dc40:	6063      	str	r3, [r4, #4]
 800dc42:	bf04      	itt	eq
 800dc44:	1809      	addeq	r1, r1, r0
 800dc46:	6021      	streq	r1, [r4, #0]
 800dc48:	6054      	str	r4, [r2, #4]
 800dc4a:	e7ca      	b.n	800dbe2 <_free_r+0x22>
 800dc4c:	bd38      	pop	{r3, r4, r5, pc}
 800dc4e:	bf00      	nop
 800dc50:	20009104 	.word	0x20009104

0800dc54 <rshift>:
 800dc54:	6903      	ldr	r3, [r0, #16]
 800dc56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dc5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dc62:	f100 0414 	add.w	r4, r0, #20
 800dc66:	dd45      	ble.n	800dcf4 <rshift+0xa0>
 800dc68:	f011 011f 	ands.w	r1, r1, #31
 800dc6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dc70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dc74:	d10c      	bne.n	800dc90 <rshift+0x3c>
 800dc76:	f100 0710 	add.w	r7, r0, #16
 800dc7a:	4629      	mov	r1, r5
 800dc7c:	42b1      	cmp	r1, r6
 800dc7e:	d334      	bcc.n	800dcea <rshift+0x96>
 800dc80:	1a9b      	subs	r3, r3, r2
 800dc82:	009b      	lsls	r3, r3, #2
 800dc84:	1eea      	subs	r2, r5, #3
 800dc86:	4296      	cmp	r6, r2
 800dc88:	bf38      	it	cc
 800dc8a:	2300      	movcc	r3, #0
 800dc8c:	4423      	add	r3, r4
 800dc8e:	e015      	b.n	800dcbc <rshift+0x68>
 800dc90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dc94:	f1c1 0820 	rsb	r8, r1, #32
 800dc98:	40cf      	lsrs	r7, r1
 800dc9a:	f105 0e04 	add.w	lr, r5, #4
 800dc9e:	46a1      	mov	r9, r4
 800dca0:	4576      	cmp	r6, lr
 800dca2:	46f4      	mov	ip, lr
 800dca4:	d815      	bhi.n	800dcd2 <rshift+0x7e>
 800dca6:	1a9a      	subs	r2, r3, r2
 800dca8:	0092      	lsls	r2, r2, #2
 800dcaa:	3a04      	subs	r2, #4
 800dcac:	3501      	adds	r5, #1
 800dcae:	42ae      	cmp	r6, r5
 800dcb0:	bf38      	it	cc
 800dcb2:	2200      	movcc	r2, #0
 800dcb4:	18a3      	adds	r3, r4, r2
 800dcb6:	50a7      	str	r7, [r4, r2]
 800dcb8:	b107      	cbz	r7, 800dcbc <rshift+0x68>
 800dcba:	3304      	adds	r3, #4
 800dcbc:	1b1a      	subs	r2, r3, r4
 800dcbe:	42a3      	cmp	r3, r4
 800dcc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dcc4:	bf08      	it	eq
 800dcc6:	2300      	moveq	r3, #0
 800dcc8:	6102      	str	r2, [r0, #16]
 800dcca:	bf08      	it	eq
 800dccc:	6143      	streq	r3, [r0, #20]
 800dcce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcd2:	f8dc c000 	ldr.w	ip, [ip]
 800dcd6:	fa0c fc08 	lsl.w	ip, ip, r8
 800dcda:	ea4c 0707 	orr.w	r7, ip, r7
 800dcde:	f849 7b04 	str.w	r7, [r9], #4
 800dce2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dce6:	40cf      	lsrs	r7, r1
 800dce8:	e7da      	b.n	800dca0 <rshift+0x4c>
 800dcea:	f851 cb04 	ldr.w	ip, [r1], #4
 800dcee:	f847 cf04 	str.w	ip, [r7, #4]!
 800dcf2:	e7c3      	b.n	800dc7c <rshift+0x28>
 800dcf4:	4623      	mov	r3, r4
 800dcf6:	e7e1      	b.n	800dcbc <rshift+0x68>

0800dcf8 <__hexdig_fun>:
 800dcf8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dcfc:	2b09      	cmp	r3, #9
 800dcfe:	d802      	bhi.n	800dd06 <__hexdig_fun+0xe>
 800dd00:	3820      	subs	r0, #32
 800dd02:	b2c0      	uxtb	r0, r0
 800dd04:	4770      	bx	lr
 800dd06:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dd0a:	2b05      	cmp	r3, #5
 800dd0c:	d801      	bhi.n	800dd12 <__hexdig_fun+0x1a>
 800dd0e:	3847      	subs	r0, #71	@ 0x47
 800dd10:	e7f7      	b.n	800dd02 <__hexdig_fun+0xa>
 800dd12:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dd16:	2b05      	cmp	r3, #5
 800dd18:	d801      	bhi.n	800dd1e <__hexdig_fun+0x26>
 800dd1a:	3827      	subs	r0, #39	@ 0x27
 800dd1c:	e7f1      	b.n	800dd02 <__hexdig_fun+0xa>
 800dd1e:	2000      	movs	r0, #0
 800dd20:	4770      	bx	lr
	...

0800dd24 <__gethex>:
 800dd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd28:	b085      	sub	sp, #20
 800dd2a:	468a      	mov	sl, r1
 800dd2c:	9302      	str	r3, [sp, #8]
 800dd2e:	680b      	ldr	r3, [r1, #0]
 800dd30:	9001      	str	r0, [sp, #4]
 800dd32:	4690      	mov	r8, r2
 800dd34:	1c9c      	adds	r4, r3, #2
 800dd36:	46a1      	mov	r9, r4
 800dd38:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dd3c:	2830      	cmp	r0, #48	@ 0x30
 800dd3e:	d0fa      	beq.n	800dd36 <__gethex+0x12>
 800dd40:	eba9 0303 	sub.w	r3, r9, r3
 800dd44:	f1a3 0b02 	sub.w	fp, r3, #2
 800dd48:	f7ff ffd6 	bl	800dcf8 <__hexdig_fun>
 800dd4c:	4605      	mov	r5, r0
 800dd4e:	2800      	cmp	r0, #0
 800dd50:	d168      	bne.n	800de24 <__gethex+0x100>
 800dd52:	49a0      	ldr	r1, [pc, #640]	@ (800dfd4 <__gethex+0x2b0>)
 800dd54:	2201      	movs	r2, #1
 800dd56:	4648      	mov	r0, r9
 800dd58:	f7ff fe22 	bl	800d9a0 <strncmp>
 800dd5c:	4607      	mov	r7, r0
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	d167      	bne.n	800de32 <__gethex+0x10e>
 800dd62:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dd66:	4626      	mov	r6, r4
 800dd68:	f7ff ffc6 	bl	800dcf8 <__hexdig_fun>
 800dd6c:	2800      	cmp	r0, #0
 800dd6e:	d062      	beq.n	800de36 <__gethex+0x112>
 800dd70:	4623      	mov	r3, r4
 800dd72:	7818      	ldrb	r0, [r3, #0]
 800dd74:	2830      	cmp	r0, #48	@ 0x30
 800dd76:	4699      	mov	r9, r3
 800dd78:	f103 0301 	add.w	r3, r3, #1
 800dd7c:	d0f9      	beq.n	800dd72 <__gethex+0x4e>
 800dd7e:	f7ff ffbb 	bl	800dcf8 <__hexdig_fun>
 800dd82:	fab0 f580 	clz	r5, r0
 800dd86:	096d      	lsrs	r5, r5, #5
 800dd88:	f04f 0b01 	mov.w	fp, #1
 800dd8c:	464a      	mov	r2, r9
 800dd8e:	4616      	mov	r6, r2
 800dd90:	3201      	adds	r2, #1
 800dd92:	7830      	ldrb	r0, [r6, #0]
 800dd94:	f7ff ffb0 	bl	800dcf8 <__hexdig_fun>
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	d1f8      	bne.n	800dd8e <__gethex+0x6a>
 800dd9c:	498d      	ldr	r1, [pc, #564]	@ (800dfd4 <__gethex+0x2b0>)
 800dd9e:	2201      	movs	r2, #1
 800dda0:	4630      	mov	r0, r6
 800dda2:	f7ff fdfd 	bl	800d9a0 <strncmp>
 800dda6:	2800      	cmp	r0, #0
 800dda8:	d13f      	bne.n	800de2a <__gethex+0x106>
 800ddaa:	b944      	cbnz	r4, 800ddbe <__gethex+0x9a>
 800ddac:	1c74      	adds	r4, r6, #1
 800ddae:	4622      	mov	r2, r4
 800ddb0:	4616      	mov	r6, r2
 800ddb2:	3201      	adds	r2, #1
 800ddb4:	7830      	ldrb	r0, [r6, #0]
 800ddb6:	f7ff ff9f 	bl	800dcf8 <__hexdig_fun>
 800ddba:	2800      	cmp	r0, #0
 800ddbc:	d1f8      	bne.n	800ddb0 <__gethex+0x8c>
 800ddbe:	1ba4      	subs	r4, r4, r6
 800ddc0:	00a7      	lsls	r7, r4, #2
 800ddc2:	7833      	ldrb	r3, [r6, #0]
 800ddc4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ddc8:	2b50      	cmp	r3, #80	@ 0x50
 800ddca:	d13e      	bne.n	800de4a <__gethex+0x126>
 800ddcc:	7873      	ldrb	r3, [r6, #1]
 800ddce:	2b2b      	cmp	r3, #43	@ 0x2b
 800ddd0:	d033      	beq.n	800de3a <__gethex+0x116>
 800ddd2:	2b2d      	cmp	r3, #45	@ 0x2d
 800ddd4:	d034      	beq.n	800de40 <__gethex+0x11c>
 800ddd6:	1c71      	adds	r1, r6, #1
 800ddd8:	2400      	movs	r4, #0
 800ddda:	7808      	ldrb	r0, [r1, #0]
 800dddc:	f7ff ff8c 	bl	800dcf8 <__hexdig_fun>
 800dde0:	1e43      	subs	r3, r0, #1
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	2b18      	cmp	r3, #24
 800dde6:	d830      	bhi.n	800de4a <__gethex+0x126>
 800dde8:	f1a0 0210 	sub.w	r2, r0, #16
 800ddec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ddf0:	f7ff ff82 	bl	800dcf8 <__hexdig_fun>
 800ddf4:	f100 3cff 	add.w	ip, r0, #4294967295
 800ddf8:	fa5f fc8c 	uxtb.w	ip, ip
 800ddfc:	f1bc 0f18 	cmp.w	ip, #24
 800de00:	f04f 030a 	mov.w	r3, #10
 800de04:	d91e      	bls.n	800de44 <__gethex+0x120>
 800de06:	b104      	cbz	r4, 800de0a <__gethex+0xe6>
 800de08:	4252      	negs	r2, r2
 800de0a:	4417      	add	r7, r2
 800de0c:	f8ca 1000 	str.w	r1, [sl]
 800de10:	b1ed      	cbz	r5, 800de4e <__gethex+0x12a>
 800de12:	f1bb 0f00 	cmp.w	fp, #0
 800de16:	bf0c      	ite	eq
 800de18:	2506      	moveq	r5, #6
 800de1a:	2500      	movne	r5, #0
 800de1c:	4628      	mov	r0, r5
 800de1e:	b005      	add	sp, #20
 800de20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de24:	2500      	movs	r5, #0
 800de26:	462c      	mov	r4, r5
 800de28:	e7b0      	b.n	800dd8c <__gethex+0x68>
 800de2a:	2c00      	cmp	r4, #0
 800de2c:	d1c7      	bne.n	800ddbe <__gethex+0x9a>
 800de2e:	4627      	mov	r7, r4
 800de30:	e7c7      	b.n	800ddc2 <__gethex+0x9e>
 800de32:	464e      	mov	r6, r9
 800de34:	462f      	mov	r7, r5
 800de36:	2501      	movs	r5, #1
 800de38:	e7c3      	b.n	800ddc2 <__gethex+0x9e>
 800de3a:	2400      	movs	r4, #0
 800de3c:	1cb1      	adds	r1, r6, #2
 800de3e:	e7cc      	b.n	800ddda <__gethex+0xb6>
 800de40:	2401      	movs	r4, #1
 800de42:	e7fb      	b.n	800de3c <__gethex+0x118>
 800de44:	fb03 0002 	mla	r0, r3, r2, r0
 800de48:	e7ce      	b.n	800dde8 <__gethex+0xc4>
 800de4a:	4631      	mov	r1, r6
 800de4c:	e7de      	b.n	800de0c <__gethex+0xe8>
 800de4e:	eba6 0309 	sub.w	r3, r6, r9
 800de52:	3b01      	subs	r3, #1
 800de54:	4629      	mov	r1, r5
 800de56:	2b07      	cmp	r3, #7
 800de58:	dc0a      	bgt.n	800de70 <__gethex+0x14c>
 800de5a:	9801      	ldr	r0, [sp, #4]
 800de5c:	f000 faf4 	bl	800e448 <_Balloc>
 800de60:	4604      	mov	r4, r0
 800de62:	b940      	cbnz	r0, 800de76 <__gethex+0x152>
 800de64:	4b5c      	ldr	r3, [pc, #368]	@ (800dfd8 <__gethex+0x2b4>)
 800de66:	4602      	mov	r2, r0
 800de68:	21e4      	movs	r1, #228	@ 0xe4
 800de6a:	485c      	ldr	r0, [pc, #368]	@ (800dfdc <__gethex+0x2b8>)
 800de6c:	f001 fb5c 	bl	800f528 <__assert_func>
 800de70:	3101      	adds	r1, #1
 800de72:	105b      	asrs	r3, r3, #1
 800de74:	e7ef      	b.n	800de56 <__gethex+0x132>
 800de76:	f100 0a14 	add.w	sl, r0, #20
 800de7a:	2300      	movs	r3, #0
 800de7c:	4655      	mov	r5, sl
 800de7e:	469b      	mov	fp, r3
 800de80:	45b1      	cmp	r9, r6
 800de82:	d337      	bcc.n	800def4 <__gethex+0x1d0>
 800de84:	f845 bb04 	str.w	fp, [r5], #4
 800de88:	eba5 050a 	sub.w	r5, r5, sl
 800de8c:	10ad      	asrs	r5, r5, #2
 800de8e:	6125      	str	r5, [r4, #16]
 800de90:	4658      	mov	r0, fp
 800de92:	f000 fbcb 	bl	800e62c <__hi0bits>
 800de96:	016d      	lsls	r5, r5, #5
 800de98:	f8d8 6000 	ldr.w	r6, [r8]
 800de9c:	1a2d      	subs	r5, r5, r0
 800de9e:	42b5      	cmp	r5, r6
 800dea0:	dd54      	ble.n	800df4c <__gethex+0x228>
 800dea2:	1bad      	subs	r5, r5, r6
 800dea4:	4629      	mov	r1, r5
 800dea6:	4620      	mov	r0, r4
 800dea8:	f000 ff57 	bl	800ed5a <__any_on>
 800deac:	4681      	mov	r9, r0
 800deae:	b178      	cbz	r0, 800ded0 <__gethex+0x1ac>
 800deb0:	1e6b      	subs	r3, r5, #1
 800deb2:	1159      	asrs	r1, r3, #5
 800deb4:	f003 021f 	and.w	r2, r3, #31
 800deb8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800debc:	f04f 0901 	mov.w	r9, #1
 800dec0:	fa09 f202 	lsl.w	r2, r9, r2
 800dec4:	420a      	tst	r2, r1
 800dec6:	d003      	beq.n	800ded0 <__gethex+0x1ac>
 800dec8:	454b      	cmp	r3, r9
 800deca:	dc36      	bgt.n	800df3a <__gethex+0x216>
 800decc:	f04f 0902 	mov.w	r9, #2
 800ded0:	4629      	mov	r1, r5
 800ded2:	4620      	mov	r0, r4
 800ded4:	f7ff febe 	bl	800dc54 <rshift>
 800ded8:	442f      	add	r7, r5
 800deda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dede:	42bb      	cmp	r3, r7
 800dee0:	da42      	bge.n	800df68 <__gethex+0x244>
 800dee2:	9801      	ldr	r0, [sp, #4]
 800dee4:	4621      	mov	r1, r4
 800dee6:	f000 faef 	bl	800e4c8 <_Bfree>
 800deea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800deec:	2300      	movs	r3, #0
 800deee:	6013      	str	r3, [r2, #0]
 800def0:	25a3      	movs	r5, #163	@ 0xa3
 800def2:	e793      	b.n	800de1c <__gethex+0xf8>
 800def4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800def8:	2a2e      	cmp	r2, #46	@ 0x2e
 800defa:	d012      	beq.n	800df22 <__gethex+0x1fe>
 800defc:	2b20      	cmp	r3, #32
 800defe:	d104      	bne.n	800df0a <__gethex+0x1e6>
 800df00:	f845 bb04 	str.w	fp, [r5], #4
 800df04:	f04f 0b00 	mov.w	fp, #0
 800df08:	465b      	mov	r3, fp
 800df0a:	7830      	ldrb	r0, [r6, #0]
 800df0c:	9303      	str	r3, [sp, #12]
 800df0e:	f7ff fef3 	bl	800dcf8 <__hexdig_fun>
 800df12:	9b03      	ldr	r3, [sp, #12]
 800df14:	f000 000f 	and.w	r0, r0, #15
 800df18:	4098      	lsls	r0, r3
 800df1a:	ea4b 0b00 	orr.w	fp, fp, r0
 800df1e:	3304      	adds	r3, #4
 800df20:	e7ae      	b.n	800de80 <__gethex+0x15c>
 800df22:	45b1      	cmp	r9, r6
 800df24:	d8ea      	bhi.n	800defc <__gethex+0x1d8>
 800df26:	492b      	ldr	r1, [pc, #172]	@ (800dfd4 <__gethex+0x2b0>)
 800df28:	9303      	str	r3, [sp, #12]
 800df2a:	2201      	movs	r2, #1
 800df2c:	4630      	mov	r0, r6
 800df2e:	f7ff fd37 	bl	800d9a0 <strncmp>
 800df32:	9b03      	ldr	r3, [sp, #12]
 800df34:	2800      	cmp	r0, #0
 800df36:	d1e1      	bne.n	800defc <__gethex+0x1d8>
 800df38:	e7a2      	b.n	800de80 <__gethex+0x15c>
 800df3a:	1ea9      	subs	r1, r5, #2
 800df3c:	4620      	mov	r0, r4
 800df3e:	f000 ff0c 	bl	800ed5a <__any_on>
 800df42:	2800      	cmp	r0, #0
 800df44:	d0c2      	beq.n	800decc <__gethex+0x1a8>
 800df46:	f04f 0903 	mov.w	r9, #3
 800df4a:	e7c1      	b.n	800ded0 <__gethex+0x1ac>
 800df4c:	da09      	bge.n	800df62 <__gethex+0x23e>
 800df4e:	1b75      	subs	r5, r6, r5
 800df50:	4621      	mov	r1, r4
 800df52:	9801      	ldr	r0, [sp, #4]
 800df54:	462a      	mov	r2, r5
 800df56:	f000 fcc7 	bl	800e8e8 <__lshift>
 800df5a:	1b7f      	subs	r7, r7, r5
 800df5c:	4604      	mov	r4, r0
 800df5e:	f100 0a14 	add.w	sl, r0, #20
 800df62:	f04f 0900 	mov.w	r9, #0
 800df66:	e7b8      	b.n	800deda <__gethex+0x1b6>
 800df68:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800df6c:	42bd      	cmp	r5, r7
 800df6e:	dd6f      	ble.n	800e050 <__gethex+0x32c>
 800df70:	1bed      	subs	r5, r5, r7
 800df72:	42ae      	cmp	r6, r5
 800df74:	dc34      	bgt.n	800dfe0 <__gethex+0x2bc>
 800df76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df7a:	2b02      	cmp	r3, #2
 800df7c:	d022      	beq.n	800dfc4 <__gethex+0x2a0>
 800df7e:	2b03      	cmp	r3, #3
 800df80:	d024      	beq.n	800dfcc <__gethex+0x2a8>
 800df82:	2b01      	cmp	r3, #1
 800df84:	d115      	bne.n	800dfb2 <__gethex+0x28e>
 800df86:	42ae      	cmp	r6, r5
 800df88:	d113      	bne.n	800dfb2 <__gethex+0x28e>
 800df8a:	2e01      	cmp	r6, #1
 800df8c:	d10b      	bne.n	800dfa6 <__gethex+0x282>
 800df8e:	9a02      	ldr	r2, [sp, #8]
 800df90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800df94:	6013      	str	r3, [r2, #0]
 800df96:	2301      	movs	r3, #1
 800df98:	6123      	str	r3, [r4, #16]
 800df9a:	f8ca 3000 	str.w	r3, [sl]
 800df9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dfa0:	2562      	movs	r5, #98	@ 0x62
 800dfa2:	601c      	str	r4, [r3, #0]
 800dfa4:	e73a      	b.n	800de1c <__gethex+0xf8>
 800dfa6:	1e71      	subs	r1, r6, #1
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	f000 fed6 	bl	800ed5a <__any_on>
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	d1ed      	bne.n	800df8e <__gethex+0x26a>
 800dfb2:	9801      	ldr	r0, [sp, #4]
 800dfb4:	4621      	mov	r1, r4
 800dfb6:	f000 fa87 	bl	800e4c8 <_Bfree>
 800dfba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	6013      	str	r3, [r2, #0]
 800dfc0:	2550      	movs	r5, #80	@ 0x50
 800dfc2:	e72b      	b.n	800de1c <__gethex+0xf8>
 800dfc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d1f3      	bne.n	800dfb2 <__gethex+0x28e>
 800dfca:	e7e0      	b.n	800df8e <__gethex+0x26a>
 800dfcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d1dd      	bne.n	800df8e <__gethex+0x26a>
 800dfd2:	e7ee      	b.n	800dfb2 <__gethex+0x28e>
 800dfd4:	080102e0 	.word	0x080102e0
 800dfd8:	080102f6 	.word	0x080102f6
 800dfdc:	08010307 	.word	0x08010307
 800dfe0:	1e6f      	subs	r7, r5, #1
 800dfe2:	f1b9 0f00 	cmp.w	r9, #0
 800dfe6:	d130      	bne.n	800e04a <__gethex+0x326>
 800dfe8:	b127      	cbz	r7, 800dff4 <__gethex+0x2d0>
 800dfea:	4639      	mov	r1, r7
 800dfec:	4620      	mov	r0, r4
 800dfee:	f000 feb4 	bl	800ed5a <__any_on>
 800dff2:	4681      	mov	r9, r0
 800dff4:	117a      	asrs	r2, r7, #5
 800dff6:	2301      	movs	r3, #1
 800dff8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dffc:	f007 071f 	and.w	r7, r7, #31
 800e000:	40bb      	lsls	r3, r7
 800e002:	4213      	tst	r3, r2
 800e004:	4629      	mov	r1, r5
 800e006:	4620      	mov	r0, r4
 800e008:	bf18      	it	ne
 800e00a:	f049 0902 	orrne.w	r9, r9, #2
 800e00e:	f7ff fe21 	bl	800dc54 <rshift>
 800e012:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e016:	1b76      	subs	r6, r6, r5
 800e018:	2502      	movs	r5, #2
 800e01a:	f1b9 0f00 	cmp.w	r9, #0
 800e01e:	d047      	beq.n	800e0b0 <__gethex+0x38c>
 800e020:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e024:	2b02      	cmp	r3, #2
 800e026:	d015      	beq.n	800e054 <__gethex+0x330>
 800e028:	2b03      	cmp	r3, #3
 800e02a:	d017      	beq.n	800e05c <__gethex+0x338>
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d109      	bne.n	800e044 <__gethex+0x320>
 800e030:	f019 0f02 	tst.w	r9, #2
 800e034:	d006      	beq.n	800e044 <__gethex+0x320>
 800e036:	f8da 3000 	ldr.w	r3, [sl]
 800e03a:	ea49 0903 	orr.w	r9, r9, r3
 800e03e:	f019 0f01 	tst.w	r9, #1
 800e042:	d10e      	bne.n	800e062 <__gethex+0x33e>
 800e044:	f045 0510 	orr.w	r5, r5, #16
 800e048:	e032      	b.n	800e0b0 <__gethex+0x38c>
 800e04a:	f04f 0901 	mov.w	r9, #1
 800e04e:	e7d1      	b.n	800dff4 <__gethex+0x2d0>
 800e050:	2501      	movs	r5, #1
 800e052:	e7e2      	b.n	800e01a <__gethex+0x2f6>
 800e054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e056:	f1c3 0301 	rsb	r3, r3, #1
 800e05a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e05c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d0f0      	beq.n	800e044 <__gethex+0x320>
 800e062:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e066:	f104 0314 	add.w	r3, r4, #20
 800e06a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e06e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e072:	f04f 0c00 	mov.w	ip, #0
 800e076:	4618      	mov	r0, r3
 800e078:	f853 2b04 	ldr.w	r2, [r3], #4
 800e07c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e080:	d01b      	beq.n	800e0ba <__gethex+0x396>
 800e082:	3201      	adds	r2, #1
 800e084:	6002      	str	r2, [r0, #0]
 800e086:	2d02      	cmp	r5, #2
 800e088:	f104 0314 	add.w	r3, r4, #20
 800e08c:	d13c      	bne.n	800e108 <__gethex+0x3e4>
 800e08e:	f8d8 2000 	ldr.w	r2, [r8]
 800e092:	3a01      	subs	r2, #1
 800e094:	42b2      	cmp	r2, r6
 800e096:	d109      	bne.n	800e0ac <__gethex+0x388>
 800e098:	1171      	asrs	r1, r6, #5
 800e09a:	2201      	movs	r2, #1
 800e09c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e0a0:	f006 061f 	and.w	r6, r6, #31
 800e0a4:	fa02 f606 	lsl.w	r6, r2, r6
 800e0a8:	421e      	tst	r6, r3
 800e0aa:	d13a      	bne.n	800e122 <__gethex+0x3fe>
 800e0ac:	f045 0520 	orr.w	r5, r5, #32
 800e0b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0b2:	601c      	str	r4, [r3, #0]
 800e0b4:	9b02      	ldr	r3, [sp, #8]
 800e0b6:	601f      	str	r7, [r3, #0]
 800e0b8:	e6b0      	b.n	800de1c <__gethex+0xf8>
 800e0ba:	4299      	cmp	r1, r3
 800e0bc:	f843 cc04 	str.w	ip, [r3, #-4]
 800e0c0:	d8d9      	bhi.n	800e076 <__gethex+0x352>
 800e0c2:	68a3      	ldr	r3, [r4, #8]
 800e0c4:	459b      	cmp	fp, r3
 800e0c6:	db17      	blt.n	800e0f8 <__gethex+0x3d4>
 800e0c8:	6861      	ldr	r1, [r4, #4]
 800e0ca:	9801      	ldr	r0, [sp, #4]
 800e0cc:	3101      	adds	r1, #1
 800e0ce:	f000 f9bb 	bl	800e448 <_Balloc>
 800e0d2:	4681      	mov	r9, r0
 800e0d4:	b918      	cbnz	r0, 800e0de <__gethex+0x3ba>
 800e0d6:	4b1a      	ldr	r3, [pc, #104]	@ (800e140 <__gethex+0x41c>)
 800e0d8:	4602      	mov	r2, r0
 800e0da:	2184      	movs	r1, #132	@ 0x84
 800e0dc:	e6c5      	b.n	800de6a <__gethex+0x146>
 800e0de:	6922      	ldr	r2, [r4, #16]
 800e0e0:	3202      	adds	r2, #2
 800e0e2:	f104 010c 	add.w	r1, r4, #12
 800e0e6:	0092      	lsls	r2, r2, #2
 800e0e8:	300c      	adds	r0, #12
 800e0ea:	f7ff fd50 	bl	800db8e <memcpy>
 800e0ee:	4621      	mov	r1, r4
 800e0f0:	9801      	ldr	r0, [sp, #4]
 800e0f2:	f000 f9e9 	bl	800e4c8 <_Bfree>
 800e0f6:	464c      	mov	r4, r9
 800e0f8:	6923      	ldr	r3, [r4, #16]
 800e0fa:	1c5a      	adds	r2, r3, #1
 800e0fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e100:	6122      	str	r2, [r4, #16]
 800e102:	2201      	movs	r2, #1
 800e104:	615a      	str	r2, [r3, #20]
 800e106:	e7be      	b.n	800e086 <__gethex+0x362>
 800e108:	6922      	ldr	r2, [r4, #16]
 800e10a:	455a      	cmp	r2, fp
 800e10c:	dd0b      	ble.n	800e126 <__gethex+0x402>
 800e10e:	2101      	movs	r1, #1
 800e110:	4620      	mov	r0, r4
 800e112:	f7ff fd9f 	bl	800dc54 <rshift>
 800e116:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e11a:	3701      	adds	r7, #1
 800e11c:	42bb      	cmp	r3, r7
 800e11e:	f6ff aee0 	blt.w	800dee2 <__gethex+0x1be>
 800e122:	2501      	movs	r5, #1
 800e124:	e7c2      	b.n	800e0ac <__gethex+0x388>
 800e126:	f016 061f 	ands.w	r6, r6, #31
 800e12a:	d0fa      	beq.n	800e122 <__gethex+0x3fe>
 800e12c:	4453      	add	r3, sl
 800e12e:	f1c6 0620 	rsb	r6, r6, #32
 800e132:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e136:	f000 fa79 	bl	800e62c <__hi0bits>
 800e13a:	42b0      	cmp	r0, r6
 800e13c:	dbe7      	blt.n	800e10e <__gethex+0x3ea>
 800e13e:	e7f0      	b.n	800e122 <__gethex+0x3fe>
 800e140:	080102f6 	.word	0x080102f6

0800e144 <L_shift>:
 800e144:	f1c2 0208 	rsb	r2, r2, #8
 800e148:	0092      	lsls	r2, r2, #2
 800e14a:	b570      	push	{r4, r5, r6, lr}
 800e14c:	f1c2 0620 	rsb	r6, r2, #32
 800e150:	6843      	ldr	r3, [r0, #4]
 800e152:	6804      	ldr	r4, [r0, #0]
 800e154:	fa03 f506 	lsl.w	r5, r3, r6
 800e158:	432c      	orrs	r4, r5
 800e15a:	40d3      	lsrs	r3, r2
 800e15c:	6004      	str	r4, [r0, #0]
 800e15e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e162:	4288      	cmp	r0, r1
 800e164:	d3f4      	bcc.n	800e150 <L_shift+0xc>
 800e166:	bd70      	pop	{r4, r5, r6, pc}

0800e168 <__match>:
 800e168:	b530      	push	{r4, r5, lr}
 800e16a:	6803      	ldr	r3, [r0, #0]
 800e16c:	3301      	adds	r3, #1
 800e16e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e172:	b914      	cbnz	r4, 800e17a <__match+0x12>
 800e174:	6003      	str	r3, [r0, #0]
 800e176:	2001      	movs	r0, #1
 800e178:	bd30      	pop	{r4, r5, pc}
 800e17a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e17e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e182:	2d19      	cmp	r5, #25
 800e184:	bf98      	it	ls
 800e186:	3220      	addls	r2, #32
 800e188:	42a2      	cmp	r2, r4
 800e18a:	d0f0      	beq.n	800e16e <__match+0x6>
 800e18c:	2000      	movs	r0, #0
 800e18e:	e7f3      	b.n	800e178 <__match+0x10>

0800e190 <__hexnan>:
 800e190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e194:	680b      	ldr	r3, [r1, #0]
 800e196:	6801      	ldr	r1, [r0, #0]
 800e198:	115e      	asrs	r6, r3, #5
 800e19a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e19e:	f013 031f 	ands.w	r3, r3, #31
 800e1a2:	b087      	sub	sp, #28
 800e1a4:	bf18      	it	ne
 800e1a6:	3604      	addne	r6, #4
 800e1a8:	2500      	movs	r5, #0
 800e1aa:	1f37      	subs	r7, r6, #4
 800e1ac:	4682      	mov	sl, r0
 800e1ae:	4690      	mov	r8, r2
 800e1b0:	9301      	str	r3, [sp, #4]
 800e1b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800e1b6:	46b9      	mov	r9, r7
 800e1b8:	463c      	mov	r4, r7
 800e1ba:	9502      	str	r5, [sp, #8]
 800e1bc:	46ab      	mov	fp, r5
 800e1be:	784a      	ldrb	r2, [r1, #1]
 800e1c0:	1c4b      	adds	r3, r1, #1
 800e1c2:	9303      	str	r3, [sp, #12]
 800e1c4:	b342      	cbz	r2, 800e218 <__hexnan+0x88>
 800e1c6:	4610      	mov	r0, r2
 800e1c8:	9105      	str	r1, [sp, #20]
 800e1ca:	9204      	str	r2, [sp, #16]
 800e1cc:	f7ff fd94 	bl	800dcf8 <__hexdig_fun>
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	d151      	bne.n	800e278 <__hexnan+0xe8>
 800e1d4:	9a04      	ldr	r2, [sp, #16]
 800e1d6:	9905      	ldr	r1, [sp, #20]
 800e1d8:	2a20      	cmp	r2, #32
 800e1da:	d818      	bhi.n	800e20e <__hexnan+0x7e>
 800e1dc:	9b02      	ldr	r3, [sp, #8]
 800e1de:	459b      	cmp	fp, r3
 800e1e0:	dd13      	ble.n	800e20a <__hexnan+0x7a>
 800e1e2:	454c      	cmp	r4, r9
 800e1e4:	d206      	bcs.n	800e1f4 <__hexnan+0x64>
 800e1e6:	2d07      	cmp	r5, #7
 800e1e8:	dc04      	bgt.n	800e1f4 <__hexnan+0x64>
 800e1ea:	462a      	mov	r2, r5
 800e1ec:	4649      	mov	r1, r9
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	f7ff ffa8 	bl	800e144 <L_shift>
 800e1f4:	4544      	cmp	r4, r8
 800e1f6:	d952      	bls.n	800e29e <__hexnan+0x10e>
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	f1a4 0904 	sub.w	r9, r4, #4
 800e1fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800e202:	f8cd b008 	str.w	fp, [sp, #8]
 800e206:	464c      	mov	r4, r9
 800e208:	461d      	mov	r5, r3
 800e20a:	9903      	ldr	r1, [sp, #12]
 800e20c:	e7d7      	b.n	800e1be <__hexnan+0x2e>
 800e20e:	2a29      	cmp	r2, #41	@ 0x29
 800e210:	d157      	bne.n	800e2c2 <__hexnan+0x132>
 800e212:	3102      	adds	r1, #2
 800e214:	f8ca 1000 	str.w	r1, [sl]
 800e218:	f1bb 0f00 	cmp.w	fp, #0
 800e21c:	d051      	beq.n	800e2c2 <__hexnan+0x132>
 800e21e:	454c      	cmp	r4, r9
 800e220:	d206      	bcs.n	800e230 <__hexnan+0xa0>
 800e222:	2d07      	cmp	r5, #7
 800e224:	dc04      	bgt.n	800e230 <__hexnan+0xa0>
 800e226:	462a      	mov	r2, r5
 800e228:	4649      	mov	r1, r9
 800e22a:	4620      	mov	r0, r4
 800e22c:	f7ff ff8a 	bl	800e144 <L_shift>
 800e230:	4544      	cmp	r4, r8
 800e232:	d936      	bls.n	800e2a2 <__hexnan+0x112>
 800e234:	f1a8 0204 	sub.w	r2, r8, #4
 800e238:	4623      	mov	r3, r4
 800e23a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e23e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e242:	429f      	cmp	r7, r3
 800e244:	d2f9      	bcs.n	800e23a <__hexnan+0xaa>
 800e246:	1b3b      	subs	r3, r7, r4
 800e248:	f023 0303 	bic.w	r3, r3, #3
 800e24c:	3304      	adds	r3, #4
 800e24e:	3401      	adds	r4, #1
 800e250:	3e03      	subs	r6, #3
 800e252:	42b4      	cmp	r4, r6
 800e254:	bf88      	it	hi
 800e256:	2304      	movhi	r3, #4
 800e258:	4443      	add	r3, r8
 800e25a:	2200      	movs	r2, #0
 800e25c:	f843 2b04 	str.w	r2, [r3], #4
 800e260:	429f      	cmp	r7, r3
 800e262:	d2fb      	bcs.n	800e25c <__hexnan+0xcc>
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	b91b      	cbnz	r3, 800e270 <__hexnan+0xe0>
 800e268:	4547      	cmp	r7, r8
 800e26a:	d128      	bne.n	800e2be <__hexnan+0x12e>
 800e26c:	2301      	movs	r3, #1
 800e26e:	603b      	str	r3, [r7, #0]
 800e270:	2005      	movs	r0, #5
 800e272:	b007      	add	sp, #28
 800e274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e278:	3501      	adds	r5, #1
 800e27a:	2d08      	cmp	r5, #8
 800e27c:	f10b 0b01 	add.w	fp, fp, #1
 800e280:	dd06      	ble.n	800e290 <__hexnan+0x100>
 800e282:	4544      	cmp	r4, r8
 800e284:	d9c1      	bls.n	800e20a <__hexnan+0x7a>
 800e286:	2300      	movs	r3, #0
 800e288:	f844 3c04 	str.w	r3, [r4, #-4]
 800e28c:	2501      	movs	r5, #1
 800e28e:	3c04      	subs	r4, #4
 800e290:	6822      	ldr	r2, [r4, #0]
 800e292:	f000 000f 	and.w	r0, r0, #15
 800e296:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e29a:	6020      	str	r0, [r4, #0]
 800e29c:	e7b5      	b.n	800e20a <__hexnan+0x7a>
 800e29e:	2508      	movs	r5, #8
 800e2a0:	e7b3      	b.n	800e20a <__hexnan+0x7a>
 800e2a2:	9b01      	ldr	r3, [sp, #4]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d0dd      	beq.n	800e264 <__hexnan+0xd4>
 800e2a8:	f1c3 0320 	rsb	r3, r3, #32
 800e2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e2b0:	40da      	lsrs	r2, r3
 800e2b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e2b6:	4013      	ands	r3, r2
 800e2b8:	f846 3c04 	str.w	r3, [r6, #-4]
 800e2bc:	e7d2      	b.n	800e264 <__hexnan+0xd4>
 800e2be:	3f04      	subs	r7, #4
 800e2c0:	e7d0      	b.n	800e264 <__hexnan+0xd4>
 800e2c2:	2004      	movs	r0, #4
 800e2c4:	e7d5      	b.n	800e272 <__hexnan+0xe2>
	...

0800e2c8 <sbrk_aligned>:
 800e2c8:	b570      	push	{r4, r5, r6, lr}
 800e2ca:	4e0f      	ldr	r6, [pc, #60]	@ (800e308 <sbrk_aligned+0x40>)
 800e2cc:	460c      	mov	r4, r1
 800e2ce:	6831      	ldr	r1, [r6, #0]
 800e2d0:	4605      	mov	r5, r0
 800e2d2:	b911      	cbnz	r1, 800e2da <sbrk_aligned+0x12>
 800e2d4:	f001 f918 	bl	800f508 <_sbrk_r>
 800e2d8:	6030      	str	r0, [r6, #0]
 800e2da:	4621      	mov	r1, r4
 800e2dc:	4628      	mov	r0, r5
 800e2de:	f001 f913 	bl	800f508 <_sbrk_r>
 800e2e2:	1c43      	adds	r3, r0, #1
 800e2e4:	d103      	bne.n	800e2ee <sbrk_aligned+0x26>
 800e2e6:	f04f 34ff 	mov.w	r4, #4294967295
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	bd70      	pop	{r4, r5, r6, pc}
 800e2ee:	1cc4      	adds	r4, r0, #3
 800e2f0:	f024 0403 	bic.w	r4, r4, #3
 800e2f4:	42a0      	cmp	r0, r4
 800e2f6:	d0f8      	beq.n	800e2ea <sbrk_aligned+0x22>
 800e2f8:	1a21      	subs	r1, r4, r0
 800e2fa:	4628      	mov	r0, r5
 800e2fc:	f001 f904 	bl	800f508 <_sbrk_r>
 800e300:	3001      	adds	r0, #1
 800e302:	d1f2      	bne.n	800e2ea <sbrk_aligned+0x22>
 800e304:	e7ef      	b.n	800e2e6 <sbrk_aligned+0x1e>
 800e306:	bf00      	nop
 800e308:	20009100 	.word	0x20009100

0800e30c <_malloc_r>:
 800e30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e310:	1ccd      	adds	r5, r1, #3
 800e312:	f025 0503 	bic.w	r5, r5, #3
 800e316:	3508      	adds	r5, #8
 800e318:	2d0c      	cmp	r5, #12
 800e31a:	bf38      	it	cc
 800e31c:	250c      	movcc	r5, #12
 800e31e:	2d00      	cmp	r5, #0
 800e320:	4606      	mov	r6, r0
 800e322:	db01      	blt.n	800e328 <_malloc_r+0x1c>
 800e324:	42a9      	cmp	r1, r5
 800e326:	d904      	bls.n	800e332 <_malloc_r+0x26>
 800e328:	230c      	movs	r3, #12
 800e32a:	6033      	str	r3, [r6, #0]
 800e32c:	2000      	movs	r0, #0
 800e32e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e332:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e408 <_malloc_r+0xfc>
 800e336:	f000 f87b 	bl	800e430 <__malloc_lock>
 800e33a:	f8d8 3000 	ldr.w	r3, [r8]
 800e33e:	461c      	mov	r4, r3
 800e340:	bb44      	cbnz	r4, 800e394 <_malloc_r+0x88>
 800e342:	4629      	mov	r1, r5
 800e344:	4630      	mov	r0, r6
 800e346:	f7ff ffbf 	bl	800e2c8 <sbrk_aligned>
 800e34a:	1c43      	adds	r3, r0, #1
 800e34c:	4604      	mov	r4, r0
 800e34e:	d158      	bne.n	800e402 <_malloc_r+0xf6>
 800e350:	f8d8 4000 	ldr.w	r4, [r8]
 800e354:	4627      	mov	r7, r4
 800e356:	2f00      	cmp	r7, #0
 800e358:	d143      	bne.n	800e3e2 <_malloc_r+0xd6>
 800e35a:	2c00      	cmp	r4, #0
 800e35c:	d04b      	beq.n	800e3f6 <_malloc_r+0xea>
 800e35e:	6823      	ldr	r3, [r4, #0]
 800e360:	4639      	mov	r1, r7
 800e362:	4630      	mov	r0, r6
 800e364:	eb04 0903 	add.w	r9, r4, r3
 800e368:	f001 f8ce 	bl	800f508 <_sbrk_r>
 800e36c:	4581      	cmp	r9, r0
 800e36e:	d142      	bne.n	800e3f6 <_malloc_r+0xea>
 800e370:	6821      	ldr	r1, [r4, #0]
 800e372:	1a6d      	subs	r5, r5, r1
 800e374:	4629      	mov	r1, r5
 800e376:	4630      	mov	r0, r6
 800e378:	f7ff ffa6 	bl	800e2c8 <sbrk_aligned>
 800e37c:	3001      	adds	r0, #1
 800e37e:	d03a      	beq.n	800e3f6 <_malloc_r+0xea>
 800e380:	6823      	ldr	r3, [r4, #0]
 800e382:	442b      	add	r3, r5
 800e384:	6023      	str	r3, [r4, #0]
 800e386:	f8d8 3000 	ldr.w	r3, [r8]
 800e38a:	685a      	ldr	r2, [r3, #4]
 800e38c:	bb62      	cbnz	r2, 800e3e8 <_malloc_r+0xdc>
 800e38e:	f8c8 7000 	str.w	r7, [r8]
 800e392:	e00f      	b.n	800e3b4 <_malloc_r+0xa8>
 800e394:	6822      	ldr	r2, [r4, #0]
 800e396:	1b52      	subs	r2, r2, r5
 800e398:	d420      	bmi.n	800e3dc <_malloc_r+0xd0>
 800e39a:	2a0b      	cmp	r2, #11
 800e39c:	d917      	bls.n	800e3ce <_malloc_r+0xc2>
 800e39e:	1961      	adds	r1, r4, r5
 800e3a0:	42a3      	cmp	r3, r4
 800e3a2:	6025      	str	r5, [r4, #0]
 800e3a4:	bf18      	it	ne
 800e3a6:	6059      	strne	r1, [r3, #4]
 800e3a8:	6863      	ldr	r3, [r4, #4]
 800e3aa:	bf08      	it	eq
 800e3ac:	f8c8 1000 	streq.w	r1, [r8]
 800e3b0:	5162      	str	r2, [r4, r5]
 800e3b2:	604b      	str	r3, [r1, #4]
 800e3b4:	4630      	mov	r0, r6
 800e3b6:	f000 f841 	bl	800e43c <__malloc_unlock>
 800e3ba:	f104 000b 	add.w	r0, r4, #11
 800e3be:	1d23      	adds	r3, r4, #4
 800e3c0:	f020 0007 	bic.w	r0, r0, #7
 800e3c4:	1ac2      	subs	r2, r0, r3
 800e3c6:	bf1c      	itt	ne
 800e3c8:	1a1b      	subne	r3, r3, r0
 800e3ca:	50a3      	strne	r3, [r4, r2]
 800e3cc:	e7af      	b.n	800e32e <_malloc_r+0x22>
 800e3ce:	6862      	ldr	r2, [r4, #4]
 800e3d0:	42a3      	cmp	r3, r4
 800e3d2:	bf0c      	ite	eq
 800e3d4:	f8c8 2000 	streq.w	r2, [r8]
 800e3d8:	605a      	strne	r2, [r3, #4]
 800e3da:	e7eb      	b.n	800e3b4 <_malloc_r+0xa8>
 800e3dc:	4623      	mov	r3, r4
 800e3de:	6864      	ldr	r4, [r4, #4]
 800e3e0:	e7ae      	b.n	800e340 <_malloc_r+0x34>
 800e3e2:	463c      	mov	r4, r7
 800e3e4:	687f      	ldr	r7, [r7, #4]
 800e3e6:	e7b6      	b.n	800e356 <_malloc_r+0x4a>
 800e3e8:	461a      	mov	r2, r3
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	42a3      	cmp	r3, r4
 800e3ee:	d1fb      	bne.n	800e3e8 <_malloc_r+0xdc>
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	6053      	str	r3, [r2, #4]
 800e3f4:	e7de      	b.n	800e3b4 <_malloc_r+0xa8>
 800e3f6:	230c      	movs	r3, #12
 800e3f8:	6033      	str	r3, [r6, #0]
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	f000 f81e 	bl	800e43c <__malloc_unlock>
 800e400:	e794      	b.n	800e32c <_malloc_r+0x20>
 800e402:	6005      	str	r5, [r0, #0]
 800e404:	e7d6      	b.n	800e3b4 <_malloc_r+0xa8>
 800e406:	bf00      	nop
 800e408:	20009104 	.word	0x20009104

0800e40c <__ascii_mbtowc>:
 800e40c:	b082      	sub	sp, #8
 800e40e:	b901      	cbnz	r1, 800e412 <__ascii_mbtowc+0x6>
 800e410:	a901      	add	r1, sp, #4
 800e412:	b142      	cbz	r2, 800e426 <__ascii_mbtowc+0x1a>
 800e414:	b14b      	cbz	r3, 800e42a <__ascii_mbtowc+0x1e>
 800e416:	7813      	ldrb	r3, [r2, #0]
 800e418:	600b      	str	r3, [r1, #0]
 800e41a:	7812      	ldrb	r2, [r2, #0]
 800e41c:	1e10      	subs	r0, r2, #0
 800e41e:	bf18      	it	ne
 800e420:	2001      	movne	r0, #1
 800e422:	b002      	add	sp, #8
 800e424:	4770      	bx	lr
 800e426:	4610      	mov	r0, r2
 800e428:	e7fb      	b.n	800e422 <__ascii_mbtowc+0x16>
 800e42a:	f06f 0001 	mvn.w	r0, #1
 800e42e:	e7f8      	b.n	800e422 <__ascii_mbtowc+0x16>

0800e430 <__malloc_lock>:
 800e430:	4801      	ldr	r0, [pc, #4]	@ (800e438 <__malloc_lock+0x8>)
 800e432:	f7ff bbaa 	b.w	800db8a <__retarget_lock_acquire_recursive>
 800e436:	bf00      	nop
 800e438:	200090fc 	.word	0x200090fc

0800e43c <__malloc_unlock>:
 800e43c:	4801      	ldr	r0, [pc, #4]	@ (800e444 <__malloc_unlock+0x8>)
 800e43e:	f7ff bba5 	b.w	800db8c <__retarget_lock_release_recursive>
 800e442:	bf00      	nop
 800e444:	200090fc 	.word	0x200090fc

0800e448 <_Balloc>:
 800e448:	b570      	push	{r4, r5, r6, lr}
 800e44a:	69c6      	ldr	r6, [r0, #28]
 800e44c:	4604      	mov	r4, r0
 800e44e:	460d      	mov	r5, r1
 800e450:	b976      	cbnz	r6, 800e470 <_Balloc+0x28>
 800e452:	2010      	movs	r0, #16
 800e454:	f001 f89a 	bl	800f58c <malloc>
 800e458:	4602      	mov	r2, r0
 800e45a:	61e0      	str	r0, [r4, #28]
 800e45c:	b920      	cbnz	r0, 800e468 <_Balloc+0x20>
 800e45e:	4b18      	ldr	r3, [pc, #96]	@ (800e4c0 <_Balloc+0x78>)
 800e460:	4818      	ldr	r0, [pc, #96]	@ (800e4c4 <_Balloc+0x7c>)
 800e462:	216b      	movs	r1, #107	@ 0x6b
 800e464:	f001 f860 	bl	800f528 <__assert_func>
 800e468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e46c:	6006      	str	r6, [r0, #0]
 800e46e:	60c6      	str	r6, [r0, #12]
 800e470:	69e6      	ldr	r6, [r4, #28]
 800e472:	68f3      	ldr	r3, [r6, #12]
 800e474:	b183      	cbz	r3, 800e498 <_Balloc+0x50>
 800e476:	69e3      	ldr	r3, [r4, #28]
 800e478:	68db      	ldr	r3, [r3, #12]
 800e47a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e47e:	b9b8      	cbnz	r0, 800e4b0 <_Balloc+0x68>
 800e480:	2101      	movs	r1, #1
 800e482:	fa01 f605 	lsl.w	r6, r1, r5
 800e486:	1d72      	adds	r2, r6, #5
 800e488:	0092      	lsls	r2, r2, #2
 800e48a:	4620      	mov	r0, r4
 800e48c:	f001 f86a 	bl	800f564 <_calloc_r>
 800e490:	b160      	cbz	r0, 800e4ac <_Balloc+0x64>
 800e492:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e496:	e00e      	b.n	800e4b6 <_Balloc+0x6e>
 800e498:	2221      	movs	r2, #33	@ 0x21
 800e49a:	2104      	movs	r1, #4
 800e49c:	4620      	mov	r0, r4
 800e49e:	f001 f861 	bl	800f564 <_calloc_r>
 800e4a2:	69e3      	ldr	r3, [r4, #28]
 800e4a4:	60f0      	str	r0, [r6, #12]
 800e4a6:	68db      	ldr	r3, [r3, #12]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d1e4      	bne.n	800e476 <_Balloc+0x2e>
 800e4ac:	2000      	movs	r0, #0
 800e4ae:	bd70      	pop	{r4, r5, r6, pc}
 800e4b0:	6802      	ldr	r2, [r0, #0]
 800e4b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e4bc:	e7f7      	b.n	800e4ae <_Balloc+0x66>
 800e4be:	bf00      	nop
 800e4c0:	08010367 	.word	0x08010367
 800e4c4:	0801037e 	.word	0x0801037e

0800e4c8 <_Bfree>:
 800e4c8:	b570      	push	{r4, r5, r6, lr}
 800e4ca:	69c6      	ldr	r6, [r0, #28]
 800e4cc:	4605      	mov	r5, r0
 800e4ce:	460c      	mov	r4, r1
 800e4d0:	b976      	cbnz	r6, 800e4f0 <_Bfree+0x28>
 800e4d2:	2010      	movs	r0, #16
 800e4d4:	f001 f85a 	bl	800f58c <malloc>
 800e4d8:	4602      	mov	r2, r0
 800e4da:	61e8      	str	r0, [r5, #28]
 800e4dc:	b920      	cbnz	r0, 800e4e8 <_Bfree+0x20>
 800e4de:	4b09      	ldr	r3, [pc, #36]	@ (800e504 <_Bfree+0x3c>)
 800e4e0:	4809      	ldr	r0, [pc, #36]	@ (800e508 <_Bfree+0x40>)
 800e4e2:	218f      	movs	r1, #143	@ 0x8f
 800e4e4:	f001 f820 	bl	800f528 <__assert_func>
 800e4e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4ec:	6006      	str	r6, [r0, #0]
 800e4ee:	60c6      	str	r6, [r0, #12]
 800e4f0:	b13c      	cbz	r4, 800e502 <_Bfree+0x3a>
 800e4f2:	69eb      	ldr	r3, [r5, #28]
 800e4f4:	6862      	ldr	r2, [r4, #4]
 800e4f6:	68db      	ldr	r3, [r3, #12]
 800e4f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e4fc:	6021      	str	r1, [r4, #0]
 800e4fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e502:	bd70      	pop	{r4, r5, r6, pc}
 800e504:	08010367 	.word	0x08010367
 800e508:	0801037e 	.word	0x0801037e

0800e50c <__multadd>:
 800e50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e510:	690d      	ldr	r5, [r1, #16]
 800e512:	4607      	mov	r7, r0
 800e514:	460c      	mov	r4, r1
 800e516:	461e      	mov	r6, r3
 800e518:	f101 0c14 	add.w	ip, r1, #20
 800e51c:	2000      	movs	r0, #0
 800e51e:	f8dc 3000 	ldr.w	r3, [ip]
 800e522:	b299      	uxth	r1, r3
 800e524:	fb02 6101 	mla	r1, r2, r1, r6
 800e528:	0c1e      	lsrs	r6, r3, #16
 800e52a:	0c0b      	lsrs	r3, r1, #16
 800e52c:	fb02 3306 	mla	r3, r2, r6, r3
 800e530:	b289      	uxth	r1, r1
 800e532:	3001      	adds	r0, #1
 800e534:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e538:	4285      	cmp	r5, r0
 800e53a:	f84c 1b04 	str.w	r1, [ip], #4
 800e53e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e542:	dcec      	bgt.n	800e51e <__multadd+0x12>
 800e544:	b30e      	cbz	r6, 800e58a <__multadd+0x7e>
 800e546:	68a3      	ldr	r3, [r4, #8]
 800e548:	42ab      	cmp	r3, r5
 800e54a:	dc19      	bgt.n	800e580 <__multadd+0x74>
 800e54c:	6861      	ldr	r1, [r4, #4]
 800e54e:	4638      	mov	r0, r7
 800e550:	3101      	adds	r1, #1
 800e552:	f7ff ff79 	bl	800e448 <_Balloc>
 800e556:	4680      	mov	r8, r0
 800e558:	b928      	cbnz	r0, 800e566 <__multadd+0x5a>
 800e55a:	4602      	mov	r2, r0
 800e55c:	4b0c      	ldr	r3, [pc, #48]	@ (800e590 <__multadd+0x84>)
 800e55e:	480d      	ldr	r0, [pc, #52]	@ (800e594 <__multadd+0x88>)
 800e560:	21ba      	movs	r1, #186	@ 0xba
 800e562:	f000 ffe1 	bl	800f528 <__assert_func>
 800e566:	6922      	ldr	r2, [r4, #16]
 800e568:	3202      	adds	r2, #2
 800e56a:	f104 010c 	add.w	r1, r4, #12
 800e56e:	0092      	lsls	r2, r2, #2
 800e570:	300c      	adds	r0, #12
 800e572:	f7ff fb0c 	bl	800db8e <memcpy>
 800e576:	4621      	mov	r1, r4
 800e578:	4638      	mov	r0, r7
 800e57a:	f7ff ffa5 	bl	800e4c8 <_Bfree>
 800e57e:	4644      	mov	r4, r8
 800e580:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e584:	3501      	adds	r5, #1
 800e586:	615e      	str	r6, [r3, #20]
 800e588:	6125      	str	r5, [r4, #16]
 800e58a:	4620      	mov	r0, r4
 800e58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e590:	080102f6 	.word	0x080102f6
 800e594:	0801037e 	.word	0x0801037e

0800e598 <__s2b>:
 800e598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e59c:	460c      	mov	r4, r1
 800e59e:	4615      	mov	r5, r2
 800e5a0:	461f      	mov	r7, r3
 800e5a2:	2209      	movs	r2, #9
 800e5a4:	3308      	adds	r3, #8
 800e5a6:	4606      	mov	r6, r0
 800e5a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e5ac:	2100      	movs	r1, #0
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	db09      	blt.n	800e5c8 <__s2b+0x30>
 800e5b4:	4630      	mov	r0, r6
 800e5b6:	f7ff ff47 	bl	800e448 <_Balloc>
 800e5ba:	b940      	cbnz	r0, 800e5ce <__s2b+0x36>
 800e5bc:	4602      	mov	r2, r0
 800e5be:	4b19      	ldr	r3, [pc, #100]	@ (800e624 <__s2b+0x8c>)
 800e5c0:	4819      	ldr	r0, [pc, #100]	@ (800e628 <__s2b+0x90>)
 800e5c2:	21d3      	movs	r1, #211	@ 0xd3
 800e5c4:	f000 ffb0 	bl	800f528 <__assert_func>
 800e5c8:	0052      	lsls	r2, r2, #1
 800e5ca:	3101      	adds	r1, #1
 800e5cc:	e7f0      	b.n	800e5b0 <__s2b+0x18>
 800e5ce:	9b08      	ldr	r3, [sp, #32]
 800e5d0:	6143      	str	r3, [r0, #20]
 800e5d2:	2d09      	cmp	r5, #9
 800e5d4:	f04f 0301 	mov.w	r3, #1
 800e5d8:	6103      	str	r3, [r0, #16]
 800e5da:	dd16      	ble.n	800e60a <__s2b+0x72>
 800e5dc:	f104 0909 	add.w	r9, r4, #9
 800e5e0:	46c8      	mov	r8, r9
 800e5e2:	442c      	add	r4, r5
 800e5e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e5e8:	4601      	mov	r1, r0
 800e5ea:	3b30      	subs	r3, #48	@ 0x30
 800e5ec:	220a      	movs	r2, #10
 800e5ee:	4630      	mov	r0, r6
 800e5f0:	f7ff ff8c 	bl	800e50c <__multadd>
 800e5f4:	45a0      	cmp	r8, r4
 800e5f6:	d1f5      	bne.n	800e5e4 <__s2b+0x4c>
 800e5f8:	f1a5 0408 	sub.w	r4, r5, #8
 800e5fc:	444c      	add	r4, r9
 800e5fe:	1b2d      	subs	r5, r5, r4
 800e600:	1963      	adds	r3, r4, r5
 800e602:	42bb      	cmp	r3, r7
 800e604:	db04      	blt.n	800e610 <__s2b+0x78>
 800e606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e60a:	340a      	adds	r4, #10
 800e60c:	2509      	movs	r5, #9
 800e60e:	e7f6      	b.n	800e5fe <__s2b+0x66>
 800e610:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e614:	4601      	mov	r1, r0
 800e616:	3b30      	subs	r3, #48	@ 0x30
 800e618:	220a      	movs	r2, #10
 800e61a:	4630      	mov	r0, r6
 800e61c:	f7ff ff76 	bl	800e50c <__multadd>
 800e620:	e7ee      	b.n	800e600 <__s2b+0x68>
 800e622:	bf00      	nop
 800e624:	080102f6 	.word	0x080102f6
 800e628:	0801037e 	.word	0x0801037e

0800e62c <__hi0bits>:
 800e62c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e630:	4603      	mov	r3, r0
 800e632:	bf36      	itet	cc
 800e634:	0403      	lslcc	r3, r0, #16
 800e636:	2000      	movcs	r0, #0
 800e638:	2010      	movcc	r0, #16
 800e63a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e63e:	bf3c      	itt	cc
 800e640:	021b      	lslcc	r3, r3, #8
 800e642:	3008      	addcc	r0, #8
 800e644:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e648:	bf3c      	itt	cc
 800e64a:	011b      	lslcc	r3, r3, #4
 800e64c:	3004      	addcc	r0, #4
 800e64e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e652:	bf3c      	itt	cc
 800e654:	009b      	lslcc	r3, r3, #2
 800e656:	3002      	addcc	r0, #2
 800e658:	2b00      	cmp	r3, #0
 800e65a:	db05      	blt.n	800e668 <__hi0bits+0x3c>
 800e65c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e660:	f100 0001 	add.w	r0, r0, #1
 800e664:	bf08      	it	eq
 800e666:	2020      	moveq	r0, #32
 800e668:	4770      	bx	lr

0800e66a <__lo0bits>:
 800e66a:	6803      	ldr	r3, [r0, #0]
 800e66c:	4602      	mov	r2, r0
 800e66e:	f013 0007 	ands.w	r0, r3, #7
 800e672:	d00b      	beq.n	800e68c <__lo0bits+0x22>
 800e674:	07d9      	lsls	r1, r3, #31
 800e676:	d421      	bmi.n	800e6bc <__lo0bits+0x52>
 800e678:	0798      	lsls	r0, r3, #30
 800e67a:	bf49      	itett	mi
 800e67c:	085b      	lsrmi	r3, r3, #1
 800e67e:	089b      	lsrpl	r3, r3, #2
 800e680:	2001      	movmi	r0, #1
 800e682:	6013      	strmi	r3, [r2, #0]
 800e684:	bf5c      	itt	pl
 800e686:	6013      	strpl	r3, [r2, #0]
 800e688:	2002      	movpl	r0, #2
 800e68a:	4770      	bx	lr
 800e68c:	b299      	uxth	r1, r3
 800e68e:	b909      	cbnz	r1, 800e694 <__lo0bits+0x2a>
 800e690:	0c1b      	lsrs	r3, r3, #16
 800e692:	2010      	movs	r0, #16
 800e694:	b2d9      	uxtb	r1, r3
 800e696:	b909      	cbnz	r1, 800e69c <__lo0bits+0x32>
 800e698:	3008      	adds	r0, #8
 800e69a:	0a1b      	lsrs	r3, r3, #8
 800e69c:	0719      	lsls	r1, r3, #28
 800e69e:	bf04      	itt	eq
 800e6a0:	091b      	lsreq	r3, r3, #4
 800e6a2:	3004      	addeq	r0, #4
 800e6a4:	0799      	lsls	r1, r3, #30
 800e6a6:	bf04      	itt	eq
 800e6a8:	089b      	lsreq	r3, r3, #2
 800e6aa:	3002      	addeq	r0, #2
 800e6ac:	07d9      	lsls	r1, r3, #31
 800e6ae:	d403      	bmi.n	800e6b8 <__lo0bits+0x4e>
 800e6b0:	085b      	lsrs	r3, r3, #1
 800e6b2:	f100 0001 	add.w	r0, r0, #1
 800e6b6:	d003      	beq.n	800e6c0 <__lo0bits+0x56>
 800e6b8:	6013      	str	r3, [r2, #0]
 800e6ba:	4770      	bx	lr
 800e6bc:	2000      	movs	r0, #0
 800e6be:	4770      	bx	lr
 800e6c0:	2020      	movs	r0, #32
 800e6c2:	4770      	bx	lr

0800e6c4 <__i2b>:
 800e6c4:	b510      	push	{r4, lr}
 800e6c6:	460c      	mov	r4, r1
 800e6c8:	2101      	movs	r1, #1
 800e6ca:	f7ff febd 	bl	800e448 <_Balloc>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	b928      	cbnz	r0, 800e6de <__i2b+0x1a>
 800e6d2:	4b05      	ldr	r3, [pc, #20]	@ (800e6e8 <__i2b+0x24>)
 800e6d4:	4805      	ldr	r0, [pc, #20]	@ (800e6ec <__i2b+0x28>)
 800e6d6:	f240 1145 	movw	r1, #325	@ 0x145
 800e6da:	f000 ff25 	bl	800f528 <__assert_func>
 800e6de:	2301      	movs	r3, #1
 800e6e0:	6144      	str	r4, [r0, #20]
 800e6e2:	6103      	str	r3, [r0, #16]
 800e6e4:	bd10      	pop	{r4, pc}
 800e6e6:	bf00      	nop
 800e6e8:	080102f6 	.word	0x080102f6
 800e6ec:	0801037e 	.word	0x0801037e

0800e6f0 <__multiply>:
 800e6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f4:	4617      	mov	r7, r2
 800e6f6:	690a      	ldr	r2, [r1, #16]
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	bfa8      	it	ge
 800e6fe:	463b      	movge	r3, r7
 800e700:	4689      	mov	r9, r1
 800e702:	bfa4      	itt	ge
 800e704:	460f      	movge	r7, r1
 800e706:	4699      	movge	r9, r3
 800e708:	693d      	ldr	r5, [r7, #16]
 800e70a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	6879      	ldr	r1, [r7, #4]
 800e712:	eb05 060a 	add.w	r6, r5, sl
 800e716:	42b3      	cmp	r3, r6
 800e718:	b085      	sub	sp, #20
 800e71a:	bfb8      	it	lt
 800e71c:	3101      	addlt	r1, #1
 800e71e:	f7ff fe93 	bl	800e448 <_Balloc>
 800e722:	b930      	cbnz	r0, 800e732 <__multiply+0x42>
 800e724:	4602      	mov	r2, r0
 800e726:	4b41      	ldr	r3, [pc, #260]	@ (800e82c <__multiply+0x13c>)
 800e728:	4841      	ldr	r0, [pc, #260]	@ (800e830 <__multiply+0x140>)
 800e72a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e72e:	f000 fefb 	bl	800f528 <__assert_func>
 800e732:	f100 0414 	add.w	r4, r0, #20
 800e736:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e73a:	4623      	mov	r3, r4
 800e73c:	2200      	movs	r2, #0
 800e73e:	4573      	cmp	r3, lr
 800e740:	d320      	bcc.n	800e784 <__multiply+0x94>
 800e742:	f107 0814 	add.w	r8, r7, #20
 800e746:	f109 0114 	add.w	r1, r9, #20
 800e74a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e74e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e752:	9302      	str	r3, [sp, #8]
 800e754:	1beb      	subs	r3, r5, r7
 800e756:	3b15      	subs	r3, #21
 800e758:	f023 0303 	bic.w	r3, r3, #3
 800e75c:	3304      	adds	r3, #4
 800e75e:	3715      	adds	r7, #21
 800e760:	42bd      	cmp	r5, r7
 800e762:	bf38      	it	cc
 800e764:	2304      	movcc	r3, #4
 800e766:	9301      	str	r3, [sp, #4]
 800e768:	9b02      	ldr	r3, [sp, #8]
 800e76a:	9103      	str	r1, [sp, #12]
 800e76c:	428b      	cmp	r3, r1
 800e76e:	d80c      	bhi.n	800e78a <__multiply+0x9a>
 800e770:	2e00      	cmp	r6, #0
 800e772:	dd03      	ble.n	800e77c <__multiply+0x8c>
 800e774:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d055      	beq.n	800e828 <__multiply+0x138>
 800e77c:	6106      	str	r6, [r0, #16]
 800e77e:	b005      	add	sp, #20
 800e780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e784:	f843 2b04 	str.w	r2, [r3], #4
 800e788:	e7d9      	b.n	800e73e <__multiply+0x4e>
 800e78a:	f8b1 a000 	ldrh.w	sl, [r1]
 800e78e:	f1ba 0f00 	cmp.w	sl, #0
 800e792:	d01f      	beq.n	800e7d4 <__multiply+0xe4>
 800e794:	46c4      	mov	ip, r8
 800e796:	46a1      	mov	r9, r4
 800e798:	2700      	movs	r7, #0
 800e79a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e79e:	f8d9 3000 	ldr.w	r3, [r9]
 800e7a2:	fa1f fb82 	uxth.w	fp, r2
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	fb0a 330b 	mla	r3, sl, fp, r3
 800e7ac:	443b      	add	r3, r7
 800e7ae:	f8d9 7000 	ldr.w	r7, [r9]
 800e7b2:	0c12      	lsrs	r2, r2, #16
 800e7b4:	0c3f      	lsrs	r7, r7, #16
 800e7b6:	fb0a 7202 	mla	r2, sl, r2, r7
 800e7ba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e7be:	b29b      	uxth	r3, r3
 800e7c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7c4:	4565      	cmp	r5, ip
 800e7c6:	f849 3b04 	str.w	r3, [r9], #4
 800e7ca:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e7ce:	d8e4      	bhi.n	800e79a <__multiply+0xaa>
 800e7d0:	9b01      	ldr	r3, [sp, #4]
 800e7d2:	50e7      	str	r7, [r4, r3]
 800e7d4:	9b03      	ldr	r3, [sp, #12]
 800e7d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e7da:	3104      	adds	r1, #4
 800e7dc:	f1b9 0f00 	cmp.w	r9, #0
 800e7e0:	d020      	beq.n	800e824 <__multiply+0x134>
 800e7e2:	6823      	ldr	r3, [r4, #0]
 800e7e4:	4647      	mov	r7, r8
 800e7e6:	46a4      	mov	ip, r4
 800e7e8:	f04f 0a00 	mov.w	sl, #0
 800e7ec:	f8b7 b000 	ldrh.w	fp, [r7]
 800e7f0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e7f4:	fb09 220b 	mla	r2, r9, fp, r2
 800e7f8:	4452      	add	r2, sl
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e800:	f84c 3b04 	str.w	r3, [ip], #4
 800e804:	f857 3b04 	ldr.w	r3, [r7], #4
 800e808:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e80c:	f8bc 3000 	ldrh.w	r3, [ip]
 800e810:	fb09 330a 	mla	r3, r9, sl, r3
 800e814:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e818:	42bd      	cmp	r5, r7
 800e81a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e81e:	d8e5      	bhi.n	800e7ec <__multiply+0xfc>
 800e820:	9a01      	ldr	r2, [sp, #4]
 800e822:	50a3      	str	r3, [r4, r2]
 800e824:	3404      	adds	r4, #4
 800e826:	e79f      	b.n	800e768 <__multiply+0x78>
 800e828:	3e01      	subs	r6, #1
 800e82a:	e7a1      	b.n	800e770 <__multiply+0x80>
 800e82c:	080102f6 	.word	0x080102f6
 800e830:	0801037e 	.word	0x0801037e

0800e834 <__pow5mult>:
 800e834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e838:	4615      	mov	r5, r2
 800e83a:	f012 0203 	ands.w	r2, r2, #3
 800e83e:	4607      	mov	r7, r0
 800e840:	460e      	mov	r6, r1
 800e842:	d007      	beq.n	800e854 <__pow5mult+0x20>
 800e844:	4c25      	ldr	r4, [pc, #148]	@ (800e8dc <__pow5mult+0xa8>)
 800e846:	3a01      	subs	r2, #1
 800e848:	2300      	movs	r3, #0
 800e84a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e84e:	f7ff fe5d 	bl	800e50c <__multadd>
 800e852:	4606      	mov	r6, r0
 800e854:	10ad      	asrs	r5, r5, #2
 800e856:	d03d      	beq.n	800e8d4 <__pow5mult+0xa0>
 800e858:	69fc      	ldr	r4, [r7, #28]
 800e85a:	b97c      	cbnz	r4, 800e87c <__pow5mult+0x48>
 800e85c:	2010      	movs	r0, #16
 800e85e:	f000 fe95 	bl	800f58c <malloc>
 800e862:	4602      	mov	r2, r0
 800e864:	61f8      	str	r0, [r7, #28]
 800e866:	b928      	cbnz	r0, 800e874 <__pow5mult+0x40>
 800e868:	4b1d      	ldr	r3, [pc, #116]	@ (800e8e0 <__pow5mult+0xac>)
 800e86a:	481e      	ldr	r0, [pc, #120]	@ (800e8e4 <__pow5mult+0xb0>)
 800e86c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e870:	f000 fe5a 	bl	800f528 <__assert_func>
 800e874:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e878:	6004      	str	r4, [r0, #0]
 800e87a:	60c4      	str	r4, [r0, #12]
 800e87c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e880:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e884:	b94c      	cbnz	r4, 800e89a <__pow5mult+0x66>
 800e886:	f240 2171 	movw	r1, #625	@ 0x271
 800e88a:	4638      	mov	r0, r7
 800e88c:	f7ff ff1a 	bl	800e6c4 <__i2b>
 800e890:	2300      	movs	r3, #0
 800e892:	f8c8 0008 	str.w	r0, [r8, #8]
 800e896:	4604      	mov	r4, r0
 800e898:	6003      	str	r3, [r0, #0]
 800e89a:	f04f 0900 	mov.w	r9, #0
 800e89e:	07eb      	lsls	r3, r5, #31
 800e8a0:	d50a      	bpl.n	800e8b8 <__pow5mult+0x84>
 800e8a2:	4631      	mov	r1, r6
 800e8a4:	4622      	mov	r2, r4
 800e8a6:	4638      	mov	r0, r7
 800e8a8:	f7ff ff22 	bl	800e6f0 <__multiply>
 800e8ac:	4631      	mov	r1, r6
 800e8ae:	4680      	mov	r8, r0
 800e8b0:	4638      	mov	r0, r7
 800e8b2:	f7ff fe09 	bl	800e4c8 <_Bfree>
 800e8b6:	4646      	mov	r6, r8
 800e8b8:	106d      	asrs	r5, r5, #1
 800e8ba:	d00b      	beq.n	800e8d4 <__pow5mult+0xa0>
 800e8bc:	6820      	ldr	r0, [r4, #0]
 800e8be:	b938      	cbnz	r0, 800e8d0 <__pow5mult+0x9c>
 800e8c0:	4622      	mov	r2, r4
 800e8c2:	4621      	mov	r1, r4
 800e8c4:	4638      	mov	r0, r7
 800e8c6:	f7ff ff13 	bl	800e6f0 <__multiply>
 800e8ca:	6020      	str	r0, [r4, #0]
 800e8cc:	f8c0 9000 	str.w	r9, [r0]
 800e8d0:	4604      	mov	r4, r0
 800e8d2:	e7e4      	b.n	800e89e <__pow5mult+0x6a>
 800e8d4:	4630      	mov	r0, r6
 800e8d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8da:	bf00      	nop
 800e8dc:	0801059c 	.word	0x0801059c
 800e8e0:	08010367 	.word	0x08010367
 800e8e4:	0801037e 	.word	0x0801037e

0800e8e8 <__lshift>:
 800e8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8ec:	460c      	mov	r4, r1
 800e8ee:	6849      	ldr	r1, [r1, #4]
 800e8f0:	6923      	ldr	r3, [r4, #16]
 800e8f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e8f6:	68a3      	ldr	r3, [r4, #8]
 800e8f8:	4607      	mov	r7, r0
 800e8fa:	4691      	mov	r9, r2
 800e8fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e900:	f108 0601 	add.w	r6, r8, #1
 800e904:	42b3      	cmp	r3, r6
 800e906:	db0b      	blt.n	800e920 <__lshift+0x38>
 800e908:	4638      	mov	r0, r7
 800e90a:	f7ff fd9d 	bl	800e448 <_Balloc>
 800e90e:	4605      	mov	r5, r0
 800e910:	b948      	cbnz	r0, 800e926 <__lshift+0x3e>
 800e912:	4602      	mov	r2, r0
 800e914:	4b28      	ldr	r3, [pc, #160]	@ (800e9b8 <__lshift+0xd0>)
 800e916:	4829      	ldr	r0, [pc, #164]	@ (800e9bc <__lshift+0xd4>)
 800e918:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e91c:	f000 fe04 	bl	800f528 <__assert_func>
 800e920:	3101      	adds	r1, #1
 800e922:	005b      	lsls	r3, r3, #1
 800e924:	e7ee      	b.n	800e904 <__lshift+0x1c>
 800e926:	2300      	movs	r3, #0
 800e928:	f100 0114 	add.w	r1, r0, #20
 800e92c:	f100 0210 	add.w	r2, r0, #16
 800e930:	4618      	mov	r0, r3
 800e932:	4553      	cmp	r3, sl
 800e934:	db33      	blt.n	800e99e <__lshift+0xb6>
 800e936:	6920      	ldr	r0, [r4, #16]
 800e938:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e93c:	f104 0314 	add.w	r3, r4, #20
 800e940:	f019 091f 	ands.w	r9, r9, #31
 800e944:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e948:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e94c:	d02b      	beq.n	800e9a6 <__lshift+0xbe>
 800e94e:	f1c9 0e20 	rsb	lr, r9, #32
 800e952:	468a      	mov	sl, r1
 800e954:	2200      	movs	r2, #0
 800e956:	6818      	ldr	r0, [r3, #0]
 800e958:	fa00 f009 	lsl.w	r0, r0, r9
 800e95c:	4310      	orrs	r0, r2
 800e95e:	f84a 0b04 	str.w	r0, [sl], #4
 800e962:	f853 2b04 	ldr.w	r2, [r3], #4
 800e966:	459c      	cmp	ip, r3
 800e968:	fa22 f20e 	lsr.w	r2, r2, lr
 800e96c:	d8f3      	bhi.n	800e956 <__lshift+0x6e>
 800e96e:	ebac 0304 	sub.w	r3, ip, r4
 800e972:	3b15      	subs	r3, #21
 800e974:	f023 0303 	bic.w	r3, r3, #3
 800e978:	3304      	adds	r3, #4
 800e97a:	f104 0015 	add.w	r0, r4, #21
 800e97e:	4560      	cmp	r0, ip
 800e980:	bf88      	it	hi
 800e982:	2304      	movhi	r3, #4
 800e984:	50ca      	str	r2, [r1, r3]
 800e986:	b10a      	cbz	r2, 800e98c <__lshift+0xa4>
 800e988:	f108 0602 	add.w	r6, r8, #2
 800e98c:	3e01      	subs	r6, #1
 800e98e:	4638      	mov	r0, r7
 800e990:	612e      	str	r6, [r5, #16]
 800e992:	4621      	mov	r1, r4
 800e994:	f7ff fd98 	bl	800e4c8 <_Bfree>
 800e998:	4628      	mov	r0, r5
 800e99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e99e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	e7c5      	b.n	800e932 <__lshift+0x4a>
 800e9a6:	3904      	subs	r1, #4
 800e9a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800e9b0:	459c      	cmp	ip, r3
 800e9b2:	d8f9      	bhi.n	800e9a8 <__lshift+0xc0>
 800e9b4:	e7ea      	b.n	800e98c <__lshift+0xa4>
 800e9b6:	bf00      	nop
 800e9b8:	080102f6 	.word	0x080102f6
 800e9bc:	0801037e 	.word	0x0801037e

0800e9c0 <__mcmp>:
 800e9c0:	690a      	ldr	r2, [r1, #16]
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	6900      	ldr	r0, [r0, #16]
 800e9c6:	1a80      	subs	r0, r0, r2
 800e9c8:	b530      	push	{r4, r5, lr}
 800e9ca:	d10e      	bne.n	800e9ea <__mcmp+0x2a>
 800e9cc:	3314      	adds	r3, #20
 800e9ce:	3114      	adds	r1, #20
 800e9d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e9d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e9d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e9dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e9e0:	4295      	cmp	r5, r2
 800e9e2:	d003      	beq.n	800e9ec <__mcmp+0x2c>
 800e9e4:	d205      	bcs.n	800e9f2 <__mcmp+0x32>
 800e9e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e9ea:	bd30      	pop	{r4, r5, pc}
 800e9ec:	42a3      	cmp	r3, r4
 800e9ee:	d3f3      	bcc.n	800e9d8 <__mcmp+0x18>
 800e9f0:	e7fb      	b.n	800e9ea <__mcmp+0x2a>
 800e9f2:	2001      	movs	r0, #1
 800e9f4:	e7f9      	b.n	800e9ea <__mcmp+0x2a>
	...

0800e9f8 <__mdiff>:
 800e9f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9fc:	4689      	mov	r9, r1
 800e9fe:	4606      	mov	r6, r0
 800ea00:	4611      	mov	r1, r2
 800ea02:	4648      	mov	r0, r9
 800ea04:	4614      	mov	r4, r2
 800ea06:	f7ff ffdb 	bl	800e9c0 <__mcmp>
 800ea0a:	1e05      	subs	r5, r0, #0
 800ea0c:	d112      	bne.n	800ea34 <__mdiff+0x3c>
 800ea0e:	4629      	mov	r1, r5
 800ea10:	4630      	mov	r0, r6
 800ea12:	f7ff fd19 	bl	800e448 <_Balloc>
 800ea16:	4602      	mov	r2, r0
 800ea18:	b928      	cbnz	r0, 800ea26 <__mdiff+0x2e>
 800ea1a:	4b3f      	ldr	r3, [pc, #252]	@ (800eb18 <__mdiff+0x120>)
 800ea1c:	f240 2137 	movw	r1, #567	@ 0x237
 800ea20:	483e      	ldr	r0, [pc, #248]	@ (800eb1c <__mdiff+0x124>)
 800ea22:	f000 fd81 	bl	800f528 <__assert_func>
 800ea26:	2301      	movs	r3, #1
 800ea28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ea2c:	4610      	mov	r0, r2
 800ea2e:	b003      	add	sp, #12
 800ea30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea34:	bfbc      	itt	lt
 800ea36:	464b      	movlt	r3, r9
 800ea38:	46a1      	movlt	r9, r4
 800ea3a:	4630      	mov	r0, r6
 800ea3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ea40:	bfba      	itte	lt
 800ea42:	461c      	movlt	r4, r3
 800ea44:	2501      	movlt	r5, #1
 800ea46:	2500      	movge	r5, #0
 800ea48:	f7ff fcfe 	bl	800e448 <_Balloc>
 800ea4c:	4602      	mov	r2, r0
 800ea4e:	b918      	cbnz	r0, 800ea58 <__mdiff+0x60>
 800ea50:	4b31      	ldr	r3, [pc, #196]	@ (800eb18 <__mdiff+0x120>)
 800ea52:	f240 2145 	movw	r1, #581	@ 0x245
 800ea56:	e7e3      	b.n	800ea20 <__mdiff+0x28>
 800ea58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ea5c:	6926      	ldr	r6, [r4, #16]
 800ea5e:	60c5      	str	r5, [r0, #12]
 800ea60:	f109 0310 	add.w	r3, r9, #16
 800ea64:	f109 0514 	add.w	r5, r9, #20
 800ea68:	f104 0e14 	add.w	lr, r4, #20
 800ea6c:	f100 0b14 	add.w	fp, r0, #20
 800ea70:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ea74:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ea78:	9301      	str	r3, [sp, #4]
 800ea7a:	46d9      	mov	r9, fp
 800ea7c:	f04f 0c00 	mov.w	ip, #0
 800ea80:	9b01      	ldr	r3, [sp, #4]
 800ea82:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ea86:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ea8a:	9301      	str	r3, [sp, #4]
 800ea8c:	fa1f f38a 	uxth.w	r3, sl
 800ea90:	4619      	mov	r1, r3
 800ea92:	b283      	uxth	r3, r0
 800ea94:	1acb      	subs	r3, r1, r3
 800ea96:	0c00      	lsrs	r0, r0, #16
 800ea98:	4463      	add	r3, ip
 800ea9a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ea9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800eaa2:	b29b      	uxth	r3, r3
 800eaa4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800eaa8:	4576      	cmp	r6, lr
 800eaaa:	f849 3b04 	str.w	r3, [r9], #4
 800eaae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eab2:	d8e5      	bhi.n	800ea80 <__mdiff+0x88>
 800eab4:	1b33      	subs	r3, r6, r4
 800eab6:	3b15      	subs	r3, #21
 800eab8:	f023 0303 	bic.w	r3, r3, #3
 800eabc:	3415      	adds	r4, #21
 800eabe:	3304      	adds	r3, #4
 800eac0:	42a6      	cmp	r6, r4
 800eac2:	bf38      	it	cc
 800eac4:	2304      	movcc	r3, #4
 800eac6:	441d      	add	r5, r3
 800eac8:	445b      	add	r3, fp
 800eaca:	461e      	mov	r6, r3
 800eacc:	462c      	mov	r4, r5
 800eace:	4544      	cmp	r4, r8
 800ead0:	d30e      	bcc.n	800eaf0 <__mdiff+0xf8>
 800ead2:	f108 0103 	add.w	r1, r8, #3
 800ead6:	1b49      	subs	r1, r1, r5
 800ead8:	f021 0103 	bic.w	r1, r1, #3
 800eadc:	3d03      	subs	r5, #3
 800eade:	45a8      	cmp	r8, r5
 800eae0:	bf38      	it	cc
 800eae2:	2100      	movcc	r1, #0
 800eae4:	440b      	add	r3, r1
 800eae6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eaea:	b191      	cbz	r1, 800eb12 <__mdiff+0x11a>
 800eaec:	6117      	str	r7, [r2, #16]
 800eaee:	e79d      	b.n	800ea2c <__mdiff+0x34>
 800eaf0:	f854 1b04 	ldr.w	r1, [r4], #4
 800eaf4:	46e6      	mov	lr, ip
 800eaf6:	0c08      	lsrs	r0, r1, #16
 800eaf8:	fa1c fc81 	uxtah	ip, ip, r1
 800eafc:	4471      	add	r1, lr
 800eafe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800eb02:	b289      	uxth	r1, r1
 800eb04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800eb08:	f846 1b04 	str.w	r1, [r6], #4
 800eb0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eb10:	e7dd      	b.n	800eace <__mdiff+0xd6>
 800eb12:	3f01      	subs	r7, #1
 800eb14:	e7e7      	b.n	800eae6 <__mdiff+0xee>
 800eb16:	bf00      	nop
 800eb18:	080102f6 	.word	0x080102f6
 800eb1c:	0801037e 	.word	0x0801037e

0800eb20 <__ulp>:
 800eb20:	b082      	sub	sp, #8
 800eb22:	ed8d 0b00 	vstr	d0, [sp]
 800eb26:	9a01      	ldr	r2, [sp, #4]
 800eb28:	4b0f      	ldr	r3, [pc, #60]	@ (800eb68 <__ulp+0x48>)
 800eb2a:	4013      	ands	r3, r2
 800eb2c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	dc08      	bgt.n	800eb46 <__ulp+0x26>
 800eb34:	425b      	negs	r3, r3
 800eb36:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800eb3a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800eb3e:	da04      	bge.n	800eb4a <__ulp+0x2a>
 800eb40:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800eb44:	4113      	asrs	r3, r2
 800eb46:	2200      	movs	r2, #0
 800eb48:	e008      	b.n	800eb5c <__ulp+0x3c>
 800eb4a:	f1a2 0314 	sub.w	r3, r2, #20
 800eb4e:	2b1e      	cmp	r3, #30
 800eb50:	bfda      	itte	le
 800eb52:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800eb56:	40da      	lsrle	r2, r3
 800eb58:	2201      	movgt	r2, #1
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	4610      	mov	r0, r2
 800eb60:	ec41 0b10 	vmov	d0, r0, r1
 800eb64:	b002      	add	sp, #8
 800eb66:	4770      	bx	lr
 800eb68:	7ff00000 	.word	0x7ff00000

0800eb6c <__b2d>:
 800eb6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb70:	6906      	ldr	r6, [r0, #16]
 800eb72:	f100 0814 	add.w	r8, r0, #20
 800eb76:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800eb7a:	1f37      	subs	r7, r6, #4
 800eb7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800eb80:	4610      	mov	r0, r2
 800eb82:	f7ff fd53 	bl	800e62c <__hi0bits>
 800eb86:	f1c0 0320 	rsb	r3, r0, #32
 800eb8a:	280a      	cmp	r0, #10
 800eb8c:	600b      	str	r3, [r1, #0]
 800eb8e:	491b      	ldr	r1, [pc, #108]	@ (800ebfc <__b2d+0x90>)
 800eb90:	dc15      	bgt.n	800ebbe <__b2d+0x52>
 800eb92:	f1c0 0c0b 	rsb	ip, r0, #11
 800eb96:	fa22 f30c 	lsr.w	r3, r2, ip
 800eb9a:	45b8      	cmp	r8, r7
 800eb9c:	ea43 0501 	orr.w	r5, r3, r1
 800eba0:	bf34      	ite	cc
 800eba2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800eba6:	2300      	movcs	r3, #0
 800eba8:	3015      	adds	r0, #21
 800ebaa:	fa02 f000 	lsl.w	r0, r2, r0
 800ebae:	fa23 f30c 	lsr.w	r3, r3, ip
 800ebb2:	4303      	orrs	r3, r0
 800ebb4:	461c      	mov	r4, r3
 800ebb6:	ec45 4b10 	vmov	d0, r4, r5
 800ebba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebbe:	45b8      	cmp	r8, r7
 800ebc0:	bf3a      	itte	cc
 800ebc2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ebc6:	f1a6 0708 	subcc.w	r7, r6, #8
 800ebca:	2300      	movcs	r3, #0
 800ebcc:	380b      	subs	r0, #11
 800ebce:	d012      	beq.n	800ebf6 <__b2d+0x8a>
 800ebd0:	f1c0 0120 	rsb	r1, r0, #32
 800ebd4:	fa23 f401 	lsr.w	r4, r3, r1
 800ebd8:	4082      	lsls	r2, r0
 800ebda:	4322      	orrs	r2, r4
 800ebdc:	4547      	cmp	r7, r8
 800ebde:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ebe2:	bf8c      	ite	hi
 800ebe4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ebe8:	2200      	movls	r2, #0
 800ebea:	4083      	lsls	r3, r0
 800ebec:	40ca      	lsrs	r2, r1
 800ebee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ebf2:	4313      	orrs	r3, r2
 800ebf4:	e7de      	b.n	800ebb4 <__b2d+0x48>
 800ebf6:	ea42 0501 	orr.w	r5, r2, r1
 800ebfa:	e7db      	b.n	800ebb4 <__b2d+0x48>
 800ebfc:	3ff00000 	.word	0x3ff00000

0800ec00 <__d2b>:
 800ec00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec04:	460f      	mov	r7, r1
 800ec06:	2101      	movs	r1, #1
 800ec08:	ec59 8b10 	vmov	r8, r9, d0
 800ec0c:	4616      	mov	r6, r2
 800ec0e:	f7ff fc1b 	bl	800e448 <_Balloc>
 800ec12:	4604      	mov	r4, r0
 800ec14:	b930      	cbnz	r0, 800ec24 <__d2b+0x24>
 800ec16:	4602      	mov	r2, r0
 800ec18:	4b23      	ldr	r3, [pc, #140]	@ (800eca8 <__d2b+0xa8>)
 800ec1a:	4824      	ldr	r0, [pc, #144]	@ (800ecac <__d2b+0xac>)
 800ec1c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ec20:	f000 fc82 	bl	800f528 <__assert_func>
 800ec24:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ec28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec2c:	b10d      	cbz	r5, 800ec32 <__d2b+0x32>
 800ec2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ec32:	9301      	str	r3, [sp, #4]
 800ec34:	f1b8 0300 	subs.w	r3, r8, #0
 800ec38:	d023      	beq.n	800ec82 <__d2b+0x82>
 800ec3a:	4668      	mov	r0, sp
 800ec3c:	9300      	str	r3, [sp, #0]
 800ec3e:	f7ff fd14 	bl	800e66a <__lo0bits>
 800ec42:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ec46:	b1d0      	cbz	r0, 800ec7e <__d2b+0x7e>
 800ec48:	f1c0 0320 	rsb	r3, r0, #32
 800ec4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ec50:	430b      	orrs	r3, r1
 800ec52:	40c2      	lsrs	r2, r0
 800ec54:	6163      	str	r3, [r4, #20]
 800ec56:	9201      	str	r2, [sp, #4]
 800ec58:	9b01      	ldr	r3, [sp, #4]
 800ec5a:	61a3      	str	r3, [r4, #24]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	bf0c      	ite	eq
 800ec60:	2201      	moveq	r2, #1
 800ec62:	2202      	movne	r2, #2
 800ec64:	6122      	str	r2, [r4, #16]
 800ec66:	b1a5      	cbz	r5, 800ec92 <__d2b+0x92>
 800ec68:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ec6c:	4405      	add	r5, r0
 800ec6e:	603d      	str	r5, [r7, #0]
 800ec70:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ec74:	6030      	str	r0, [r6, #0]
 800ec76:	4620      	mov	r0, r4
 800ec78:	b003      	add	sp, #12
 800ec7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec7e:	6161      	str	r1, [r4, #20]
 800ec80:	e7ea      	b.n	800ec58 <__d2b+0x58>
 800ec82:	a801      	add	r0, sp, #4
 800ec84:	f7ff fcf1 	bl	800e66a <__lo0bits>
 800ec88:	9b01      	ldr	r3, [sp, #4]
 800ec8a:	6163      	str	r3, [r4, #20]
 800ec8c:	3020      	adds	r0, #32
 800ec8e:	2201      	movs	r2, #1
 800ec90:	e7e8      	b.n	800ec64 <__d2b+0x64>
 800ec92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ec96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ec9a:	6038      	str	r0, [r7, #0]
 800ec9c:	6918      	ldr	r0, [r3, #16]
 800ec9e:	f7ff fcc5 	bl	800e62c <__hi0bits>
 800eca2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eca6:	e7e5      	b.n	800ec74 <__d2b+0x74>
 800eca8:	080102f6 	.word	0x080102f6
 800ecac:	0801037e 	.word	0x0801037e

0800ecb0 <__ratio>:
 800ecb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecb4:	b085      	sub	sp, #20
 800ecb6:	e9cd 1000 	strd	r1, r0, [sp]
 800ecba:	a902      	add	r1, sp, #8
 800ecbc:	f7ff ff56 	bl	800eb6c <__b2d>
 800ecc0:	9800      	ldr	r0, [sp, #0]
 800ecc2:	a903      	add	r1, sp, #12
 800ecc4:	ec55 4b10 	vmov	r4, r5, d0
 800ecc8:	f7ff ff50 	bl	800eb6c <__b2d>
 800eccc:	9b01      	ldr	r3, [sp, #4]
 800ecce:	6919      	ldr	r1, [r3, #16]
 800ecd0:	9b00      	ldr	r3, [sp, #0]
 800ecd2:	691b      	ldr	r3, [r3, #16]
 800ecd4:	1ac9      	subs	r1, r1, r3
 800ecd6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ecda:	1a9b      	subs	r3, r3, r2
 800ecdc:	ec5b ab10 	vmov	sl, fp, d0
 800ece0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	bfce      	itee	gt
 800ece8:	462a      	movgt	r2, r5
 800ecea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ecee:	465a      	movle	r2, fp
 800ecf0:	462f      	mov	r7, r5
 800ecf2:	46d9      	mov	r9, fp
 800ecf4:	bfcc      	ite	gt
 800ecf6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ecfa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ecfe:	464b      	mov	r3, r9
 800ed00:	4652      	mov	r2, sl
 800ed02:	4620      	mov	r0, r4
 800ed04:	4639      	mov	r1, r7
 800ed06:	f7f1 fda1 	bl	800084c <__aeabi_ddiv>
 800ed0a:	ec41 0b10 	vmov	d0, r0, r1
 800ed0e:	b005      	add	sp, #20
 800ed10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed14 <__copybits>:
 800ed14:	3901      	subs	r1, #1
 800ed16:	b570      	push	{r4, r5, r6, lr}
 800ed18:	1149      	asrs	r1, r1, #5
 800ed1a:	6914      	ldr	r4, [r2, #16]
 800ed1c:	3101      	adds	r1, #1
 800ed1e:	f102 0314 	add.w	r3, r2, #20
 800ed22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ed26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ed2a:	1f05      	subs	r5, r0, #4
 800ed2c:	42a3      	cmp	r3, r4
 800ed2e:	d30c      	bcc.n	800ed4a <__copybits+0x36>
 800ed30:	1aa3      	subs	r3, r4, r2
 800ed32:	3b11      	subs	r3, #17
 800ed34:	f023 0303 	bic.w	r3, r3, #3
 800ed38:	3211      	adds	r2, #17
 800ed3a:	42a2      	cmp	r2, r4
 800ed3c:	bf88      	it	hi
 800ed3e:	2300      	movhi	r3, #0
 800ed40:	4418      	add	r0, r3
 800ed42:	2300      	movs	r3, #0
 800ed44:	4288      	cmp	r0, r1
 800ed46:	d305      	bcc.n	800ed54 <__copybits+0x40>
 800ed48:	bd70      	pop	{r4, r5, r6, pc}
 800ed4a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ed4e:	f845 6f04 	str.w	r6, [r5, #4]!
 800ed52:	e7eb      	b.n	800ed2c <__copybits+0x18>
 800ed54:	f840 3b04 	str.w	r3, [r0], #4
 800ed58:	e7f4      	b.n	800ed44 <__copybits+0x30>

0800ed5a <__any_on>:
 800ed5a:	f100 0214 	add.w	r2, r0, #20
 800ed5e:	6900      	ldr	r0, [r0, #16]
 800ed60:	114b      	asrs	r3, r1, #5
 800ed62:	4298      	cmp	r0, r3
 800ed64:	b510      	push	{r4, lr}
 800ed66:	db11      	blt.n	800ed8c <__any_on+0x32>
 800ed68:	dd0a      	ble.n	800ed80 <__any_on+0x26>
 800ed6a:	f011 011f 	ands.w	r1, r1, #31
 800ed6e:	d007      	beq.n	800ed80 <__any_on+0x26>
 800ed70:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ed74:	fa24 f001 	lsr.w	r0, r4, r1
 800ed78:	fa00 f101 	lsl.w	r1, r0, r1
 800ed7c:	428c      	cmp	r4, r1
 800ed7e:	d10b      	bne.n	800ed98 <__any_on+0x3e>
 800ed80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed84:	4293      	cmp	r3, r2
 800ed86:	d803      	bhi.n	800ed90 <__any_on+0x36>
 800ed88:	2000      	movs	r0, #0
 800ed8a:	bd10      	pop	{r4, pc}
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	e7f7      	b.n	800ed80 <__any_on+0x26>
 800ed90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ed94:	2900      	cmp	r1, #0
 800ed96:	d0f5      	beq.n	800ed84 <__any_on+0x2a>
 800ed98:	2001      	movs	r0, #1
 800ed9a:	e7f6      	b.n	800ed8a <__any_on+0x30>

0800ed9c <__ascii_wctomb>:
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	4608      	mov	r0, r1
 800eda0:	b141      	cbz	r1, 800edb4 <__ascii_wctomb+0x18>
 800eda2:	2aff      	cmp	r2, #255	@ 0xff
 800eda4:	d904      	bls.n	800edb0 <__ascii_wctomb+0x14>
 800eda6:	228a      	movs	r2, #138	@ 0x8a
 800eda8:	601a      	str	r2, [r3, #0]
 800edaa:	f04f 30ff 	mov.w	r0, #4294967295
 800edae:	4770      	bx	lr
 800edb0:	700a      	strb	r2, [r1, #0]
 800edb2:	2001      	movs	r0, #1
 800edb4:	4770      	bx	lr

0800edb6 <__ssputs_r>:
 800edb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edba:	688e      	ldr	r6, [r1, #8]
 800edbc:	461f      	mov	r7, r3
 800edbe:	42be      	cmp	r6, r7
 800edc0:	680b      	ldr	r3, [r1, #0]
 800edc2:	4682      	mov	sl, r0
 800edc4:	460c      	mov	r4, r1
 800edc6:	4690      	mov	r8, r2
 800edc8:	d82d      	bhi.n	800ee26 <__ssputs_r+0x70>
 800edca:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800edce:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800edd2:	d026      	beq.n	800ee22 <__ssputs_r+0x6c>
 800edd4:	6965      	ldr	r5, [r4, #20]
 800edd6:	6909      	ldr	r1, [r1, #16]
 800edd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eddc:	eba3 0901 	sub.w	r9, r3, r1
 800ede0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ede4:	1c7b      	adds	r3, r7, #1
 800ede6:	444b      	add	r3, r9
 800ede8:	106d      	asrs	r5, r5, #1
 800edea:	429d      	cmp	r5, r3
 800edec:	bf38      	it	cc
 800edee:	461d      	movcc	r5, r3
 800edf0:	0553      	lsls	r3, r2, #21
 800edf2:	d527      	bpl.n	800ee44 <__ssputs_r+0x8e>
 800edf4:	4629      	mov	r1, r5
 800edf6:	f7ff fa89 	bl	800e30c <_malloc_r>
 800edfa:	4606      	mov	r6, r0
 800edfc:	b360      	cbz	r0, 800ee58 <__ssputs_r+0xa2>
 800edfe:	6921      	ldr	r1, [r4, #16]
 800ee00:	464a      	mov	r2, r9
 800ee02:	f7fe fec4 	bl	800db8e <memcpy>
 800ee06:	89a3      	ldrh	r3, [r4, #12]
 800ee08:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ee0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee10:	81a3      	strh	r3, [r4, #12]
 800ee12:	6126      	str	r6, [r4, #16]
 800ee14:	6165      	str	r5, [r4, #20]
 800ee16:	444e      	add	r6, r9
 800ee18:	eba5 0509 	sub.w	r5, r5, r9
 800ee1c:	6026      	str	r6, [r4, #0]
 800ee1e:	60a5      	str	r5, [r4, #8]
 800ee20:	463e      	mov	r6, r7
 800ee22:	42be      	cmp	r6, r7
 800ee24:	d900      	bls.n	800ee28 <__ssputs_r+0x72>
 800ee26:	463e      	mov	r6, r7
 800ee28:	6820      	ldr	r0, [r4, #0]
 800ee2a:	4632      	mov	r2, r6
 800ee2c:	4641      	mov	r1, r8
 800ee2e:	f000 fb51 	bl	800f4d4 <memmove>
 800ee32:	68a3      	ldr	r3, [r4, #8]
 800ee34:	1b9b      	subs	r3, r3, r6
 800ee36:	60a3      	str	r3, [r4, #8]
 800ee38:	6823      	ldr	r3, [r4, #0]
 800ee3a:	4433      	add	r3, r6
 800ee3c:	6023      	str	r3, [r4, #0]
 800ee3e:	2000      	movs	r0, #0
 800ee40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee44:	462a      	mov	r2, r5
 800ee46:	f000 fba9 	bl	800f59c <_realloc_r>
 800ee4a:	4606      	mov	r6, r0
 800ee4c:	2800      	cmp	r0, #0
 800ee4e:	d1e0      	bne.n	800ee12 <__ssputs_r+0x5c>
 800ee50:	6921      	ldr	r1, [r4, #16]
 800ee52:	4650      	mov	r0, sl
 800ee54:	f7fe feb4 	bl	800dbc0 <_free_r>
 800ee58:	230c      	movs	r3, #12
 800ee5a:	f8ca 3000 	str.w	r3, [sl]
 800ee5e:	89a3      	ldrh	r3, [r4, #12]
 800ee60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee64:	81a3      	strh	r3, [r4, #12]
 800ee66:	f04f 30ff 	mov.w	r0, #4294967295
 800ee6a:	e7e9      	b.n	800ee40 <__ssputs_r+0x8a>

0800ee6c <_svfiprintf_r>:
 800ee6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee70:	4698      	mov	r8, r3
 800ee72:	898b      	ldrh	r3, [r1, #12]
 800ee74:	061b      	lsls	r3, r3, #24
 800ee76:	b09d      	sub	sp, #116	@ 0x74
 800ee78:	4607      	mov	r7, r0
 800ee7a:	460d      	mov	r5, r1
 800ee7c:	4614      	mov	r4, r2
 800ee7e:	d510      	bpl.n	800eea2 <_svfiprintf_r+0x36>
 800ee80:	690b      	ldr	r3, [r1, #16]
 800ee82:	b973      	cbnz	r3, 800eea2 <_svfiprintf_r+0x36>
 800ee84:	2140      	movs	r1, #64	@ 0x40
 800ee86:	f7ff fa41 	bl	800e30c <_malloc_r>
 800ee8a:	6028      	str	r0, [r5, #0]
 800ee8c:	6128      	str	r0, [r5, #16]
 800ee8e:	b930      	cbnz	r0, 800ee9e <_svfiprintf_r+0x32>
 800ee90:	230c      	movs	r3, #12
 800ee92:	603b      	str	r3, [r7, #0]
 800ee94:	f04f 30ff 	mov.w	r0, #4294967295
 800ee98:	b01d      	add	sp, #116	@ 0x74
 800ee9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee9e:	2340      	movs	r3, #64	@ 0x40
 800eea0:	616b      	str	r3, [r5, #20]
 800eea2:	2300      	movs	r3, #0
 800eea4:	9309      	str	r3, [sp, #36]	@ 0x24
 800eea6:	2320      	movs	r3, #32
 800eea8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eeac:	f8cd 800c 	str.w	r8, [sp, #12]
 800eeb0:	2330      	movs	r3, #48	@ 0x30
 800eeb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f050 <_svfiprintf_r+0x1e4>
 800eeb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eeba:	f04f 0901 	mov.w	r9, #1
 800eebe:	4623      	mov	r3, r4
 800eec0:	469a      	mov	sl, r3
 800eec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eec6:	b10a      	cbz	r2, 800eecc <_svfiprintf_r+0x60>
 800eec8:	2a25      	cmp	r2, #37	@ 0x25
 800eeca:	d1f9      	bne.n	800eec0 <_svfiprintf_r+0x54>
 800eecc:	ebba 0b04 	subs.w	fp, sl, r4
 800eed0:	d00b      	beq.n	800eeea <_svfiprintf_r+0x7e>
 800eed2:	465b      	mov	r3, fp
 800eed4:	4622      	mov	r2, r4
 800eed6:	4629      	mov	r1, r5
 800eed8:	4638      	mov	r0, r7
 800eeda:	f7ff ff6c 	bl	800edb6 <__ssputs_r>
 800eede:	3001      	adds	r0, #1
 800eee0:	f000 80a7 	beq.w	800f032 <_svfiprintf_r+0x1c6>
 800eee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eee6:	445a      	add	r2, fp
 800eee8:	9209      	str	r2, [sp, #36]	@ 0x24
 800eeea:	f89a 3000 	ldrb.w	r3, [sl]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	f000 809f 	beq.w	800f032 <_svfiprintf_r+0x1c6>
 800eef4:	2300      	movs	r3, #0
 800eef6:	f04f 32ff 	mov.w	r2, #4294967295
 800eefa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eefe:	f10a 0a01 	add.w	sl, sl, #1
 800ef02:	9304      	str	r3, [sp, #16]
 800ef04:	9307      	str	r3, [sp, #28]
 800ef06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ef0a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ef0c:	4654      	mov	r4, sl
 800ef0e:	2205      	movs	r2, #5
 800ef10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef14:	484e      	ldr	r0, [pc, #312]	@ (800f050 <_svfiprintf_r+0x1e4>)
 800ef16:	f7f1 f963 	bl	80001e0 <memchr>
 800ef1a:	9a04      	ldr	r2, [sp, #16]
 800ef1c:	b9d8      	cbnz	r0, 800ef56 <_svfiprintf_r+0xea>
 800ef1e:	06d0      	lsls	r0, r2, #27
 800ef20:	bf44      	itt	mi
 800ef22:	2320      	movmi	r3, #32
 800ef24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef28:	0711      	lsls	r1, r2, #28
 800ef2a:	bf44      	itt	mi
 800ef2c:	232b      	movmi	r3, #43	@ 0x2b
 800ef2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef32:	f89a 3000 	ldrb.w	r3, [sl]
 800ef36:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef38:	d015      	beq.n	800ef66 <_svfiprintf_r+0xfa>
 800ef3a:	9a07      	ldr	r2, [sp, #28]
 800ef3c:	4654      	mov	r4, sl
 800ef3e:	2000      	movs	r0, #0
 800ef40:	f04f 0c0a 	mov.w	ip, #10
 800ef44:	4621      	mov	r1, r4
 800ef46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef4a:	3b30      	subs	r3, #48	@ 0x30
 800ef4c:	2b09      	cmp	r3, #9
 800ef4e:	d94b      	bls.n	800efe8 <_svfiprintf_r+0x17c>
 800ef50:	b1b0      	cbz	r0, 800ef80 <_svfiprintf_r+0x114>
 800ef52:	9207      	str	r2, [sp, #28]
 800ef54:	e014      	b.n	800ef80 <_svfiprintf_r+0x114>
 800ef56:	eba0 0308 	sub.w	r3, r0, r8
 800ef5a:	fa09 f303 	lsl.w	r3, r9, r3
 800ef5e:	4313      	orrs	r3, r2
 800ef60:	9304      	str	r3, [sp, #16]
 800ef62:	46a2      	mov	sl, r4
 800ef64:	e7d2      	b.n	800ef0c <_svfiprintf_r+0xa0>
 800ef66:	9b03      	ldr	r3, [sp, #12]
 800ef68:	1d19      	adds	r1, r3, #4
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	9103      	str	r1, [sp, #12]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	bfbb      	ittet	lt
 800ef72:	425b      	neglt	r3, r3
 800ef74:	f042 0202 	orrlt.w	r2, r2, #2
 800ef78:	9307      	strge	r3, [sp, #28]
 800ef7a:	9307      	strlt	r3, [sp, #28]
 800ef7c:	bfb8      	it	lt
 800ef7e:	9204      	strlt	r2, [sp, #16]
 800ef80:	7823      	ldrb	r3, [r4, #0]
 800ef82:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef84:	d10a      	bne.n	800ef9c <_svfiprintf_r+0x130>
 800ef86:	7863      	ldrb	r3, [r4, #1]
 800ef88:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef8a:	d132      	bne.n	800eff2 <_svfiprintf_r+0x186>
 800ef8c:	9b03      	ldr	r3, [sp, #12]
 800ef8e:	1d1a      	adds	r2, r3, #4
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	9203      	str	r2, [sp, #12]
 800ef94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef98:	3402      	adds	r4, #2
 800ef9a:	9305      	str	r3, [sp, #20]
 800ef9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f060 <_svfiprintf_r+0x1f4>
 800efa0:	7821      	ldrb	r1, [r4, #0]
 800efa2:	2203      	movs	r2, #3
 800efa4:	4650      	mov	r0, sl
 800efa6:	f7f1 f91b 	bl	80001e0 <memchr>
 800efaa:	b138      	cbz	r0, 800efbc <_svfiprintf_r+0x150>
 800efac:	9b04      	ldr	r3, [sp, #16]
 800efae:	eba0 000a 	sub.w	r0, r0, sl
 800efb2:	2240      	movs	r2, #64	@ 0x40
 800efb4:	4082      	lsls	r2, r0
 800efb6:	4313      	orrs	r3, r2
 800efb8:	3401      	adds	r4, #1
 800efba:	9304      	str	r3, [sp, #16]
 800efbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efc0:	4824      	ldr	r0, [pc, #144]	@ (800f054 <_svfiprintf_r+0x1e8>)
 800efc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800efc6:	2206      	movs	r2, #6
 800efc8:	f7f1 f90a 	bl	80001e0 <memchr>
 800efcc:	2800      	cmp	r0, #0
 800efce:	d036      	beq.n	800f03e <_svfiprintf_r+0x1d2>
 800efd0:	4b21      	ldr	r3, [pc, #132]	@ (800f058 <_svfiprintf_r+0x1ec>)
 800efd2:	bb1b      	cbnz	r3, 800f01c <_svfiprintf_r+0x1b0>
 800efd4:	9b03      	ldr	r3, [sp, #12]
 800efd6:	3307      	adds	r3, #7
 800efd8:	f023 0307 	bic.w	r3, r3, #7
 800efdc:	3308      	adds	r3, #8
 800efde:	9303      	str	r3, [sp, #12]
 800efe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efe2:	4433      	add	r3, r6
 800efe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800efe6:	e76a      	b.n	800eebe <_svfiprintf_r+0x52>
 800efe8:	fb0c 3202 	mla	r2, ip, r2, r3
 800efec:	460c      	mov	r4, r1
 800efee:	2001      	movs	r0, #1
 800eff0:	e7a8      	b.n	800ef44 <_svfiprintf_r+0xd8>
 800eff2:	2300      	movs	r3, #0
 800eff4:	3401      	adds	r4, #1
 800eff6:	9305      	str	r3, [sp, #20]
 800eff8:	4619      	mov	r1, r3
 800effa:	f04f 0c0a 	mov.w	ip, #10
 800effe:	4620      	mov	r0, r4
 800f000:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f004:	3a30      	subs	r2, #48	@ 0x30
 800f006:	2a09      	cmp	r2, #9
 800f008:	d903      	bls.n	800f012 <_svfiprintf_r+0x1a6>
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d0c6      	beq.n	800ef9c <_svfiprintf_r+0x130>
 800f00e:	9105      	str	r1, [sp, #20]
 800f010:	e7c4      	b.n	800ef9c <_svfiprintf_r+0x130>
 800f012:	fb0c 2101 	mla	r1, ip, r1, r2
 800f016:	4604      	mov	r4, r0
 800f018:	2301      	movs	r3, #1
 800f01a:	e7f0      	b.n	800effe <_svfiprintf_r+0x192>
 800f01c:	ab03      	add	r3, sp, #12
 800f01e:	9300      	str	r3, [sp, #0]
 800f020:	462a      	mov	r2, r5
 800f022:	4b0e      	ldr	r3, [pc, #56]	@ (800f05c <_svfiprintf_r+0x1f0>)
 800f024:	a904      	add	r1, sp, #16
 800f026:	4638      	mov	r0, r7
 800f028:	f3af 8000 	nop.w
 800f02c:	1c42      	adds	r2, r0, #1
 800f02e:	4606      	mov	r6, r0
 800f030:	d1d6      	bne.n	800efe0 <_svfiprintf_r+0x174>
 800f032:	89ab      	ldrh	r3, [r5, #12]
 800f034:	065b      	lsls	r3, r3, #25
 800f036:	f53f af2d 	bmi.w	800ee94 <_svfiprintf_r+0x28>
 800f03a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f03c:	e72c      	b.n	800ee98 <_svfiprintf_r+0x2c>
 800f03e:	ab03      	add	r3, sp, #12
 800f040:	9300      	str	r3, [sp, #0]
 800f042:	462a      	mov	r2, r5
 800f044:	4b05      	ldr	r3, [pc, #20]	@ (800f05c <_svfiprintf_r+0x1f0>)
 800f046:	a904      	add	r1, sp, #16
 800f048:	4638      	mov	r0, r7
 800f04a:	f000 f879 	bl	800f140 <_printf_i>
 800f04e:	e7ed      	b.n	800f02c <_svfiprintf_r+0x1c0>
 800f050:	080103d7 	.word	0x080103d7
 800f054:	080103e1 	.word	0x080103e1
 800f058:	00000000 	.word	0x00000000
 800f05c:	0800edb7 	.word	0x0800edb7
 800f060:	080103dd 	.word	0x080103dd

0800f064 <_printf_common>:
 800f064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f068:	4616      	mov	r6, r2
 800f06a:	4698      	mov	r8, r3
 800f06c:	688a      	ldr	r2, [r1, #8]
 800f06e:	690b      	ldr	r3, [r1, #16]
 800f070:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f074:	4293      	cmp	r3, r2
 800f076:	bfb8      	it	lt
 800f078:	4613      	movlt	r3, r2
 800f07a:	6033      	str	r3, [r6, #0]
 800f07c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f080:	4607      	mov	r7, r0
 800f082:	460c      	mov	r4, r1
 800f084:	b10a      	cbz	r2, 800f08a <_printf_common+0x26>
 800f086:	3301      	adds	r3, #1
 800f088:	6033      	str	r3, [r6, #0]
 800f08a:	6823      	ldr	r3, [r4, #0]
 800f08c:	0699      	lsls	r1, r3, #26
 800f08e:	bf42      	ittt	mi
 800f090:	6833      	ldrmi	r3, [r6, #0]
 800f092:	3302      	addmi	r3, #2
 800f094:	6033      	strmi	r3, [r6, #0]
 800f096:	6825      	ldr	r5, [r4, #0]
 800f098:	f015 0506 	ands.w	r5, r5, #6
 800f09c:	d106      	bne.n	800f0ac <_printf_common+0x48>
 800f09e:	f104 0a19 	add.w	sl, r4, #25
 800f0a2:	68e3      	ldr	r3, [r4, #12]
 800f0a4:	6832      	ldr	r2, [r6, #0]
 800f0a6:	1a9b      	subs	r3, r3, r2
 800f0a8:	42ab      	cmp	r3, r5
 800f0aa:	dc26      	bgt.n	800f0fa <_printf_common+0x96>
 800f0ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f0b0:	6822      	ldr	r2, [r4, #0]
 800f0b2:	3b00      	subs	r3, #0
 800f0b4:	bf18      	it	ne
 800f0b6:	2301      	movne	r3, #1
 800f0b8:	0692      	lsls	r2, r2, #26
 800f0ba:	d42b      	bmi.n	800f114 <_printf_common+0xb0>
 800f0bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f0c0:	4641      	mov	r1, r8
 800f0c2:	4638      	mov	r0, r7
 800f0c4:	47c8      	blx	r9
 800f0c6:	3001      	adds	r0, #1
 800f0c8:	d01e      	beq.n	800f108 <_printf_common+0xa4>
 800f0ca:	6823      	ldr	r3, [r4, #0]
 800f0cc:	6922      	ldr	r2, [r4, #16]
 800f0ce:	f003 0306 	and.w	r3, r3, #6
 800f0d2:	2b04      	cmp	r3, #4
 800f0d4:	bf02      	ittt	eq
 800f0d6:	68e5      	ldreq	r5, [r4, #12]
 800f0d8:	6833      	ldreq	r3, [r6, #0]
 800f0da:	1aed      	subeq	r5, r5, r3
 800f0dc:	68a3      	ldr	r3, [r4, #8]
 800f0de:	bf0c      	ite	eq
 800f0e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f0e4:	2500      	movne	r5, #0
 800f0e6:	4293      	cmp	r3, r2
 800f0e8:	bfc4      	itt	gt
 800f0ea:	1a9b      	subgt	r3, r3, r2
 800f0ec:	18ed      	addgt	r5, r5, r3
 800f0ee:	2600      	movs	r6, #0
 800f0f0:	341a      	adds	r4, #26
 800f0f2:	42b5      	cmp	r5, r6
 800f0f4:	d11a      	bne.n	800f12c <_printf_common+0xc8>
 800f0f6:	2000      	movs	r0, #0
 800f0f8:	e008      	b.n	800f10c <_printf_common+0xa8>
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	4652      	mov	r2, sl
 800f0fe:	4641      	mov	r1, r8
 800f100:	4638      	mov	r0, r7
 800f102:	47c8      	blx	r9
 800f104:	3001      	adds	r0, #1
 800f106:	d103      	bne.n	800f110 <_printf_common+0xac>
 800f108:	f04f 30ff 	mov.w	r0, #4294967295
 800f10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f110:	3501      	adds	r5, #1
 800f112:	e7c6      	b.n	800f0a2 <_printf_common+0x3e>
 800f114:	18e1      	adds	r1, r4, r3
 800f116:	1c5a      	adds	r2, r3, #1
 800f118:	2030      	movs	r0, #48	@ 0x30
 800f11a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f11e:	4422      	add	r2, r4
 800f120:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f124:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f128:	3302      	adds	r3, #2
 800f12a:	e7c7      	b.n	800f0bc <_printf_common+0x58>
 800f12c:	2301      	movs	r3, #1
 800f12e:	4622      	mov	r2, r4
 800f130:	4641      	mov	r1, r8
 800f132:	4638      	mov	r0, r7
 800f134:	47c8      	blx	r9
 800f136:	3001      	adds	r0, #1
 800f138:	d0e6      	beq.n	800f108 <_printf_common+0xa4>
 800f13a:	3601      	adds	r6, #1
 800f13c:	e7d9      	b.n	800f0f2 <_printf_common+0x8e>
	...

0800f140 <_printf_i>:
 800f140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f144:	7e0f      	ldrb	r7, [r1, #24]
 800f146:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f148:	2f78      	cmp	r7, #120	@ 0x78
 800f14a:	4691      	mov	r9, r2
 800f14c:	4680      	mov	r8, r0
 800f14e:	460c      	mov	r4, r1
 800f150:	469a      	mov	sl, r3
 800f152:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f156:	d807      	bhi.n	800f168 <_printf_i+0x28>
 800f158:	2f62      	cmp	r7, #98	@ 0x62
 800f15a:	d80a      	bhi.n	800f172 <_printf_i+0x32>
 800f15c:	2f00      	cmp	r7, #0
 800f15e:	f000 80d1 	beq.w	800f304 <_printf_i+0x1c4>
 800f162:	2f58      	cmp	r7, #88	@ 0x58
 800f164:	f000 80b8 	beq.w	800f2d8 <_printf_i+0x198>
 800f168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f16c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f170:	e03a      	b.n	800f1e8 <_printf_i+0xa8>
 800f172:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f176:	2b15      	cmp	r3, #21
 800f178:	d8f6      	bhi.n	800f168 <_printf_i+0x28>
 800f17a:	a101      	add	r1, pc, #4	@ (adr r1, 800f180 <_printf_i+0x40>)
 800f17c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f180:	0800f1d9 	.word	0x0800f1d9
 800f184:	0800f1ed 	.word	0x0800f1ed
 800f188:	0800f169 	.word	0x0800f169
 800f18c:	0800f169 	.word	0x0800f169
 800f190:	0800f169 	.word	0x0800f169
 800f194:	0800f169 	.word	0x0800f169
 800f198:	0800f1ed 	.word	0x0800f1ed
 800f19c:	0800f169 	.word	0x0800f169
 800f1a0:	0800f169 	.word	0x0800f169
 800f1a4:	0800f169 	.word	0x0800f169
 800f1a8:	0800f169 	.word	0x0800f169
 800f1ac:	0800f2eb 	.word	0x0800f2eb
 800f1b0:	0800f217 	.word	0x0800f217
 800f1b4:	0800f2a5 	.word	0x0800f2a5
 800f1b8:	0800f169 	.word	0x0800f169
 800f1bc:	0800f169 	.word	0x0800f169
 800f1c0:	0800f30d 	.word	0x0800f30d
 800f1c4:	0800f169 	.word	0x0800f169
 800f1c8:	0800f217 	.word	0x0800f217
 800f1cc:	0800f169 	.word	0x0800f169
 800f1d0:	0800f169 	.word	0x0800f169
 800f1d4:	0800f2ad 	.word	0x0800f2ad
 800f1d8:	6833      	ldr	r3, [r6, #0]
 800f1da:	1d1a      	adds	r2, r3, #4
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	6032      	str	r2, [r6, #0]
 800f1e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f1e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	e09c      	b.n	800f326 <_printf_i+0x1e6>
 800f1ec:	6833      	ldr	r3, [r6, #0]
 800f1ee:	6820      	ldr	r0, [r4, #0]
 800f1f0:	1d19      	adds	r1, r3, #4
 800f1f2:	6031      	str	r1, [r6, #0]
 800f1f4:	0606      	lsls	r6, r0, #24
 800f1f6:	d501      	bpl.n	800f1fc <_printf_i+0xbc>
 800f1f8:	681d      	ldr	r5, [r3, #0]
 800f1fa:	e003      	b.n	800f204 <_printf_i+0xc4>
 800f1fc:	0645      	lsls	r5, r0, #25
 800f1fe:	d5fb      	bpl.n	800f1f8 <_printf_i+0xb8>
 800f200:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f204:	2d00      	cmp	r5, #0
 800f206:	da03      	bge.n	800f210 <_printf_i+0xd0>
 800f208:	232d      	movs	r3, #45	@ 0x2d
 800f20a:	426d      	negs	r5, r5
 800f20c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f210:	4858      	ldr	r0, [pc, #352]	@ (800f374 <_printf_i+0x234>)
 800f212:	230a      	movs	r3, #10
 800f214:	e011      	b.n	800f23a <_printf_i+0xfa>
 800f216:	6821      	ldr	r1, [r4, #0]
 800f218:	6833      	ldr	r3, [r6, #0]
 800f21a:	0608      	lsls	r0, r1, #24
 800f21c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f220:	d402      	bmi.n	800f228 <_printf_i+0xe8>
 800f222:	0649      	lsls	r1, r1, #25
 800f224:	bf48      	it	mi
 800f226:	b2ad      	uxthmi	r5, r5
 800f228:	2f6f      	cmp	r7, #111	@ 0x6f
 800f22a:	4852      	ldr	r0, [pc, #328]	@ (800f374 <_printf_i+0x234>)
 800f22c:	6033      	str	r3, [r6, #0]
 800f22e:	bf14      	ite	ne
 800f230:	230a      	movne	r3, #10
 800f232:	2308      	moveq	r3, #8
 800f234:	2100      	movs	r1, #0
 800f236:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f23a:	6866      	ldr	r6, [r4, #4]
 800f23c:	60a6      	str	r6, [r4, #8]
 800f23e:	2e00      	cmp	r6, #0
 800f240:	db05      	blt.n	800f24e <_printf_i+0x10e>
 800f242:	6821      	ldr	r1, [r4, #0]
 800f244:	432e      	orrs	r6, r5
 800f246:	f021 0104 	bic.w	r1, r1, #4
 800f24a:	6021      	str	r1, [r4, #0]
 800f24c:	d04b      	beq.n	800f2e6 <_printf_i+0x1a6>
 800f24e:	4616      	mov	r6, r2
 800f250:	fbb5 f1f3 	udiv	r1, r5, r3
 800f254:	fb03 5711 	mls	r7, r3, r1, r5
 800f258:	5dc7      	ldrb	r7, [r0, r7]
 800f25a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f25e:	462f      	mov	r7, r5
 800f260:	42bb      	cmp	r3, r7
 800f262:	460d      	mov	r5, r1
 800f264:	d9f4      	bls.n	800f250 <_printf_i+0x110>
 800f266:	2b08      	cmp	r3, #8
 800f268:	d10b      	bne.n	800f282 <_printf_i+0x142>
 800f26a:	6823      	ldr	r3, [r4, #0]
 800f26c:	07df      	lsls	r7, r3, #31
 800f26e:	d508      	bpl.n	800f282 <_printf_i+0x142>
 800f270:	6923      	ldr	r3, [r4, #16]
 800f272:	6861      	ldr	r1, [r4, #4]
 800f274:	4299      	cmp	r1, r3
 800f276:	bfde      	ittt	le
 800f278:	2330      	movle	r3, #48	@ 0x30
 800f27a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f27e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f282:	1b92      	subs	r2, r2, r6
 800f284:	6122      	str	r2, [r4, #16]
 800f286:	f8cd a000 	str.w	sl, [sp]
 800f28a:	464b      	mov	r3, r9
 800f28c:	aa03      	add	r2, sp, #12
 800f28e:	4621      	mov	r1, r4
 800f290:	4640      	mov	r0, r8
 800f292:	f7ff fee7 	bl	800f064 <_printf_common>
 800f296:	3001      	adds	r0, #1
 800f298:	d14a      	bne.n	800f330 <_printf_i+0x1f0>
 800f29a:	f04f 30ff 	mov.w	r0, #4294967295
 800f29e:	b004      	add	sp, #16
 800f2a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2a4:	6823      	ldr	r3, [r4, #0]
 800f2a6:	f043 0320 	orr.w	r3, r3, #32
 800f2aa:	6023      	str	r3, [r4, #0]
 800f2ac:	4832      	ldr	r0, [pc, #200]	@ (800f378 <_printf_i+0x238>)
 800f2ae:	2778      	movs	r7, #120	@ 0x78
 800f2b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f2b4:	6823      	ldr	r3, [r4, #0]
 800f2b6:	6831      	ldr	r1, [r6, #0]
 800f2b8:	061f      	lsls	r7, r3, #24
 800f2ba:	f851 5b04 	ldr.w	r5, [r1], #4
 800f2be:	d402      	bmi.n	800f2c6 <_printf_i+0x186>
 800f2c0:	065f      	lsls	r7, r3, #25
 800f2c2:	bf48      	it	mi
 800f2c4:	b2ad      	uxthmi	r5, r5
 800f2c6:	6031      	str	r1, [r6, #0]
 800f2c8:	07d9      	lsls	r1, r3, #31
 800f2ca:	bf44      	itt	mi
 800f2cc:	f043 0320 	orrmi.w	r3, r3, #32
 800f2d0:	6023      	strmi	r3, [r4, #0]
 800f2d2:	b11d      	cbz	r5, 800f2dc <_printf_i+0x19c>
 800f2d4:	2310      	movs	r3, #16
 800f2d6:	e7ad      	b.n	800f234 <_printf_i+0xf4>
 800f2d8:	4826      	ldr	r0, [pc, #152]	@ (800f374 <_printf_i+0x234>)
 800f2da:	e7e9      	b.n	800f2b0 <_printf_i+0x170>
 800f2dc:	6823      	ldr	r3, [r4, #0]
 800f2de:	f023 0320 	bic.w	r3, r3, #32
 800f2e2:	6023      	str	r3, [r4, #0]
 800f2e4:	e7f6      	b.n	800f2d4 <_printf_i+0x194>
 800f2e6:	4616      	mov	r6, r2
 800f2e8:	e7bd      	b.n	800f266 <_printf_i+0x126>
 800f2ea:	6833      	ldr	r3, [r6, #0]
 800f2ec:	6825      	ldr	r5, [r4, #0]
 800f2ee:	6961      	ldr	r1, [r4, #20]
 800f2f0:	1d18      	adds	r0, r3, #4
 800f2f2:	6030      	str	r0, [r6, #0]
 800f2f4:	062e      	lsls	r6, r5, #24
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	d501      	bpl.n	800f2fe <_printf_i+0x1be>
 800f2fa:	6019      	str	r1, [r3, #0]
 800f2fc:	e002      	b.n	800f304 <_printf_i+0x1c4>
 800f2fe:	0668      	lsls	r0, r5, #25
 800f300:	d5fb      	bpl.n	800f2fa <_printf_i+0x1ba>
 800f302:	8019      	strh	r1, [r3, #0]
 800f304:	2300      	movs	r3, #0
 800f306:	6123      	str	r3, [r4, #16]
 800f308:	4616      	mov	r6, r2
 800f30a:	e7bc      	b.n	800f286 <_printf_i+0x146>
 800f30c:	6833      	ldr	r3, [r6, #0]
 800f30e:	1d1a      	adds	r2, r3, #4
 800f310:	6032      	str	r2, [r6, #0]
 800f312:	681e      	ldr	r6, [r3, #0]
 800f314:	6862      	ldr	r2, [r4, #4]
 800f316:	2100      	movs	r1, #0
 800f318:	4630      	mov	r0, r6
 800f31a:	f7f0 ff61 	bl	80001e0 <memchr>
 800f31e:	b108      	cbz	r0, 800f324 <_printf_i+0x1e4>
 800f320:	1b80      	subs	r0, r0, r6
 800f322:	6060      	str	r0, [r4, #4]
 800f324:	6863      	ldr	r3, [r4, #4]
 800f326:	6123      	str	r3, [r4, #16]
 800f328:	2300      	movs	r3, #0
 800f32a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f32e:	e7aa      	b.n	800f286 <_printf_i+0x146>
 800f330:	6923      	ldr	r3, [r4, #16]
 800f332:	4632      	mov	r2, r6
 800f334:	4649      	mov	r1, r9
 800f336:	4640      	mov	r0, r8
 800f338:	47d0      	blx	sl
 800f33a:	3001      	adds	r0, #1
 800f33c:	d0ad      	beq.n	800f29a <_printf_i+0x15a>
 800f33e:	6823      	ldr	r3, [r4, #0]
 800f340:	079b      	lsls	r3, r3, #30
 800f342:	d413      	bmi.n	800f36c <_printf_i+0x22c>
 800f344:	68e0      	ldr	r0, [r4, #12]
 800f346:	9b03      	ldr	r3, [sp, #12]
 800f348:	4298      	cmp	r0, r3
 800f34a:	bfb8      	it	lt
 800f34c:	4618      	movlt	r0, r3
 800f34e:	e7a6      	b.n	800f29e <_printf_i+0x15e>
 800f350:	2301      	movs	r3, #1
 800f352:	4632      	mov	r2, r6
 800f354:	4649      	mov	r1, r9
 800f356:	4640      	mov	r0, r8
 800f358:	47d0      	blx	sl
 800f35a:	3001      	adds	r0, #1
 800f35c:	d09d      	beq.n	800f29a <_printf_i+0x15a>
 800f35e:	3501      	adds	r5, #1
 800f360:	68e3      	ldr	r3, [r4, #12]
 800f362:	9903      	ldr	r1, [sp, #12]
 800f364:	1a5b      	subs	r3, r3, r1
 800f366:	42ab      	cmp	r3, r5
 800f368:	dcf2      	bgt.n	800f350 <_printf_i+0x210>
 800f36a:	e7eb      	b.n	800f344 <_printf_i+0x204>
 800f36c:	2500      	movs	r5, #0
 800f36e:	f104 0619 	add.w	r6, r4, #25
 800f372:	e7f5      	b.n	800f360 <_printf_i+0x220>
 800f374:	080103e8 	.word	0x080103e8
 800f378:	080103f9 	.word	0x080103f9

0800f37c <__sflush_r>:
 800f37c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f384:	0716      	lsls	r6, r2, #28
 800f386:	4605      	mov	r5, r0
 800f388:	460c      	mov	r4, r1
 800f38a:	d454      	bmi.n	800f436 <__sflush_r+0xba>
 800f38c:	684b      	ldr	r3, [r1, #4]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	dc02      	bgt.n	800f398 <__sflush_r+0x1c>
 800f392:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f394:	2b00      	cmp	r3, #0
 800f396:	dd48      	ble.n	800f42a <__sflush_r+0xae>
 800f398:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f39a:	2e00      	cmp	r6, #0
 800f39c:	d045      	beq.n	800f42a <__sflush_r+0xae>
 800f39e:	2300      	movs	r3, #0
 800f3a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f3a4:	682f      	ldr	r7, [r5, #0]
 800f3a6:	6a21      	ldr	r1, [r4, #32]
 800f3a8:	602b      	str	r3, [r5, #0]
 800f3aa:	d030      	beq.n	800f40e <__sflush_r+0x92>
 800f3ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f3ae:	89a3      	ldrh	r3, [r4, #12]
 800f3b0:	0759      	lsls	r1, r3, #29
 800f3b2:	d505      	bpl.n	800f3c0 <__sflush_r+0x44>
 800f3b4:	6863      	ldr	r3, [r4, #4]
 800f3b6:	1ad2      	subs	r2, r2, r3
 800f3b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f3ba:	b10b      	cbz	r3, 800f3c0 <__sflush_r+0x44>
 800f3bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f3be:	1ad2      	subs	r2, r2, r3
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f3c4:	6a21      	ldr	r1, [r4, #32]
 800f3c6:	4628      	mov	r0, r5
 800f3c8:	47b0      	blx	r6
 800f3ca:	1c43      	adds	r3, r0, #1
 800f3cc:	89a3      	ldrh	r3, [r4, #12]
 800f3ce:	d106      	bne.n	800f3de <__sflush_r+0x62>
 800f3d0:	6829      	ldr	r1, [r5, #0]
 800f3d2:	291d      	cmp	r1, #29
 800f3d4:	d82b      	bhi.n	800f42e <__sflush_r+0xb2>
 800f3d6:	4a2a      	ldr	r2, [pc, #168]	@ (800f480 <__sflush_r+0x104>)
 800f3d8:	40ca      	lsrs	r2, r1
 800f3da:	07d6      	lsls	r6, r2, #31
 800f3dc:	d527      	bpl.n	800f42e <__sflush_r+0xb2>
 800f3de:	2200      	movs	r2, #0
 800f3e0:	6062      	str	r2, [r4, #4]
 800f3e2:	04d9      	lsls	r1, r3, #19
 800f3e4:	6922      	ldr	r2, [r4, #16]
 800f3e6:	6022      	str	r2, [r4, #0]
 800f3e8:	d504      	bpl.n	800f3f4 <__sflush_r+0x78>
 800f3ea:	1c42      	adds	r2, r0, #1
 800f3ec:	d101      	bne.n	800f3f2 <__sflush_r+0x76>
 800f3ee:	682b      	ldr	r3, [r5, #0]
 800f3f0:	b903      	cbnz	r3, 800f3f4 <__sflush_r+0x78>
 800f3f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800f3f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f3f6:	602f      	str	r7, [r5, #0]
 800f3f8:	b1b9      	cbz	r1, 800f42a <__sflush_r+0xae>
 800f3fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f3fe:	4299      	cmp	r1, r3
 800f400:	d002      	beq.n	800f408 <__sflush_r+0x8c>
 800f402:	4628      	mov	r0, r5
 800f404:	f7fe fbdc 	bl	800dbc0 <_free_r>
 800f408:	2300      	movs	r3, #0
 800f40a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f40c:	e00d      	b.n	800f42a <__sflush_r+0xae>
 800f40e:	2301      	movs	r3, #1
 800f410:	4628      	mov	r0, r5
 800f412:	47b0      	blx	r6
 800f414:	4602      	mov	r2, r0
 800f416:	1c50      	adds	r0, r2, #1
 800f418:	d1c9      	bne.n	800f3ae <__sflush_r+0x32>
 800f41a:	682b      	ldr	r3, [r5, #0]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d0c6      	beq.n	800f3ae <__sflush_r+0x32>
 800f420:	2b1d      	cmp	r3, #29
 800f422:	d001      	beq.n	800f428 <__sflush_r+0xac>
 800f424:	2b16      	cmp	r3, #22
 800f426:	d11e      	bne.n	800f466 <__sflush_r+0xea>
 800f428:	602f      	str	r7, [r5, #0]
 800f42a:	2000      	movs	r0, #0
 800f42c:	e022      	b.n	800f474 <__sflush_r+0xf8>
 800f42e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f432:	b21b      	sxth	r3, r3
 800f434:	e01b      	b.n	800f46e <__sflush_r+0xf2>
 800f436:	690f      	ldr	r7, [r1, #16]
 800f438:	2f00      	cmp	r7, #0
 800f43a:	d0f6      	beq.n	800f42a <__sflush_r+0xae>
 800f43c:	0793      	lsls	r3, r2, #30
 800f43e:	680e      	ldr	r6, [r1, #0]
 800f440:	bf08      	it	eq
 800f442:	694b      	ldreq	r3, [r1, #20]
 800f444:	600f      	str	r7, [r1, #0]
 800f446:	bf18      	it	ne
 800f448:	2300      	movne	r3, #0
 800f44a:	eba6 0807 	sub.w	r8, r6, r7
 800f44e:	608b      	str	r3, [r1, #8]
 800f450:	f1b8 0f00 	cmp.w	r8, #0
 800f454:	dde9      	ble.n	800f42a <__sflush_r+0xae>
 800f456:	6a21      	ldr	r1, [r4, #32]
 800f458:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f45a:	4643      	mov	r3, r8
 800f45c:	463a      	mov	r2, r7
 800f45e:	4628      	mov	r0, r5
 800f460:	47b0      	blx	r6
 800f462:	2800      	cmp	r0, #0
 800f464:	dc08      	bgt.n	800f478 <__sflush_r+0xfc>
 800f466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f46a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f46e:	81a3      	strh	r3, [r4, #12]
 800f470:	f04f 30ff 	mov.w	r0, #4294967295
 800f474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f478:	4407      	add	r7, r0
 800f47a:	eba8 0800 	sub.w	r8, r8, r0
 800f47e:	e7e7      	b.n	800f450 <__sflush_r+0xd4>
 800f480:	20400001 	.word	0x20400001

0800f484 <_fflush_r>:
 800f484:	b538      	push	{r3, r4, r5, lr}
 800f486:	690b      	ldr	r3, [r1, #16]
 800f488:	4605      	mov	r5, r0
 800f48a:	460c      	mov	r4, r1
 800f48c:	b913      	cbnz	r3, 800f494 <_fflush_r+0x10>
 800f48e:	2500      	movs	r5, #0
 800f490:	4628      	mov	r0, r5
 800f492:	bd38      	pop	{r3, r4, r5, pc}
 800f494:	b118      	cbz	r0, 800f49e <_fflush_r+0x1a>
 800f496:	6a03      	ldr	r3, [r0, #32]
 800f498:	b90b      	cbnz	r3, 800f49e <_fflush_r+0x1a>
 800f49a:	f7fe f9bd 	bl	800d818 <__sinit>
 800f49e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d0f3      	beq.n	800f48e <_fflush_r+0xa>
 800f4a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f4a8:	07d0      	lsls	r0, r2, #31
 800f4aa:	d404      	bmi.n	800f4b6 <_fflush_r+0x32>
 800f4ac:	0599      	lsls	r1, r3, #22
 800f4ae:	d402      	bmi.n	800f4b6 <_fflush_r+0x32>
 800f4b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4b2:	f7fe fb6a 	bl	800db8a <__retarget_lock_acquire_recursive>
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	4621      	mov	r1, r4
 800f4ba:	f7ff ff5f 	bl	800f37c <__sflush_r>
 800f4be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f4c0:	07da      	lsls	r2, r3, #31
 800f4c2:	4605      	mov	r5, r0
 800f4c4:	d4e4      	bmi.n	800f490 <_fflush_r+0xc>
 800f4c6:	89a3      	ldrh	r3, [r4, #12]
 800f4c8:	059b      	lsls	r3, r3, #22
 800f4ca:	d4e1      	bmi.n	800f490 <_fflush_r+0xc>
 800f4cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4ce:	f7fe fb5d 	bl	800db8c <__retarget_lock_release_recursive>
 800f4d2:	e7dd      	b.n	800f490 <_fflush_r+0xc>

0800f4d4 <memmove>:
 800f4d4:	4288      	cmp	r0, r1
 800f4d6:	b510      	push	{r4, lr}
 800f4d8:	eb01 0402 	add.w	r4, r1, r2
 800f4dc:	d902      	bls.n	800f4e4 <memmove+0x10>
 800f4de:	4284      	cmp	r4, r0
 800f4e0:	4623      	mov	r3, r4
 800f4e2:	d807      	bhi.n	800f4f4 <memmove+0x20>
 800f4e4:	1e43      	subs	r3, r0, #1
 800f4e6:	42a1      	cmp	r1, r4
 800f4e8:	d008      	beq.n	800f4fc <memmove+0x28>
 800f4ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f4f2:	e7f8      	b.n	800f4e6 <memmove+0x12>
 800f4f4:	4402      	add	r2, r0
 800f4f6:	4601      	mov	r1, r0
 800f4f8:	428a      	cmp	r2, r1
 800f4fa:	d100      	bne.n	800f4fe <memmove+0x2a>
 800f4fc:	bd10      	pop	{r4, pc}
 800f4fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f506:	e7f7      	b.n	800f4f8 <memmove+0x24>

0800f508 <_sbrk_r>:
 800f508:	b538      	push	{r3, r4, r5, lr}
 800f50a:	4d06      	ldr	r5, [pc, #24]	@ (800f524 <_sbrk_r+0x1c>)
 800f50c:	2300      	movs	r3, #0
 800f50e:	4604      	mov	r4, r0
 800f510:	4608      	mov	r0, r1
 800f512:	602b      	str	r3, [r5, #0]
 800f514:	f7f5 fc40 	bl	8004d98 <_sbrk>
 800f518:	1c43      	adds	r3, r0, #1
 800f51a:	d102      	bne.n	800f522 <_sbrk_r+0x1a>
 800f51c:	682b      	ldr	r3, [r5, #0]
 800f51e:	b103      	cbz	r3, 800f522 <_sbrk_r+0x1a>
 800f520:	6023      	str	r3, [r4, #0]
 800f522:	bd38      	pop	{r3, r4, r5, pc}
 800f524:	200090f8 	.word	0x200090f8

0800f528 <__assert_func>:
 800f528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f52a:	4614      	mov	r4, r2
 800f52c:	461a      	mov	r2, r3
 800f52e:	4b09      	ldr	r3, [pc, #36]	@ (800f554 <__assert_func+0x2c>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	4605      	mov	r5, r0
 800f534:	68d8      	ldr	r0, [r3, #12]
 800f536:	b14c      	cbz	r4, 800f54c <__assert_func+0x24>
 800f538:	4b07      	ldr	r3, [pc, #28]	@ (800f558 <__assert_func+0x30>)
 800f53a:	9100      	str	r1, [sp, #0]
 800f53c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f540:	4906      	ldr	r1, [pc, #24]	@ (800f55c <__assert_func+0x34>)
 800f542:	462b      	mov	r3, r5
 800f544:	f000 f858 	bl	800f5f8 <fiprintf>
 800f548:	f000 f868 	bl	800f61c <abort>
 800f54c:	4b04      	ldr	r3, [pc, #16]	@ (800f560 <__assert_func+0x38>)
 800f54e:	461c      	mov	r4, r3
 800f550:	e7f3      	b.n	800f53a <__assert_func+0x12>
 800f552:	bf00      	nop
 800f554:	200001a8 	.word	0x200001a8
 800f558:	0801040a 	.word	0x0801040a
 800f55c:	08010417 	.word	0x08010417
 800f560:	08010445 	.word	0x08010445

0800f564 <_calloc_r>:
 800f564:	b570      	push	{r4, r5, r6, lr}
 800f566:	fba1 5402 	umull	r5, r4, r1, r2
 800f56a:	b934      	cbnz	r4, 800f57a <_calloc_r+0x16>
 800f56c:	4629      	mov	r1, r5
 800f56e:	f7fe fecd 	bl	800e30c <_malloc_r>
 800f572:	4606      	mov	r6, r0
 800f574:	b928      	cbnz	r0, 800f582 <_calloc_r+0x1e>
 800f576:	4630      	mov	r0, r6
 800f578:	bd70      	pop	{r4, r5, r6, pc}
 800f57a:	220c      	movs	r2, #12
 800f57c:	6002      	str	r2, [r0, #0]
 800f57e:	2600      	movs	r6, #0
 800f580:	e7f9      	b.n	800f576 <_calloc_r+0x12>
 800f582:	462a      	mov	r2, r5
 800f584:	4621      	mov	r1, r4
 800f586:	f7fe f9f6 	bl	800d976 <memset>
 800f58a:	e7f4      	b.n	800f576 <_calloc_r+0x12>

0800f58c <malloc>:
 800f58c:	4b02      	ldr	r3, [pc, #8]	@ (800f598 <malloc+0xc>)
 800f58e:	4601      	mov	r1, r0
 800f590:	6818      	ldr	r0, [r3, #0]
 800f592:	f7fe bebb 	b.w	800e30c <_malloc_r>
 800f596:	bf00      	nop
 800f598:	200001a8 	.word	0x200001a8

0800f59c <_realloc_r>:
 800f59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5a0:	4607      	mov	r7, r0
 800f5a2:	4614      	mov	r4, r2
 800f5a4:	460d      	mov	r5, r1
 800f5a6:	b921      	cbnz	r1, 800f5b2 <_realloc_r+0x16>
 800f5a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ac:	4611      	mov	r1, r2
 800f5ae:	f7fe bead 	b.w	800e30c <_malloc_r>
 800f5b2:	b92a      	cbnz	r2, 800f5c0 <_realloc_r+0x24>
 800f5b4:	f7fe fb04 	bl	800dbc0 <_free_r>
 800f5b8:	4625      	mov	r5, r4
 800f5ba:	4628      	mov	r0, r5
 800f5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5c0:	f000 f833 	bl	800f62a <_malloc_usable_size_r>
 800f5c4:	4284      	cmp	r4, r0
 800f5c6:	4606      	mov	r6, r0
 800f5c8:	d802      	bhi.n	800f5d0 <_realloc_r+0x34>
 800f5ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f5ce:	d8f4      	bhi.n	800f5ba <_realloc_r+0x1e>
 800f5d0:	4621      	mov	r1, r4
 800f5d2:	4638      	mov	r0, r7
 800f5d4:	f7fe fe9a 	bl	800e30c <_malloc_r>
 800f5d8:	4680      	mov	r8, r0
 800f5da:	b908      	cbnz	r0, 800f5e0 <_realloc_r+0x44>
 800f5dc:	4645      	mov	r5, r8
 800f5de:	e7ec      	b.n	800f5ba <_realloc_r+0x1e>
 800f5e0:	42b4      	cmp	r4, r6
 800f5e2:	4622      	mov	r2, r4
 800f5e4:	4629      	mov	r1, r5
 800f5e6:	bf28      	it	cs
 800f5e8:	4632      	movcs	r2, r6
 800f5ea:	f7fe fad0 	bl	800db8e <memcpy>
 800f5ee:	4629      	mov	r1, r5
 800f5f0:	4638      	mov	r0, r7
 800f5f2:	f7fe fae5 	bl	800dbc0 <_free_r>
 800f5f6:	e7f1      	b.n	800f5dc <_realloc_r+0x40>

0800f5f8 <fiprintf>:
 800f5f8:	b40e      	push	{r1, r2, r3}
 800f5fa:	b503      	push	{r0, r1, lr}
 800f5fc:	4601      	mov	r1, r0
 800f5fe:	ab03      	add	r3, sp, #12
 800f600:	4805      	ldr	r0, [pc, #20]	@ (800f618 <fiprintf+0x20>)
 800f602:	f853 2b04 	ldr.w	r2, [r3], #4
 800f606:	6800      	ldr	r0, [r0, #0]
 800f608:	9301      	str	r3, [sp, #4]
 800f60a:	f000 f83f 	bl	800f68c <_vfiprintf_r>
 800f60e:	b002      	add	sp, #8
 800f610:	f85d eb04 	ldr.w	lr, [sp], #4
 800f614:	b003      	add	sp, #12
 800f616:	4770      	bx	lr
 800f618:	200001a8 	.word	0x200001a8

0800f61c <abort>:
 800f61c:	b508      	push	{r3, lr}
 800f61e:	2006      	movs	r0, #6
 800f620:	f000 fa08 	bl	800fa34 <raise>
 800f624:	2001      	movs	r0, #1
 800f626:	f7f5 fb3f 	bl	8004ca8 <_exit>

0800f62a <_malloc_usable_size_r>:
 800f62a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f62e:	1f18      	subs	r0, r3, #4
 800f630:	2b00      	cmp	r3, #0
 800f632:	bfbc      	itt	lt
 800f634:	580b      	ldrlt	r3, [r1, r0]
 800f636:	18c0      	addlt	r0, r0, r3
 800f638:	4770      	bx	lr

0800f63a <__sfputc_r>:
 800f63a:	6893      	ldr	r3, [r2, #8]
 800f63c:	3b01      	subs	r3, #1
 800f63e:	2b00      	cmp	r3, #0
 800f640:	b410      	push	{r4}
 800f642:	6093      	str	r3, [r2, #8]
 800f644:	da08      	bge.n	800f658 <__sfputc_r+0x1e>
 800f646:	6994      	ldr	r4, [r2, #24]
 800f648:	42a3      	cmp	r3, r4
 800f64a:	db01      	blt.n	800f650 <__sfputc_r+0x16>
 800f64c:	290a      	cmp	r1, #10
 800f64e:	d103      	bne.n	800f658 <__sfputc_r+0x1e>
 800f650:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f654:	f000 b932 	b.w	800f8bc <__swbuf_r>
 800f658:	6813      	ldr	r3, [r2, #0]
 800f65a:	1c58      	adds	r0, r3, #1
 800f65c:	6010      	str	r0, [r2, #0]
 800f65e:	7019      	strb	r1, [r3, #0]
 800f660:	4608      	mov	r0, r1
 800f662:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f666:	4770      	bx	lr

0800f668 <__sfputs_r>:
 800f668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f66a:	4606      	mov	r6, r0
 800f66c:	460f      	mov	r7, r1
 800f66e:	4614      	mov	r4, r2
 800f670:	18d5      	adds	r5, r2, r3
 800f672:	42ac      	cmp	r4, r5
 800f674:	d101      	bne.n	800f67a <__sfputs_r+0x12>
 800f676:	2000      	movs	r0, #0
 800f678:	e007      	b.n	800f68a <__sfputs_r+0x22>
 800f67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f67e:	463a      	mov	r2, r7
 800f680:	4630      	mov	r0, r6
 800f682:	f7ff ffda 	bl	800f63a <__sfputc_r>
 800f686:	1c43      	adds	r3, r0, #1
 800f688:	d1f3      	bne.n	800f672 <__sfputs_r+0xa>
 800f68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f68c <_vfiprintf_r>:
 800f68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f690:	460d      	mov	r5, r1
 800f692:	b09d      	sub	sp, #116	@ 0x74
 800f694:	4614      	mov	r4, r2
 800f696:	4698      	mov	r8, r3
 800f698:	4606      	mov	r6, r0
 800f69a:	b118      	cbz	r0, 800f6a4 <_vfiprintf_r+0x18>
 800f69c:	6a03      	ldr	r3, [r0, #32]
 800f69e:	b90b      	cbnz	r3, 800f6a4 <_vfiprintf_r+0x18>
 800f6a0:	f7fe f8ba 	bl	800d818 <__sinit>
 800f6a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f6a6:	07d9      	lsls	r1, r3, #31
 800f6a8:	d405      	bmi.n	800f6b6 <_vfiprintf_r+0x2a>
 800f6aa:	89ab      	ldrh	r3, [r5, #12]
 800f6ac:	059a      	lsls	r2, r3, #22
 800f6ae:	d402      	bmi.n	800f6b6 <_vfiprintf_r+0x2a>
 800f6b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f6b2:	f7fe fa6a 	bl	800db8a <__retarget_lock_acquire_recursive>
 800f6b6:	89ab      	ldrh	r3, [r5, #12]
 800f6b8:	071b      	lsls	r3, r3, #28
 800f6ba:	d501      	bpl.n	800f6c0 <_vfiprintf_r+0x34>
 800f6bc:	692b      	ldr	r3, [r5, #16]
 800f6be:	b99b      	cbnz	r3, 800f6e8 <_vfiprintf_r+0x5c>
 800f6c0:	4629      	mov	r1, r5
 800f6c2:	4630      	mov	r0, r6
 800f6c4:	f000 f938 	bl	800f938 <__swsetup_r>
 800f6c8:	b170      	cbz	r0, 800f6e8 <_vfiprintf_r+0x5c>
 800f6ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f6cc:	07dc      	lsls	r4, r3, #31
 800f6ce:	d504      	bpl.n	800f6da <_vfiprintf_r+0x4e>
 800f6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f6d4:	b01d      	add	sp, #116	@ 0x74
 800f6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6da:	89ab      	ldrh	r3, [r5, #12]
 800f6dc:	0598      	lsls	r0, r3, #22
 800f6de:	d4f7      	bmi.n	800f6d0 <_vfiprintf_r+0x44>
 800f6e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f6e2:	f7fe fa53 	bl	800db8c <__retarget_lock_release_recursive>
 800f6e6:	e7f3      	b.n	800f6d0 <_vfiprintf_r+0x44>
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6ec:	2320      	movs	r3, #32
 800f6ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f6f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6f6:	2330      	movs	r3, #48	@ 0x30
 800f6f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f8a8 <_vfiprintf_r+0x21c>
 800f6fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f700:	f04f 0901 	mov.w	r9, #1
 800f704:	4623      	mov	r3, r4
 800f706:	469a      	mov	sl, r3
 800f708:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f70c:	b10a      	cbz	r2, 800f712 <_vfiprintf_r+0x86>
 800f70e:	2a25      	cmp	r2, #37	@ 0x25
 800f710:	d1f9      	bne.n	800f706 <_vfiprintf_r+0x7a>
 800f712:	ebba 0b04 	subs.w	fp, sl, r4
 800f716:	d00b      	beq.n	800f730 <_vfiprintf_r+0xa4>
 800f718:	465b      	mov	r3, fp
 800f71a:	4622      	mov	r2, r4
 800f71c:	4629      	mov	r1, r5
 800f71e:	4630      	mov	r0, r6
 800f720:	f7ff ffa2 	bl	800f668 <__sfputs_r>
 800f724:	3001      	adds	r0, #1
 800f726:	f000 80a7 	beq.w	800f878 <_vfiprintf_r+0x1ec>
 800f72a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f72c:	445a      	add	r2, fp
 800f72e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f730:	f89a 3000 	ldrb.w	r3, [sl]
 800f734:	2b00      	cmp	r3, #0
 800f736:	f000 809f 	beq.w	800f878 <_vfiprintf_r+0x1ec>
 800f73a:	2300      	movs	r3, #0
 800f73c:	f04f 32ff 	mov.w	r2, #4294967295
 800f740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f744:	f10a 0a01 	add.w	sl, sl, #1
 800f748:	9304      	str	r3, [sp, #16]
 800f74a:	9307      	str	r3, [sp, #28]
 800f74c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f750:	931a      	str	r3, [sp, #104]	@ 0x68
 800f752:	4654      	mov	r4, sl
 800f754:	2205      	movs	r2, #5
 800f756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f75a:	4853      	ldr	r0, [pc, #332]	@ (800f8a8 <_vfiprintf_r+0x21c>)
 800f75c:	f7f0 fd40 	bl	80001e0 <memchr>
 800f760:	9a04      	ldr	r2, [sp, #16]
 800f762:	b9d8      	cbnz	r0, 800f79c <_vfiprintf_r+0x110>
 800f764:	06d1      	lsls	r1, r2, #27
 800f766:	bf44      	itt	mi
 800f768:	2320      	movmi	r3, #32
 800f76a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f76e:	0713      	lsls	r3, r2, #28
 800f770:	bf44      	itt	mi
 800f772:	232b      	movmi	r3, #43	@ 0x2b
 800f774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f778:	f89a 3000 	ldrb.w	r3, [sl]
 800f77c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f77e:	d015      	beq.n	800f7ac <_vfiprintf_r+0x120>
 800f780:	9a07      	ldr	r2, [sp, #28]
 800f782:	4654      	mov	r4, sl
 800f784:	2000      	movs	r0, #0
 800f786:	f04f 0c0a 	mov.w	ip, #10
 800f78a:	4621      	mov	r1, r4
 800f78c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f790:	3b30      	subs	r3, #48	@ 0x30
 800f792:	2b09      	cmp	r3, #9
 800f794:	d94b      	bls.n	800f82e <_vfiprintf_r+0x1a2>
 800f796:	b1b0      	cbz	r0, 800f7c6 <_vfiprintf_r+0x13a>
 800f798:	9207      	str	r2, [sp, #28]
 800f79a:	e014      	b.n	800f7c6 <_vfiprintf_r+0x13a>
 800f79c:	eba0 0308 	sub.w	r3, r0, r8
 800f7a0:	fa09 f303 	lsl.w	r3, r9, r3
 800f7a4:	4313      	orrs	r3, r2
 800f7a6:	9304      	str	r3, [sp, #16]
 800f7a8:	46a2      	mov	sl, r4
 800f7aa:	e7d2      	b.n	800f752 <_vfiprintf_r+0xc6>
 800f7ac:	9b03      	ldr	r3, [sp, #12]
 800f7ae:	1d19      	adds	r1, r3, #4
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	9103      	str	r1, [sp, #12]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	bfbb      	ittet	lt
 800f7b8:	425b      	neglt	r3, r3
 800f7ba:	f042 0202 	orrlt.w	r2, r2, #2
 800f7be:	9307      	strge	r3, [sp, #28]
 800f7c0:	9307      	strlt	r3, [sp, #28]
 800f7c2:	bfb8      	it	lt
 800f7c4:	9204      	strlt	r2, [sp, #16]
 800f7c6:	7823      	ldrb	r3, [r4, #0]
 800f7c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f7ca:	d10a      	bne.n	800f7e2 <_vfiprintf_r+0x156>
 800f7cc:	7863      	ldrb	r3, [r4, #1]
 800f7ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800f7d0:	d132      	bne.n	800f838 <_vfiprintf_r+0x1ac>
 800f7d2:	9b03      	ldr	r3, [sp, #12]
 800f7d4:	1d1a      	adds	r2, r3, #4
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	9203      	str	r2, [sp, #12]
 800f7da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f7de:	3402      	adds	r4, #2
 800f7e0:	9305      	str	r3, [sp, #20]
 800f7e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f8b8 <_vfiprintf_r+0x22c>
 800f7e6:	7821      	ldrb	r1, [r4, #0]
 800f7e8:	2203      	movs	r2, #3
 800f7ea:	4650      	mov	r0, sl
 800f7ec:	f7f0 fcf8 	bl	80001e0 <memchr>
 800f7f0:	b138      	cbz	r0, 800f802 <_vfiprintf_r+0x176>
 800f7f2:	9b04      	ldr	r3, [sp, #16]
 800f7f4:	eba0 000a 	sub.w	r0, r0, sl
 800f7f8:	2240      	movs	r2, #64	@ 0x40
 800f7fa:	4082      	lsls	r2, r0
 800f7fc:	4313      	orrs	r3, r2
 800f7fe:	3401      	adds	r4, #1
 800f800:	9304      	str	r3, [sp, #16]
 800f802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f806:	4829      	ldr	r0, [pc, #164]	@ (800f8ac <_vfiprintf_r+0x220>)
 800f808:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f80c:	2206      	movs	r2, #6
 800f80e:	f7f0 fce7 	bl	80001e0 <memchr>
 800f812:	2800      	cmp	r0, #0
 800f814:	d03f      	beq.n	800f896 <_vfiprintf_r+0x20a>
 800f816:	4b26      	ldr	r3, [pc, #152]	@ (800f8b0 <_vfiprintf_r+0x224>)
 800f818:	bb1b      	cbnz	r3, 800f862 <_vfiprintf_r+0x1d6>
 800f81a:	9b03      	ldr	r3, [sp, #12]
 800f81c:	3307      	adds	r3, #7
 800f81e:	f023 0307 	bic.w	r3, r3, #7
 800f822:	3308      	adds	r3, #8
 800f824:	9303      	str	r3, [sp, #12]
 800f826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f828:	443b      	add	r3, r7
 800f82a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f82c:	e76a      	b.n	800f704 <_vfiprintf_r+0x78>
 800f82e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f832:	460c      	mov	r4, r1
 800f834:	2001      	movs	r0, #1
 800f836:	e7a8      	b.n	800f78a <_vfiprintf_r+0xfe>
 800f838:	2300      	movs	r3, #0
 800f83a:	3401      	adds	r4, #1
 800f83c:	9305      	str	r3, [sp, #20]
 800f83e:	4619      	mov	r1, r3
 800f840:	f04f 0c0a 	mov.w	ip, #10
 800f844:	4620      	mov	r0, r4
 800f846:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f84a:	3a30      	subs	r2, #48	@ 0x30
 800f84c:	2a09      	cmp	r2, #9
 800f84e:	d903      	bls.n	800f858 <_vfiprintf_r+0x1cc>
 800f850:	2b00      	cmp	r3, #0
 800f852:	d0c6      	beq.n	800f7e2 <_vfiprintf_r+0x156>
 800f854:	9105      	str	r1, [sp, #20]
 800f856:	e7c4      	b.n	800f7e2 <_vfiprintf_r+0x156>
 800f858:	fb0c 2101 	mla	r1, ip, r1, r2
 800f85c:	4604      	mov	r4, r0
 800f85e:	2301      	movs	r3, #1
 800f860:	e7f0      	b.n	800f844 <_vfiprintf_r+0x1b8>
 800f862:	ab03      	add	r3, sp, #12
 800f864:	9300      	str	r3, [sp, #0]
 800f866:	462a      	mov	r2, r5
 800f868:	4b12      	ldr	r3, [pc, #72]	@ (800f8b4 <_vfiprintf_r+0x228>)
 800f86a:	a904      	add	r1, sp, #16
 800f86c:	4630      	mov	r0, r6
 800f86e:	f3af 8000 	nop.w
 800f872:	4607      	mov	r7, r0
 800f874:	1c78      	adds	r0, r7, #1
 800f876:	d1d6      	bne.n	800f826 <_vfiprintf_r+0x19a>
 800f878:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f87a:	07d9      	lsls	r1, r3, #31
 800f87c:	d405      	bmi.n	800f88a <_vfiprintf_r+0x1fe>
 800f87e:	89ab      	ldrh	r3, [r5, #12]
 800f880:	059a      	lsls	r2, r3, #22
 800f882:	d402      	bmi.n	800f88a <_vfiprintf_r+0x1fe>
 800f884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f886:	f7fe f981 	bl	800db8c <__retarget_lock_release_recursive>
 800f88a:	89ab      	ldrh	r3, [r5, #12]
 800f88c:	065b      	lsls	r3, r3, #25
 800f88e:	f53f af1f 	bmi.w	800f6d0 <_vfiprintf_r+0x44>
 800f892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f894:	e71e      	b.n	800f6d4 <_vfiprintf_r+0x48>
 800f896:	ab03      	add	r3, sp, #12
 800f898:	9300      	str	r3, [sp, #0]
 800f89a:	462a      	mov	r2, r5
 800f89c:	4b05      	ldr	r3, [pc, #20]	@ (800f8b4 <_vfiprintf_r+0x228>)
 800f89e:	a904      	add	r1, sp, #16
 800f8a0:	4630      	mov	r0, r6
 800f8a2:	f7ff fc4d 	bl	800f140 <_printf_i>
 800f8a6:	e7e4      	b.n	800f872 <_vfiprintf_r+0x1e6>
 800f8a8:	080103d7 	.word	0x080103d7
 800f8ac:	080103e1 	.word	0x080103e1
 800f8b0:	00000000 	.word	0x00000000
 800f8b4:	0800f669 	.word	0x0800f669
 800f8b8:	080103dd 	.word	0x080103dd

0800f8bc <__swbuf_r>:
 800f8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8be:	460e      	mov	r6, r1
 800f8c0:	4614      	mov	r4, r2
 800f8c2:	4605      	mov	r5, r0
 800f8c4:	b118      	cbz	r0, 800f8ce <__swbuf_r+0x12>
 800f8c6:	6a03      	ldr	r3, [r0, #32]
 800f8c8:	b90b      	cbnz	r3, 800f8ce <__swbuf_r+0x12>
 800f8ca:	f7fd ffa5 	bl	800d818 <__sinit>
 800f8ce:	69a3      	ldr	r3, [r4, #24]
 800f8d0:	60a3      	str	r3, [r4, #8]
 800f8d2:	89a3      	ldrh	r3, [r4, #12]
 800f8d4:	071a      	lsls	r2, r3, #28
 800f8d6:	d501      	bpl.n	800f8dc <__swbuf_r+0x20>
 800f8d8:	6923      	ldr	r3, [r4, #16]
 800f8da:	b943      	cbnz	r3, 800f8ee <__swbuf_r+0x32>
 800f8dc:	4621      	mov	r1, r4
 800f8de:	4628      	mov	r0, r5
 800f8e0:	f000 f82a 	bl	800f938 <__swsetup_r>
 800f8e4:	b118      	cbz	r0, 800f8ee <__swbuf_r+0x32>
 800f8e6:	f04f 37ff 	mov.w	r7, #4294967295
 800f8ea:	4638      	mov	r0, r7
 800f8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8ee:	6823      	ldr	r3, [r4, #0]
 800f8f0:	6922      	ldr	r2, [r4, #16]
 800f8f2:	1a98      	subs	r0, r3, r2
 800f8f4:	6963      	ldr	r3, [r4, #20]
 800f8f6:	b2f6      	uxtb	r6, r6
 800f8f8:	4283      	cmp	r3, r0
 800f8fa:	4637      	mov	r7, r6
 800f8fc:	dc05      	bgt.n	800f90a <__swbuf_r+0x4e>
 800f8fe:	4621      	mov	r1, r4
 800f900:	4628      	mov	r0, r5
 800f902:	f7ff fdbf 	bl	800f484 <_fflush_r>
 800f906:	2800      	cmp	r0, #0
 800f908:	d1ed      	bne.n	800f8e6 <__swbuf_r+0x2a>
 800f90a:	68a3      	ldr	r3, [r4, #8]
 800f90c:	3b01      	subs	r3, #1
 800f90e:	60a3      	str	r3, [r4, #8]
 800f910:	6823      	ldr	r3, [r4, #0]
 800f912:	1c5a      	adds	r2, r3, #1
 800f914:	6022      	str	r2, [r4, #0]
 800f916:	701e      	strb	r6, [r3, #0]
 800f918:	6962      	ldr	r2, [r4, #20]
 800f91a:	1c43      	adds	r3, r0, #1
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d004      	beq.n	800f92a <__swbuf_r+0x6e>
 800f920:	89a3      	ldrh	r3, [r4, #12]
 800f922:	07db      	lsls	r3, r3, #31
 800f924:	d5e1      	bpl.n	800f8ea <__swbuf_r+0x2e>
 800f926:	2e0a      	cmp	r6, #10
 800f928:	d1df      	bne.n	800f8ea <__swbuf_r+0x2e>
 800f92a:	4621      	mov	r1, r4
 800f92c:	4628      	mov	r0, r5
 800f92e:	f7ff fda9 	bl	800f484 <_fflush_r>
 800f932:	2800      	cmp	r0, #0
 800f934:	d0d9      	beq.n	800f8ea <__swbuf_r+0x2e>
 800f936:	e7d6      	b.n	800f8e6 <__swbuf_r+0x2a>

0800f938 <__swsetup_r>:
 800f938:	b538      	push	{r3, r4, r5, lr}
 800f93a:	4b29      	ldr	r3, [pc, #164]	@ (800f9e0 <__swsetup_r+0xa8>)
 800f93c:	4605      	mov	r5, r0
 800f93e:	6818      	ldr	r0, [r3, #0]
 800f940:	460c      	mov	r4, r1
 800f942:	b118      	cbz	r0, 800f94c <__swsetup_r+0x14>
 800f944:	6a03      	ldr	r3, [r0, #32]
 800f946:	b90b      	cbnz	r3, 800f94c <__swsetup_r+0x14>
 800f948:	f7fd ff66 	bl	800d818 <__sinit>
 800f94c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f950:	0719      	lsls	r1, r3, #28
 800f952:	d422      	bmi.n	800f99a <__swsetup_r+0x62>
 800f954:	06da      	lsls	r2, r3, #27
 800f956:	d407      	bmi.n	800f968 <__swsetup_r+0x30>
 800f958:	2209      	movs	r2, #9
 800f95a:	602a      	str	r2, [r5, #0]
 800f95c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f960:	81a3      	strh	r3, [r4, #12]
 800f962:	f04f 30ff 	mov.w	r0, #4294967295
 800f966:	e033      	b.n	800f9d0 <__swsetup_r+0x98>
 800f968:	0758      	lsls	r0, r3, #29
 800f96a:	d512      	bpl.n	800f992 <__swsetup_r+0x5a>
 800f96c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f96e:	b141      	cbz	r1, 800f982 <__swsetup_r+0x4a>
 800f970:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f974:	4299      	cmp	r1, r3
 800f976:	d002      	beq.n	800f97e <__swsetup_r+0x46>
 800f978:	4628      	mov	r0, r5
 800f97a:	f7fe f921 	bl	800dbc0 <_free_r>
 800f97e:	2300      	movs	r3, #0
 800f980:	6363      	str	r3, [r4, #52]	@ 0x34
 800f982:	89a3      	ldrh	r3, [r4, #12]
 800f984:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f988:	81a3      	strh	r3, [r4, #12]
 800f98a:	2300      	movs	r3, #0
 800f98c:	6063      	str	r3, [r4, #4]
 800f98e:	6923      	ldr	r3, [r4, #16]
 800f990:	6023      	str	r3, [r4, #0]
 800f992:	89a3      	ldrh	r3, [r4, #12]
 800f994:	f043 0308 	orr.w	r3, r3, #8
 800f998:	81a3      	strh	r3, [r4, #12]
 800f99a:	6923      	ldr	r3, [r4, #16]
 800f99c:	b94b      	cbnz	r3, 800f9b2 <__swsetup_r+0x7a>
 800f99e:	89a3      	ldrh	r3, [r4, #12]
 800f9a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f9a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f9a8:	d003      	beq.n	800f9b2 <__swsetup_r+0x7a>
 800f9aa:	4621      	mov	r1, r4
 800f9ac:	4628      	mov	r0, r5
 800f9ae:	f000 f883 	bl	800fab8 <__smakebuf_r>
 800f9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9b6:	f013 0201 	ands.w	r2, r3, #1
 800f9ba:	d00a      	beq.n	800f9d2 <__swsetup_r+0x9a>
 800f9bc:	2200      	movs	r2, #0
 800f9be:	60a2      	str	r2, [r4, #8]
 800f9c0:	6962      	ldr	r2, [r4, #20]
 800f9c2:	4252      	negs	r2, r2
 800f9c4:	61a2      	str	r2, [r4, #24]
 800f9c6:	6922      	ldr	r2, [r4, #16]
 800f9c8:	b942      	cbnz	r2, 800f9dc <__swsetup_r+0xa4>
 800f9ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f9ce:	d1c5      	bne.n	800f95c <__swsetup_r+0x24>
 800f9d0:	bd38      	pop	{r3, r4, r5, pc}
 800f9d2:	0799      	lsls	r1, r3, #30
 800f9d4:	bf58      	it	pl
 800f9d6:	6962      	ldrpl	r2, [r4, #20]
 800f9d8:	60a2      	str	r2, [r4, #8]
 800f9da:	e7f4      	b.n	800f9c6 <__swsetup_r+0x8e>
 800f9dc:	2000      	movs	r0, #0
 800f9de:	e7f7      	b.n	800f9d0 <__swsetup_r+0x98>
 800f9e0:	200001a8 	.word	0x200001a8

0800f9e4 <_raise_r>:
 800f9e4:	291f      	cmp	r1, #31
 800f9e6:	b538      	push	{r3, r4, r5, lr}
 800f9e8:	4605      	mov	r5, r0
 800f9ea:	460c      	mov	r4, r1
 800f9ec:	d904      	bls.n	800f9f8 <_raise_r+0x14>
 800f9ee:	2316      	movs	r3, #22
 800f9f0:	6003      	str	r3, [r0, #0]
 800f9f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f9f6:	bd38      	pop	{r3, r4, r5, pc}
 800f9f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f9fa:	b112      	cbz	r2, 800fa02 <_raise_r+0x1e>
 800f9fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa00:	b94b      	cbnz	r3, 800fa16 <_raise_r+0x32>
 800fa02:	4628      	mov	r0, r5
 800fa04:	f000 f830 	bl	800fa68 <_getpid_r>
 800fa08:	4622      	mov	r2, r4
 800fa0a:	4601      	mov	r1, r0
 800fa0c:	4628      	mov	r0, r5
 800fa0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa12:	f000 b817 	b.w	800fa44 <_kill_r>
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d00a      	beq.n	800fa30 <_raise_r+0x4c>
 800fa1a:	1c59      	adds	r1, r3, #1
 800fa1c:	d103      	bne.n	800fa26 <_raise_r+0x42>
 800fa1e:	2316      	movs	r3, #22
 800fa20:	6003      	str	r3, [r0, #0]
 800fa22:	2001      	movs	r0, #1
 800fa24:	e7e7      	b.n	800f9f6 <_raise_r+0x12>
 800fa26:	2100      	movs	r1, #0
 800fa28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fa2c:	4620      	mov	r0, r4
 800fa2e:	4798      	blx	r3
 800fa30:	2000      	movs	r0, #0
 800fa32:	e7e0      	b.n	800f9f6 <_raise_r+0x12>

0800fa34 <raise>:
 800fa34:	4b02      	ldr	r3, [pc, #8]	@ (800fa40 <raise+0xc>)
 800fa36:	4601      	mov	r1, r0
 800fa38:	6818      	ldr	r0, [r3, #0]
 800fa3a:	f7ff bfd3 	b.w	800f9e4 <_raise_r>
 800fa3e:	bf00      	nop
 800fa40:	200001a8 	.word	0x200001a8

0800fa44 <_kill_r>:
 800fa44:	b538      	push	{r3, r4, r5, lr}
 800fa46:	4d07      	ldr	r5, [pc, #28]	@ (800fa64 <_kill_r+0x20>)
 800fa48:	2300      	movs	r3, #0
 800fa4a:	4604      	mov	r4, r0
 800fa4c:	4608      	mov	r0, r1
 800fa4e:	4611      	mov	r1, r2
 800fa50:	602b      	str	r3, [r5, #0]
 800fa52:	f7f5 f919 	bl	8004c88 <_kill>
 800fa56:	1c43      	adds	r3, r0, #1
 800fa58:	d102      	bne.n	800fa60 <_kill_r+0x1c>
 800fa5a:	682b      	ldr	r3, [r5, #0]
 800fa5c:	b103      	cbz	r3, 800fa60 <_kill_r+0x1c>
 800fa5e:	6023      	str	r3, [r4, #0]
 800fa60:	bd38      	pop	{r3, r4, r5, pc}
 800fa62:	bf00      	nop
 800fa64:	200090f8 	.word	0x200090f8

0800fa68 <_getpid_r>:
 800fa68:	f7f5 b906 	b.w	8004c78 <_getpid>

0800fa6c <__swhatbuf_r>:
 800fa6c:	b570      	push	{r4, r5, r6, lr}
 800fa6e:	460c      	mov	r4, r1
 800fa70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa74:	2900      	cmp	r1, #0
 800fa76:	b096      	sub	sp, #88	@ 0x58
 800fa78:	4615      	mov	r5, r2
 800fa7a:	461e      	mov	r6, r3
 800fa7c:	da0d      	bge.n	800fa9a <__swhatbuf_r+0x2e>
 800fa7e:	89a3      	ldrh	r3, [r4, #12]
 800fa80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fa84:	f04f 0100 	mov.w	r1, #0
 800fa88:	bf14      	ite	ne
 800fa8a:	2340      	movne	r3, #64	@ 0x40
 800fa8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fa90:	2000      	movs	r0, #0
 800fa92:	6031      	str	r1, [r6, #0]
 800fa94:	602b      	str	r3, [r5, #0]
 800fa96:	b016      	add	sp, #88	@ 0x58
 800fa98:	bd70      	pop	{r4, r5, r6, pc}
 800fa9a:	466a      	mov	r2, sp
 800fa9c:	f000 f848 	bl	800fb30 <_fstat_r>
 800faa0:	2800      	cmp	r0, #0
 800faa2:	dbec      	blt.n	800fa7e <__swhatbuf_r+0x12>
 800faa4:	9901      	ldr	r1, [sp, #4]
 800faa6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800faaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800faae:	4259      	negs	r1, r3
 800fab0:	4159      	adcs	r1, r3
 800fab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fab6:	e7eb      	b.n	800fa90 <__swhatbuf_r+0x24>

0800fab8 <__smakebuf_r>:
 800fab8:	898b      	ldrh	r3, [r1, #12]
 800faba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fabc:	079d      	lsls	r5, r3, #30
 800fabe:	4606      	mov	r6, r0
 800fac0:	460c      	mov	r4, r1
 800fac2:	d507      	bpl.n	800fad4 <__smakebuf_r+0x1c>
 800fac4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fac8:	6023      	str	r3, [r4, #0]
 800faca:	6123      	str	r3, [r4, #16]
 800facc:	2301      	movs	r3, #1
 800face:	6163      	str	r3, [r4, #20]
 800fad0:	b003      	add	sp, #12
 800fad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fad4:	ab01      	add	r3, sp, #4
 800fad6:	466a      	mov	r2, sp
 800fad8:	f7ff ffc8 	bl	800fa6c <__swhatbuf_r>
 800fadc:	9f00      	ldr	r7, [sp, #0]
 800fade:	4605      	mov	r5, r0
 800fae0:	4639      	mov	r1, r7
 800fae2:	4630      	mov	r0, r6
 800fae4:	f7fe fc12 	bl	800e30c <_malloc_r>
 800fae8:	b948      	cbnz	r0, 800fafe <__smakebuf_r+0x46>
 800faea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800faee:	059a      	lsls	r2, r3, #22
 800faf0:	d4ee      	bmi.n	800fad0 <__smakebuf_r+0x18>
 800faf2:	f023 0303 	bic.w	r3, r3, #3
 800faf6:	f043 0302 	orr.w	r3, r3, #2
 800fafa:	81a3      	strh	r3, [r4, #12]
 800fafc:	e7e2      	b.n	800fac4 <__smakebuf_r+0xc>
 800fafe:	89a3      	ldrh	r3, [r4, #12]
 800fb00:	6020      	str	r0, [r4, #0]
 800fb02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb06:	81a3      	strh	r3, [r4, #12]
 800fb08:	9b01      	ldr	r3, [sp, #4]
 800fb0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fb0e:	b15b      	cbz	r3, 800fb28 <__smakebuf_r+0x70>
 800fb10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb14:	4630      	mov	r0, r6
 800fb16:	f000 f81d 	bl	800fb54 <_isatty_r>
 800fb1a:	b128      	cbz	r0, 800fb28 <__smakebuf_r+0x70>
 800fb1c:	89a3      	ldrh	r3, [r4, #12]
 800fb1e:	f023 0303 	bic.w	r3, r3, #3
 800fb22:	f043 0301 	orr.w	r3, r3, #1
 800fb26:	81a3      	strh	r3, [r4, #12]
 800fb28:	89a3      	ldrh	r3, [r4, #12]
 800fb2a:	431d      	orrs	r5, r3
 800fb2c:	81a5      	strh	r5, [r4, #12]
 800fb2e:	e7cf      	b.n	800fad0 <__smakebuf_r+0x18>

0800fb30 <_fstat_r>:
 800fb30:	b538      	push	{r3, r4, r5, lr}
 800fb32:	4d07      	ldr	r5, [pc, #28]	@ (800fb50 <_fstat_r+0x20>)
 800fb34:	2300      	movs	r3, #0
 800fb36:	4604      	mov	r4, r0
 800fb38:	4608      	mov	r0, r1
 800fb3a:	4611      	mov	r1, r2
 800fb3c:	602b      	str	r3, [r5, #0]
 800fb3e:	f7f5 f903 	bl	8004d48 <_fstat>
 800fb42:	1c43      	adds	r3, r0, #1
 800fb44:	d102      	bne.n	800fb4c <_fstat_r+0x1c>
 800fb46:	682b      	ldr	r3, [r5, #0]
 800fb48:	b103      	cbz	r3, 800fb4c <_fstat_r+0x1c>
 800fb4a:	6023      	str	r3, [r4, #0]
 800fb4c:	bd38      	pop	{r3, r4, r5, pc}
 800fb4e:	bf00      	nop
 800fb50:	200090f8 	.word	0x200090f8

0800fb54 <_isatty_r>:
 800fb54:	b538      	push	{r3, r4, r5, lr}
 800fb56:	4d06      	ldr	r5, [pc, #24]	@ (800fb70 <_isatty_r+0x1c>)
 800fb58:	2300      	movs	r3, #0
 800fb5a:	4604      	mov	r4, r0
 800fb5c:	4608      	mov	r0, r1
 800fb5e:	602b      	str	r3, [r5, #0]
 800fb60:	f7f5 f902 	bl	8004d68 <_isatty>
 800fb64:	1c43      	adds	r3, r0, #1
 800fb66:	d102      	bne.n	800fb6e <_isatty_r+0x1a>
 800fb68:	682b      	ldr	r3, [r5, #0]
 800fb6a:	b103      	cbz	r3, 800fb6e <_isatty_r+0x1a>
 800fb6c:	6023      	str	r3, [r4, #0]
 800fb6e:	bd38      	pop	{r3, r4, r5, pc}
 800fb70:	200090f8 	.word	0x200090f8

0800fb74 <_init>:
 800fb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb76:	bf00      	nop
 800fb78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb7a:	bc08      	pop	{r3}
 800fb7c:	469e      	mov	lr, r3
 800fb7e:	4770      	bx	lr

0800fb80 <_fini>:
 800fb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb82:	bf00      	nop
 800fb84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb86:	bc08      	pop	{r3}
 800fb88:	469e      	mov	lr, r3
 800fb8a:	4770      	bx	lr
