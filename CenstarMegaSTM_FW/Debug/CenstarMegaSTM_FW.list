
CenstarMegaSTM_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a5c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08004bec  08004bec  00005bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e5c  08004e5c  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004e5c  08004e5c  00005e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e64  08004e64  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e64  08004e64  00005e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e68  08004e68  00005e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004e6c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000654  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006b0  200006b0  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cab1  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f71  00000000  00000000  00012b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b50  00000000  00000000  00014ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008d3  00000000  00000000  00015600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213f5  00000000  00000000  00015ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f7db  00000000  00000000  000372c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c75eb  00000000  00000000  00046aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010e08e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033bc  00000000  00000000  0010e0d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00111490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004bd4 	.word	0x08004bd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004bd4 	.word	0x08004bd4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
static void MX_I2C1_Init(void);
static void MX_I2S3_Init(void);
static void MX_USART2_UART_Init(void);

int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0
  HAL_Init();
 80005b2:	f000 fd5b 	bl	800106c <HAL_Init>
  SystemClock_Config();
 80005b6:	f000 f877 	bl	80006a8 <SystemClock_Config>

  MX_GPIO_Init();
 80005ba:	f000 f967 	bl	800088c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005be:	f000 f8dd 	bl	800077c <MX_I2C1_Init>
  MX_I2S3_Init();
 80005c2:	f000 f909 	bl	80007d8 <MX_I2S3_Init>
  MX_USART2_UART_Init();
 80005c6:	f000 f937 	bl	8000838 <MX_USART2_UART_Init>

  HAL_UART_Transmit(&huart2,
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	220d      	movs	r2, #13
 80005d0:	492f      	ldr	r1, [pc, #188]	@ (8000690 <main+0xe4>)
 80005d2:	4830      	ldr	r0, [pc, #192]	@ (8000694 <main+0xe8>)
 80005d4:	f003 faa2 	bl	8003b1c <HAL_UART_Transmit>
        (uint8_t*)"Hello STM32\r\n", 13, HAL_MAX_DELAY);

  /* --- Инициализация OLED --- */
  ssd1306_Init();
 80005d8:	f000 f9f4 	bl	80009c4 <ssd1306_Init>

  /* Вспышка белым на 1 секунду */
  ssd1306_Fill(SSD1306_COLOR_WHITE);
 80005dc:	2001      	movs	r0, #1
 80005de:	f000 fa83 	bl	8000ae8 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80005e2:	f000 fa4f 	bl	8000a84 <ssd1306_UpdateScreen>
  HAL_Delay(1000);
 80005e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ea:	f000 fdb1 	bl	8001150 <HAL_Delay>

  /* Показ тестовой строки */
  ssd1306_Test();                 /* ← новая функция выводит "Hello OLED!" */
 80005ee:	f000 fb4f 	bl	8000c90 <ssd1306_Test>

  uint32_t pass = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	627b      	str	r3, [r7, #36]	@ 0x24
  char msg[32];

  while (1)
  {
      sprintf(msg, "\r\nScan #%lu\r\n", pass++);
 80005f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005f8:	1c5a      	adds	r2, r3, #1
 80005fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80005fc:	4638      	mov	r0, r7
 80005fe:	461a      	mov	r2, r3
 8000600:	4925      	ldr	r1, [pc, #148]	@ (8000698 <main+0xec>)
 8000602:	f003 fe47 	bl	8004294 <siprintf>
      HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000606:	463b      	mov	r3, r7
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fde1 	bl	80001d0 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	b29a      	uxth	r2, r3
 8000612:	4639      	mov	r1, r7
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	481e      	ldr	r0, [pc, #120]	@ (8000694 <main+0xe8>)
 800061a:	f003 fa7f 	bl	8003b1c <HAL_UART_Transmit>

      for (uint8_t addr = 1; addr < 128; addr++)
 800061e:	2301      	movs	r3, #1
 8000620:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000624:	e024      	b.n	8000670 <main+0xc4>
      {
          if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK)
 8000626:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800062a:	b29b      	uxth	r3, r3
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	b299      	uxth	r1, r3
 8000630:	230a      	movs	r3, #10
 8000632:	2201      	movs	r2, #1
 8000634:	4819      	ldr	r0, [pc, #100]	@ (800069c <main+0xf0>)
 8000636:	f001 fb87 	bl	8001d48 <HAL_I2C_IsDeviceReady>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d112      	bne.n	8000666 <main+0xba>
          {
              sprintf(msg, "Found 0x%02X\r\n", addr);
 8000640:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000644:	463b      	mov	r3, r7
 8000646:	4916      	ldr	r1, [pc, #88]	@ (80006a0 <main+0xf4>)
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fe23 	bl	8004294 <siprintf>
              HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 800064e:	463b      	mov	r3, r7
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff fdbd 	bl	80001d0 <strlen>
 8000656:	4603      	mov	r3, r0
 8000658:	b29a      	uxth	r2, r3
 800065a:	4639      	mov	r1, r7
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	480c      	ldr	r0, [pc, #48]	@ (8000694 <main+0xe8>)
 8000662:	f003 fa5b 	bl	8003b1c <HAL_UART_Transmit>
      for (uint8_t addr = 1; addr < 128; addr++)
 8000666:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800066a:	3301      	adds	r3, #1
 800066c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000670:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8000674:	2b00      	cmp	r3, #0
 8000676:	dad6      	bge.n	8000626 <main+0x7a>
          }
      }
      HAL_UART_Transmit(&huart2,(uint8_t*)"Scan done\r\n",11,HAL_MAX_DELAY);
 8000678:	f04f 33ff 	mov.w	r3, #4294967295
 800067c:	220b      	movs	r2, #11
 800067e:	4909      	ldr	r1, [pc, #36]	@ (80006a4 <main+0xf8>)
 8000680:	4804      	ldr	r0, [pc, #16]	@ (8000694 <main+0xe8>)
 8000682:	f003 fa4b 	bl	8003b1c <HAL_UART_Transmit>
      HAL_Delay(2000);
 8000686:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800068a:	f000 fd61 	bl	8001150 <HAL_Delay>
      sprintf(msg, "\r\nScan #%lu\r\n", pass++);
 800068e:	e7b2      	b.n	80005f6 <main+0x4a>
 8000690:	08004bec 	.word	0x08004bec
 8000694:	20000114 	.word	0x20000114
 8000698:	08004bfc 	.word	0x08004bfc
 800069c:	20000078 	.word	0x20000078
 80006a0:	08004c0c 	.word	0x08004c0c
 80006a4:	08004c1c 	.word	0x08004c1c

080006a8 <SystemClock_Config>:
  }
}

/* ===== CubeMX‑generated functions (не менять) =================== */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	@ 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	2230      	movs	r2, #48	@ 0x30
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 fe0e 	bl	80042d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	4a27      	ldr	r2, [pc, #156]	@ (8000774 <SystemClock_Config+0xcc>)
 80006d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006da:	6413      	str	r3, [r2, #64]	@ 0x40
 80006dc:	4b25      	ldr	r3, [pc, #148]	@ (8000774 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	4b22      	ldr	r3, [pc, #136]	@ (8000778 <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a21      	ldr	r2, [pc, #132]	@ (8000778 <SystemClock_Config+0xd0>)
 80006f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <SystemClock_Config+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000704:	2301      	movs	r3, #1
 8000706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 8000708:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800070c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 800070e:	2302      	movs	r3, #2
 8000710:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8000712:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM       = 8;
 8000718:	2308      	movs	r3, #8
 800071a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN       = 336;
 800071c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000720:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV2;
 8000722:	2302      	movs	r3, #2
 8000724:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ       = 7;
 8000726:	2307      	movs	r3, #7
 8000728:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fbca 	bl	8002ec8 <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x96>
 800073a:	f000 f923 	bl	8000984 <Error_Handler>

  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	60fb      	str	r3, [r7, #12]
                                   | RCC_CLOCKTYPE_PCLK1| RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2302      	movs	r3, #2
 8000744:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800074e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000750:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000754:	61fb      	str	r3, [r7, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5)!=HAL_OK)
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2105      	movs	r1, #5
 800075c:	4618      	mov	r0, r3
 800075e:	f002 fe2b 	bl	80033b8 <HAL_RCC_ClockConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xc4>
      Error_Handler();
 8000768:	f000 f90c 	bl	8000984 <Error_Handler>
}
 800076c:	bf00      	nop
 800076e:	3750      	adds	r7, #80	@ 0x50
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  hi2c1.Instance             = I2C1;
 8000780:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <MX_I2C1_Init+0x50>)
 8000782:	4a13      	ldr	r2, [pc, #76]	@ (80007d0 <MX_I2C1_Init+0x54>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed      = 100000;
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_I2C1_Init+0x50>)
 8000788:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <MX_I2C1_Init+0x58>)
 800078a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 800078c:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_I2C1_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1     = 0;
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_I2C1_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8000798:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <MX_I2C1_Init+0x50>)
 800079a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800079e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <MX_I2C1_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2     = 0;
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_I2C1_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <MX_I2C1_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_I2C1_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) Error_Handler();
 80007b8:	4804      	ldr	r0, [pc, #16]	@ (80007cc <MX_I2C1_Init+0x50>)
 80007ba:	f000 ff89 	bl	80016d0 <HAL_I2C_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_I2C1_Init+0x4c>
 80007c4:	f000 f8de 	bl	8000984 <Error_Handler>
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000078 	.word	0x20000078
 80007d0:	40005400 	.word	0x40005400
 80007d4:	000186a0 	.word	0x000186a0

080007d8 <MX_I2S3_Init>:

static void MX_I2S3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  hi2s3.Instance          = SPI3;
 80007dc:	4b13      	ldr	r3, [pc, #76]	@ (800082c <MX_I2S3_Init+0x54>)
 80007de:	4a14      	ldr	r2, [pc, #80]	@ (8000830 <MX_I2S3_Init+0x58>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode         = I2S_MODE_MASTER_TX;
 80007e2:	4b12      	ldr	r3, [pc, #72]	@ (800082c <MX_I2S3_Init+0x54>)
 80007e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007e8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard     = I2S_STANDARD_PHILIPS;
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <MX_I2S3_Init+0x54>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat   = I2S_DATAFORMAT_16B;
 80007f0:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_I2S3_Init+0x54>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput   = I2S_MCLKOUTPUT_ENABLE;
 80007f6:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <MX_I2S3_Init+0x54>)
 80007f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007fc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq    = I2S_AUDIOFREQ_96K;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <MX_I2S3_Init+0x54>)
 8000800:	4a0c      	ldr	r2, [pc, #48]	@ (8000834 <MX_I2S3_Init+0x5c>)
 8000802:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL         = I2S_CPOL_LOW;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_I2S3_Init+0x54>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource  = I2S_CLOCK_PLL;
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <MX_I2S3_Init+0x54>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode=I2S_FULLDUPLEXMODE_DISABLE;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_I2S3_Init+0x54>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK) Error_Handler();
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_I2S3_Init+0x54>)
 8000818:	f001 feb6 	bl	8002588 <HAL_I2S_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_I2S3_Init+0x4e>
 8000822:	f000 f8af 	bl	8000984 <Error_Handler>
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000cc 	.word	0x200000cc
 8000830:	40003c00 	.word	0x40003c00
 8000834:	00017700 	.word	0x00017700

08000838 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  huart2.Instance          = USART2;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 800083e:	4a12      	ldr	r2, [pc, #72]	@ (8000888 <MX_USART2_UART_Init+0x50>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate     = 9600;
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 8000844:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits     = UART_STOPBITS_1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity       = UART_PARITY_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode         = UART_MODE_TX_RX;
 800085c:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) Error_Handler();
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_USART2_UART_Init+0x4c>)
 8000870:	f003 f904 	bl	8003a7c <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART2_UART_Init+0x46>
 800087a:	f000 f883 	bl	8000984 <Error_Handler>
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000114 	.word	0x20000114
 8000888:	40004400 	.word	0x40004400

0800088c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	@ 0x30
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	4b35      	ldr	r3, [pc, #212]	@ (800097c <MX_GPIO_Init+0xf0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a34      	ldr	r2, [pc, #208]	@ (800097c <MX_GPIO_Init+0xf0>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b32      	ldr	r3, [pc, #200]	@ (800097c <MX_GPIO_Init+0xf0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	4b2e      	ldr	r3, [pc, #184]	@ (800097c <MX_GPIO_Init+0xf0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a2d      	ldr	r2, [pc, #180]	@ (800097c <MX_GPIO_Init+0xf0>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b2b      	ldr	r3, [pc, #172]	@ (800097c <MX_GPIO_Init+0xf0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b27      	ldr	r3, [pc, #156]	@ (800097c <MX_GPIO_Init+0xf0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a26      	ldr	r2, [pc, #152]	@ (800097c <MX_GPIO_Init+0xf0>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b24      	ldr	r3, [pc, #144]	@ (800097c <MX_GPIO_Init+0xf0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b20      	ldr	r3, [pc, #128]	@ (800097c <MX_GPIO_Init+0xf0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a1f      	ldr	r2, [pc, #124]	@ (800097c <MX_GPIO_Init+0xf0>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b1d      	ldr	r3, [pc, #116]	@ (800097c <MX_GPIO_Init+0xf0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b19      	ldr	r3, [pc, #100]	@ (800097c <MX_GPIO_Init+0xf0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a18      	ldr	r2, [pc, #96]	@ (800097c <MX_GPIO_Init+0xf0>)
 800091c:	f043 0310 	orr.w	r3, r3, #16
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b16      	ldr	r3, [pc, #88]	@ (800097c <MX_GPIO_Init+0xf0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0310 	and.w	r3, r3, #16
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b12      	ldr	r3, [pc, #72]	@ (800097c <MX_GPIO_Init+0xf0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a11      	ldr	r2, [pc, #68]	@ (800097c <MX_GPIO_Init+0xf0>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <MX_GPIO_Init+0xf0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /* Сгенерированные CubeMX настройки пинов Discovery */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000950:	480b      	ldr	r0, [pc, #44]	@ (8000980 <MX_GPIO_Init+0xf4>)
 8000952:	f000 fea3 	bl	800169c <HAL_GPIO_WritePin>
                           GPIO_PIN_15, GPIO_PIN_RESET);

  GPIO_InitStruct.Pin   = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000956:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4804      	ldr	r0, [pc, #16]	@ (8000980 <MX_GPIO_Init+0xf4>)
 8000970:	f000 fcf8 	bl	8001364 <HAL_GPIO_Init>
}
 8000974:	bf00      	nop
 8000976:	3730      	adds	r7, #48	@ 0x30
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	40020c00 	.word	0x40020c00

08000984 <Error_Handler>:

void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  __disable_irq();
  while (1) { }
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <Error_Handler+0x8>

08000990 <CMD>:
  #include "font5x7.inc"        /* файл приведён ниже */
};

/* ---- низкоуровневые функции ---- */
static HAL_StatusTypeDef CMD(uint8_t c)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af02      	add	r7, sp, #8
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
    uint8_t d[2] = {0x00, c};
 800099a:	2300      	movs	r3, #0
 800099c:	733b      	strb	r3, [r7, #12]
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(&hi2c1, SSD1306_I2C_ADDR, d, 2, HAL_MAX_DELAY);
 80009a2:	f107 020c 	add.w	r2, r7, #12
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2302      	movs	r3, #2
 80009ae:	2178      	movs	r1, #120	@ 0x78
 80009b0:	4803      	ldr	r0, [pc, #12]	@ (80009c0 <CMD+0x30>)
 80009b2:	f000 ffd1 	bl	8001958 <HAL_I2C_Master_Transmit>
 80009b6:	4603      	mov	r3, r0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000078 	.word	0x20000078

080009c4 <ssd1306_Init>:

/* ---- публичные ---- */
void ssd1306_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
    HAL_Delay(100);
 80009c8:	2064      	movs	r0, #100	@ 0x64
 80009ca:	f000 fbc1 	bl	8001150 <HAL_Delay>
    CMD(0xAE); CMD(0x20); CMD(0x00); CMD(0xB0); CMD(0xC8);
 80009ce:	20ae      	movs	r0, #174	@ 0xae
 80009d0:	f7ff ffde 	bl	8000990 <CMD>
 80009d4:	2020      	movs	r0, #32
 80009d6:	f7ff ffdb 	bl	8000990 <CMD>
 80009da:	2000      	movs	r0, #0
 80009dc:	f7ff ffd8 	bl	8000990 <CMD>
 80009e0:	20b0      	movs	r0, #176	@ 0xb0
 80009e2:	f7ff ffd5 	bl	8000990 <CMD>
 80009e6:	20c8      	movs	r0, #200	@ 0xc8
 80009e8:	f7ff ffd2 	bl	8000990 <CMD>
    CMD(0x00); CMD(0x10); CMD(0x40); CMD(0x81); CMD(0x7F);
 80009ec:	2000      	movs	r0, #0
 80009ee:	f7ff ffcf 	bl	8000990 <CMD>
 80009f2:	2010      	movs	r0, #16
 80009f4:	f7ff ffcc 	bl	8000990 <CMD>
 80009f8:	2040      	movs	r0, #64	@ 0x40
 80009fa:	f7ff ffc9 	bl	8000990 <CMD>
 80009fe:	2081      	movs	r0, #129	@ 0x81
 8000a00:	f7ff ffc6 	bl	8000990 <CMD>
 8000a04:	207f      	movs	r0, #127	@ 0x7f
 8000a06:	f7ff ffc3 	bl	8000990 <CMD>
    CMD(0xA1); CMD(0xA6); CMD(0xA8); CMD(0x3F); CMD(0xA4);
 8000a0a:	20a1      	movs	r0, #161	@ 0xa1
 8000a0c:	f7ff ffc0 	bl	8000990 <CMD>
 8000a10:	20a6      	movs	r0, #166	@ 0xa6
 8000a12:	f7ff ffbd 	bl	8000990 <CMD>
 8000a16:	20a8      	movs	r0, #168	@ 0xa8
 8000a18:	f7ff ffba 	bl	8000990 <CMD>
 8000a1c:	203f      	movs	r0, #63	@ 0x3f
 8000a1e:	f7ff ffb7 	bl	8000990 <CMD>
 8000a22:	20a4      	movs	r0, #164	@ 0xa4
 8000a24:	f7ff ffb4 	bl	8000990 <CMD>
    CMD(0xD3); CMD(0x00); CMD(0xD5); CMD(0xF0); CMD(0xD9);
 8000a28:	20d3      	movs	r0, #211	@ 0xd3
 8000a2a:	f7ff ffb1 	bl	8000990 <CMD>
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff ffae 	bl	8000990 <CMD>
 8000a34:	20d5      	movs	r0, #213	@ 0xd5
 8000a36:	f7ff ffab 	bl	8000990 <CMD>
 8000a3a:	20f0      	movs	r0, #240	@ 0xf0
 8000a3c:	f7ff ffa8 	bl	8000990 <CMD>
 8000a40:	20d9      	movs	r0, #217	@ 0xd9
 8000a42:	f7ff ffa5 	bl	8000990 <CMD>
    CMD(0x22); CMD(0xDA); CMD(0x12); CMD(0xDB); CMD(0x20);
 8000a46:	2022      	movs	r0, #34	@ 0x22
 8000a48:	f7ff ffa2 	bl	8000990 <CMD>
 8000a4c:	20da      	movs	r0, #218	@ 0xda
 8000a4e:	f7ff ff9f 	bl	8000990 <CMD>
 8000a52:	2012      	movs	r0, #18
 8000a54:	f7ff ff9c 	bl	8000990 <CMD>
 8000a58:	20db      	movs	r0, #219	@ 0xdb
 8000a5a:	f7ff ff99 	bl	8000990 <CMD>
 8000a5e:	2020      	movs	r0, #32
 8000a60:	f7ff ff96 	bl	8000990 <CMD>
    CMD(0x8D); CMD(0x14); CMD(0xAF);
 8000a64:	208d      	movs	r0, #141	@ 0x8d
 8000a66:	f7ff ff93 	bl	8000990 <CMD>
 8000a6a:	2014      	movs	r0, #20
 8000a6c:	f7ff ff90 	bl	8000990 <CMD>
 8000a70:	20af      	movs	r0, #175	@ 0xaf
 8000a72:	f7ff ff8d 	bl	8000990 <CMD>

    ssd1306_Fill(SSD1306_COLOR_BLACK);
 8000a76:	2000      	movs	r0, #0
 8000a78:	f000 f836 	bl	8000ae8 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8000a7c:	f000 f802 	bl	8000a84 <ssd1306_UpdateScreen>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <ssd1306_UpdateScreen>:

void ssd1306_UpdateScreen(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af04      	add	r7, sp, #16
    for (uint8_t page = 0; page < 8; page++)
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	71fb      	strb	r3, [r7, #7]
 8000a8e:	e01e      	b.n	8000ace <ssd1306_UpdateScreen+0x4a>
    {
        CMD(0xB0 + page); CMD(0x00); CMD(0x10);
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	3b50      	subs	r3, #80	@ 0x50
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff7a 	bl	8000990 <CMD>
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff ff77 	bl	8000990 <CMD>
 8000aa2:	2010      	movs	r0, #16
 8000aa4:	f7ff ff74 	bl	8000990 <CMD>
        HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40,
                          I2C_MEMADD_SIZE_8BIT,
                          &Buffer[SSD1306_WIDTH * page],
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	01db      	lsls	r3, r3, #7
        HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40,
 8000aac:	4a0c      	ldr	r2, [pc, #48]	@ (8000ae0 <ssd1306_UpdateScreen+0x5c>)
 8000aae:	4413      	add	r3, r2
 8000ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab4:	9202      	str	r2, [sp, #8]
 8000ab6:	2280      	movs	r2, #128	@ 0x80
 8000ab8:	9201      	str	r2, [sp, #4]
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2301      	movs	r3, #1
 8000abe:	2240      	movs	r2, #64	@ 0x40
 8000ac0:	2178      	movs	r1, #120	@ 0x78
 8000ac2:	4808      	ldr	r0, [pc, #32]	@ (8000ae4 <ssd1306_UpdateScreen+0x60>)
 8000ac4:	f001 f846 	bl	8001b54 <HAL_I2C_Mem_Write>
    for (uint8_t page = 0; page < 8; page++)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	3301      	adds	r3, #1
 8000acc:	71fb      	strb	r3, [r7, #7]
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b07      	cmp	r3, #7
 8000ad2:	d9dd      	bls.n	8000a90 <ssd1306_UpdateScreen+0xc>
                          SSD1306_WIDTH, HAL_MAX_DELAY);
    }
}
 8000ad4:	bf00      	nop
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000015c 	.word	0x2000015c
 8000ae4:	20000078 	.word	0x20000078

08000ae8 <ssd1306_Fill>:

void ssd1306_Fill(SSD1306_COLOR color)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
    memset(Buffer, color ? 0xFF : 0x00, sizeof(Buffer));
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <ssd1306_Fill+0x14>
 8000af8:	23ff      	movs	r3, #255	@ 0xff
 8000afa:	e000      	b.n	8000afe <ssd1306_Fill+0x16>
 8000afc:	2300      	movs	r3, #0
 8000afe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b02:	4619      	mov	r1, r3
 8000b04:	4803      	ldr	r0, [pc, #12]	@ (8000b14 <ssd1306_Fill+0x2c>)
 8000b06:	f003 fbe7 	bl	80042d8 <memset>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2000015c 	.word	0x2000015c

08000b18 <ssd1306_SetCursor>:

void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	460a      	mov	r2, r1
 8000b22:	71fb      	strb	r3, [r7, #7]
 8000b24:	4613      	mov	r3, r2
 8000b26:	71bb      	strb	r3, [r7, #6]
    CurrentX = x;
 8000b28:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <ssd1306_SetCursor+0x28>)
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	7013      	strb	r3, [r2, #0]
    CurrentY = y;
 8000b2e:	4a05      	ldr	r2, [pc, #20]	@ (8000b44 <ssd1306_SetCursor+0x2c>)
 8000b30:	79bb      	ldrb	r3, [r7, #6]
 8000b32:	7013      	strb	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	2000055c 	.word	0x2000055c
 8000b44:	2000055d 	.word	0x2000055d

08000b48 <ssd1306_WriteChar>:

void ssd1306_WriteChar(char ch, SSD1306_COLOR color)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b087      	sub	sp, #28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	460a      	mov	r2, r1
 8000b52:	71fb      	strb	r3, [r7, #7]
 8000b54:	4613      	mov	r3, r2
 8000b56:	71bb      	strb	r3, [r7, #6]
    if (ch < 32 || ch > 126) ch = '?';
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	2b1f      	cmp	r3, #31
 8000b5c:	d902      	bls.n	8000b64 <ssd1306_WriteChar+0x1c>
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b7e      	cmp	r3, #126	@ 0x7e
 8000b62:	d901      	bls.n	8000b68 <ssd1306_WriteChar+0x20>
 8000b64:	233f      	movs	r3, #63	@ 0x3f
 8000b66:	71fb      	strb	r3, [r7, #7]
    const uint8_t* glyph = &Font5x7[(ch - 32) * 5];
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f1a3 0220 	sub.w	r2, r3, #32
 8000b6e:	4613      	mov	r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	4413      	add	r3, r2
 8000b74:	4a35      	ldr	r2, [pc, #212]	@ (8000c4c <ssd1306_WriteChar+0x104>)
 8000b76:	4413      	add	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]

    for (uint8_t col = 0; col < 5; col++)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	75fb      	strb	r3, [r7, #23]
 8000b7e:	e056      	b.n	8000c2e <ssd1306_WriteChar+0xe6>
    {
        uint8_t line = glyph[col];
 8000b80:	7dfb      	ldrb	r3, [r7, #23]
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4413      	add	r3, r2
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	75bb      	strb	r3, [r7, #22]
        for (uint8_t row = 0; row < 7; row++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	757b      	strb	r3, [r7, #21]
 8000b8e:	e042      	b.n	8000c16 <ssd1306_WriteChar+0xce>
        {
            uint32_t idx = CurrentX + ((CurrentY + row) / 8) * SSD1306_WIDTH;
 8000b90:	4b2f      	ldr	r3, [pc, #188]	@ (8000c50 <ssd1306_WriteChar+0x108>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b2f      	ldr	r3, [pc, #188]	@ (8000c54 <ssd1306_WriteChar+0x10c>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	7d7b      	ldrb	r3, [r7, #21]
 8000b9e:	440b      	add	r3, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	da00      	bge.n	8000ba6 <ssd1306_WriteChar+0x5e>
 8000ba4:	3307      	adds	r3, #7
 8000ba6:	10db      	asrs	r3, r3, #3
 8000ba8:	01db      	lsls	r3, r3, #7
 8000baa:	4413      	add	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
            uint8_t  bit = 1 << ((CurrentY + row) % 8);
 8000bae:	4b29      	ldr	r3, [pc, #164]	@ (8000c54 <ssd1306_WriteChar+0x10c>)
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	7d7b      	ldrb	r3, [r7, #21]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	f003 0307 	and.w	r3, r3, #7
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	72fb      	strb	r3, [r7, #11]

            if (line & 0x01)
 8000bc4:	7dbb      	ldrb	r3, [r7, #22]
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d00c      	beq.n	8000be8 <ssd1306_WriteChar+0xa0>
                Buffer[idx] |=  bit;
 8000bce:	4a22      	ldr	r2, [pc, #136]	@ (8000c58 <ssd1306_WriteChar+0x110>)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	781a      	ldrb	r2, [r3, #0]
 8000bd6:	7afb      	ldrb	r3, [r7, #11]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	b2d9      	uxtb	r1, r3
 8000bdc:	4a1e      	ldr	r2, [pc, #120]	@ (8000c58 <ssd1306_WriteChar+0x110>)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4413      	add	r3, r2
 8000be2:	460a      	mov	r2, r1
 8000be4:	701a      	strb	r2, [r3, #0]
 8000be6:	e010      	b.n	8000c0a <ssd1306_WriteChar+0xc2>
            else
                Buffer[idx] &= ~bit;
 8000be8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c58 <ssd1306_WriteChar+0x110>)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	4413      	add	r3, r2
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b25a      	sxtb	r2, r3
 8000bf2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	b2d9      	uxtb	r1, r3
 8000c00:	4a15      	ldr	r2, [pc, #84]	@ (8000c58 <ssd1306_WriteChar+0x110>)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4413      	add	r3, r2
 8000c06:	460a      	mov	r2, r1
 8000c08:	701a      	strb	r2, [r3, #0]
            line >>= 1;
 8000c0a:	7dbb      	ldrb	r3, [r7, #22]
 8000c0c:	085b      	lsrs	r3, r3, #1
 8000c0e:	75bb      	strb	r3, [r7, #22]
        for (uint8_t row = 0; row < 7; row++)
 8000c10:	7d7b      	ldrb	r3, [r7, #21]
 8000c12:	3301      	adds	r3, #1
 8000c14:	757b      	strb	r3, [r7, #21]
 8000c16:	7d7b      	ldrb	r3, [r7, #21]
 8000c18:	2b06      	cmp	r3, #6
 8000c1a:	d9b9      	bls.n	8000b90 <ssd1306_WriteChar+0x48>
        }
        CurrentX++;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <ssd1306_WriteChar+0x108>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	4b0a      	ldr	r3, [pc, #40]	@ (8000c50 <ssd1306_WriteChar+0x108>)
 8000c26:	701a      	strb	r2, [r3, #0]
    for (uint8_t col = 0; col < 5; col++)
 8000c28:	7dfb      	ldrb	r3, [r7, #23]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	75fb      	strb	r3, [r7, #23]
 8000c2e:	7dfb      	ldrb	r3, [r7, #23]
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d9a5      	bls.n	8000b80 <ssd1306_WriteChar+0x38>
    }
    CurrentX++; /* один столбец пробела */
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <ssd1306_WriteChar+0x108>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <ssd1306_WriteChar+0x108>)
 8000c3e:	701a      	strb	r2, [r3, #0]
}
 8000c40:	bf00      	nop
 8000c42:	371c      	adds	r7, #28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	08004c34 	.word	0x08004c34
 8000c50:	2000055c 	.word	0x2000055c
 8000c54:	2000055d 	.word	0x2000055d
 8000c58:	2000015c 	.word	0x2000015c

08000c5c <ssd1306_WriteString>:

void ssd1306_WriteString(const char* str, SSD1306_COLOR color)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	70fb      	strb	r3, [r7, #3]
    while (*str)
 8000c68:	e008      	b.n	8000c7c <ssd1306_WriteString+0x20>
        ssd1306_WriteChar(*str++, color);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	1c5a      	adds	r2, r3, #1
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	78fa      	ldrb	r2, [r7, #3]
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff66 	bl	8000b48 <ssd1306_WriteChar>
    while (*str)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d1f2      	bne.n	8000c6a <ssd1306_WriteString+0xe>
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <ssd1306_Test>:

/* маленький тест: вывод "Hello OLED!" */
void ssd1306_Test(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
    ssd1306_Fill(SSD1306_COLOR_BLACK);
 8000c94:	2000      	movs	r0, #0
 8000c96:	f7ff ff27 	bl	8000ae8 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f7ff ff3b 	bl	8000b18 <ssd1306_SetCursor>
    ssd1306_WriteString("Hello OLED!", SSD1306_COLOR_WHITE);
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	4803      	ldr	r0, [pc, #12]	@ (8000cb4 <ssd1306_Test+0x24>)
 8000ca6:	f7ff ffd9 	bl	8000c5c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000caa:	f7ff feeb 	bl	8000a84 <ssd1306_UpdateScreen>
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	08004c28 	.word	0x08004c28

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cce:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	4a08      	ldr	r2, [pc, #32]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cf6:	2007      	movs	r0, #7
 8000cf8:	f000 fb00 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40023800 	.word	0x40023800

08000d08 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	@ 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a19      	ldr	r2, [pc, #100]	@ (8000d8c <HAL_I2C_MspInit+0x84>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d12b      	bne.n	8000d82 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4a17      	ldr	r2, [pc, #92]	@ (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d46:	23c0      	movs	r3, #192	@ 0xc0
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4a:	2312      	movs	r3, #18
 8000d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d56:	2304      	movs	r3, #4
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	@ (8000d94 <HAL_I2C_MspInit+0x8c>)
 8000d62:	f000 faff 	bl	8001364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6e:	4a08      	ldr	r2, [pc, #32]	@ (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d82:	bf00      	nop
 8000d84:	3728      	adds	r7, #40	@ 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40005400 	.word	0x40005400
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020400 	.word	0x40020400

08000d98 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08e      	sub	sp, #56	@ 0x38
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a31      	ldr	r2, [pc, #196]	@ (8000e88 <HAL_I2S_MspInit+0xf0>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d15a      	bne.n	8000e7e <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000dcc:	23c0      	movs	r3, #192	@ 0xc0
 8000dce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f002 fd0d 	bl	80037f8 <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000de4:	f7ff fdce 	bl	8000984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	4b27      	ldr	r3, [pc, #156]	@ (8000e8c <HAL_I2S_MspInit+0xf4>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df0:	4a26      	ldr	r2, [pc, #152]	@ (8000e8c <HAL_I2S_MspInit+0xf4>)
 8000df2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000df6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df8:	4b24      	ldr	r3, [pc, #144]	@ (8000e8c <HAL_I2S_MspInit+0xf4>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	4b20      	ldr	r3, [pc, #128]	@ (8000e8c <HAL_I2S_MspInit+0xf4>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8000e8c <HAL_I2S_MspInit+0xf4>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e14:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <HAL_I2S_MspInit+0xf4>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <HAL_I2S_MspInit+0xf4>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e28:	4a18      	ldr	r2, [pc, #96]	@ (8000e8c <HAL_I2S_MspInit+0xf4>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e30:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <HAL_I2S_MspInit+0xf4>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e4c:	2306      	movs	r3, #6
 8000e4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	480e      	ldr	r0, [pc, #56]	@ (8000e90 <HAL_I2S_MspInit+0xf8>)
 8000e58:	f000 fa84 	bl	8001364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e5c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e6e:	2306      	movs	r3, #6
 8000e70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e76:	4619      	mov	r1, r3
 8000e78:	4806      	ldr	r0, [pc, #24]	@ (8000e94 <HAL_I2S_MspInit+0xfc>)
 8000e7a:	f000 fa73 	bl	8001364 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000e7e:	bf00      	nop
 8000e80:	3738      	adds	r7, #56	@ 0x38
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40003c00 	.word	0x40003c00
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020800 	.word	0x40020800

08000e98 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a19      	ldr	r2, [pc, #100]	@ (8000f1c <HAL_UART_MspInit+0x84>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d12b      	bne.n	8000f12 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <HAL_UART_MspInit+0x88>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec2:	4a17      	ldr	r2, [pc, #92]	@ (8000f20 <HAL_UART_MspInit+0x88>)
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eca:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <HAL_UART_MspInit+0x88>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <HAL_UART_MspInit+0x88>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a10      	ldr	r2, [pc, #64]	@ (8000f20 <HAL_UART_MspInit+0x88>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <HAL_UART_MspInit+0x88>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ef2:	230c      	movs	r3, #12
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f02:	2307      	movs	r3, #7
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <HAL_UART_MspInit+0x8c>)
 8000f0e:	f000 fa29 	bl	8001364 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	@ 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40004400 	.word	0x40004400
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020000 	.word	0x40020000

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <NMI_Handler+0x4>

08000f30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <HardFault_Handler+0x4>

08000f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <MemManage_Handler+0x4>

08000f40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <BusFault_Handler+0x4>

08000f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <UsageFault_Handler+0x4>

08000f50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7e:	f000 f8c7 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f90:	4a14      	ldr	r2, [pc, #80]	@ (8000fe4 <_sbrk+0x5c>)
 8000f92:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <_sbrk+0x60>)
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f9c:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d102      	bne.n	8000faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <_sbrk+0x64>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	@ (8000ff0 <_sbrk+0x68>)
 8000fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000faa:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d207      	bcs.n	8000fc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb8:	f003 f996 	bl	80042e8 <__errno>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	e009      	b.n	8000fdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc8:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <_sbrk+0x64>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fce:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <_sbrk+0x64>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4a05      	ldr	r2, [pc, #20]	@ (8000fec <_sbrk+0x64>)
 8000fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fda:	68fb      	ldr	r3, [r7, #12]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20020000 	.word	0x20020000
 8000fe8:	00000400 	.word	0x00000400
 8000fec:	20000560 	.word	0x20000560
 8000ff0:	200006b0 	.word	0x200006b0

08000ff4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <SystemInit+0x20>)
 8000ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ffe:	4a05      	ldr	r2, [pc, #20]	@ (8001014 <SystemInit+0x20>)
 8001000:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001004:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001018:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001050 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800101c:	f7ff ffea 	bl	8000ff4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001020:	480c      	ldr	r0, [pc, #48]	@ (8001054 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001022:	490d      	ldr	r1, [pc, #52]	@ (8001058 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001024:	4a0d      	ldr	r2, [pc, #52]	@ (800105c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001038:	4c0a      	ldr	r4, [pc, #40]	@ (8001064 <LoopFillZerobss+0x22>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001046:	f003 f955 	bl	80042f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104a:	f7ff faaf 	bl	80005ac <main>
  bx  lr    
 800104e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001050:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800105c:	08004e6c 	.word	0x08004e6c
  ldr r2, =_sbss
 8001060:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001064:	200006b0 	.word	0x200006b0

08001068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC_IRQHandler>
	...

0800106c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001070:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0d      	ldr	r2, [pc, #52]	@ (80010ac <HAL_Init+0x40>)
 8001076:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800107a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800107c:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0a      	ldr	r2, [pc, #40]	@ (80010ac <HAL_Init+0x40>)
 8001082:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001086:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001088:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a07      	ldr	r2, [pc, #28]	@ (80010ac <HAL_Init+0x40>)
 800108e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001092:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001094:	2003      	movs	r0, #3
 8001096:	f000 f931 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109a:	2000      	movs	r0, #0
 800109c:	f000 f808 	bl	80010b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a0:	f7ff fe0a 	bl	8000cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023c00 	.word	0x40023c00

080010b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <HAL_InitTick+0x54>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <HAL_InitTick+0x58>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f93b 	bl	800134a <HAL_SYSTICK_Config>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e00e      	b.n	80010fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	d80a      	bhi.n	80010fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e4:	2200      	movs	r2, #0
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f000 f911 	bl	8001312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f0:	4a06      	ldr	r2, [pc, #24]	@ (800110c <HAL_InitTick+0x5c>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000000 	.word	0x20000000
 8001108:	20000008 	.word	0x20000008
 800110c:	20000004 	.word	0x20000004

08001110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_IncTick+0x20>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HAL_IncTick+0x24>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <HAL_IncTick+0x24>)
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000008 	.word	0x20000008
 8001134:	20000564 	.word	0x20000564

08001138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return uwTick;
 800113c:	4b03      	ldr	r3, [pc, #12]	@ (800114c <HAL_GetTick+0x14>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000564 	.word	0x20000564

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff ffee 	bl	8001138 <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001168:	d005      	beq.n	8001176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116a:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <HAL_Delay+0x44>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4413      	add	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001176:	bf00      	nop
 8001178:	f7ff ffde 	bl	8001138 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8f7      	bhi.n	8001178 <HAL_Delay+0x28>
  {
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000008 	.word	0x20000008

08001198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011b4:	4013      	ands	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	@ (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <__NVIC_GetPriorityGrouping+0x18>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 0307 	and.w	r3, r3, #7
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	@ (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	@ (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	@ 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	@ 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c8:	d301      	bcc.n	80012ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ce:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <SysTick_Config+0x40>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d6:	210f      	movs	r1, #15
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f7ff ff8e 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <SysTick_Config+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <SysTick_Config+0x40>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff47 	bl	8001198 <__NVIC_SetPriorityGrouping>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001324:	f7ff ff5c 	bl	80011e0 <__NVIC_GetPriorityGrouping>
 8001328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f7ff ff8e 	bl	8001250 <NVIC_EncodePriority>
 8001334:	4602      	mov	r2, r0
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff5d 	bl	80011fc <__NVIC_SetPriority>
}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffb0 	bl	80012b8 <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	@ 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	e16b      	b.n	8001658 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001380:	2201      	movs	r2, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	429a      	cmp	r2, r3
 800139a:	f040 815a 	bne.w	8001652 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d005      	beq.n	80013b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d130      	bne.n	8001418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ec:	2201      	movs	r2, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f003 0201 	and.w	r2, r3, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b03      	cmp	r3, #3
 8001422:	d017      	beq.n	8001454 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d123      	bne.n	80014a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	08da      	lsrs	r2, r3, #3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3208      	adds	r2, #8
 8001468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	220f      	movs	r2, #15
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	691a      	ldr	r2, [r3, #16]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	08da      	lsrs	r2, r3, #3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3208      	adds	r2, #8
 80014a2:	69b9      	ldr	r1, [r7, #24]
 80014a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0203 	and.w	r2, r3, #3
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80b4 	beq.w	8001652 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b60      	ldr	r3, [pc, #384]	@ (8001670 <HAL_GPIO_Init+0x30c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	4a5f      	ldr	r2, [pc, #380]	@ (8001670 <HAL_GPIO_Init+0x30c>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001670 <HAL_GPIO_Init+0x30c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001506:	4a5b      	ldr	r2, [pc, #364]	@ (8001674 <HAL_GPIO_Init+0x310>)
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3302      	adds	r3, #2
 800150e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a52      	ldr	r2, [pc, #328]	@ (8001678 <HAL_GPIO_Init+0x314>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d02b      	beq.n	800158a <HAL_GPIO_Init+0x226>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a51      	ldr	r2, [pc, #324]	@ (800167c <HAL_GPIO_Init+0x318>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d025      	beq.n	8001586 <HAL_GPIO_Init+0x222>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a50      	ldr	r2, [pc, #320]	@ (8001680 <HAL_GPIO_Init+0x31c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d01f      	beq.n	8001582 <HAL_GPIO_Init+0x21e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4f      	ldr	r2, [pc, #316]	@ (8001684 <HAL_GPIO_Init+0x320>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d019      	beq.n	800157e <HAL_GPIO_Init+0x21a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4e      	ldr	r2, [pc, #312]	@ (8001688 <HAL_GPIO_Init+0x324>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d013      	beq.n	800157a <HAL_GPIO_Init+0x216>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4d      	ldr	r2, [pc, #308]	@ (800168c <HAL_GPIO_Init+0x328>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d00d      	beq.n	8001576 <HAL_GPIO_Init+0x212>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4c      	ldr	r2, [pc, #304]	@ (8001690 <HAL_GPIO_Init+0x32c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d007      	beq.n	8001572 <HAL_GPIO_Init+0x20e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4b      	ldr	r2, [pc, #300]	@ (8001694 <HAL_GPIO_Init+0x330>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d101      	bne.n	800156e <HAL_GPIO_Init+0x20a>
 800156a:	2307      	movs	r3, #7
 800156c:	e00e      	b.n	800158c <HAL_GPIO_Init+0x228>
 800156e:	2308      	movs	r3, #8
 8001570:	e00c      	b.n	800158c <HAL_GPIO_Init+0x228>
 8001572:	2306      	movs	r3, #6
 8001574:	e00a      	b.n	800158c <HAL_GPIO_Init+0x228>
 8001576:	2305      	movs	r3, #5
 8001578:	e008      	b.n	800158c <HAL_GPIO_Init+0x228>
 800157a:	2304      	movs	r3, #4
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x228>
 800157e:	2303      	movs	r3, #3
 8001580:	e004      	b.n	800158c <HAL_GPIO_Init+0x228>
 8001582:	2302      	movs	r3, #2
 8001584:	e002      	b.n	800158c <HAL_GPIO_Init+0x228>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_GPIO_Init+0x228>
 800158a:	2300      	movs	r3, #0
 800158c:	69fa      	ldr	r2, [r7, #28]
 800158e:	f002 0203 	and.w	r2, r2, #3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4093      	lsls	r3, r2
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800159c:	4935      	ldr	r1, [pc, #212]	@ (8001674 <HAL_GPIO_Init+0x310>)
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001698 <HAL_GPIO_Init+0x334>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ce:	4a32      	ldr	r2, [pc, #200]	@ (8001698 <HAL_GPIO_Init+0x334>)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d4:	4b30      	ldr	r3, [pc, #192]	@ (8001698 <HAL_GPIO_Init+0x334>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015f8:	4a27      	ldr	r2, [pc, #156]	@ (8001698 <HAL_GPIO_Init+0x334>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015fe:	4b26      	ldr	r3, [pc, #152]	@ (8001698 <HAL_GPIO_Init+0x334>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001622:	4a1d      	ldr	r2, [pc, #116]	@ (8001698 <HAL_GPIO_Init+0x334>)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001628:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <HAL_GPIO_Init+0x334>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800164c:	4a12      	ldr	r2, [pc, #72]	@ (8001698 <HAL_GPIO_Init+0x334>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3301      	adds	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	2b0f      	cmp	r3, #15
 800165c:	f67f ae90 	bls.w	8001380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3724      	adds	r7, #36	@ 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40013800 	.word	0x40013800
 8001678:	40020000 	.word	0x40020000
 800167c:	40020400 	.word	0x40020400
 8001680:	40020800 	.word	0x40020800
 8001684:	40020c00 	.word	0x40020c00
 8001688:	40021000 	.word	0x40021000
 800168c:	40021400 	.word	0x40021400
 8001690:	40021800 	.word	0x40021800
 8001694:	40021c00 	.word	0x40021c00
 8001698:	40013c00 	.word	0x40013c00

0800169c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ac:	787b      	ldrb	r3, [r7, #1]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016b8:	e003      	b.n	80016c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	041a      	lsls	r2, r3, #16
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	619a      	str	r2, [r3, #24]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e12b      	b.n	800193a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d106      	bne.n	80016fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fb06 	bl	8000d08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2224      	movs	r2, #36	@ 0x24
 8001700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0201 	bic.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001722:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001732:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001734:	f002 f838 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8001738:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4a81      	ldr	r2, [pc, #516]	@ (8001944 <HAL_I2C_Init+0x274>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d807      	bhi.n	8001754 <HAL_I2C_Init+0x84>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4a80      	ldr	r2, [pc, #512]	@ (8001948 <HAL_I2C_Init+0x278>)
 8001748:	4293      	cmp	r3, r2
 800174a:	bf94      	ite	ls
 800174c:	2301      	movls	r3, #1
 800174e:	2300      	movhi	r3, #0
 8001750:	b2db      	uxtb	r3, r3
 8001752:	e006      	b.n	8001762 <HAL_I2C_Init+0x92>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4a7d      	ldr	r2, [pc, #500]	@ (800194c <HAL_I2C_Init+0x27c>)
 8001758:	4293      	cmp	r3, r2
 800175a:	bf94      	ite	ls
 800175c:	2301      	movls	r3, #1
 800175e:	2300      	movhi	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e0e7      	b.n	800193a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4a78      	ldr	r2, [pc, #480]	@ (8001950 <HAL_I2C_Init+0x280>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	0c9b      	lsrs	r3, r3, #18
 8001774:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	430a      	orrs	r2, r1
 8001788:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4a6a      	ldr	r2, [pc, #424]	@ (8001944 <HAL_I2C_Init+0x274>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d802      	bhi.n	80017a4 <HAL_I2C_Init+0xd4>
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	3301      	adds	r3, #1
 80017a2:	e009      	b.n	80017b8 <HAL_I2C_Init+0xe8>
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	4a69      	ldr	r2, [pc, #420]	@ (8001954 <HAL_I2C_Init+0x284>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	099b      	lsrs	r3, r3, #6
 80017b6:	3301      	adds	r3, #1
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	430b      	orrs	r3, r1
 80017be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80017ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	495c      	ldr	r1, [pc, #368]	@ (8001944 <HAL_I2C_Init+0x274>)
 80017d4:	428b      	cmp	r3, r1
 80017d6:	d819      	bhi.n	800180c <HAL_I2C_Init+0x13c>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	1e59      	subs	r1, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e6:	1c59      	adds	r1, r3, #1
 80017e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017ec:	400b      	ands	r3, r1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00a      	beq.n	8001808 <HAL_I2C_Init+0x138>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1e59      	subs	r1, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001800:	3301      	adds	r3, #1
 8001802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001806:	e051      	b.n	80018ac <HAL_I2C_Init+0x1dc>
 8001808:	2304      	movs	r3, #4
 800180a:	e04f      	b.n	80018ac <HAL_I2C_Init+0x1dc>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d111      	bne.n	8001838 <HAL_I2C_Init+0x168>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	1e58      	subs	r0, r3, #1
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6859      	ldr	r1, [r3, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	440b      	add	r3, r1
 8001822:	fbb0 f3f3 	udiv	r3, r0, r3
 8001826:	3301      	adds	r3, #1
 8001828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf0c      	ite	eq
 8001830:	2301      	moveq	r3, #1
 8001832:	2300      	movne	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	e012      	b.n	800185e <HAL_I2C_Init+0x18e>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1e58      	subs	r0, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	0099      	lsls	r1, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	fbb0 f3f3 	udiv	r3, r0, r3
 800184e:	3301      	adds	r3, #1
 8001850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf0c      	ite	eq
 8001858:	2301      	moveq	r3, #1
 800185a:	2300      	movne	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_I2C_Init+0x196>
 8001862:	2301      	movs	r3, #1
 8001864:	e022      	b.n	80018ac <HAL_I2C_Init+0x1dc>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10e      	bne.n	800188c <HAL_I2C_Init+0x1bc>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1e58      	subs	r0, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6859      	ldr	r1, [r3, #4]
 8001876:	460b      	mov	r3, r1
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	440b      	add	r3, r1
 800187c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001880:	3301      	adds	r3, #1
 8001882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001886:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800188a:	e00f      	b.n	80018ac <HAL_I2C_Init+0x1dc>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1e58      	subs	r0, r3, #1
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6859      	ldr	r1, [r3, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	0099      	lsls	r1, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a2:	3301      	adds	r3, #1
 80018a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	6809      	ldr	r1, [r1, #0]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69da      	ldr	r2, [r3, #28]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6911      	ldr	r1, [r2, #16]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	68d2      	ldr	r2, [r2, #12]
 80018e6:	4311      	orrs	r1, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	430b      	orrs	r3, r1
 80018ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695a      	ldr	r2, [r3, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 0201 	orr.w	r2, r2, #1
 800191a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2220      	movs	r2, #32
 8001926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	000186a0 	.word	0x000186a0
 8001948:	001e847f 	.word	0x001e847f
 800194c:	003d08ff 	.word	0x003d08ff
 8001950:	431bde83 	.word	0x431bde83
 8001954:	10624dd3 	.word	0x10624dd3

08001958 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af02      	add	r7, sp, #8
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	461a      	mov	r2, r3
 8001964:	460b      	mov	r3, r1
 8001966:	817b      	strh	r3, [r7, #10]
 8001968:	4613      	mov	r3, r2
 800196a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff fbe4 	bl	8001138 <HAL_GetTick>
 8001970:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b20      	cmp	r3, #32
 800197c:	f040 80e0 	bne.w	8001b40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2319      	movs	r3, #25
 8001986:	2201      	movs	r2, #1
 8001988:	4970      	ldr	r1, [pc, #448]	@ (8001b4c <HAL_I2C_Master_Transmit+0x1f4>)
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fc22 	bl	80021d4 <I2C_WaitOnFlagUntilTimeout>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001996:	2302      	movs	r3, #2
 8001998:	e0d3      	b.n	8001b42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <HAL_I2C_Master_Transmit+0x50>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e0cc      	b.n	8001b42 <HAL_I2C_Master_Transmit+0x1ea>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d007      	beq.n	80019ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 0201 	orr.w	r2, r2, #1
 80019cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2221      	movs	r2, #33	@ 0x21
 80019e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2210      	movs	r2, #16
 80019ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	893a      	ldrh	r2, [r7, #8]
 80019fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4a50      	ldr	r2, [pc, #320]	@ (8001b50 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a10:	8979      	ldrh	r1, [r7, #10]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	6a3a      	ldr	r2, [r7, #32]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 fac4 	bl	8001fa4 <I2C_MasterRequestWrite>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e08d      	b.n	8001b42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a3c:	e066      	b.n	8001b0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	6a39      	ldr	r1, [r7, #32]
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f000 fce0 	bl	8002408 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00d      	beq.n	8001a6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d107      	bne.n	8001a66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e06b      	b.n	8001b42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6e:	781a      	ldrb	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a92:	3b01      	subs	r3, #1
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d11b      	bne.n	8001ae0 <HAL_I2C_Master_Transmit+0x188>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d017      	beq.n	8001ae0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab4:	781a      	ldrb	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	3b01      	subs	r3, #1
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	6a39      	ldr	r1, [r7, #32]
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 fcd7 	bl	8002498 <I2C_WaitOnBTFFlagUntilTimeout>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00d      	beq.n	8001b0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d107      	bne.n	8001b08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e01a      	b.n	8001b42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d194      	bne.n	8001a3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2220      	movs	r2, #32
 8001b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e000      	b.n	8001b42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b40:	2302      	movs	r3, #2
  }
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	00100002 	.word	0x00100002
 8001b50:	ffff0000 	.word	0xffff0000

08001b54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	4608      	mov	r0, r1
 8001b5e:	4611      	mov	r1, r2
 8001b60:	461a      	mov	r2, r3
 8001b62:	4603      	mov	r3, r0
 8001b64:	817b      	strh	r3, [r7, #10]
 8001b66:	460b      	mov	r3, r1
 8001b68:	813b      	strh	r3, [r7, #8]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b6e:	f7ff fae3 	bl	8001138 <HAL_GetTick>
 8001b72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b20      	cmp	r3, #32
 8001b7e:	f040 80d9 	bne.w	8001d34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	2319      	movs	r3, #25
 8001b88:	2201      	movs	r2, #1
 8001b8a:	496d      	ldr	r1, [pc, #436]	@ (8001d40 <HAL_I2C_Mem_Write+0x1ec>)
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 fb21 	bl	80021d4 <I2C_WaitOnFlagUntilTimeout>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e0cc      	b.n	8001d36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_I2C_Mem_Write+0x56>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e0c5      	b.n	8001d36 <HAL_I2C_Mem_Write+0x1e2>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d007      	beq.n	8001bd0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2221      	movs	r2, #33	@ 0x21
 8001be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2240      	movs	r2, #64	@ 0x40
 8001bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a3a      	ldr	r2, [r7, #32]
 8001bfa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4a4d      	ldr	r2, [pc, #308]	@ (8001d44 <HAL_I2C_Mem_Write+0x1f0>)
 8001c10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c12:	88f8      	ldrh	r0, [r7, #6]
 8001c14:	893a      	ldrh	r2, [r7, #8]
 8001c16:	8979      	ldrh	r1, [r7, #10]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	4603      	mov	r3, r0
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 fa40 	bl	80020a8 <I2C_RequestMemoryWrite>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d052      	beq.n	8001cd4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e081      	b.n	8001d36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 fbe6 	bl	8002408 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00d      	beq.n	8001c5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d107      	bne.n	8001c5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e06b      	b.n	8001d36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c62:	781a      	ldrb	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d11b      	bne.n	8001cd4 <HAL_I2C_Mem_Write+0x180>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d017      	beq.n	8001cd4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca8:	781a      	ldrb	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1aa      	bne.n	8001c32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 fbd9 	bl	8002498 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00d      	beq.n	8001d08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d107      	bne.n	8001d04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e016      	b.n	8001d36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	e000      	b.n	8001d36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001d34:	2302      	movs	r3, #2
  }
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	00100002 	.word	0x00100002
 8001d44:	ffff0000 	.word	0xffff0000

08001d48 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	@ 0x28
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	460b      	mov	r3, r1
 8001d56:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff f9ee 	bl	8001138 <HAL_GetTick>
 8001d5c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b20      	cmp	r3, #32
 8001d6c:	f040 8111 	bne.w	8001f92 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	2319      	movs	r3, #25
 8001d76:	2201      	movs	r2, #1
 8001d78:	4988      	ldr	r1, [pc, #544]	@ (8001f9c <HAL_I2C_IsDeviceReady+0x254>)
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 fa2a 	bl	80021d4 <I2C_WaitOnFlagUntilTimeout>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001d86:	2302      	movs	r3, #2
 8001d88:	e104      	b.n	8001f94 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_I2C_IsDeviceReady+0x50>
 8001d94:	2302      	movs	r3, #2
 8001d96:	e0fd      	b.n	8001f94 <HAL_I2C_IsDeviceReady+0x24c>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d007      	beq.n	8001dbe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0201 	orr.w	r2, r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2224      	movs	r2, #36	@ 0x24
 8001dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4a70      	ldr	r2, [pc, #448]	@ (8001fa0 <HAL_I2C_IsDeviceReady+0x258>)
 8001de0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001df0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f9e8 	bl	80021d4 <I2C_WaitOnFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00d      	beq.n	8001e26 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e18:	d103      	bne.n	8001e22 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e20:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e0b6      	b.n	8001f94 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e26:	897b      	ldrh	r3, [r7, #10]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e34:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001e36:	f7ff f97f 	bl	8001138 <HAL_GetTick>
 8001e3a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	bf0c      	ite	eq
 8001e4a:	2301      	moveq	r3, #1
 8001e4c:	2300      	movne	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e60:	bf0c      	ite	eq
 8001e62:	2301      	moveq	r3, #1
 8001e64:	2300      	movne	r3, #0
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e6a:	e025      	b.n	8001eb8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e6c:	f7ff f964 	bl	8001138 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d302      	bcc.n	8001e82 <HAL_I2C_IsDeviceReady+0x13a>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d103      	bne.n	8001e8a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	22a0      	movs	r2, #160	@ 0xa0
 8001e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eae:	bf0c      	ite	eq
 8001eb0:	2301      	moveq	r3, #1
 8001eb2:	2300      	movne	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_I2C_IsDeviceReady+0x188>
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d102      	bne.n	8001ed0 <HAL_I2C_IsDeviceReady+0x188>
 8001eca:	7dbb      	ldrb	r3, [r7, #22]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0cd      	beq.n	8001e6c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d129      	bne.n	8001f3a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ef4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	2319      	movs	r3, #25
 8001f12:	2201      	movs	r2, #1
 8001f14:	4921      	ldr	r1, [pc, #132]	@ (8001f9c <HAL_I2C_IsDeviceReady+0x254>)
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 f95c 	bl	80021d4 <I2C_WaitOnFlagUntilTimeout>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e036      	b.n	8001f94 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	e02c      	b.n	8001f94 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f48:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f52:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	2319      	movs	r3, #25
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	490f      	ldr	r1, [pc, #60]	@ (8001f9c <HAL_I2C_IsDeviceReady+0x254>)
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 f938 	bl	80021d4 <I2C_WaitOnFlagUntilTimeout>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e012      	b.n	8001f94 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	3301      	adds	r3, #1
 8001f72:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	f4ff af32 	bcc.w	8001de2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2220      	movs	r2, #32
 8001f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001f92:	2302      	movs	r3, #2
  }
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3720      	adds	r7, #32
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	00100002 	.word	0x00100002
 8001fa0:	ffff0000 	.word	0xffff0000

08001fa4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d006      	beq.n	8001fce <I2C_MasterRequestWrite+0x2a>
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d003      	beq.n	8001fce <I2C_MasterRequestWrite+0x2a>
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001fcc:	d108      	bne.n	8001fe0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	e00b      	b.n	8001ff8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe4:	2b12      	cmp	r3, #18
 8001fe6:	d107      	bne.n	8001ff8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ff6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f8e5 	bl	80021d4 <I2C_WaitOnFlagUntilTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00d      	beq.n	800202c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800201a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800201e:	d103      	bne.n	8002028 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002026:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e035      	b.n	8002098 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002034:	d108      	bne.n	8002048 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002036:	897b      	ldrh	r3, [r7, #10]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002044:	611a      	str	r2, [r3, #16]
 8002046:	e01b      	b.n	8002080 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002048:	897b      	ldrh	r3, [r7, #10]
 800204a:	11db      	asrs	r3, r3, #7
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f003 0306 	and.w	r3, r3, #6
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f063 030f 	orn	r3, r3, #15
 8002058:	b2da      	uxtb	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	490e      	ldr	r1, [pc, #56]	@ (80020a0 <I2C_MasterRequestWrite+0xfc>)
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 f92e 	bl	80022c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e010      	b.n	8002098 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002076:	897b      	ldrh	r3, [r7, #10]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4907      	ldr	r1, [pc, #28]	@ (80020a4 <I2C_MasterRequestWrite+0x100>)
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f91e 	bl	80022c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	00010008 	.word	0x00010008
 80020a4:	00010002 	.word	0x00010002

080020a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	4608      	mov	r0, r1
 80020b2:	4611      	mov	r1, r2
 80020b4:	461a      	mov	r2, r3
 80020b6:	4603      	mov	r3, r0
 80020b8:	817b      	strh	r3, [r7, #10]
 80020ba:	460b      	mov	r3, r1
 80020bc:	813b      	strh	r3, [r7, #8]
 80020be:	4613      	mov	r3, r2
 80020c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	2200      	movs	r2, #0
 80020da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 f878 	bl	80021d4 <I2C_WaitOnFlagUntilTimeout>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00d      	beq.n	8002106 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020f8:	d103      	bne.n	8002102 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002100:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e05f      	b.n	80021c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002106:	897b      	ldrh	r3, [r7, #10]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002114:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	6a3a      	ldr	r2, [r7, #32]
 800211a:	492d      	ldr	r1, [pc, #180]	@ (80021d0 <I2C_RequestMemoryWrite+0x128>)
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 f8d3 	bl	80022c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e04c      	b.n	80021c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002144:	6a39      	ldr	r1, [r7, #32]
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f95e 	bl	8002408 <I2C_WaitOnTXEFlagUntilTimeout>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00d      	beq.n	800216e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	2b04      	cmp	r3, #4
 8002158:	d107      	bne.n	800216a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002168:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e02b      	b.n	80021c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d105      	bne.n	8002180 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002174:	893b      	ldrh	r3, [r7, #8]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	611a      	str	r2, [r3, #16]
 800217e:	e021      	b.n	80021c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002180:	893b      	ldrh	r3, [r7, #8]
 8002182:	0a1b      	lsrs	r3, r3, #8
 8002184:	b29b      	uxth	r3, r3
 8002186:	b2da      	uxtb	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800218e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002190:	6a39      	ldr	r1, [r7, #32]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f938 	bl	8002408 <I2C_WaitOnTXEFlagUntilTimeout>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00d      	beq.n	80021ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d107      	bne.n	80021b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e005      	b.n	80021c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021ba:	893b      	ldrh	r3, [r7, #8]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	00010002 	.word	0x00010002

080021d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021e4:	e048      	b.n	8002278 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ec:	d044      	beq.n	8002278 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ee:	f7fe ffa3 	bl	8001138 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d302      	bcc.n	8002204 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d139      	bne.n	8002278 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	0c1b      	lsrs	r3, r3, #16
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d10d      	bne.n	800222a <I2C_WaitOnFlagUntilTimeout+0x56>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	43da      	mvns	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	4013      	ands	r3, r2
 800221a:	b29b      	uxth	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
 8002228:	e00c      	b.n	8002244 <I2C_WaitOnFlagUntilTimeout+0x70>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	43da      	mvns	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	4013      	ands	r3, r2
 8002236:	b29b      	uxth	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	429a      	cmp	r2, r3
 8002248:	d116      	bne.n	8002278 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002264:	f043 0220 	orr.w	r2, r3, #32
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e023      	b.n	80022c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	0c1b      	lsrs	r3, r3, #16
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b01      	cmp	r3, #1
 8002280:	d10d      	bne.n	800229e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	43da      	mvns	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	4013      	ands	r3, r2
 800228e:	b29b      	uxth	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	e00c      	b.n	80022b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	43da      	mvns	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	4013      	ands	r3, r2
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d093      	beq.n	80021e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022d6:	e071      	b.n	80023bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022e6:	d123      	bne.n	8002330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002300:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	f043 0204 	orr.w	r2, r3, #4
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e067      	b.n	8002400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002336:	d041      	beq.n	80023bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002338:	f7fe fefe 	bl	8001138 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	429a      	cmp	r2, r3
 8002346:	d302      	bcc.n	800234e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d136      	bne.n	80023bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	0c1b      	lsrs	r3, r3, #16
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b01      	cmp	r3, #1
 8002356:	d10c      	bne.n	8002372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	43da      	mvns	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4013      	ands	r3, r2
 8002364:	b29b      	uxth	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	bf14      	ite	ne
 800236a:	2301      	movne	r3, #1
 800236c:	2300      	moveq	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	e00b      	b.n	800238a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	43da      	mvns	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	4013      	ands	r3, r2
 800237e:	b29b      	uxth	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf14      	ite	ne
 8002384:	2301      	movne	r3, #1
 8002386:	2300      	moveq	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d016      	beq.n	80023bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a8:	f043 0220 	orr.w	r2, r3, #32
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e021      	b.n	8002400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	0c1b      	lsrs	r3, r3, #16
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d10c      	bne.n	80023e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	43da      	mvns	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	4013      	ands	r3, r2
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bf14      	ite	ne
 80023d8:	2301      	movne	r3, #1
 80023da:	2300      	moveq	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	e00b      	b.n	80023f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	43da      	mvns	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4013      	ands	r3, r2
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf14      	ite	ne
 80023f2:	2301      	movne	r3, #1
 80023f4:	2300      	moveq	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f47f af6d 	bne.w	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002414:	e034      	b.n	8002480 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f886 	bl	8002528 <I2C_IsAcknowledgeFailed>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e034      	b.n	8002490 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242c:	d028      	beq.n	8002480 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242e:	f7fe fe83 	bl	8001138 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	429a      	cmp	r2, r3
 800243c:	d302      	bcc.n	8002444 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d11d      	bne.n	8002480 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800244e:	2b80      	cmp	r3, #128	@ 0x80
 8002450:	d016      	beq.n	8002480 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246c:	f043 0220 	orr.w	r2, r3, #32
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e007      	b.n	8002490 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800248a:	2b80      	cmp	r3, #128	@ 0x80
 800248c:	d1c3      	bne.n	8002416 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024a4:	e034      	b.n	8002510 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f83e 	bl	8002528 <I2C_IsAcknowledgeFailed>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e034      	b.n	8002520 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d028      	beq.n	8002510 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024be:	f7fe fe3b 	bl	8001138 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d302      	bcc.n	80024d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d11d      	bne.n	8002510 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d016      	beq.n	8002510 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	f043 0220 	orr.w	r2, r3, #32
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e007      	b.n	8002520 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b04      	cmp	r3, #4
 800251c:	d1c3      	bne.n	80024a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800253a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800253e:	d11b      	bne.n	8002578 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002548:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002564:	f043 0204 	orr.w	r2, r3, #4
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e128      	b.n	80027ec <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a90      	ldr	r2, [pc, #576]	@ (80027f4 <HAL_I2S_Init+0x26c>)
 80025b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7fe fbef 	bl	8000d98 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2202      	movs	r2, #2
 80025be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80025d0:	f023 030f 	bic.w	r3, r3, #15
 80025d4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2202      	movs	r2, #2
 80025dc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d060      	beq.n	80026a8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d102      	bne.n	80025f4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80025ee:	2310      	movs	r3, #16
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	e001      	b.n	80025f8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80025f4:	2320      	movs	r3, #32
 80025f6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d802      	bhi.n	8002606 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002606:	2001      	movs	r0, #1
 8002608:	f001 f9d8 	bl	80039bc <HAL_RCCEx_GetPeriphCLKFreq>
 800260c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002616:	d125      	bne.n	8002664 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d010      	beq.n	8002642 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	fbb2 f2f3 	udiv	r2, r2, r3
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	461a      	mov	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	fbb2 f3f3 	udiv	r3, r2, r3
 800263c:	3305      	adds	r3, #5
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	e01f      	b.n	8002682 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	fbb2 f2f3 	udiv	r2, r2, r3
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	461a      	mov	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	fbb2 f3f3 	udiv	r3, r2, r3
 800265e:	3305      	adds	r3, #5
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	e00e      	b.n	8002682 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	fbb2 f2f3 	udiv	r2, r2, r3
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	461a      	mov	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	fbb2 f3f3 	udiv	r3, r2, r3
 800267e:	3305      	adds	r3, #5
 8002680:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4a5c      	ldr	r2, [pc, #368]	@ (80027f8 <HAL_I2S_Init+0x270>)
 8002686:	fba2 2303 	umull	r2, r3, r2, r3
 800268a:	08db      	lsrs	r3, r3, #3
 800268c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	085b      	lsrs	r3, r3, #1
 800269e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	e003      	b.n	80026b0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80026a8:	2302      	movs	r3, #2
 80026aa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d902      	bls.n	80026bc <HAL_I2S_Init+0x134>
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	2bff      	cmp	r3, #255	@ 0xff
 80026ba:	d907      	bls.n	80026cc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c0:	f043 0210 	orr.w	r2, r3, #16
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e08f      	b.n	80027ec <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	ea42 0103 	orr.w	r1, r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	430a      	orrs	r2, r1
 80026de:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80026ea:	f023 030f 	bic.w	r3, r3, #15
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6851      	ldr	r1, [r2, #4]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6892      	ldr	r2, [r2, #8]
 80026f6:	4311      	orrs	r1, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	68d2      	ldr	r2, [r2, #12]
 80026fc:	4311      	orrs	r1, r2
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6992      	ldr	r2, [r2, #24]
 8002702:	430a      	orrs	r2, r1
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800270e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d161      	bne.n	80027dc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a38      	ldr	r2, [pc, #224]	@ (80027fc <HAL_I2S_Init+0x274>)
 800271c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a37      	ldr	r2, [pc, #220]	@ (8002800 <HAL_I2S_Init+0x278>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d101      	bne.n	800272c <HAL_I2S_Init+0x1a4>
 8002728:	4b36      	ldr	r3, [pc, #216]	@ (8002804 <HAL_I2S_Init+0x27c>)
 800272a:	e001      	b.n	8002730 <HAL_I2S_Init+0x1a8>
 800272c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	4932      	ldr	r1, [pc, #200]	@ (8002800 <HAL_I2S_Init+0x278>)
 8002738:	428a      	cmp	r2, r1
 800273a:	d101      	bne.n	8002740 <HAL_I2S_Init+0x1b8>
 800273c:	4a31      	ldr	r2, [pc, #196]	@ (8002804 <HAL_I2S_Init+0x27c>)
 800273e:	e001      	b.n	8002744 <HAL_I2S_Init+0x1bc>
 8002740:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002744:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002748:	f023 030f 	bic.w	r3, r3, #15
 800274c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a2b      	ldr	r2, [pc, #172]	@ (8002800 <HAL_I2S_Init+0x278>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d101      	bne.n	800275c <HAL_I2S_Init+0x1d4>
 8002758:	4b2a      	ldr	r3, [pc, #168]	@ (8002804 <HAL_I2S_Init+0x27c>)
 800275a:	e001      	b.n	8002760 <HAL_I2S_Init+0x1d8>
 800275c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002760:	2202      	movs	r2, #2
 8002762:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a25      	ldr	r2, [pc, #148]	@ (8002800 <HAL_I2S_Init+0x278>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <HAL_I2S_Init+0x1ea>
 800276e:	4b25      	ldr	r3, [pc, #148]	@ (8002804 <HAL_I2S_Init+0x27c>)
 8002770:	e001      	b.n	8002776 <HAL_I2S_Init+0x1ee>
 8002772:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002782:	d003      	beq.n	800278c <HAL_I2S_Init+0x204>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d103      	bne.n	8002794 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800278c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	e001      	b.n	8002798 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002794:	2300      	movs	r3, #0
 8002796:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80027a2:	4313      	orrs	r3, r2
 80027a4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80027ac:	4313      	orrs	r3, r2
 80027ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80027b6:	4313      	orrs	r3, r2
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	897b      	ldrh	r3, [r7, #10]
 80027bc:	4313      	orrs	r3, r2
 80027be:	b29b      	uxth	r3, r3
 80027c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027c4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a0d      	ldr	r2, [pc, #52]	@ (8002800 <HAL_I2S_Init+0x278>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d101      	bne.n	80027d4 <HAL_I2S_Init+0x24c>
 80027d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <HAL_I2S_Init+0x27c>)
 80027d2:	e001      	b.n	80027d8 <HAL_I2S_Init+0x250>
 80027d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027d8:	897a      	ldrh	r2, [r7, #10]
 80027da:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3720      	adds	r7, #32
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	080028ff 	.word	0x080028ff
 80027f8:	cccccccd 	.word	0xcccccccd
 80027fc:	08002a15 	.word	0x08002a15
 8002800:	40003800 	.word	0x40003800
 8002804:	40003400 	.word	0x40003400

08002808 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	881a      	ldrh	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	1c9a      	adds	r2, r3, #2
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10e      	bne.n	8002898 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002888:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ffb8 	bl	8002808 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b2:	b292      	uxth	r2, r2
 80028b4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ba:	1c9a      	adds	r2, r3, #2
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10e      	bne.n	80028f6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80028e6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff ff93 	bl	800281c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b086      	sub	sp, #24
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b04      	cmp	r3, #4
 8002918:	d13a      	bne.n	8002990 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b01      	cmp	r3, #1
 8002922:	d109      	bne.n	8002938 <I2S_IRQHandler+0x3a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800292e:	2b40      	cmp	r3, #64	@ 0x40
 8002930:	d102      	bne.n	8002938 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ffb4 	bl	80028a0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293e:	2b40      	cmp	r3, #64	@ 0x40
 8002940:	d126      	bne.n	8002990 <I2S_IRQHandler+0x92>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b20      	cmp	r3, #32
 800294e:	d11f      	bne.n	8002990 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800295e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002982:	f043 0202 	orr.w	r2, r3, #2
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ff50 	bl	8002830 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b03      	cmp	r3, #3
 800299a:	d136      	bne.n	8002a0a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d109      	bne.n	80029ba <I2S_IRQHandler+0xbc>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b0:	2b80      	cmp	r3, #128	@ 0x80
 80029b2:	d102      	bne.n	80029ba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff ff45 	bl	8002844 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d122      	bne.n	8002a0a <I2S_IRQHandler+0x10c>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d11b      	bne.n	8002a0a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80029e0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fc:	f043 0204 	orr.w	r2, r3, #4
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff ff13 	bl	8002830 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a92      	ldr	r2, [pc, #584]	@ (8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002a2e:	4b92      	ldr	r3, [pc, #584]	@ (8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a30:	e001      	b.n	8002a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002a32:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a8b      	ldr	r2, [pc, #556]	@ (8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d101      	bne.n	8002a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002a4c:	4b8a      	ldr	r3, [pc, #552]	@ (8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a4e:	e001      	b.n	8002a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002a50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a60:	d004      	beq.n	8002a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f040 8099 	bne.w	8002b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d107      	bne.n	8002a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f925 	bl	8002cd0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d107      	bne.n	8002aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f9c8 	bl	8002e30 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa6:	2b40      	cmp	r3, #64	@ 0x40
 8002aa8:	d13a      	bne.n	8002b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d035      	beq.n	8002b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a6e      	ldr	r2, [pc, #440]	@ (8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d101      	bne.n	8002ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002abe:	4b6e      	ldr	r3, [pc, #440]	@ (8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ac0:	e001      	b.n	8002ac6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002ac2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4969      	ldr	r1, [pc, #420]	@ (8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ace:	428b      	cmp	r3, r1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002ad2:	4b69      	ldr	r3, [pc, #420]	@ (8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ad4:	e001      	b.n	8002ada <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002ad6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ada:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ade:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002aee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	f043 0202 	orr.w	r2, r3, #2
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff fe88 	bl	8002830 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	f040 80c3 	bne.w	8002cb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 80bd 	beq.w	8002cb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b46:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a49      	ldr	r2, [pc, #292]	@ (8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d101      	bne.n	8002b56 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002b52:	4b49      	ldr	r3, [pc, #292]	@ (8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b54:	e001      	b.n	8002b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002b56:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4944      	ldr	r1, [pc, #272]	@ (8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b62:	428b      	cmp	r3, r1
 8002b64:	d101      	bne.n	8002b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002b66:	4b44      	ldr	r3, [pc, #272]	@ (8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b68:	e001      	b.n	8002b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002b6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b6e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b72:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b74:	2300      	movs	r3, #0
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	f043 0204 	orr.w	r2, r3, #4
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff fe4a 	bl	8002830 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b9c:	e089      	b.n	8002cb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d107      	bne.n	8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f8be 	bl	8002d34 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f8fd 	bl	8002dcc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd8:	2b40      	cmp	r3, #64	@ 0x40
 8002bda:	d12f      	bne.n	8002c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d02a      	beq.n	8002c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002bf4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d101      	bne.n	8002c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002c00:	4b1d      	ldr	r3, [pc, #116]	@ (8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c02:	e001      	b.n	8002c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002c04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4919      	ldr	r1, [pc, #100]	@ (8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c10:	428b      	cmp	r3, r1
 8002c12:	d101      	bne.n	8002c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002c14:	4b18      	ldr	r3, [pc, #96]	@ (8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c16:	e001      	b.n	8002c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002c18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c1c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002c20:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2e:	f043 0202 	orr.w	r2, r3, #2
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff fdfa 	bl	8002830 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d136      	bne.n	8002cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d031      	beq.n	8002cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a07      	ldr	r2, [pc, #28]	@ (8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d101      	bne.n	8002c5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002c5a:	4b07      	ldr	r3, [pc, #28]	@ (8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c5c:	e001      	b.n	8002c62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002c5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4902      	ldr	r1, [pc, #8]	@ (8002c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c6a:	428b      	cmp	r3, r1
 8002c6c:	d106      	bne.n	8002c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002c6e:	4b02      	ldr	r3, [pc, #8]	@ (8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c70:	e006      	b.n	8002c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002c72:	bf00      	nop
 8002c74:	40003800 	.word	0x40003800
 8002c78:	40003400 	.word	0x40003400
 8002c7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c80:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002c84:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002c94:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca2:	f043 0204 	orr.w	r2, r3, #4
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff fdc0 	bl	8002830 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cb0:	e000      	b.n	8002cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cb2:	bf00      	nop
}
 8002cb4:	bf00      	nop
 8002cb6:	3720      	adds	r7, #32
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	1c99      	adds	r1, r3, #2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6251      	str	r1, [r2, #36]	@ 0x24
 8002ce2:	881a      	ldrh	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d113      	bne.n	8002d2a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d10:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d106      	bne.n	8002d2a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff ffc9 	bl	8002cbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d40:	1c99      	adds	r1, r3, #2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6251      	str	r1, [r2, #36]	@ 0x24
 8002d46:	8819      	ldrh	r1, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002dc4 <I2SEx_TxISR_I2SExt+0x90>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d101      	bne.n	8002d56 <I2SEx_TxISR_I2SExt+0x22>
 8002d52:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc8 <I2SEx_TxISR_I2SExt+0x94>)
 8002d54:	e001      	b.n	8002d5a <I2SEx_TxISR_I2SExt+0x26>
 8002d56:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d5a:	460a      	mov	r2, r1
 8002d5c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d121      	bne.n	8002dba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a12      	ldr	r2, [pc, #72]	@ (8002dc4 <I2SEx_TxISR_I2SExt+0x90>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d101      	bne.n	8002d84 <I2SEx_TxISR_I2SExt+0x50>
 8002d80:	4b11      	ldr	r3, [pc, #68]	@ (8002dc8 <I2SEx_TxISR_I2SExt+0x94>)
 8002d82:	e001      	b.n	8002d88 <I2SEx_TxISR_I2SExt+0x54>
 8002d84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	490d      	ldr	r1, [pc, #52]	@ (8002dc4 <I2SEx_TxISR_I2SExt+0x90>)
 8002d90:	428b      	cmp	r3, r1
 8002d92:	d101      	bne.n	8002d98 <I2SEx_TxISR_I2SExt+0x64>
 8002d94:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc8 <I2SEx_TxISR_I2SExt+0x94>)
 8002d96:	e001      	b.n	8002d9c <I2SEx_TxISR_I2SExt+0x68>
 8002d98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d9c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002da0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d106      	bne.n	8002dba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7ff ff81 	bl	8002cbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40003800 	.word	0x40003800
 8002dc8:	40003400 	.word	0x40003400

08002dcc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68d8      	ldr	r0, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dde:	1c99      	adds	r1, r3, #2
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002de4:	b282      	uxth	r2, r0
 8002de6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d113      	bne.n	8002e28 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e0e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff ff4a 	bl	8002cbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a20      	ldr	r2, [pc, #128]	@ (8002ec0 <I2SEx_RxISR_I2SExt+0x90>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <I2SEx_RxISR_I2SExt+0x16>
 8002e42:	4b20      	ldr	r3, [pc, #128]	@ (8002ec4 <I2SEx_RxISR_I2SExt+0x94>)
 8002e44:	e001      	b.n	8002e4a <I2SEx_RxISR_I2SExt+0x1a>
 8002e46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e4a:	68d8      	ldr	r0, [r3, #12]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e50:	1c99      	adds	r1, r3, #2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002e56:	b282      	uxth	r2, r0
 8002e58:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d121      	bne.n	8002eb6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a12      	ldr	r2, [pc, #72]	@ (8002ec0 <I2SEx_RxISR_I2SExt+0x90>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d101      	bne.n	8002e80 <I2SEx_RxISR_I2SExt+0x50>
 8002e7c:	4b11      	ldr	r3, [pc, #68]	@ (8002ec4 <I2SEx_RxISR_I2SExt+0x94>)
 8002e7e:	e001      	b.n	8002e84 <I2SEx_RxISR_I2SExt+0x54>
 8002e80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	490d      	ldr	r1, [pc, #52]	@ (8002ec0 <I2SEx_RxISR_I2SExt+0x90>)
 8002e8c:	428b      	cmp	r3, r1
 8002e8e:	d101      	bne.n	8002e94 <I2SEx_RxISR_I2SExt+0x64>
 8002e90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec4 <I2SEx_RxISR_I2SExt+0x94>)
 8002e92:	e001      	b.n	8002e98 <I2SEx_RxISR_I2SExt+0x68>
 8002e94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e98:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e9c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d106      	bne.n	8002eb6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff ff03 	bl	8002cbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40003800 	.word	0x40003800
 8002ec4:	40003400 	.word	0x40003400

08002ec8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e267      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d075      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ee6:	4b88      	ldr	r3, [pc, #544]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d00c      	beq.n	8002f0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef2:	4b85      	ldr	r3, [pc, #532]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d112      	bne.n	8002f24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002efe:	4b82      	ldr	r3, [pc, #520]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f0a:	d10b      	bne.n	8002f24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0c:	4b7e      	ldr	r3, [pc, #504]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d05b      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x108>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d157      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e242      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f2c:	d106      	bne.n	8002f3c <HAL_RCC_OscConfig+0x74>
 8002f2e:	4b76      	ldr	r3, [pc, #472]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a75      	ldr	r2, [pc, #468]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	e01d      	b.n	8002f78 <HAL_RCC_OscConfig+0xb0>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f44:	d10c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x98>
 8002f46:	4b70      	ldr	r3, [pc, #448]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a6f      	ldr	r2, [pc, #444]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	4b6d      	ldr	r3, [pc, #436]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a6c      	ldr	r2, [pc, #432]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	e00b      	b.n	8002f78 <HAL_RCC_OscConfig+0xb0>
 8002f60:	4b69      	ldr	r3, [pc, #420]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a68      	ldr	r2, [pc, #416]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	4b66      	ldr	r3, [pc, #408]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a65      	ldr	r2, [pc, #404]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d013      	beq.n	8002fa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f80:	f7fe f8da 	bl	8001138 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f88:	f7fe f8d6 	bl	8001138 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	@ 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e207      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	4b5b      	ldr	r3, [pc, #364]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0xc0>
 8002fa6:	e014      	b.n	8002fd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7fe f8c6 	bl	8001138 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7fe f8c2 	bl	8001138 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	@ 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e1f3      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc2:	4b51      	ldr	r3, [pc, #324]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0xe8>
 8002fce:	e000      	b.n	8002fd2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d063      	beq.n	80030a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fde:	4b4a      	ldr	r3, [pc, #296]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fea:	4b47      	ldr	r3, [pc, #284]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d11c      	bne.n	8003030 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ff6:	4b44      	ldr	r3, [pc, #272]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d116      	bne.n	8003030 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003002:	4b41      	ldr	r3, [pc, #260]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d005      	beq.n	800301a <HAL_RCC_OscConfig+0x152>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d001      	beq.n	800301a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e1c7      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301a:	4b3b      	ldr	r3, [pc, #236]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4937      	ldr	r1, [pc, #220]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302e:	e03a      	b.n	80030a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d020      	beq.n	800307a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003038:	4b34      	ldr	r3, [pc, #208]	@ (800310c <HAL_RCC_OscConfig+0x244>)
 800303a:	2201      	movs	r2, #1
 800303c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7fe f87b 	bl	8001138 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003046:	f7fe f877 	bl	8001138 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e1a8      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003058:	4b2b      	ldr	r3, [pc, #172]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003064:	4b28      	ldr	r3, [pc, #160]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4925      	ldr	r1, [pc, #148]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 8003074:	4313      	orrs	r3, r2
 8003076:	600b      	str	r3, [r1, #0]
 8003078:	e015      	b.n	80030a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307a:	4b24      	ldr	r3, [pc, #144]	@ (800310c <HAL_RCC_OscConfig+0x244>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fe f85a 	bl	8001138 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003088:	f7fe f856 	bl	8001138 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e187      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309a:	4b1b      	ldr	r3, [pc, #108]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d036      	beq.n	8003120 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d016      	beq.n	80030e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ba:	4b15      	ldr	r3, [pc, #84]	@ (8003110 <HAL_RCC_OscConfig+0x248>)
 80030bc:	2201      	movs	r2, #1
 80030be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c0:	f7fe f83a 	bl	8001138 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c8:	f7fe f836 	bl	8001138 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e167      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030da:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <HAL_RCC_OscConfig+0x240>)
 80030dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x200>
 80030e6:	e01b      	b.n	8003120 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e8:	4b09      	ldr	r3, [pc, #36]	@ (8003110 <HAL_RCC_OscConfig+0x248>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ee:	f7fe f823 	bl	8001138 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f4:	e00e      	b.n	8003114 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f6:	f7fe f81f 	bl	8001138 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d907      	bls.n	8003114 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e150      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
 8003108:	40023800 	.word	0x40023800
 800310c:	42470000 	.word	0x42470000
 8003110:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003114:	4b88      	ldr	r3, [pc, #544]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1ea      	bne.n	80030f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 8097 	beq.w	800325c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312e:	2300      	movs	r3, #0
 8003130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003132:	4b81      	ldr	r3, [pc, #516]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10f      	bne.n	800315e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	4b7d      	ldr	r3, [pc, #500]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	4a7c      	ldr	r2, [pc, #496]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800314c:	6413      	str	r3, [r2, #64]	@ 0x40
 800314e:	4b7a      	ldr	r3, [pc, #488]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800315a:	2301      	movs	r3, #1
 800315c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315e:	4b77      	ldr	r3, [pc, #476]	@ (800333c <HAL_RCC_OscConfig+0x474>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d118      	bne.n	800319c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800316a:	4b74      	ldr	r3, [pc, #464]	@ (800333c <HAL_RCC_OscConfig+0x474>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a73      	ldr	r2, [pc, #460]	@ (800333c <HAL_RCC_OscConfig+0x474>)
 8003170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003176:	f7fd ffdf 	bl	8001138 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317e:	f7fd ffdb 	bl	8001138 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e10c      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003190:	4b6a      	ldr	r3, [pc, #424]	@ (800333c <HAL_RCC_OscConfig+0x474>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d106      	bne.n	80031b2 <HAL_RCC_OscConfig+0x2ea>
 80031a4:	4b64      	ldr	r3, [pc, #400]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a8:	4a63      	ldr	r2, [pc, #396]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b0:	e01c      	b.n	80031ec <HAL_RCC_OscConfig+0x324>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b05      	cmp	r3, #5
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x30c>
 80031ba:	4b5f      	ldr	r3, [pc, #380]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031be:	4a5e      	ldr	r2, [pc, #376]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80031c0:	f043 0304 	orr.w	r3, r3, #4
 80031c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ca:	4a5b      	ldr	r2, [pc, #364]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d2:	e00b      	b.n	80031ec <HAL_RCC_OscConfig+0x324>
 80031d4:	4b58      	ldr	r3, [pc, #352]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80031d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d8:	4a57      	ldr	r2, [pc, #348]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e0:	4b55      	ldr	r3, [pc, #340]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80031e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e4:	4a54      	ldr	r2, [pc, #336]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80031e6:	f023 0304 	bic.w	r3, r3, #4
 80031ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d015      	beq.n	8003220 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f4:	f7fd ffa0 	bl	8001138 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fc:	f7fd ff9c 	bl	8001138 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e0cb      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003212:	4b49      	ldr	r3, [pc, #292]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0ee      	beq.n	80031fc <HAL_RCC_OscConfig+0x334>
 800321e:	e014      	b.n	800324a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003220:	f7fd ff8a 	bl	8001138 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003226:	e00a      	b.n	800323e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003228:	f7fd ff86 	bl	8001138 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e0b5      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323e:	4b3e      	ldr	r3, [pc, #248]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ee      	bne.n	8003228 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800324a:	7dfb      	ldrb	r3, [r7, #23]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003250:	4b39      	ldr	r3, [pc, #228]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	4a38      	ldr	r2, [pc, #224]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003256:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800325a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80a1 	beq.w	80033a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003266:	4b34      	ldr	r3, [pc, #208]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b08      	cmp	r3, #8
 8003270:	d05c      	beq.n	800332c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d141      	bne.n	80032fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327a:	4b31      	ldr	r3, [pc, #196]	@ (8003340 <HAL_RCC_OscConfig+0x478>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fd ff5a 	bl	8001138 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003288:	f7fd ff56 	bl	8001138 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e087      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329a:	4b27      	ldr	r3, [pc, #156]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69da      	ldr	r2, [r3, #28]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	019b      	lsls	r3, r3, #6
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	3b01      	subs	r3, #1
 80032c0:	041b      	lsls	r3, r3, #16
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c8:	061b      	lsls	r3, r3, #24
 80032ca:	491b      	ldr	r1, [pc, #108]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <HAL_RCC_OscConfig+0x478>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d6:	f7fd ff2f 	bl	8001138 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032de:	f7fd ff2b 	bl	8001138 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e05c      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f0:	4b11      	ldr	r3, [pc, #68]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x416>
 80032fc:	e054      	b.n	80033a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fe:	4b10      	ldr	r3, [pc, #64]	@ (8003340 <HAL_RCC_OscConfig+0x478>)
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003304:	f7fd ff18 	bl	8001138 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330c:	f7fd ff14 	bl	8001138 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e045      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331e:	4b06      	ldr	r3, [pc, #24]	@ (8003338 <HAL_RCC_OscConfig+0x470>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x444>
 800332a:	e03d      	b.n	80033a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d107      	bne.n	8003344 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e038      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
 8003338:	40023800 	.word	0x40023800
 800333c:	40007000 	.word	0x40007000
 8003340:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003344:	4b1b      	ldr	r3, [pc, #108]	@ (80033b4 <HAL_RCC_OscConfig+0x4ec>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d028      	beq.n	80033a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335c:	429a      	cmp	r2, r3
 800335e:	d121      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336a:	429a      	cmp	r2, r3
 800336c:	d11a      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003374:	4013      	ands	r3, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800337a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800337c:	4293      	cmp	r3, r2
 800337e:	d111      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338a:	085b      	lsrs	r3, r3, #1
 800338c:	3b01      	subs	r3, #1
 800338e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d107      	bne.n	80033a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800

080033b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0cc      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033cc:	4b68      	ldr	r3, [pc, #416]	@ (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d90c      	bls.n	80033f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	4b65      	ldr	r3, [pc, #404]	@ (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e2:	4b63      	ldr	r3, [pc, #396]	@ (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0b8      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d020      	beq.n	8003442 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800340c:	4b59      	ldr	r3, [pc, #356]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	4a58      	ldr	r2, [pc, #352]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003416:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003424:	4b53      	ldr	r3, [pc, #332]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4a52      	ldr	r2, [pc, #328]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800342e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003430:	4b50      	ldr	r3, [pc, #320]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	494d      	ldr	r1, [pc, #308]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	4313      	orrs	r3, r2
 8003440:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d044      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d107      	bne.n	8003466 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003456:	4b47      	ldr	r3, [pc, #284]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d119      	bne.n	8003496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e07f      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d003      	beq.n	8003476 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003472:	2b03      	cmp	r3, #3
 8003474:	d107      	bne.n	8003486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003476:	4b3f      	ldr	r3, [pc, #252]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d109      	bne.n	8003496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e06f      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003486:	4b3b      	ldr	r3, [pc, #236]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e067      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003496:	4b37      	ldr	r3, [pc, #220]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f023 0203 	bic.w	r2, r3, #3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	4934      	ldr	r1, [pc, #208]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034a8:	f7fd fe46 	bl	8001138 <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b0:	f7fd fe42 	bl	8001138 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e04f      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 020c 	and.w	r2, r3, #12
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d1eb      	bne.n	80034b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034d8:	4b25      	ldr	r3, [pc, #148]	@ (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d20c      	bcs.n	8003500 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e6:	4b22      	ldr	r3, [pc, #136]	@ (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	4b20      	ldr	r3, [pc, #128]	@ (8003570 <HAL_RCC_ClockConfig+0x1b8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e032      	b.n	8003566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800350c:	4b19      	ldr	r3, [pc, #100]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4916      	ldr	r1, [pc, #88]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800352a:	4b12      	ldr	r3, [pc, #72]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	490e      	ldr	r1, [pc, #56]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	4313      	orrs	r3, r2
 800353c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800353e:	f000 f821 	bl	8003584 <HAL_RCC_GetSysClockFreq>
 8003542:	4602      	mov	r2, r0
 8003544:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	091b      	lsrs	r3, r3, #4
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	490a      	ldr	r1, [pc, #40]	@ (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 8003550:	5ccb      	ldrb	r3, [r1, r3]
 8003552:	fa22 f303 	lsr.w	r3, r2, r3
 8003556:	4a09      	ldr	r2, [pc, #36]	@ (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800355a:	4b09      	ldr	r3, [pc, #36]	@ (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7fd fda6 	bl	80010b0 <HAL_InitTick>

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40023c00 	.word	0x40023c00
 8003574:	40023800 	.word	0x40023800
 8003578:	08004e10 	.word	0x08004e10
 800357c:	20000000 	.word	0x20000000
 8003580:	20000004 	.word	0x20000004

08003584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003588:	b094      	sub	sp, #80	@ 0x50
 800358a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800359c:	4b79      	ldr	r3, [pc, #484]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x200>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 030c 	and.w	r3, r3, #12
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d00d      	beq.n	80035c4 <HAL_RCC_GetSysClockFreq+0x40>
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	f200 80e1 	bhi.w	8003770 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0x34>
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d003      	beq.n	80035be <HAL_RCC_GetSysClockFreq+0x3a>
 80035b6:	e0db      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035b8:	4b73      	ldr	r3, [pc, #460]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035bc:	e0db      	b.n	8003776 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035be:	4b73      	ldr	r3, [pc, #460]	@ (800378c <HAL_RCC_GetSysClockFreq+0x208>)
 80035c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035c2:	e0d8      	b.n	8003776 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x200>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d063      	beq.n	80036a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035da:	4b6a      	ldr	r3, [pc, #424]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x200>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	099b      	lsrs	r3, r3, #6
 80035e0:	2200      	movs	r2, #0
 80035e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80035e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80035ee:	2300      	movs	r3, #0
 80035f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80035f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035f6:	4622      	mov	r2, r4
 80035f8:	462b      	mov	r3, r5
 80035fa:	f04f 0000 	mov.w	r0, #0
 80035fe:	f04f 0100 	mov.w	r1, #0
 8003602:	0159      	lsls	r1, r3, #5
 8003604:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003608:	0150      	lsls	r0, r2, #5
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4621      	mov	r1, r4
 8003610:	1a51      	subs	r1, r2, r1
 8003612:	6139      	str	r1, [r7, #16]
 8003614:	4629      	mov	r1, r5
 8003616:	eb63 0301 	sbc.w	r3, r3, r1
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003628:	4659      	mov	r1, fp
 800362a:	018b      	lsls	r3, r1, #6
 800362c:	4651      	mov	r1, sl
 800362e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003632:	4651      	mov	r1, sl
 8003634:	018a      	lsls	r2, r1, #6
 8003636:	4651      	mov	r1, sl
 8003638:	ebb2 0801 	subs.w	r8, r2, r1
 800363c:	4659      	mov	r1, fp
 800363e:	eb63 0901 	sbc.w	r9, r3, r1
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800364e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003652:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003656:	4690      	mov	r8, r2
 8003658:	4699      	mov	r9, r3
 800365a:	4623      	mov	r3, r4
 800365c:	eb18 0303 	adds.w	r3, r8, r3
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	462b      	mov	r3, r5
 8003664:	eb49 0303 	adc.w	r3, r9, r3
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003676:	4629      	mov	r1, r5
 8003678:	024b      	lsls	r3, r1, #9
 800367a:	4621      	mov	r1, r4
 800367c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003680:	4621      	mov	r1, r4
 8003682:	024a      	lsls	r2, r1, #9
 8003684:	4610      	mov	r0, r2
 8003686:	4619      	mov	r1, r3
 8003688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800368a:	2200      	movs	r2, #0
 800368c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800368e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003690:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003694:	f7fc fdf4 	bl	8000280 <__aeabi_uldivmod>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4613      	mov	r3, r2
 800369e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036a0:	e058      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a2:	4b38      	ldr	r3, [pc, #224]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x200>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	099b      	lsrs	r3, r3, #6
 80036a8:	2200      	movs	r2, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	4611      	mov	r1, r2
 80036ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036b2:	623b      	str	r3, [r7, #32]
 80036b4:	2300      	movs	r3, #0
 80036b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80036b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036bc:	4642      	mov	r2, r8
 80036be:	464b      	mov	r3, r9
 80036c0:	f04f 0000 	mov.w	r0, #0
 80036c4:	f04f 0100 	mov.w	r1, #0
 80036c8:	0159      	lsls	r1, r3, #5
 80036ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ce:	0150      	lsls	r0, r2, #5
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4641      	mov	r1, r8
 80036d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80036da:	4649      	mov	r1, r9
 80036dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036f4:	ebb2 040a 	subs.w	r4, r2, sl
 80036f8:	eb63 050b 	sbc.w	r5, r3, fp
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	00eb      	lsls	r3, r5, #3
 8003706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800370a:	00e2      	lsls	r2, r4, #3
 800370c:	4614      	mov	r4, r2
 800370e:	461d      	mov	r5, r3
 8003710:	4643      	mov	r3, r8
 8003712:	18e3      	adds	r3, r4, r3
 8003714:	603b      	str	r3, [r7, #0]
 8003716:	464b      	mov	r3, r9
 8003718:	eb45 0303 	adc.w	r3, r5, r3
 800371c:	607b      	str	r3, [r7, #4]
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	e9d7 4500 	ldrd	r4, r5, [r7]
 800372a:	4629      	mov	r1, r5
 800372c:	028b      	lsls	r3, r1, #10
 800372e:	4621      	mov	r1, r4
 8003730:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003734:	4621      	mov	r1, r4
 8003736:	028a      	lsls	r2, r1, #10
 8003738:	4610      	mov	r0, r2
 800373a:	4619      	mov	r1, r3
 800373c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800373e:	2200      	movs	r2, #0
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	61fa      	str	r2, [r7, #28]
 8003744:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003748:	f7fc fd9a 	bl	8000280 <__aeabi_uldivmod>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4613      	mov	r3, r2
 8003752:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003754:	4b0b      	ldr	r3, [pc, #44]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x200>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	0c1b      	lsrs	r3, r3, #16
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	3301      	adds	r3, #1
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003764:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003766:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003768:	fbb2 f3f3 	udiv	r3, r2, r3
 800376c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800376e:	e002      	b.n	8003776 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003770:	4b05      	ldr	r3, [pc, #20]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x204>)
 8003772:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003774:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003778:	4618      	mov	r0, r3
 800377a:	3750      	adds	r7, #80	@ 0x50
 800377c:	46bd      	mov	sp, r7
 800377e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800
 8003788:	00f42400 	.word	0x00f42400
 800378c:	007a1200 	.word	0x007a1200

08003790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003794:	4b03      	ldr	r3, [pc, #12]	@ (80037a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20000000 	.word	0x20000000

080037a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037ac:	f7ff fff0 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037b0:	4602      	mov	r2, r0
 80037b2:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	0a9b      	lsrs	r3, r3, #10
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	4903      	ldr	r1, [pc, #12]	@ (80037cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037be:	5ccb      	ldrb	r3, [r1, r3]
 80037c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40023800 	.word	0x40023800
 80037cc:	08004e20 	.word	0x08004e20

080037d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037d4:	f7ff ffdc 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037d8:	4602      	mov	r2, r0
 80037da:	4b05      	ldr	r3, [pc, #20]	@ (80037f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	0b5b      	lsrs	r3, r3, #13
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	4903      	ldr	r1, [pc, #12]	@ (80037f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037e6:	5ccb      	ldrb	r3, [r1, r3]
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40023800 	.word	0x40023800
 80037f4:	08004e20 	.word	0x08004e20

080037f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	d105      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800381c:	2b00      	cmp	r3, #0
 800381e:	d035      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003820:	4b62      	ldr	r3, [pc, #392]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003826:	f7fd fc87 	bl	8001138 <HAL_GetTick>
 800382a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800382c:	e008      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800382e:	f7fd fc83 	bl	8001138 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e0b0      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003840:	4b5b      	ldr	r3, [pc, #364]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f0      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	019a      	lsls	r2, r3, #6
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	071b      	lsls	r3, r3, #28
 8003858:	4955      	ldr	r1, [pc, #340]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003860:	4b52      	ldr	r3, [pc, #328]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003862:	2201      	movs	r2, #1
 8003864:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003866:	f7fd fc67 	bl	8001138 <HAL_GetTick>
 800386a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800386c:	e008      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800386e:	f7fd fc63 	bl	8001138 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e090      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003880:	4b4b      	ldr	r3, [pc, #300]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 8083 	beq.w	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	4b44      	ldr	r3, [pc, #272]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a2:	4a43      	ldr	r2, [pc, #268]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80038aa:	4b41      	ldr	r3, [pc, #260]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80038b6:	4b3f      	ldr	r3, [pc, #252]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a3e      	ldr	r2, [pc, #248]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038c2:	f7fd fc39 	bl	8001138 <HAL_GetTick>
 80038c6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80038c8:	e008      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ca:	f7fd fc35 	bl	8001138 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e062      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80038dc:	4b35      	ldr	r3, [pc, #212]	@ (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0f0      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038e8:	4b31      	ldr	r3, [pc, #196]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038f0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d02f      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	429a      	cmp	r2, r3
 8003904:	d028      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003906:	4b2a      	ldr	r3, [pc, #168]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800390e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003910:	4b29      	ldr	r3, [pc, #164]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003916:	4b28      	ldr	r3, [pc, #160]	@ (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800391c:	4a24      	ldr	r2, [pc, #144]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003922:	4b23      	ldr	r3, [pc, #140]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b01      	cmp	r3, #1
 800392c:	d114      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800392e:	f7fd fc03 	bl	8001138 <HAL_GetTick>
 8003932:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003934:	e00a      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003936:	f7fd fbff 	bl	8001138 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003944:	4293      	cmp	r3, r2
 8003946:	d901      	bls.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e02a      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394c:	4b18      	ldr	r3, [pc, #96]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800394e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0ee      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003960:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003964:	d10d      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003966:	4b12      	ldr	r3, [pc, #72]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003976:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800397a:	490d      	ldr	r1, [pc, #52]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800397c:	4313      	orrs	r3, r2
 800397e:	608b      	str	r3, [r1, #8]
 8003980:	e005      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003982:	4b0b      	ldr	r3, [pc, #44]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	4a0a      	ldr	r2, [pc, #40]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003988:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800398c:	6093      	str	r3, [r2, #8]
 800398e:	4b08      	ldr	r3, [pc, #32]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003990:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399a:	4905      	ldr	r1, [pc, #20]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800399c:	4313      	orrs	r3, r2
 800399e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	42470068 	.word	0x42470068
 80039b0:	40023800 	.word	0x40023800
 80039b4:	40007000 	.word	0x40007000
 80039b8:	42470e40 	.word	0x42470e40

080039bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d13f      	bne.n	8003a5a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80039da:	4b24      	ldr	r3, [pc, #144]	@ (8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039e2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d006      	beq.n	80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039f0:	d12f      	bne.n	8003a52 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80039f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80039f4:	617b      	str	r3, [r7, #20]
          break;
 80039f6:	e02f      	b.n	8003a58 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80039f8:	4b1c      	ldr	r3, [pc, #112]	@ (8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a04:	d108      	bne.n	8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a06:	4b19      	ldr	r3, [pc, #100]	@ (8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a0e:	4a19      	ldr	r2, [pc, #100]	@ (8003a74 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	e007      	b.n	8003a28 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a18:	4b14      	ldr	r3, [pc, #80]	@ (8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a20:	4a15      	ldr	r2, [pc, #84]	@ (8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a26:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003a28:	4b10      	ldr	r3, [pc, #64]	@ (8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a2e:	099b      	lsrs	r3, r3, #6
 8003a30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	fb02 f303 	mul.w	r3, r2, r3
 8003a3a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a42:	0f1b      	lsrs	r3, r3, #28
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4e:	617b      	str	r3, [r7, #20]
          break;
 8003a50:	e002      	b.n	8003a58 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
          break;
 8003a56:	bf00      	nop
        }
      }
      break;
 8003a58:	e000      	b.n	8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8003a5a:	bf00      	nop
    }
  }
  return frequency;
 8003a5c:	697b      	ldr	r3, [r7, #20]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	00bb8000 	.word	0x00bb8000
 8003a74:	007a1200 	.word	0x007a1200
 8003a78:	00f42400 	.word	0x00f42400

08003a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e042      	b.n	8003b14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d106      	bne.n	8003aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fd f9f8 	bl	8000e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2224      	movs	r2, #36	@ 0x24
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f973 	bl	8003dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695a      	ldr	r2, [r3, #20]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08a      	sub	sp, #40	@ 0x28
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d175      	bne.n	8003c28 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_UART_Transmit+0x2c>
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e06e      	b.n	8003c2a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2221      	movs	r2, #33	@ 0x21
 8003b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b5a:	f7fd faed 	bl	8001138 <HAL_GetTick>
 8003b5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	88fa      	ldrh	r2, [r7, #6]
 8003b64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	88fa      	ldrh	r2, [r7, #6]
 8003b6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b74:	d108      	bne.n	8003b88 <HAL_UART_Transmit+0x6c>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d104      	bne.n	8003b88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	e003      	b.n	8003b90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b90:	e02e      	b.n	8003bf0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2180      	movs	r1, #128	@ 0x80
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f848 	bl	8003c32 <UART_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e03a      	b.n	8003c2a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	3302      	adds	r3, #2
 8003bce:	61bb      	str	r3, [r7, #24]
 8003bd0:	e007      	b.n	8003be2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	3301      	adds	r3, #1
 8003be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1cb      	bne.n	8003b92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2200      	movs	r2, #0
 8003c02:	2140      	movs	r1, #64	@ 0x40
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f814 	bl	8003c32 <UART_WaitOnFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e006      	b.n	8003c2a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3720      	adds	r7, #32
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b086      	sub	sp, #24
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c42:	e03b      	b.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4a:	d037      	beq.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4c:	f7fd fa74 	bl	8001138 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	6a3a      	ldr	r2, [r7, #32]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d302      	bcc.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e03a      	b.n	8003cdc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d023      	beq.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b80      	cmp	r3, #128	@ 0x80
 8003c78:	d020      	beq.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b40      	cmp	r3, #64	@ 0x40
 8003c7e:	d01d      	beq.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d116      	bne.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 f81d 	bl	8003ce4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2208      	movs	r2, #8
 8003cae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e00f      	b.n	8003cdc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d0b4      	beq.n	8003c44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b095      	sub	sp, #84	@ 0x54
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	330c      	adds	r3, #12
 8003cf2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf6:	e853 3f00 	ldrex	r3, [r3]
 8003cfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	330c      	adds	r3, #12
 8003d0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d0c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d14:	e841 2300 	strex	r3, r2, [r1]
 8003d18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1e5      	bne.n	8003cec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3314      	adds	r3, #20
 8003d26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f023 0301 	bic.w	r3, r3, #1
 8003d36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3314      	adds	r3, #20
 8003d3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e5      	bne.n	8003d20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d119      	bne.n	8003d90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	330c      	adds	r3, #12
 8003d62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f023 0310 	bic.w	r3, r3, #16
 8003d72:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d7c:	61ba      	str	r2, [r7, #24]
 8003d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	6979      	ldr	r1, [r7, #20]
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	613b      	str	r3, [r7, #16]
   return(result);
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e5      	bne.n	8003d5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d9e:	bf00      	nop
 8003da0:	3754      	adds	r7, #84	@ 0x54
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003db0:	b0c0      	sub	sp, #256	@ 0x100
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc8:	68d9      	ldr	r1, [r3, #12]
 8003dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	ea40 0301 	orr.w	r3, r0, r1
 8003dd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e04:	f021 010c 	bic.w	r1, r1, #12
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e12:	430b      	orrs	r3, r1
 8003e14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e26:	6999      	ldr	r1, [r3, #24]
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	ea40 0301 	orr.w	r3, r0, r1
 8003e32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4b8f      	ldr	r3, [pc, #572]	@ (8004078 <UART_SetConfig+0x2cc>)
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d005      	beq.n	8003e4c <UART_SetConfig+0xa0>
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	4b8d      	ldr	r3, [pc, #564]	@ (800407c <UART_SetConfig+0x2d0>)
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d104      	bne.n	8003e56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e4c:	f7ff fcc0 	bl	80037d0 <HAL_RCC_GetPCLK2Freq>
 8003e50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e54:	e003      	b.n	8003e5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e56:	f7ff fca7 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8003e5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e68:	f040 810c 	bne.w	8004084 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e70:	2200      	movs	r2, #0
 8003e72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e7e:	4622      	mov	r2, r4
 8003e80:	462b      	mov	r3, r5
 8003e82:	1891      	adds	r1, r2, r2
 8003e84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e86:	415b      	adcs	r3, r3
 8003e88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e8e:	4621      	mov	r1, r4
 8003e90:	eb12 0801 	adds.w	r8, r2, r1
 8003e94:	4629      	mov	r1, r5
 8003e96:	eb43 0901 	adc.w	r9, r3, r1
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eae:	4690      	mov	r8, r2
 8003eb0:	4699      	mov	r9, r3
 8003eb2:	4623      	mov	r3, r4
 8003eb4:	eb18 0303 	adds.w	r3, r8, r3
 8003eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ebc:	462b      	mov	r3, r5
 8003ebe:	eb49 0303 	adc.w	r3, r9, r3
 8003ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ed2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ed6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003eda:	460b      	mov	r3, r1
 8003edc:	18db      	adds	r3, r3, r3
 8003ede:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	eb42 0303 	adc.w	r3, r2, r3
 8003ee6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ee8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003eec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ef0:	f7fc f9c6 	bl	8000280 <__aeabi_uldivmod>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4b61      	ldr	r3, [pc, #388]	@ (8004080 <UART_SetConfig+0x2d4>)
 8003efa:	fba3 2302 	umull	r2, r3, r3, r2
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	011c      	lsls	r4, r3, #4
 8003f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f06:	2200      	movs	r2, #0
 8003f08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f14:	4642      	mov	r2, r8
 8003f16:	464b      	mov	r3, r9
 8003f18:	1891      	adds	r1, r2, r2
 8003f1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f1c:	415b      	adcs	r3, r3
 8003f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f24:	4641      	mov	r1, r8
 8003f26:	eb12 0a01 	adds.w	sl, r2, r1
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	eb43 0b01 	adc.w	fp, r3, r1
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f44:	4692      	mov	sl, r2
 8003f46:	469b      	mov	fp, r3
 8003f48:	4643      	mov	r3, r8
 8003f4a:	eb1a 0303 	adds.w	r3, sl, r3
 8003f4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f52:	464b      	mov	r3, r9
 8003f54:	eb4b 0303 	adc.w	r3, fp, r3
 8003f58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f70:	460b      	mov	r3, r1
 8003f72:	18db      	adds	r3, r3, r3
 8003f74:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f76:	4613      	mov	r3, r2
 8003f78:	eb42 0303 	adc.w	r3, r2, r3
 8003f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f86:	f7fc f97b 	bl	8000280 <__aeabi_uldivmod>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4b3b      	ldr	r3, [pc, #236]	@ (8004080 <UART_SetConfig+0x2d4>)
 8003f92:	fba3 2301 	umull	r2, r3, r3, r1
 8003f96:	095b      	lsrs	r3, r3, #5
 8003f98:	2264      	movs	r2, #100	@ 0x64
 8003f9a:	fb02 f303 	mul.w	r3, r2, r3
 8003f9e:	1acb      	subs	r3, r1, r3
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003fa6:	4b36      	ldr	r3, [pc, #216]	@ (8004080 <UART_SetConfig+0x2d4>)
 8003fa8:	fba3 2302 	umull	r2, r3, r3, r2
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fb4:	441c      	add	r4, r3
 8003fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003fc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003fc8:	4642      	mov	r2, r8
 8003fca:	464b      	mov	r3, r9
 8003fcc:	1891      	adds	r1, r2, r2
 8003fce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fd0:	415b      	adcs	r3, r3
 8003fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003fd8:	4641      	mov	r1, r8
 8003fda:	1851      	adds	r1, r2, r1
 8003fdc:	6339      	str	r1, [r7, #48]	@ 0x30
 8003fde:	4649      	mov	r1, r9
 8003fe0:	414b      	adcs	r3, r1
 8003fe2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ff0:	4659      	mov	r1, fp
 8003ff2:	00cb      	lsls	r3, r1, #3
 8003ff4:	4651      	mov	r1, sl
 8003ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ffa:	4651      	mov	r1, sl
 8003ffc:	00ca      	lsls	r2, r1, #3
 8003ffe:	4610      	mov	r0, r2
 8004000:	4619      	mov	r1, r3
 8004002:	4603      	mov	r3, r0
 8004004:	4642      	mov	r2, r8
 8004006:	189b      	adds	r3, r3, r2
 8004008:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800400c:	464b      	mov	r3, r9
 800400e:	460a      	mov	r2, r1
 8004010:	eb42 0303 	adc.w	r3, r2, r3
 8004014:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004024:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004028:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800402c:	460b      	mov	r3, r1
 800402e:	18db      	adds	r3, r3, r3
 8004030:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004032:	4613      	mov	r3, r2
 8004034:	eb42 0303 	adc.w	r3, r2, r3
 8004038:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800403a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800403e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004042:	f7fc f91d 	bl	8000280 <__aeabi_uldivmod>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4b0d      	ldr	r3, [pc, #52]	@ (8004080 <UART_SetConfig+0x2d4>)
 800404c:	fba3 1302 	umull	r1, r3, r3, r2
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	2164      	movs	r1, #100	@ 0x64
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	3332      	adds	r3, #50	@ 0x32
 800405e:	4a08      	ldr	r2, [pc, #32]	@ (8004080 <UART_SetConfig+0x2d4>)
 8004060:	fba2 2303 	umull	r2, r3, r2, r3
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	f003 0207 	and.w	r2, r3, #7
 800406a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4422      	add	r2, r4
 8004072:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004074:	e106      	b.n	8004284 <UART_SetConfig+0x4d8>
 8004076:	bf00      	nop
 8004078:	40011000 	.word	0x40011000
 800407c:	40011400 	.word	0x40011400
 8004080:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004088:	2200      	movs	r2, #0
 800408a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800408e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004092:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004096:	4642      	mov	r2, r8
 8004098:	464b      	mov	r3, r9
 800409a:	1891      	adds	r1, r2, r2
 800409c:	6239      	str	r1, [r7, #32]
 800409e:	415b      	adcs	r3, r3
 80040a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040a6:	4641      	mov	r1, r8
 80040a8:	1854      	adds	r4, r2, r1
 80040aa:	4649      	mov	r1, r9
 80040ac:	eb43 0501 	adc.w	r5, r3, r1
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	00eb      	lsls	r3, r5, #3
 80040ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040be:	00e2      	lsls	r2, r4, #3
 80040c0:	4614      	mov	r4, r2
 80040c2:	461d      	mov	r5, r3
 80040c4:	4643      	mov	r3, r8
 80040c6:	18e3      	adds	r3, r4, r3
 80040c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040cc:	464b      	mov	r3, r9
 80040ce:	eb45 0303 	adc.w	r3, r5, r3
 80040d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040f2:	4629      	mov	r1, r5
 80040f4:	008b      	lsls	r3, r1, #2
 80040f6:	4621      	mov	r1, r4
 80040f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040fc:	4621      	mov	r1, r4
 80040fe:	008a      	lsls	r2, r1, #2
 8004100:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004104:	f7fc f8bc 	bl	8000280 <__aeabi_uldivmod>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4b60      	ldr	r3, [pc, #384]	@ (8004290 <UART_SetConfig+0x4e4>)
 800410e:	fba3 2302 	umull	r2, r3, r3, r2
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	011c      	lsls	r4, r3, #4
 8004116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800411a:	2200      	movs	r2, #0
 800411c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004120:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004124:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004128:	4642      	mov	r2, r8
 800412a:	464b      	mov	r3, r9
 800412c:	1891      	adds	r1, r2, r2
 800412e:	61b9      	str	r1, [r7, #24]
 8004130:	415b      	adcs	r3, r3
 8004132:	61fb      	str	r3, [r7, #28]
 8004134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004138:	4641      	mov	r1, r8
 800413a:	1851      	adds	r1, r2, r1
 800413c:	6139      	str	r1, [r7, #16]
 800413e:	4649      	mov	r1, r9
 8004140:	414b      	adcs	r3, r1
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004150:	4659      	mov	r1, fp
 8004152:	00cb      	lsls	r3, r1, #3
 8004154:	4651      	mov	r1, sl
 8004156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800415a:	4651      	mov	r1, sl
 800415c:	00ca      	lsls	r2, r1, #3
 800415e:	4610      	mov	r0, r2
 8004160:	4619      	mov	r1, r3
 8004162:	4603      	mov	r3, r0
 8004164:	4642      	mov	r2, r8
 8004166:	189b      	adds	r3, r3, r2
 8004168:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800416c:	464b      	mov	r3, r9
 800416e:	460a      	mov	r2, r1
 8004170:	eb42 0303 	adc.w	r3, r2, r3
 8004174:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004182:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004190:	4649      	mov	r1, r9
 8004192:	008b      	lsls	r3, r1, #2
 8004194:	4641      	mov	r1, r8
 8004196:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800419a:	4641      	mov	r1, r8
 800419c:	008a      	lsls	r2, r1, #2
 800419e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041a2:	f7fc f86d 	bl	8000280 <__aeabi_uldivmod>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	4611      	mov	r1, r2
 80041ac:	4b38      	ldr	r3, [pc, #224]	@ (8004290 <UART_SetConfig+0x4e4>)
 80041ae:	fba3 2301 	umull	r2, r3, r3, r1
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	2264      	movs	r2, #100	@ 0x64
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
 80041ba:	1acb      	subs	r3, r1, r3
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	3332      	adds	r3, #50	@ 0x32
 80041c0:	4a33      	ldr	r2, [pc, #204]	@ (8004290 <UART_SetConfig+0x4e4>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041cc:	441c      	add	r4, r3
 80041ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041d2:	2200      	movs	r2, #0
 80041d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80041d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80041d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041dc:	4642      	mov	r2, r8
 80041de:	464b      	mov	r3, r9
 80041e0:	1891      	adds	r1, r2, r2
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	415b      	adcs	r3, r3
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041ec:	4641      	mov	r1, r8
 80041ee:	1851      	adds	r1, r2, r1
 80041f0:	6039      	str	r1, [r7, #0]
 80041f2:	4649      	mov	r1, r9
 80041f4:	414b      	adcs	r3, r1
 80041f6:	607b      	str	r3, [r7, #4]
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004204:	4659      	mov	r1, fp
 8004206:	00cb      	lsls	r3, r1, #3
 8004208:	4651      	mov	r1, sl
 800420a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800420e:	4651      	mov	r1, sl
 8004210:	00ca      	lsls	r2, r1, #3
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	4603      	mov	r3, r0
 8004218:	4642      	mov	r2, r8
 800421a:	189b      	adds	r3, r3, r2
 800421c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800421e:	464b      	mov	r3, r9
 8004220:	460a      	mov	r2, r1
 8004222:	eb42 0303 	adc.w	r3, r2, r3
 8004226:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	663b      	str	r3, [r7, #96]	@ 0x60
 8004232:	667a      	str	r2, [r7, #100]	@ 0x64
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004240:	4649      	mov	r1, r9
 8004242:	008b      	lsls	r3, r1, #2
 8004244:	4641      	mov	r1, r8
 8004246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800424a:	4641      	mov	r1, r8
 800424c:	008a      	lsls	r2, r1, #2
 800424e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004252:	f7fc f815 	bl	8000280 <__aeabi_uldivmod>
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	4b0d      	ldr	r3, [pc, #52]	@ (8004290 <UART_SetConfig+0x4e4>)
 800425c:	fba3 1302 	umull	r1, r3, r3, r2
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	2164      	movs	r1, #100	@ 0x64
 8004264:	fb01 f303 	mul.w	r3, r1, r3
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	3332      	adds	r3, #50	@ 0x32
 800426e:	4a08      	ldr	r2, [pc, #32]	@ (8004290 <UART_SetConfig+0x4e4>)
 8004270:	fba2 2303 	umull	r2, r3, r2, r3
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	f003 020f 	and.w	r2, r3, #15
 800427a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4422      	add	r2, r4
 8004282:	609a      	str	r2, [r3, #8]
}
 8004284:	bf00      	nop
 8004286:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800428a:	46bd      	mov	sp, r7
 800428c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004290:	51eb851f 	.word	0x51eb851f

08004294 <siprintf>:
 8004294:	b40e      	push	{r1, r2, r3}
 8004296:	b510      	push	{r4, lr}
 8004298:	b09d      	sub	sp, #116	@ 0x74
 800429a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800429c:	9002      	str	r0, [sp, #8]
 800429e:	9006      	str	r0, [sp, #24]
 80042a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80042a4:	480a      	ldr	r0, [pc, #40]	@ (80042d0 <siprintf+0x3c>)
 80042a6:	9107      	str	r1, [sp, #28]
 80042a8:	9104      	str	r1, [sp, #16]
 80042aa:	490a      	ldr	r1, [pc, #40]	@ (80042d4 <siprintf+0x40>)
 80042ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80042b0:	9105      	str	r1, [sp, #20]
 80042b2:	2400      	movs	r4, #0
 80042b4:	a902      	add	r1, sp, #8
 80042b6:	6800      	ldr	r0, [r0, #0]
 80042b8:	9301      	str	r3, [sp, #4]
 80042ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 80042bc:	f000 f994 	bl	80045e8 <_svfiprintf_r>
 80042c0:	9b02      	ldr	r3, [sp, #8]
 80042c2:	701c      	strb	r4, [r3, #0]
 80042c4:	b01d      	add	sp, #116	@ 0x74
 80042c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042ca:	b003      	add	sp, #12
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	2000000c 	.word	0x2000000c
 80042d4:	ffff0208 	.word	0xffff0208

080042d8 <memset>:
 80042d8:	4402      	add	r2, r0
 80042da:	4603      	mov	r3, r0
 80042dc:	4293      	cmp	r3, r2
 80042de:	d100      	bne.n	80042e2 <memset+0xa>
 80042e0:	4770      	bx	lr
 80042e2:	f803 1b01 	strb.w	r1, [r3], #1
 80042e6:	e7f9      	b.n	80042dc <memset+0x4>

080042e8 <__errno>:
 80042e8:	4b01      	ldr	r3, [pc, #4]	@ (80042f0 <__errno+0x8>)
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	2000000c 	.word	0x2000000c

080042f4 <__libc_init_array>:
 80042f4:	b570      	push	{r4, r5, r6, lr}
 80042f6:	4d0d      	ldr	r5, [pc, #52]	@ (800432c <__libc_init_array+0x38>)
 80042f8:	4c0d      	ldr	r4, [pc, #52]	@ (8004330 <__libc_init_array+0x3c>)
 80042fa:	1b64      	subs	r4, r4, r5
 80042fc:	10a4      	asrs	r4, r4, #2
 80042fe:	2600      	movs	r6, #0
 8004300:	42a6      	cmp	r6, r4
 8004302:	d109      	bne.n	8004318 <__libc_init_array+0x24>
 8004304:	4d0b      	ldr	r5, [pc, #44]	@ (8004334 <__libc_init_array+0x40>)
 8004306:	4c0c      	ldr	r4, [pc, #48]	@ (8004338 <__libc_init_array+0x44>)
 8004308:	f000 fc64 	bl	8004bd4 <_init>
 800430c:	1b64      	subs	r4, r4, r5
 800430e:	10a4      	asrs	r4, r4, #2
 8004310:	2600      	movs	r6, #0
 8004312:	42a6      	cmp	r6, r4
 8004314:	d105      	bne.n	8004322 <__libc_init_array+0x2e>
 8004316:	bd70      	pop	{r4, r5, r6, pc}
 8004318:	f855 3b04 	ldr.w	r3, [r5], #4
 800431c:	4798      	blx	r3
 800431e:	3601      	adds	r6, #1
 8004320:	e7ee      	b.n	8004300 <__libc_init_array+0xc>
 8004322:	f855 3b04 	ldr.w	r3, [r5], #4
 8004326:	4798      	blx	r3
 8004328:	3601      	adds	r6, #1
 800432a:	e7f2      	b.n	8004312 <__libc_init_array+0x1e>
 800432c:	08004e64 	.word	0x08004e64
 8004330:	08004e64 	.word	0x08004e64
 8004334:	08004e64 	.word	0x08004e64
 8004338:	08004e68 	.word	0x08004e68

0800433c <__retarget_lock_acquire_recursive>:
 800433c:	4770      	bx	lr

0800433e <__retarget_lock_release_recursive>:
 800433e:	4770      	bx	lr

08004340 <_free_r>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	4605      	mov	r5, r0
 8004344:	2900      	cmp	r1, #0
 8004346:	d041      	beq.n	80043cc <_free_r+0x8c>
 8004348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800434c:	1f0c      	subs	r4, r1, #4
 800434e:	2b00      	cmp	r3, #0
 8004350:	bfb8      	it	lt
 8004352:	18e4      	addlt	r4, r4, r3
 8004354:	f000 f8e0 	bl	8004518 <__malloc_lock>
 8004358:	4a1d      	ldr	r2, [pc, #116]	@ (80043d0 <_free_r+0x90>)
 800435a:	6813      	ldr	r3, [r2, #0]
 800435c:	b933      	cbnz	r3, 800436c <_free_r+0x2c>
 800435e:	6063      	str	r3, [r4, #4]
 8004360:	6014      	str	r4, [r2, #0]
 8004362:	4628      	mov	r0, r5
 8004364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004368:	f000 b8dc 	b.w	8004524 <__malloc_unlock>
 800436c:	42a3      	cmp	r3, r4
 800436e:	d908      	bls.n	8004382 <_free_r+0x42>
 8004370:	6820      	ldr	r0, [r4, #0]
 8004372:	1821      	adds	r1, r4, r0
 8004374:	428b      	cmp	r3, r1
 8004376:	bf01      	itttt	eq
 8004378:	6819      	ldreq	r1, [r3, #0]
 800437a:	685b      	ldreq	r3, [r3, #4]
 800437c:	1809      	addeq	r1, r1, r0
 800437e:	6021      	streq	r1, [r4, #0]
 8004380:	e7ed      	b.n	800435e <_free_r+0x1e>
 8004382:	461a      	mov	r2, r3
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	b10b      	cbz	r3, 800438c <_free_r+0x4c>
 8004388:	42a3      	cmp	r3, r4
 800438a:	d9fa      	bls.n	8004382 <_free_r+0x42>
 800438c:	6811      	ldr	r1, [r2, #0]
 800438e:	1850      	adds	r0, r2, r1
 8004390:	42a0      	cmp	r0, r4
 8004392:	d10b      	bne.n	80043ac <_free_r+0x6c>
 8004394:	6820      	ldr	r0, [r4, #0]
 8004396:	4401      	add	r1, r0
 8004398:	1850      	adds	r0, r2, r1
 800439a:	4283      	cmp	r3, r0
 800439c:	6011      	str	r1, [r2, #0]
 800439e:	d1e0      	bne.n	8004362 <_free_r+0x22>
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	6053      	str	r3, [r2, #4]
 80043a6:	4408      	add	r0, r1
 80043a8:	6010      	str	r0, [r2, #0]
 80043aa:	e7da      	b.n	8004362 <_free_r+0x22>
 80043ac:	d902      	bls.n	80043b4 <_free_r+0x74>
 80043ae:	230c      	movs	r3, #12
 80043b0:	602b      	str	r3, [r5, #0]
 80043b2:	e7d6      	b.n	8004362 <_free_r+0x22>
 80043b4:	6820      	ldr	r0, [r4, #0]
 80043b6:	1821      	adds	r1, r4, r0
 80043b8:	428b      	cmp	r3, r1
 80043ba:	bf04      	itt	eq
 80043bc:	6819      	ldreq	r1, [r3, #0]
 80043be:	685b      	ldreq	r3, [r3, #4]
 80043c0:	6063      	str	r3, [r4, #4]
 80043c2:	bf04      	itt	eq
 80043c4:	1809      	addeq	r1, r1, r0
 80043c6:	6021      	streq	r1, [r4, #0]
 80043c8:	6054      	str	r4, [r2, #4]
 80043ca:	e7ca      	b.n	8004362 <_free_r+0x22>
 80043cc:	bd38      	pop	{r3, r4, r5, pc}
 80043ce:	bf00      	nop
 80043d0:	200006ac 	.word	0x200006ac

080043d4 <sbrk_aligned>:
 80043d4:	b570      	push	{r4, r5, r6, lr}
 80043d6:	4e0f      	ldr	r6, [pc, #60]	@ (8004414 <sbrk_aligned+0x40>)
 80043d8:	460c      	mov	r4, r1
 80043da:	6831      	ldr	r1, [r6, #0]
 80043dc:	4605      	mov	r5, r0
 80043de:	b911      	cbnz	r1, 80043e6 <sbrk_aligned+0x12>
 80043e0:	f000 fba4 	bl	8004b2c <_sbrk_r>
 80043e4:	6030      	str	r0, [r6, #0]
 80043e6:	4621      	mov	r1, r4
 80043e8:	4628      	mov	r0, r5
 80043ea:	f000 fb9f 	bl	8004b2c <_sbrk_r>
 80043ee:	1c43      	adds	r3, r0, #1
 80043f0:	d103      	bne.n	80043fa <sbrk_aligned+0x26>
 80043f2:	f04f 34ff 	mov.w	r4, #4294967295
 80043f6:	4620      	mov	r0, r4
 80043f8:	bd70      	pop	{r4, r5, r6, pc}
 80043fa:	1cc4      	adds	r4, r0, #3
 80043fc:	f024 0403 	bic.w	r4, r4, #3
 8004400:	42a0      	cmp	r0, r4
 8004402:	d0f8      	beq.n	80043f6 <sbrk_aligned+0x22>
 8004404:	1a21      	subs	r1, r4, r0
 8004406:	4628      	mov	r0, r5
 8004408:	f000 fb90 	bl	8004b2c <_sbrk_r>
 800440c:	3001      	adds	r0, #1
 800440e:	d1f2      	bne.n	80043f6 <sbrk_aligned+0x22>
 8004410:	e7ef      	b.n	80043f2 <sbrk_aligned+0x1e>
 8004412:	bf00      	nop
 8004414:	200006a8 	.word	0x200006a8

08004418 <_malloc_r>:
 8004418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800441c:	1ccd      	adds	r5, r1, #3
 800441e:	f025 0503 	bic.w	r5, r5, #3
 8004422:	3508      	adds	r5, #8
 8004424:	2d0c      	cmp	r5, #12
 8004426:	bf38      	it	cc
 8004428:	250c      	movcc	r5, #12
 800442a:	2d00      	cmp	r5, #0
 800442c:	4606      	mov	r6, r0
 800442e:	db01      	blt.n	8004434 <_malloc_r+0x1c>
 8004430:	42a9      	cmp	r1, r5
 8004432:	d904      	bls.n	800443e <_malloc_r+0x26>
 8004434:	230c      	movs	r3, #12
 8004436:	6033      	str	r3, [r6, #0]
 8004438:	2000      	movs	r0, #0
 800443a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800443e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004514 <_malloc_r+0xfc>
 8004442:	f000 f869 	bl	8004518 <__malloc_lock>
 8004446:	f8d8 3000 	ldr.w	r3, [r8]
 800444a:	461c      	mov	r4, r3
 800444c:	bb44      	cbnz	r4, 80044a0 <_malloc_r+0x88>
 800444e:	4629      	mov	r1, r5
 8004450:	4630      	mov	r0, r6
 8004452:	f7ff ffbf 	bl	80043d4 <sbrk_aligned>
 8004456:	1c43      	adds	r3, r0, #1
 8004458:	4604      	mov	r4, r0
 800445a:	d158      	bne.n	800450e <_malloc_r+0xf6>
 800445c:	f8d8 4000 	ldr.w	r4, [r8]
 8004460:	4627      	mov	r7, r4
 8004462:	2f00      	cmp	r7, #0
 8004464:	d143      	bne.n	80044ee <_malloc_r+0xd6>
 8004466:	2c00      	cmp	r4, #0
 8004468:	d04b      	beq.n	8004502 <_malloc_r+0xea>
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	4639      	mov	r1, r7
 800446e:	4630      	mov	r0, r6
 8004470:	eb04 0903 	add.w	r9, r4, r3
 8004474:	f000 fb5a 	bl	8004b2c <_sbrk_r>
 8004478:	4581      	cmp	r9, r0
 800447a:	d142      	bne.n	8004502 <_malloc_r+0xea>
 800447c:	6821      	ldr	r1, [r4, #0]
 800447e:	1a6d      	subs	r5, r5, r1
 8004480:	4629      	mov	r1, r5
 8004482:	4630      	mov	r0, r6
 8004484:	f7ff ffa6 	bl	80043d4 <sbrk_aligned>
 8004488:	3001      	adds	r0, #1
 800448a:	d03a      	beq.n	8004502 <_malloc_r+0xea>
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	442b      	add	r3, r5
 8004490:	6023      	str	r3, [r4, #0]
 8004492:	f8d8 3000 	ldr.w	r3, [r8]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	bb62      	cbnz	r2, 80044f4 <_malloc_r+0xdc>
 800449a:	f8c8 7000 	str.w	r7, [r8]
 800449e:	e00f      	b.n	80044c0 <_malloc_r+0xa8>
 80044a0:	6822      	ldr	r2, [r4, #0]
 80044a2:	1b52      	subs	r2, r2, r5
 80044a4:	d420      	bmi.n	80044e8 <_malloc_r+0xd0>
 80044a6:	2a0b      	cmp	r2, #11
 80044a8:	d917      	bls.n	80044da <_malloc_r+0xc2>
 80044aa:	1961      	adds	r1, r4, r5
 80044ac:	42a3      	cmp	r3, r4
 80044ae:	6025      	str	r5, [r4, #0]
 80044b0:	bf18      	it	ne
 80044b2:	6059      	strne	r1, [r3, #4]
 80044b4:	6863      	ldr	r3, [r4, #4]
 80044b6:	bf08      	it	eq
 80044b8:	f8c8 1000 	streq.w	r1, [r8]
 80044bc:	5162      	str	r2, [r4, r5]
 80044be:	604b      	str	r3, [r1, #4]
 80044c0:	4630      	mov	r0, r6
 80044c2:	f000 f82f 	bl	8004524 <__malloc_unlock>
 80044c6:	f104 000b 	add.w	r0, r4, #11
 80044ca:	1d23      	adds	r3, r4, #4
 80044cc:	f020 0007 	bic.w	r0, r0, #7
 80044d0:	1ac2      	subs	r2, r0, r3
 80044d2:	bf1c      	itt	ne
 80044d4:	1a1b      	subne	r3, r3, r0
 80044d6:	50a3      	strne	r3, [r4, r2]
 80044d8:	e7af      	b.n	800443a <_malloc_r+0x22>
 80044da:	6862      	ldr	r2, [r4, #4]
 80044dc:	42a3      	cmp	r3, r4
 80044de:	bf0c      	ite	eq
 80044e0:	f8c8 2000 	streq.w	r2, [r8]
 80044e4:	605a      	strne	r2, [r3, #4]
 80044e6:	e7eb      	b.n	80044c0 <_malloc_r+0xa8>
 80044e8:	4623      	mov	r3, r4
 80044ea:	6864      	ldr	r4, [r4, #4]
 80044ec:	e7ae      	b.n	800444c <_malloc_r+0x34>
 80044ee:	463c      	mov	r4, r7
 80044f0:	687f      	ldr	r7, [r7, #4]
 80044f2:	e7b6      	b.n	8004462 <_malloc_r+0x4a>
 80044f4:	461a      	mov	r2, r3
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	42a3      	cmp	r3, r4
 80044fa:	d1fb      	bne.n	80044f4 <_malloc_r+0xdc>
 80044fc:	2300      	movs	r3, #0
 80044fe:	6053      	str	r3, [r2, #4]
 8004500:	e7de      	b.n	80044c0 <_malloc_r+0xa8>
 8004502:	230c      	movs	r3, #12
 8004504:	6033      	str	r3, [r6, #0]
 8004506:	4630      	mov	r0, r6
 8004508:	f000 f80c 	bl	8004524 <__malloc_unlock>
 800450c:	e794      	b.n	8004438 <_malloc_r+0x20>
 800450e:	6005      	str	r5, [r0, #0]
 8004510:	e7d6      	b.n	80044c0 <_malloc_r+0xa8>
 8004512:	bf00      	nop
 8004514:	200006ac 	.word	0x200006ac

08004518 <__malloc_lock>:
 8004518:	4801      	ldr	r0, [pc, #4]	@ (8004520 <__malloc_lock+0x8>)
 800451a:	f7ff bf0f 	b.w	800433c <__retarget_lock_acquire_recursive>
 800451e:	bf00      	nop
 8004520:	200006a4 	.word	0x200006a4

08004524 <__malloc_unlock>:
 8004524:	4801      	ldr	r0, [pc, #4]	@ (800452c <__malloc_unlock+0x8>)
 8004526:	f7ff bf0a 	b.w	800433e <__retarget_lock_release_recursive>
 800452a:	bf00      	nop
 800452c:	200006a4 	.word	0x200006a4

08004530 <__ssputs_r>:
 8004530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004534:	688e      	ldr	r6, [r1, #8]
 8004536:	461f      	mov	r7, r3
 8004538:	42be      	cmp	r6, r7
 800453a:	680b      	ldr	r3, [r1, #0]
 800453c:	4682      	mov	sl, r0
 800453e:	460c      	mov	r4, r1
 8004540:	4690      	mov	r8, r2
 8004542:	d82d      	bhi.n	80045a0 <__ssputs_r+0x70>
 8004544:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004548:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800454c:	d026      	beq.n	800459c <__ssputs_r+0x6c>
 800454e:	6965      	ldr	r5, [r4, #20]
 8004550:	6909      	ldr	r1, [r1, #16]
 8004552:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004556:	eba3 0901 	sub.w	r9, r3, r1
 800455a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800455e:	1c7b      	adds	r3, r7, #1
 8004560:	444b      	add	r3, r9
 8004562:	106d      	asrs	r5, r5, #1
 8004564:	429d      	cmp	r5, r3
 8004566:	bf38      	it	cc
 8004568:	461d      	movcc	r5, r3
 800456a:	0553      	lsls	r3, r2, #21
 800456c:	d527      	bpl.n	80045be <__ssputs_r+0x8e>
 800456e:	4629      	mov	r1, r5
 8004570:	f7ff ff52 	bl	8004418 <_malloc_r>
 8004574:	4606      	mov	r6, r0
 8004576:	b360      	cbz	r0, 80045d2 <__ssputs_r+0xa2>
 8004578:	6921      	ldr	r1, [r4, #16]
 800457a:	464a      	mov	r2, r9
 800457c:	f000 fae6 	bl	8004b4c <memcpy>
 8004580:	89a3      	ldrh	r3, [r4, #12]
 8004582:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800458a:	81a3      	strh	r3, [r4, #12]
 800458c:	6126      	str	r6, [r4, #16]
 800458e:	6165      	str	r5, [r4, #20]
 8004590:	444e      	add	r6, r9
 8004592:	eba5 0509 	sub.w	r5, r5, r9
 8004596:	6026      	str	r6, [r4, #0]
 8004598:	60a5      	str	r5, [r4, #8]
 800459a:	463e      	mov	r6, r7
 800459c:	42be      	cmp	r6, r7
 800459e:	d900      	bls.n	80045a2 <__ssputs_r+0x72>
 80045a0:	463e      	mov	r6, r7
 80045a2:	6820      	ldr	r0, [r4, #0]
 80045a4:	4632      	mov	r2, r6
 80045a6:	4641      	mov	r1, r8
 80045a8:	f000 faa6 	bl	8004af8 <memmove>
 80045ac:	68a3      	ldr	r3, [r4, #8]
 80045ae:	1b9b      	subs	r3, r3, r6
 80045b0:	60a3      	str	r3, [r4, #8]
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	4433      	add	r3, r6
 80045b6:	6023      	str	r3, [r4, #0]
 80045b8:	2000      	movs	r0, #0
 80045ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045be:	462a      	mov	r2, r5
 80045c0:	f000 fad2 	bl	8004b68 <_realloc_r>
 80045c4:	4606      	mov	r6, r0
 80045c6:	2800      	cmp	r0, #0
 80045c8:	d1e0      	bne.n	800458c <__ssputs_r+0x5c>
 80045ca:	6921      	ldr	r1, [r4, #16]
 80045cc:	4650      	mov	r0, sl
 80045ce:	f7ff feb7 	bl	8004340 <_free_r>
 80045d2:	230c      	movs	r3, #12
 80045d4:	f8ca 3000 	str.w	r3, [sl]
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045de:	81a3      	strh	r3, [r4, #12]
 80045e0:	f04f 30ff 	mov.w	r0, #4294967295
 80045e4:	e7e9      	b.n	80045ba <__ssputs_r+0x8a>
	...

080045e8 <_svfiprintf_r>:
 80045e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ec:	4698      	mov	r8, r3
 80045ee:	898b      	ldrh	r3, [r1, #12]
 80045f0:	061b      	lsls	r3, r3, #24
 80045f2:	b09d      	sub	sp, #116	@ 0x74
 80045f4:	4607      	mov	r7, r0
 80045f6:	460d      	mov	r5, r1
 80045f8:	4614      	mov	r4, r2
 80045fa:	d510      	bpl.n	800461e <_svfiprintf_r+0x36>
 80045fc:	690b      	ldr	r3, [r1, #16]
 80045fe:	b973      	cbnz	r3, 800461e <_svfiprintf_r+0x36>
 8004600:	2140      	movs	r1, #64	@ 0x40
 8004602:	f7ff ff09 	bl	8004418 <_malloc_r>
 8004606:	6028      	str	r0, [r5, #0]
 8004608:	6128      	str	r0, [r5, #16]
 800460a:	b930      	cbnz	r0, 800461a <_svfiprintf_r+0x32>
 800460c:	230c      	movs	r3, #12
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	f04f 30ff 	mov.w	r0, #4294967295
 8004614:	b01d      	add	sp, #116	@ 0x74
 8004616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800461a:	2340      	movs	r3, #64	@ 0x40
 800461c:	616b      	str	r3, [r5, #20]
 800461e:	2300      	movs	r3, #0
 8004620:	9309      	str	r3, [sp, #36]	@ 0x24
 8004622:	2320      	movs	r3, #32
 8004624:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004628:	f8cd 800c 	str.w	r8, [sp, #12]
 800462c:	2330      	movs	r3, #48	@ 0x30
 800462e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80047cc <_svfiprintf_r+0x1e4>
 8004632:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004636:	f04f 0901 	mov.w	r9, #1
 800463a:	4623      	mov	r3, r4
 800463c:	469a      	mov	sl, r3
 800463e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004642:	b10a      	cbz	r2, 8004648 <_svfiprintf_r+0x60>
 8004644:	2a25      	cmp	r2, #37	@ 0x25
 8004646:	d1f9      	bne.n	800463c <_svfiprintf_r+0x54>
 8004648:	ebba 0b04 	subs.w	fp, sl, r4
 800464c:	d00b      	beq.n	8004666 <_svfiprintf_r+0x7e>
 800464e:	465b      	mov	r3, fp
 8004650:	4622      	mov	r2, r4
 8004652:	4629      	mov	r1, r5
 8004654:	4638      	mov	r0, r7
 8004656:	f7ff ff6b 	bl	8004530 <__ssputs_r>
 800465a:	3001      	adds	r0, #1
 800465c:	f000 80a7 	beq.w	80047ae <_svfiprintf_r+0x1c6>
 8004660:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004662:	445a      	add	r2, fp
 8004664:	9209      	str	r2, [sp, #36]	@ 0x24
 8004666:	f89a 3000 	ldrb.w	r3, [sl]
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 809f 	beq.w	80047ae <_svfiprintf_r+0x1c6>
 8004670:	2300      	movs	r3, #0
 8004672:	f04f 32ff 	mov.w	r2, #4294967295
 8004676:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800467a:	f10a 0a01 	add.w	sl, sl, #1
 800467e:	9304      	str	r3, [sp, #16]
 8004680:	9307      	str	r3, [sp, #28]
 8004682:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004686:	931a      	str	r3, [sp, #104]	@ 0x68
 8004688:	4654      	mov	r4, sl
 800468a:	2205      	movs	r2, #5
 800468c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004690:	484e      	ldr	r0, [pc, #312]	@ (80047cc <_svfiprintf_r+0x1e4>)
 8004692:	f7fb fda5 	bl	80001e0 <memchr>
 8004696:	9a04      	ldr	r2, [sp, #16]
 8004698:	b9d8      	cbnz	r0, 80046d2 <_svfiprintf_r+0xea>
 800469a:	06d0      	lsls	r0, r2, #27
 800469c:	bf44      	itt	mi
 800469e:	2320      	movmi	r3, #32
 80046a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046a4:	0711      	lsls	r1, r2, #28
 80046a6:	bf44      	itt	mi
 80046a8:	232b      	movmi	r3, #43	@ 0x2b
 80046aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046ae:	f89a 3000 	ldrb.w	r3, [sl]
 80046b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80046b4:	d015      	beq.n	80046e2 <_svfiprintf_r+0xfa>
 80046b6:	9a07      	ldr	r2, [sp, #28]
 80046b8:	4654      	mov	r4, sl
 80046ba:	2000      	movs	r0, #0
 80046bc:	f04f 0c0a 	mov.w	ip, #10
 80046c0:	4621      	mov	r1, r4
 80046c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046c6:	3b30      	subs	r3, #48	@ 0x30
 80046c8:	2b09      	cmp	r3, #9
 80046ca:	d94b      	bls.n	8004764 <_svfiprintf_r+0x17c>
 80046cc:	b1b0      	cbz	r0, 80046fc <_svfiprintf_r+0x114>
 80046ce:	9207      	str	r2, [sp, #28]
 80046d0:	e014      	b.n	80046fc <_svfiprintf_r+0x114>
 80046d2:	eba0 0308 	sub.w	r3, r0, r8
 80046d6:	fa09 f303 	lsl.w	r3, r9, r3
 80046da:	4313      	orrs	r3, r2
 80046dc:	9304      	str	r3, [sp, #16]
 80046de:	46a2      	mov	sl, r4
 80046e0:	e7d2      	b.n	8004688 <_svfiprintf_r+0xa0>
 80046e2:	9b03      	ldr	r3, [sp, #12]
 80046e4:	1d19      	adds	r1, r3, #4
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	9103      	str	r1, [sp, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	bfbb      	ittet	lt
 80046ee:	425b      	neglt	r3, r3
 80046f0:	f042 0202 	orrlt.w	r2, r2, #2
 80046f4:	9307      	strge	r3, [sp, #28]
 80046f6:	9307      	strlt	r3, [sp, #28]
 80046f8:	bfb8      	it	lt
 80046fa:	9204      	strlt	r2, [sp, #16]
 80046fc:	7823      	ldrb	r3, [r4, #0]
 80046fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8004700:	d10a      	bne.n	8004718 <_svfiprintf_r+0x130>
 8004702:	7863      	ldrb	r3, [r4, #1]
 8004704:	2b2a      	cmp	r3, #42	@ 0x2a
 8004706:	d132      	bne.n	800476e <_svfiprintf_r+0x186>
 8004708:	9b03      	ldr	r3, [sp, #12]
 800470a:	1d1a      	adds	r2, r3, #4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	9203      	str	r2, [sp, #12]
 8004710:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004714:	3402      	adds	r4, #2
 8004716:	9305      	str	r3, [sp, #20]
 8004718:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80047dc <_svfiprintf_r+0x1f4>
 800471c:	7821      	ldrb	r1, [r4, #0]
 800471e:	2203      	movs	r2, #3
 8004720:	4650      	mov	r0, sl
 8004722:	f7fb fd5d 	bl	80001e0 <memchr>
 8004726:	b138      	cbz	r0, 8004738 <_svfiprintf_r+0x150>
 8004728:	9b04      	ldr	r3, [sp, #16]
 800472a:	eba0 000a 	sub.w	r0, r0, sl
 800472e:	2240      	movs	r2, #64	@ 0x40
 8004730:	4082      	lsls	r2, r0
 8004732:	4313      	orrs	r3, r2
 8004734:	3401      	adds	r4, #1
 8004736:	9304      	str	r3, [sp, #16]
 8004738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800473c:	4824      	ldr	r0, [pc, #144]	@ (80047d0 <_svfiprintf_r+0x1e8>)
 800473e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004742:	2206      	movs	r2, #6
 8004744:	f7fb fd4c 	bl	80001e0 <memchr>
 8004748:	2800      	cmp	r0, #0
 800474a:	d036      	beq.n	80047ba <_svfiprintf_r+0x1d2>
 800474c:	4b21      	ldr	r3, [pc, #132]	@ (80047d4 <_svfiprintf_r+0x1ec>)
 800474e:	bb1b      	cbnz	r3, 8004798 <_svfiprintf_r+0x1b0>
 8004750:	9b03      	ldr	r3, [sp, #12]
 8004752:	3307      	adds	r3, #7
 8004754:	f023 0307 	bic.w	r3, r3, #7
 8004758:	3308      	adds	r3, #8
 800475a:	9303      	str	r3, [sp, #12]
 800475c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800475e:	4433      	add	r3, r6
 8004760:	9309      	str	r3, [sp, #36]	@ 0x24
 8004762:	e76a      	b.n	800463a <_svfiprintf_r+0x52>
 8004764:	fb0c 3202 	mla	r2, ip, r2, r3
 8004768:	460c      	mov	r4, r1
 800476a:	2001      	movs	r0, #1
 800476c:	e7a8      	b.n	80046c0 <_svfiprintf_r+0xd8>
 800476e:	2300      	movs	r3, #0
 8004770:	3401      	adds	r4, #1
 8004772:	9305      	str	r3, [sp, #20]
 8004774:	4619      	mov	r1, r3
 8004776:	f04f 0c0a 	mov.w	ip, #10
 800477a:	4620      	mov	r0, r4
 800477c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004780:	3a30      	subs	r2, #48	@ 0x30
 8004782:	2a09      	cmp	r2, #9
 8004784:	d903      	bls.n	800478e <_svfiprintf_r+0x1a6>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0c6      	beq.n	8004718 <_svfiprintf_r+0x130>
 800478a:	9105      	str	r1, [sp, #20]
 800478c:	e7c4      	b.n	8004718 <_svfiprintf_r+0x130>
 800478e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004792:	4604      	mov	r4, r0
 8004794:	2301      	movs	r3, #1
 8004796:	e7f0      	b.n	800477a <_svfiprintf_r+0x192>
 8004798:	ab03      	add	r3, sp, #12
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	462a      	mov	r2, r5
 800479e:	4b0e      	ldr	r3, [pc, #56]	@ (80047d8 <_svfiprintf_r+0x1f0>)
 80047a0:	a904      	add	r1, sp, #16
 80047a2:	4638      	mov	r0, r7
 80047a4:	f3af 8000 	nop.w
 80047a8:	1c42      	adds	r2, r0, #1
 80047aa:	4606      	mov	r6, r0
 80047ac:	d1d6      	bne.n	800475c <_svfiprintf_r+0x174>
 80047ae:	89ab      	ldrh	r3, [r5, #12]
 80047b0:	065b      	lsls	r3, r3, #25
 80047b2:	f53f af2d 	bmi.w	8004610 <_svfiprintf_r+0x28>
 80047b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80047b8:	e72c      	b.n	8004614 <_svfiprintf_r+0x2c>
 80047ba:	ab03      	add	r3, sp, #12
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	462a      	mov	r2, r5
 80047c0:	4b05      	ldr	r3, [pc, #20]	@ (80047d8 <_svfiprintf_r+0x1f0>)
 80047c2:	a904      	add	r1, sp, #16
 80047c4:	4638      	mov	r0, r7
 80047c6:	f000 f879 	bl	80048bc <_printf_i>
 80047ca:	e7ed      	b.n	80047a8 <_svfiprintf_r+0x1c0>
 80047cc:	08004e28 	.word	0x08004e28
 80047d0:	08004e32 	.word	0x08004e32
 80047d4:	00000000 	.word	0x00000000
 80047d8:	08004531 	.word	0x08004531
 80047dc:	08004e2e 	.word	0x08004e2e

080047e0 <_printf_common>:
 80047e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e4:	4616      	mov	r6, r2
 80047e6:	4698      	mov	r8, r3
 80047e8:	688a      	ldr	r2, [r1, #8]
 80047ea:	690b      	ldr	r3, [r1, #16]
 80047ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047f0:	4293      	cmp	r3, r2
 80047f2:	bfb8      	it	lt
 80047f4:	4613      	movlt	r3, r2
 80047f6:	6033      	str	r3, [r6, #0]
 80047f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80047fc:	4607      	mov	r7, r0
 80047fe:	460c      	mov	r4, r1
 8004800:	b10a      	cbz	r2, 8004806 <_printf_common+0x26>
 8004802:	3301      	adds	r3, #1
 8004804:	6033      	str	r3, [r6, #0]
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	0699      	lsls	r1, r3, #26
 800480a:	bf42      	ittt	mi
 800480c:	6833      	ldrmi	r3, [r6, #0]
 800480e:	3302      	addmi	r3, #2
 8004810:	6033      	strmi	r3, [r6, #0]
 8004812:	6825      	ldr	r5, [r4, #0]
 8004814:	f015 0506 	ands.w	r5, r5, #6
 8004818:	d106      	bne.n	8004828 <_printf_common+0x48>
 800481a:	f104 0a19 	add.w	sl, r4, #25
 800481e:	68e3      	ldr	r3, [r4, #12]
 8004820:	6832      	ldr	r2, [r6, #0]
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	42ab      	cmp	r3, r5
 8004826:	dc26      	bgt.n	8004876 <_printf_common+0x96>
 8004828:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800482c:	6822      	ldr	r2, [r4, #0]
 800482e:	3b00      	subs	r3, #0
 8004830:	bf18      	it	ne
 8004832:	2301      	movne	r3, #1
 8004834:	0692      	lsls	r2, r2, #26
 8004836:	d42b      	bmi.n	8004890 <_printf_common+0xb0>
 8004838:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800483c:	4641      	mov	r1, r8
 800483e:	4638      	mov	r0, r7
 8004840:	47c8      	blx	r9
 8004842:	3001      	adds	r0, #1
 8004844:	d01e      	beq.n	8004884 <_printf_common+0xa4>
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	6922      	ldr	r2, [r4, #16]
 800484a:	f003 0306 	and.w	r3, r3, #6
 800484e:	2b04      	cmp	r3, #4
 8004850:	bf02      	ittt	eq
 8004852:	68e5      	ldreq	r5, [r4, #12]
 8004854:	6833      	ldreq	r3, [r6, #0]
 8004856:	1aed      	subeq	r5, r5, r3
 8004858:	68a3      	ldr	r3, [r4, #8]
 800485a:	bf0c      	ite	eq
 800485c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004860:	2500      	movne	r5, #0
 8004862:	4293      	cmp	r3, r2
 8004864:	bfc4      	itt	gt
 8004866:	1a9b      	subgt	r3, r3, r2
 8004868:	18ed      	addgt	r5, r5, r3
 800486a:	2600      	movs	r6, #0
 800486c:	341a      	adds	r4, #26
 800486e:	42b5      	cmp	r5, r6
 8004870:	d11a      	bne.n	80048a8 <_printf_common+0xc8>
 8004872:	2000      	movs	r0, #0
 8004874:	e008      	b.n	8004888 <_printf_common+0xa8>
 8004876:	2301      	movs	r3, #1
 8004878:	4652      	mov	r2, sl
 800487a:	4641      	mov	r1, r8
 800487c:	4638      	mov	r0, r7
 800487e:	47c8      	blx	r9
 8004880:	3001      	adds	r0, #1
 8004882:	d103      	bne.n	800488c <_printf_common+0xac>
 8004884:	f04f 30ff 	mov.w	r0, #4294967295
 8004888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800488c:	3501      	adds	r5, #1
 800488e:	e7c6      	b.n	800481e <_printf_common+0x3e>
 8004890:	18e1      	adds	r1, r4, r3
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	2030      	movs	r0, #48	@ 0x30
 8004896:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800489a:	4422      	add	r2, r4
 800489c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80048a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80048a4:	3302      	adds	r3, #2
 80048a6:	e7c7      	b.n	8004838 <_printf_common+0x58>
 80048a8:	2301      	movs	r3, #1
 80048aa:	4622      	mov	r2, r4
 80048ac:	4641      	mov	r1, r8
 80048ae:	4638      	mov	r0, r7
 80048b0:	47c8      	blx	r9
 80048b2:	3001      	adds	r0, #1
 80048b4:	d0e6      	beq.n	8004884 <_printf_common+0xa4>
 80048b6:	3601      	adds	r6, #1
 80048b8:	e7d9      	b.n	800486e <_printf_common+0x8e>
	...

080048bc <_printf_i>:
 80048bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048c0:	7e0f      	ldrb	r7, [r1, #24]
 80048c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80048c4:	2f78      	cmp	r7, #120	@ 0x78
 80048c6:	4691      	mov	r9, r2
 80048c8:	4680      	mov	r8, r0
 80048ca:	460c      	mov	r4, r1
 80048cc:	469a      	mov	sl, r3
 80048ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80048d2:	d807      	bhi.n	80048e4 <_printf_i+0x28>
 80048d4:	2f62      	cmp	r7, #98	@ 0x62
 80048d6:	d80a      	bhi.n	80048ee <_printf_i+0x32>
 80048d8:	2f00      	cmp	r7, #0
 80048da:	f000 80d1 	beq.w	8004a80 <_printf_i+0x1c4>
 80048de:	2f58      	cmp	r7, #88	@ 0x58
 80048e0:	f000 80b8 	beq.w	8004a54 <_printf_i+0x198>
 80048e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80048ec:	e03a      	b.n	8004964 <_printf_i+0xa8>
 80048ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80048f2:	2b15      	cmp	r3, #21
 80048f4:	d8f6      	bhi.n	80048e4 <_printf_i+0x28>
 80048f6:	a101      	add	r1, pc, #4	@ (adr r1, 80048fc <_printf_i+0x40>)
 80048f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048fc:	08004955 	.word	0x08004955
 8004900:	08004969 	.word	0x08004969
 8004904:	080048e5 	.word	0x080048e5
 8004908:	080048e5 	.word	0x080048e5
 800490c:	080048e5 	.word	0x080048e5
 8004910:	080048e5 	.word	0x080048e5
 8004914:	08004969 	.word	0x08004969
 8004918:	080048e5 	.word	0x080048e5
 800491c:	080048e5 	.word	0x080048e5
 8004920:	080048e5 	.word	0x080048e5
 8004924:	080048e5 	.word	0x080048e5
 8004928:	08004a67 	.word	0x08004a67
 800492c:	08004993 	.word	0x08004993
 8004930:	08004a21 	.word	0x08004a21
 8004934:	080048e5 	.word	0x080048e5
 8004938:	080048e5 	.word	0x080048e5
 800493c:	08004a89 	.word	0x08004a89
 8004940:	080048e5 	.word	0x080048e5
 8004944:	08004993 	.word	0x08004993
 8004948:	080048e5 	.word	0x080048e5
 800494c:	080048e5 	.word	0x080048e5
 8004950:	08004a29 	.word	0x08004a29
 8004954:	6833      	ldr	r3, [r6, #0]
 8004956:	1d1a      	adds	r2, r3, #4
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6032      	str	r2, [r6, #0]
 800495c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004960:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004964:	2301      	movs	r3, #1
 8004966:	e09c      	b.n	8004aa2 <_printf_i+0x1e6>
 8004968:	6833      	ldr	r3, [r6, #0]
 800496a:	6820      	ldr	r0, [r4, #0]
 800496c:	1d19      	adds	r1, r3, #4
 800496e:	6031      	str	r1, [r6, #0]
 8004970:	0606      	lsls	r6, r0, #24
 8004972:	d501      	bpl.n	8004978 <_printf_i+0xbc>
 8004974:	681d      	ldr	r5, [r3, #0]
 8004976:	e003      	b.n	8004980 <_printf_i+0xc4>
 8004978:	0645      	lsls	r5, r0, #25
 800497a:	d5fb      	bpl.n	8004974 <_printf_i+0xb8>
 800497c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004980:	2d00      	cmp	r5, #0
 8004982:	da03      	bge.n	800498c <_printf_i+0xd0>
 8004984:	232d      	movs	r3, #45	@ 0x2d
 8004986:	426d      	negs	r5, r5
 8004988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800498c:	4858      	ldr	r0, [pc, #352]	@ (8004af0 <_printf_i+0x234>)
 800498e:	230a      	movs	r3, #10
 8004990:	e011      	b.n	80049b6 <_printf_i+0xfa>
 8004992:	6821      	ldr	r1, [r4, #0]
 8004994:	6833      	ldr	r3, [r6, #0]
 8004996:	0608      	lsls	r0, r1, #24
 8004998:	f853 5b04 	ldr.w	r5, [r3], #4
 800499c:	d402      	bmi.n	80049a4 <_printf_i+0xe8>
 800499e:	0649      	lsls	r1, r1, #25
 80049a0:	bf48      	it	mi
 80049a2:	b2ad      	uxthmi	r5, r5
 80049a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80049a6:	4852      	ldr	r0, [pc, #328]	@ (8004af0 <_printf_i+0x234>)
 80049a8:	6033      	str	r3, [r6, #0]
 80049aa:	bf14      	ite	ne
 80049ac:	230a      	movne	r3, #10
 80049ae:	2308      	moveq	r3, #8
 80049b0:	2100      	movs	r1, #0
 80049b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80049b6:	6866      	ldr	r6, [r4, #4]
 80049b8:	60a6      	str	r6, [r4, #8]
 80049ba:	2e00      	cmp	r6, #0
 80049bc:	db05      	blt.n	80049ca <_printf_i+0x10e>
 80049be:	6821      	ldr	r1, [r4, #0]
 80049c0:	432e      	orrs	r6, r5
 80049c2:	f021 0104 	bic.w	r1, r1, #4
 80049c6:	6021      	str	r1, [r4, #0]
 80049c8:	d04b      	beq.n	8004a62 <_printf_i+0x1a6>
 80049ca:	4616      	mov	r6, r2
 80049cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80049d0:	fb03 5711 	mls	r7, r3, r1, r5
 80049d4:	5dc7      	ldrb	r7, [r0, r7]
 80049d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049da:	462f      	mov	r7, r5
 80049dc:	42bb      	cmp	r3, r7
 80049de:	460d      	mov	r5, r1
 80049e0:	d9f4      	bls.n	80049cc <_printf_i+0x110>
 80049e2:	2b08      	cmp	r3, #8
 80049e4:	d10b      	bne.n	80049fe <_printf_i+0x142>
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	07df      	lsls	r7, r3, #31
 80049ea:	d508      	bpl.n	80049fe <_printf_i+0x142>
 80049ec:	6923      	ldr	r3, [r4, #16]
 80049ee:	6861      	ldr	r1, [r4, #4]
 80049f0:	4299      	cmp	r1, r3
 80049f2:	bfde      	ittt	le
 80049f4:	2330      	movle	r3, #48	@ 0x30
 80049f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049fe:	1b92      	subs	r2, r2, r6
 8004a00:	6122      	str	r2, [r4, #16]
 8004a02:	f8cd a000 	str.w	sl, [sp]
 8004a06:	464b      	mov	r3, r9
 8004a08:	aa03      	add	r2, sp, #12
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	4640      	mov	r0, r8
 8004a0e:	f7ff fee7 	bl	80047e0 <_printf_common>
 8004a12:	3001      	adds	r0, #1
 8004a14:	d14a      	bne.n	8004aac <_printf_i+0x1f0>
 8004a16:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1a:	b004      	add	sp, #16
 8004a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	f043 0320 	orr.w	r3, r3, #32
 8004a26:	6023      	str	r3, [r4, #0]
 8004a28:	4832      	ldr	r0, [pc, #200]	@ (8004af4 <_printf_i+0x238>)
 8004a2a:	2778      	movs	r7, #120	@ 0x78
 8004a2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a30:	6823      	ldr	r3, [r4, #0]
 8004a32:	6831      	ldr	r1, [r6, #0]
 8004a34:	061f      	lsls	r7, r3, #24
 8004a36:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a3a:	d402      	bmi.n	8004a42 <_printf_i+0x186>
 8004a3c:	065f      	lsls	r7, r3, #25
 8004a3e:	bf48      	it	mi
 8004a40:	b2ad      	uxthmi	r5, r5
 8004a42:	6031      	str	r1, [r6, #0]
 8004a44:	07d9      	lsls	r1, r3, #31
 8004a46:	bf44      	itt	mi
 8004a48:	f043 0320 	orrmi.w	r3, r3, #32
 8004a4c:	6023      	strmi	r3, [r4, #0]
 8004a4e:	b11d      	cbz	r5, 8004a58 <_printf_i+0x19c>
 8004a50:	2310      	movs	r3, #16
 8004a52:	e7ad      	b.n	80049b0 <_printf_i+0xf4>
 8004a54:	4826      	ldr	r0, [pc, #152]	@ (8004af0 <_printf_i+0x234>)
 8004a56:	e7e9      	b.n	8004a2c <_printf_i+0x170>
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	f023 0320 	bic.w	r3, r3, #32
 8004a5e:	6023      	str	r3, [r4, #0]
 8004a60:	e7f6      	b.n	8004a50 <_printf_i+0x194>
 8004a62:	4616      	mov	r6, r2
 8004a64:	e7bd      	b.n	80049e2 <_printf_i+0x126>
 8004a66:	6833      	ldr	r3, [r6, #0]
 8004a68:	6825      	ldr	r5, [r4, #0]
 8004a6a:	6961      	ldr	r1, [r4, #20]
 8004a6c:	1d18      	adds	r0, r3, #4
 8004a6e:	6030      	str	r0, [r6, #0]
 8004a70:	062e      	lsls	r6, r5, #24
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	d501      	bpl.n	8004a7a <_printf_i+0x1be>
 8004a76:	6019      	str	r1, [r3, #0]
 8004a78:	e002      	b.n	8004a80 <_printf_i+0x1c4>
 8004a7a:	0668      	lsls	r0, r5, #25
 8004a7c:	d5fb      	bpl.n	8004a76 <_printf_i+0x1ba>
 8004a7e:	8019      	strh	r1, [r3, #0]
 8004a80:	2300      	movs	r3, #0
 8004a82:	6123      	str	r3, [r4, #16]
 8004a84:	4616      	mov	r6, r2
 8004a86:	e7bc      	b.n	8004a02 <_printf_i+0x146>
 8004a88:	6833      	ldr	r3, [r6, #0]
 8004a8a:	1d1a      	adds	r2, r3, #4
 8004a8c:	6032      	str	r2, [r6, #0]
 8004a8e:	681e      	ldr	r6, [r3, #0]
 8004a90:	6862      	ldr	r2, [r4, #4]
 8004a92:	2100      	movs	r1, #0
 8004a94:	4630      	mov	r0, r6
 8004a96:	f7fb fba3 	bl	80001e0 <memchr>
 8004a9a:	b108      	cbz	r0, 8004aa0 <_printf_i+0x1e4>
 8004a9c:	1b80      	subs	r0, r0, r6
 8004a9e:	6060      	str	r0, [r4, #4]
 8004aa0:	6863      	ldr	r3, [r4, #4]
 8004aa2:	6123      	str	r3, [r4, #16]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004aaa:	e7aa      	b.n	8004a02 <_printf_i+0x146>
 8004aac:	6923      	ldr	r3, [r4, #16]
 8004aae:	4632      	mov	r2, r6
 8004ab0:	4649      	mov	r1, r9
 8004ab2:	4640      	mov	r0, r8
 8004ab4:	47d0      	blx	sl
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d0ad      	beq.n	8004a16 <_printf_i+0x15a>
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	079b      	lsls	r3, r3, #30
 8004abe:	d413      	bmi.n	8004ae8 <_printf_i+0x22c>
 8004ac0:	68e0      	ldr	r0, [r4, #12]
 8004ac2:	9b03      	ldr	r3, [sp, #12]
 8004ac4:	4298      	cmp	r0, r3
 8004ac6:	bfb8      	it	lt
 8004ac8:	4618      	movlt	r0, r3
 8004aca:	e7a6      	b.n	8004a1a <_printf_i+0x15e>
 8004acc:	2301      	movs	r3, #1
 8004ace:	4632      	mov	r2, r6
 8004ad0:	4649      	mov	r1, r9
 8004ad2:	4640      	mov	r0, r8
 8004ad4:	47d0      	blx	sl
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	d09d      	beq.n	8004a16 <_printf_i+0x15a>
 8004ada:	3501      	adds	r5, #1
 8004adc:	68e3      	ldr	r3, [r4, #12]
 8004ade:	9903      	ldr	r1, [sp, #12]
 8004ae0:	1a5b      	subs	r3, r3, r1
 8004ae2:	42ab      	cmp	r3, r5
 8004ae4:	dcf2      	bgt.n	8004acc <_printf_i+0x210>
 8004ae6:	e7eb      	b.n	8004ac0 <_printf_i+0x204>
 8004ae8:	2500      	movs	r5, #0
 8004aea:	f104 0619 	add.w	r6, r4, #25
 8004aee:	e7f5      	b.n	8004adc <_printf_i+0x220>
 8004af0:	08004e39 	.word	0x08004e39
 8004af4:	08004e4a 	.word	0x08004e4a

08004af8 <memmove>:
 8004af8:	4288      	cmp	r0, r1
 8004afa:	b510      	push	{r4, lr}
 8004afc:	eb01 0402 	add.w	r4, r1, r2
 8004b00:	d902      	bls.n	8004b08 <memmove+0x10>
 8004b02:	4284      	cmp	r4, r0
 8004b04:	4623      	mov	r3, r4
 8004b06:	d807      	bhi.n	8004b18 <memmove+0x20>
 8004b08:	1e43      	subs	r3, r0, #1
 8004b0a:	42a1      	cmp	r1, r4
 8004b0c:	d008      	beq.n	8004b20 <memmove+0x28>
 8004b0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b16:	e7f8      	b.n	8004b0a <memmove+0x12>
 8004b18:	4402      	add	r2, r0
 8004b1a:	4601      	mov	r1, r0
 8004b1c:	428a      	cmp	r2, r1
 8004b1e:	d100      	bne.n	8004b22 <memmove+0x2a>
 8004b20:	bd10      	pop	{r4, pc}
 8004b22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b2a:	e7f7      	b.n	8004b1c <memmove+0x24>

08004b2c <_sbrk_r>:
 8004b2c:	b538      	push	{r3, r4, r5, lr}
 8004b2e:	4d06      	ldr	r5, [pc, #24]	@ (8004b48 <_sbrk_r+0x1c>)
 8004b30:	2300      	movs	r3, #0
 8004b32:	4604      	mov	r4, r0
 8004b34:	4608      	mov	r0, r1
 8004b36:	602b      	str	r3, [r5, #0]
 8004b38:	f7fc fa26 	bl	8000f88 <_sbrk>
 8004b3c:	1c43      	adds	r3, r0, #1
 8004b3e:	d102      	bne.n	8004b46 <_sbrk_r+0x1a>
 8004b40:	682b      	ldr	r3, [r5, #0]
 8004b42:	b103      	cbz	r3, 8004b46 <_sbrk_r+0x1a>
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	bd38      	pop	{r3, r4, r5, pc}
 8004b48:	200006a0 	.word	0x200006a0

08004b4c <memcpy>:
 8004b4c:	440a      	add	r2, r1
 8004b4e:	4291      	cmp	r1, r2
 8004b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b54:	d100      	bne.n	8004b58 <memcpy+0xc>
 8004b56:	4770      	bx	lr
 8004b58:	b510      	push	{r4, lr}
 8004b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b62:	4291      	cmp	r1, r2
 8004b64:	d1f9      	bne.n	8004b5a <memcpy+0xe>
 8004b66:	bd10      	pop	{r4, pc}

08004b68 <_realloc_r>:
 8004b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b6c:	4607      	mov	r7, r0
 8004b6e:	4614      	mov	r4, r2
 8004b70:	460d      	mov	r5, r1
 8004b72:	b921      	cbnz	r1, 8004b7e <_realloc_r+0x16>
 8004b74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b78:	4611      	mov	r1, r2
 8004b7a:	f7ff bc4d 	b.w	8004418 <_malloc_r>
 8004b7e:	b92a      	cbnz	r2, 8004b8c <_realloc_r+0x24>
 8004b80:	f7ff fbde 	bl	8004340 <_free_r>
 8004b84:	4625      	mov	r5, r4
 8004b86:	4628      	mov	r0, r5
 8004b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b8c:	f000 f81a 	bl	8004bc4 <_malloc_usable_size_r>
 8004b90:	4284      	cmp	r4, r0
 8004b92:	4606      	mov	r6, r0
 8004b94:	d802      	bhi.n	8004b9c <_realloc_r+0x34>
 8004b96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b9a:	d8f4      	bhi.n	8004b86 <_realloc_r+0x1e>
 8004b9c:	4621      	mov	r1, r4
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	f7ff fc3a 	bl	8004418 <_malloc_r>
 8004ba4:	4680      	mov	r8, r0
 8004ba6:	b908      	cbnz	r0, 8004bac <_realloc_r+0x44>
 8004ba8:	4645      	mov	r5, r8
 8004baa:	e7ec      	b.n	8004b86 <_realloc_r+0x1e>
 8004bac:	42b4      	cmp	r4, r6
 8004bae:	4622      	mov	r2, r4
 8004bb0:	4629      	mov	r1, r5
 8004bb2:	bf28      	it	cs
 8004bb4:	4632      	movcs	r2, r6
 8004bb6:	f7ff ffc9 	bl	8004b4c <memcpy>
 8004bba:	4629      	mov	r1, r5
 8004bbc:	4638      	mov	r0, r7
 8004bbe:	f7ff fbbf 	bl	8004340 <_free_r>
 8004bc2:	e7f1      	b.n	8004ba8 <_realloc_r+0x40>

08004bc4 <_malloc_usable_size_r>:
 8004bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bc8:	1f18      	subs	r0, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	bfbc      	itt	lt
 8004bce:	580b      	ldrlt	r3, [r1, r0]
 8004bd0:	18c0      	addlt	r0, r0, r3
 8004bd2:	4770      	bx	lr

08004bd4 <_init>:
 8004bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd6:	bf00      	nop
 8004bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bda:	bc08      	pop	{r3}
 8004bdc:	469e      	mov	lr, r3
 8004bde:	4770      	bx	lr

08004be0 <_fini>:
 8004be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be2:	bf00      	nop
 8004be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be6:	bc08      	pop	{r3}
 8004be8:	469e      	mov	lr, r3
 8004bea:	4770      	bx	lr
